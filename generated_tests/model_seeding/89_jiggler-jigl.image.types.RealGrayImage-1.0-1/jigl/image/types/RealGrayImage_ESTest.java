/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 11:37:27 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.ImageProducer;
import javax.swing.JScrollPane;
import jigl.image.ROI;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealGrayImage_ESTest extends RealGrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      String string2 = realGrayImage1.toString(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals("1:2\n0.0 \n", string2);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(string2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotNull(realGrayImage3);
      
      RealGrayImage realGrayImage4 = realGrayImage0.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotNull(realGrayImage4);
      
      realGrayImage2.clip(1, (-875));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(1.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(1.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      
      double double0 = realGrayImage2.sqrSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(1.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(1.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(1.0, double0, 0.01);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      
      realGrayImage3.max();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      realGrayImage1.copy(rOI0);
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      RealGrayImage realGrayImage3 = new RealGrayImage(realGrayImage1);
      realGrayImage2.toString();
      realGrayImage2.toString();
      realGrayImage0.sqrSum();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      // Undeclared exception!
      try { 
        realGrayImage0.divide((-1), 6, 3382.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 2;
      RealGrayImage realGrayImage0 = new RealGrayImage(13, 2);
      RealGrayImage realGrayImage1 = realGrayImage0.clear();
      realGrayImage1.getJavaImage();
      realGrayImage1.addbuffer(0, 0, 2, 8, (float) 8);
      // Undeclared exception!
      try { 
        realGrayImage0.add(0, (-1666), (float) (-1666));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1666
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI(0, 0, 0, (-3200));
      rOI0.ly();
      rOI0.ux();
      Integer integer0 = new Integer(0);
      ROI rOI1 = new ROI();
      rOI1.Y();
      rOI1.X();
      rOI1.Y();
      rOI1.X();
      realGrayImage0.getJavaImage();
      // Undeclared exception!
      try { 
        realGrayImage0.max(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(9, 2, 255, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage1);
      rOI0.Y();
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      Float float0 = new Float((double) (-32768.0F));
      float0.floatValue();
      Float float1 = new Float((float) 1);
      float0.floatValue();
      realGrayImage3.clear(float0);
      realGrayImage3.addbuffer(2, 1, 255, 2, (float) 0);
      realGrayImage2.addbuffer(2, 272, 9, (-16777216), 1.0F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(9, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      realGrayImage1.copy();
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage1);
      rOI0.Y();
      realGrayImage1.copy(rOI0);
      Float float0 = new Float((double) (-32768.0F));
      float0.floatValue();
      float0.floatValue();
      realGrayImage2.absSum();
      realGrayImage2.copy();
      // Undeclared exception!
      try { 
        realGrayImage1.add(realGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(327, 0);
      realGrayImage0.addbuffer(30, 0, 845.1F);
      realGrayImage0.absSum();
      realGrayImage0.absSum();
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      realGrayImage1.copy(rOI0);
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      realGrayImage2.copy();
      rOI0.ux();
      // Undeclared exception!
      try { 
        realGrayImage2.divide(814, 470, 341.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 470
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 13, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      rOI0.ux();
      realGrayImage1.addbuffer(13, 1, (float) 13);
      RealGrayImage realGrayImage3 = realGrayImage1.divide(realGrayImage2, rOI0, rOI0);
      Float.valueOf((float) 0);
      realGrayImage3.addSum();
      RealGrayImage realGrayImage4 = realGrayImage3.subtract(realGrayImage0);
      realGrayImage4.getJavaImage();
      // Undeclared exception!
      try { 
        realGrayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[][] floatArray0 = new float[0][6];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      ROI rOI0 = new ROI(0, 0, 0, (-3213));
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3213
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      // Undeclared exception!
      try { 
        realGrayImage1.diff(realGrayImage2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 1110;
      RealGrayImage realGrayImage0 = new RealGrayImage(1270, 1110);
      float float0 = new Integer(1110);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1648);
      realGrayImage0.addbuffer(0, 1648, (float) 1648);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      realGrayImage0.getJavaImage();
      JScrollPane jScrollPane0 = null;
      try {
        jScrollPane0 = new JScrollPane();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class javax.swing.RepaintManager
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      JScrollPane jScrollPane0 = null;
      try {
        jScrollPane0 = new JScrollPane();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class javax.swing.RepaintManager
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI(0, 0, 0, (-3213));
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.setROI(0, 0, 0, (-290));
      rOI0.ux();
      rOI0.ux();
      rOI0.ux();
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      rOI0.setROI(0, 0, (-3213), (-290));
      rOI0.lx();
      rOI0.ux();
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage1.divide(realGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3213
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI(0, 0, 0, (-3200));
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      realGrayImage0.getJavaImage();
      Integer integer0 = new Integer(0);
      ROI rOI1 = new ROI();
      rOI0.X();
      rOI1.Y();
      rOI1.X();
      rOI1.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.subtract((-433), 651, (-3743.116F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 651
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(255, 255);
      // Undeclared exception!
      try { 
        realGrayImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 13, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      realGrayImage1.copy(rOI0);
      realGrayImage2.clip(341, 0);
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      rOI1.X();
      rOI1.Y();
      realGrayImage2.multiply((float) 1, rOI1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      realGrayImage0.copy();
      rOI0.ux();
      realGrayImage2.add(realGrayImage3, rOI0, rOI0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1648);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 1648, (float) 1648);
      ROI rOI0 = null;
      realGrayImage1.copy();
      // Undeclared exception!
      try { 
        realGrayImage1.addbuffer((-535), (-16777216), 0, 0, (-893.0F));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI(0, 0, 0, (-3200));
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      float[][] floatArray0 = new float[0][2];
      RealGrayImage realGrayImage1 = new RealGrayImage(floatArray0);
      realGrayImage1.diff(realGrayImage0);
      RealGrayImage realGrayImage2 = null;
      try {
        realGrayImage2 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[][] floatArray0 = new float[0][6];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.max();
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer((-3235), 1, (float) (-3235));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotNull(realGrayImage3);
      
      RealGrayImage realGrayImage4 = new RealGrayImage(realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(1, realGrayImage4.X());
      assertEquals(2, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage4.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.min(), 0.01F);
      assertNotNull(realGrayImage4);
      
      String string2 = realGrayImage3.toString();
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals("1:1\n0.0 \n", string2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotNull(string2);
      
      String string3 = realGrayImage3.toString();
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals("1:1\n0.0 \n", string3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotNull(string3);
      
      realGrayImage2.median(1, rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      
      // Undeclared exception!
      try { 
        realGrayImage1.add(103, 1, (float) 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 103
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI(0, 0, 0, (-3213));
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 0, 1103, (-5334), 0.0F);
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      ROI rOI1 = new ROI(0, 0, 0, (-3213));
      rOI1.uy();
      rOI1.ux();
      rOI1.ly();
      rOI1.ux();
      rOI1.ux();
      rOI1.ux();
      rOI1.ux();
      rOI1.lx();
      rOI1.ux();
      // Undeclared exception!
      try { 
        realGrayImage1.add(realGrayImage2, rOI0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.addbuffer(0, 0, 0, (-1), 3382.0F);
      realGrayImage0.copy();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(18, 18);
      realGrayImage0.toString();
      realGrayImage0.toString();
      realGrayImage0.addbuffer(1, 2, 13, 2, (float) 18);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 13, 13, 13, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      realGrayImage1.addbuffer(13, 1, (float) 13);
      RealGrayImage realGrayImage3 = realGrayImage1.divide(realGrayImage2, rOI0, rOI0);
      realGrayImage3.addSum();
      realGrayImage3.subtract(realGrayImage0);
      // Undeclared exception!
      try { 
        realGrayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      realGrayImage1.toString(rOI0);
      realGrayImage1.copy(rOI0);
      realGrayImage0.copy();
      realGrayImage2.clip(1, (-875));
      // Undeclared exception!
      try { 
        realGrayImage0.median((-1), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(9, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      RealGrayImage realGrayImage3 = new RealGrayImage(realGrayImage1);
      rOI0.Y();
      realGrayImage1.copy(rOI0);
      Float float0 = new Float((double) (-32768.0F));
      Float.max(1, 978.6F);
      float0.floatValue();
      float0.floatValue();
      realGrayImage3.absSum();
      rOI0.setROI((-151), 9, 1, 0);
      realGrayImage2.getJavaImage();
      // Undeclared exception!
      try { 
        realGrayImage2.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -151
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      realGrayImage1.copy(rOI0);
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      // Undeclared exception!
      realGrayImage2.addbuffer(2689, 1639, (float) 1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 13, 2, (float) 0);
      ROI rOI0 = new ROI();
      realGrayImage1.addbuffer(1, 341, 1, 2, (float) 13);
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      rOI0.ux();
      RealGrayImage realGrayImage3 = realGrayImage1.divide(realGrayImage2, rOI0, rOI0);
      Float.valueOf((float) 0);
      realGrayImage3.addSum();
      // Undeclared exception!
      try { 
        realGrayImage1.multiply(1, 16, (float) 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(0, 0);
      realGrayImage0.absSum();
      RealGrayImage realGrayImage2 = null;
      try {
        realGrayImage2 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      realGrayImage0.copy();
      rOI0.ux();
      RealGrayImage realGrayImage4 = realGrayImage2.add(realGrayImage3, rOI0, rOI0);
      realGrayImage3.multiply(1408.8817F, rOI0);
      // Undeclared exception!
      try { 
        realGrayImage4.subtract(0, 2, (-105.62F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      int int0 = 2;
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 13, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      rOI0.ux();
      realGrayImage1.divide(realGrayImage2, rOI0, rOI0);
      float float0 = 255.0F;
      int int1 = 1253;
      int int2 = 81;
      realGrayImage0.copy();
      // Undeclared exception!
      realGrayImage2.addbuffer(1205, 1205, 0.0F);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(255, 255);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      RealGrayImage realGrayImage4 = new RealGrayImage(realGrayImage1);
      realGrayImage1.getJavaImage();
      realGrayImage3.toString();
      realGrayImage3.toString();
      realGrayImage2.median(1, rOI0);
      realGrayImage1.max(rOI0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      Float.valueOf((float) 0);
      Float float0 = new Float((-595.27F));
      Float.valueOf((-3858.97F));
      float[][] floatArray0 = new float[0][9];
      RealGrayImage realGrayImage1 = new RealGrayImage(floatArray0);
      realGrayImage0.addSum();
      ROI rOI0 = new ROI();
      rOI0.X();
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      rOI1.X();
      rOI1.Y();
      rOI1.Y();
      ROI rOI2 = new ROI();
      rOI0.X();
      rOI1.Y();
      rOI2.X();
      rOI0.Y();
      rOI2.X();
      rOI2.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.divide((-3324), (-2302), (-974.6918F), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2302
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[][] floatArray0 = new float[0][6];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.max();
      // Undeclared exception!
      realGrayImage0.addbuffer(322, 322, 1601.3F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      Integer integer0 = new Integer(2);
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      realGrayImage1.toString(rOI0);
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      realGrayImage1.copy();
      realGrayImage2.clip(1, (-2986));
      // Undeclared exception!
      try { 
        realGrayImage3.multiply(2, 1, (float) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      realGrayImage1.copy(rOI0);
      realGrayImage1.copy(rOI0);
      realGrayImage0.copy();
      rOI0.ux();
      // Undeclared exception!
      try { 
        realGrayImage1.divide(415, 1, 255.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 415
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(255, 255);
      // Undeclared exception!
      realGrayImage0.addbuffer(255, 255, (float) 255);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI(0, 0, 0, (-3200));
      rOI0.uy();
      Integer integer0 = new Integer((-3200));
      Integer integer1 = new Integer((-3200));
      float[][] floatArray0 = new float[0][2];
      RealGrayImage realGrayImage1 = new RealGrayImage(floatArray0);
      RealGrayImage realGrayImage2 = realGrayImage1.diff(realGrayImage0);
      // Undeclared exception!
      try { 
        realGrayImage2.addbuffer((-3200), 0, 0, 2620, (float) 2620);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      realGrayImage2.diff(realGrayImage1);
      RealGrayImage realGrayImage3 = null;
      try {
        realGrayImage3 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      realGrayImage0.copy();
      rOI0.ux();
      RealGrayImage realGrayImage4 = new RealGrayImage(realGrayImage2);
      realGrayImage3.multiply((-32768.0F), rOI0);
      realGrayImage2.add((float) 0, rOI0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[][] floatArray0 = new float[1][8];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 752.67F;
      floatArray1[1] = 3702.9011F;
      floatArray1[2] = 1249.1992F;
      floatArray0[0] = floatArray1;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 255;
      RealGrayImage realGrayImage0 = new RealGrayImage(255, 255);
      // Undeclared exception!
      try { 
        realGrayImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 13, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      rOI0.ux();
      realGrayImage1.addbuffer(13, 1, (float) 13);
      RealGrayImage realGrayImage3 = realGrayImage1.divide(realGrayImage2, rOI0, rOI0);
      Float.valueOf((float) 0);
      realGrayImage3.addSum();
      realGrayImage3.subtract(realGrayImage0);
      // Undeclared exception!
      try { 
        realGrayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      int int0 = 2;
      RealGrayImage realGrayImage1 = new RealGrayImage(2, 1);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      rOI0.ux();
      // Undeclared exception!
      try { 
        realGrayImage1.divide(realGrayImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[][] floatArray0 = new float[0][6];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      ROI rOI0 = new ROI(0, 0, 0, (-3213));
      int int0 = new Integer(0);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      realGrayImage0.max();
      // Undeclared exception!
      realGrayImage0.addbuffer(322, 322, 1601.3F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(9, 2, 255, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage1);
      rOI0.Y();
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      Float float0 = new Float((double) 1);
      Float float1 = new Float((float) 1);
      float0.floatValue();
      RealGrayImage realGrayImage4 = realGrayImage3.clear(float0);
      realGrayImage4.addSum();
      // Undeclared exception!
      try { 
        realGrayImage1.divide((-405), 1, (-32768.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -405
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotNull(realGrayImage3);
      
      RealGrayImage realGrayImage4 = realGrayImage0.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotNull(realGrayImage4);
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int4);
      
      RealGrayImage realGrayImage5 = realGrayImage1.divide(realGrayImage3, rOI0, rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(Double.NaN, realGrayImage1.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage1.absSum(), 0.01F);
      assertEquals(Float.NaN, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage5.max(), 0.01F);
      assertEquals(Double.NaN, realGrayImage5.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage5.min(), 0.01F);
      assertEquals(Float.NaN, realGrayImage5.addSum(), 0.01F);
      assertEquals(Float.NaN, realGrayImage5.absSum(), 0.01F);
      assertEquals(1, realGrayImage5.X());
      assertEquals(2, realGrayImage5.Y());
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertNotNull(realGrayImage5);
      
      RealGrayImage realGrayImage6 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage6.equals((Object)realGrayImage1));
      assertFalse(realGrayImage6.equals((Object)realGrayImage5));
      assertFalse(realGrayImage6.equals((Object)realGrayImage2));
      assertFalse(realGrayImage6.equals((Object)realGrayImage4));
      assertFalse(realGrayImage6.equals((Object)realGrayImage0));
      assertFalse(realGrayImage6.equals((Object)realGrayImage3));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(Double.NaN, realGrayImage1.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage1.absSum(), 0.01F);
      assertEquals(Float.NaN, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(32767.0F, realGrayImage6.min(), 0.01F);
      assertEquals(1, realGrayImage6.X());
      assertEquals(1, realGrayImage6.Y());
      assertEquals(Float.NaN, realGrayImage6.absSum(), 0.01F);
      assertEquals(Float.NaN, realGrayImage6.addSum(), 0.01F);
      assertEquals(Double.NaN, realGrayImage6.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage6.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage6);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage6);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage6, realGrayImage1);
      assertNotSame(realGrayImage6, realGrayImage5);
      assertNotSame(realGrayImage6, realGrayImage2);
      assertNotSame(realGrayImage6, realGrayImage4);
      assertNotSame(realGrayImage6, realGrayImage0);
      assertNotSame(realGrayImage6, realGrayImage3);
      assertNotNull(realGrayImage6);
      
      realGrayImage3.clip(0, 1208);
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage6));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage6));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage5));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage6));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(Double.NaN, realGrayImage1.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage1.absSum(), 0.01F);
      assertEquals(Float.NaN, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage6);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage6);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage6);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      
      // Undeclared exception!
      try { 
        realGrayImage3.subtract(248, 0, (float) 248, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 248
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float.valueOf(255.0F);
      Float float0 = new Float((float) (-535));
      Float.valueOf(255.0F);
      float[][] floatArray0 = new float[0][4];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.addSum();
      float[] floatArray1 = new float[5];
      floatArray1[0] = 4936.05F;
      floatArray1[1] = 0.0F;
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      rOI1.X();
      rOI1.Y();
      rOI1.X();
      rOI1.Y();
      // Undeclared exception!
      try { 
        realGrayImage0.divide(298, 128, (float) 0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(116, 1, 5, 285, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      rOI1.X();
      rOI1.Y();
      rOI1.X();
      rOI1.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI1);
      RealGrayImage realGrayImage3 = realGrayImage2.copy(rOI1);
      RealGrayImage realGrayImage4 = new RealGrayImage(realGrayImage3);
      realGrayImage3.toString();
      realGrayImage3.toString();
      realGrayImage1.sqrSum();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      int int0 = 2;
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      int int1 = rOI0.ux();
      realGrayImage1.divide(realGrayImage2, rOI0, rOI0);
      float float0 = 4936.05F;
      int int2 = 1253;
      int int3 = 81;
      int int4 = 348;
      // Undeclared exception!
      realGrayImage2.addbuffer(int2, int3, int4, int1, float0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(9, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      realGrayImage1.copy();
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage1);
      rOI0.Y();
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      Float float0 = new Float((double) (-32768.0F));
      float0.floatValue();
      Float float1 = new Float((float) 1);
      float0.floatValue();
      RealGrayImage realGrayImage4 = realGrayImage3.clear(float0);
      rOI0.setROI((-151), 9, 1, 0);
      realGrayImage4.absSum();
      RealGrayImage realGrayImage5 = null;
      try {
        realGrayImage5 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 13, 2, (float) 0);
      realGrayImage0.clip(2, 1208);
      realGrayImage1.copy();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(0, 1, floatArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      realGrayImage1.getJavaImage();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      rOI0.setROI(1, 1, 2, 1);
      // Undeclared exception!
      try { 
        realGrayImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI(0, 0, 0, (-3213));
      realGrayImage0.getJavaImage();
      realGrayImage0.toString();
      ROI rOI1 = new ROI();
      rOI1.Y();
      int int0 = rOI1.X();
      int int1 = 1014;
      int int2 = 315;
      int int3 = (-310);
      float float0 = (-3552.2F);
      realGrayImage0.addbuffer(int1, int2, int0, int3, float0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      realGrayImage1.getJavaImage();
      realGrayImage0.toString();
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI(0, 0, 0, (-3213));
      rOI1.uy();
      rOI1.ux();
      rOI1.ly();
      rOI1.ux();
      rOI1.ux();
      rOI1.ux();
      rOI1.ux();
      rOI1.lx();
      rOI1.ux();
      rOI1.X();
      rOI1.Y();
      rOI0.X();
      realGrayImage1.addbuffer(0, 1014, 1014, 1014, 1.0F);
      realGrayImage0.copy();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(25, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      realGrayImage1.copy(rOI0);
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      realGrayImage2.getJavaImage();
      RealGrayImage realGrayImage3 = realGrayImage0.copy();
      rOI0.ux();
      realGrayImage3.clear();
      realGrayImage1.divide(32767.0F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      // Undeclared exception!
      try { 
        realGrayImage0.divide(0, 0, 726.426F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      RealGrayImage realGrayImage3 = new RealGrayImage(realGrayImage0);
      realGrayImage0.copy();
      rOI0.ux();
      RealGrayImage realGrayImage4 = new RealGrayImage(realGrayImage2);
      // Undeclared exception!
      try { 
        realGrayImage3.multiply((-32768.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotNull(realGrayImage3);
      
      RealGrayImage realGrayImage4 = realGrayImage0.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotNull(realGrayImage4);
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int4);
      
      RealGrayImage realGrayImage5 = realGrayImage3.multiply((-32768.0F), rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(-0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(-0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(1, realGrayImage5.Y());
      assertEquals(1, realGrayImage5.X());
      assertEquals(-0.0F, realGrayImage5.max(), 0.01F);
      assertEquals(-0.0F, realGrayImage5.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertSame(realGrayImage3, realGrayImage5);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertSame(realGrayImage5, realGrayImage3);
      assertNotNull(realGrayImage5);
      
      RealGrayImage realGrayImage6 = realGrayImage3.add(realGrayImage5);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage5));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertFalse(realGrayImage6.equals((Object)realGrayImage0));
      assertFalse(realGrayImage6.equals((Object)realGrayImage2));
      assertFalse(realGrayImage6.equals((Object)realGrayImage4));
      assertFalse(realGrayImage6.equals((Object)realGrayImage1));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(-0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(-0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(1, realGrayImage5.Y());
      assertEquals(1, realGrayImage5.X());
      assertEquals(-0.0F, realGrayImage5.max(), 0.01F);
      assertEquals(-0.0F, realGrayImage5.min(), 0.01F);
      assertEquals(1, realGrayImage6.Y());
      assertEquals(0.0F, realGrayImage6.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage6.sqrSum(), 0.01);
      assertEquals(-0.0F, realGrayImage6.min(), 0.01F);
      assertEquals(-0.0F, realGrayImage6.max(), 0.01F);
      assertEquals(1, realGrayImage6.X());
      assertEquals(0.0F, realGrayImage6.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage6);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage6);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertSame(realGrayImage3, realGrayImage5);
      assertSame(realGrayImage3, realGrayImage6);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertSame(realGrayImage5, realGrayImage6);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertSame(realGrayImage5, realGrayImage3);
      assertNotSame(realGrayImage6, realGrayImage0);
      assertNotSame(realGrayImage6, realGrayImage2);
      assertNotSame(realGrayImage6, realGrayImage4);
      assertSame(realGrayImage6, realGrayImage3);
      assertSame(realGrayImage6, realGrayImage5);
      assertNotSame(realGrayImage6, realGrayImage1);
      assertNotNull(realGrayImage6);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI(0, 0, 0, (-3213));
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.setROI(0, 0, 0, (-290));
      rOI0.ux();
      rOI0.ux();
      rOI0.ux();
      realGrayImage0.copy();
      rOI0.setROI(0, 0, (-3213), (-290));
      rOI0.lx();
      rOI0.ux();
      // Undeclared exception!
      try { 
        realGrayImage0.add((float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -290
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 13, 2, (float) 0);
      ROI rOI0 = new ROI();
      realGrayImage1.toString();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      rOI0.ux();
      RealGrayImage realGrayImage2 = realGrayImage1.divide(realGrayImage1, rOI0, rOI0);
      rOI0.ux();
      realGrayImage2.clear();
      realGrayImage1.divide((float) 0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 13, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotNull(realGrayImage2);
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int4);
      
      RealGrayImage realGrayImage3 = realGrayImage1.divide(realGrayImage2, rOI0, rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(Float.NaN, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(Float.NaN, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(Double.NaN, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(Float.NaN, realGrayImage3.addSum(), 0.01F);
      assertEquals(Float.NaN, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(2, realGrayImage3.Y());
      assertEquals(Double.NaN, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotNull(realGrayImage3);
      
      Float float0 = Float.valueOf((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = realGrayImage3.addSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(Float.NaN, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(Float.NaN, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(Double.NaN, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(Float.NaN, realGrayImage3.addSum(), 0.01F);
      assertEquals(Float.NaN, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(2, realGrayImage3.Y());
      assertEquals(Double.NaN, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(Float.NaN, float1, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage1);
      
      // Undeclared exception!
      try { 
        realGrayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, realGrayImage3.X());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotNull(realGrayImage3);
      
      RealGrayImage realGrayImage4 = realGrayImage0.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotNull(realGrayImage4);
      
      realGrayImage2.clip(1, (-875));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(1.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(1.0F, realGrayImage2.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int1);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage2.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotNull(realGrayImage3);
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int2);
      
      realGrayImage2.byteSize(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int1);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotNull(realGrayImage3);
      
      RealGrayImage realGrayImage4 = realGrayImage0.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0, realGrayImage4.Y());
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotNull(realGrayImage4);
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int2);
      
      RealGrayImage realGrayImage5 = realGrayImage2.add(realGrayImage3, rOI0, rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage5.min(), 0.01F);
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(1, realGrayImage5.Y());
      assertEquals(0.0F, realGrayImage5.max(), 0.01F);
      assertEquals(1, realGrayImage5.X());
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertNotNull(realGrayImage5);
      
      realGrayImage5.byteSize();
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage5));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage5));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(Double.NaN, realGrayImage2.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage2.addSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(Float.NaN, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(32767.0F, realGrayImage5.min(), 0.01F);
      assertEquals(Double.NaN, realGrayImage5.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage5.absSum(), 0.01F);
      assertEquals(1, realGrayImage5.Y());
      assertEquals((-32768.0F), realGrayImage5.max(), 0.01F);
      assertEquals(1, realGrayImage5.X());
      assertEquals(Float.NaN, realGrayImage5.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, (-3200));
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-3200), rOI0.uy());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-3200), rOI0.uy());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-3200), int0);
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-3200), rOI0.uy());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int1);
      
      int int2 = rOI0.ly();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-3200), rOI0.uy());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int2);
      
      float[][] floatArray0 = new float[0][2];
      RealGrayImage realGrayImage1 = new RealGrayImage(floatArray0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage1);
      
      RealGrayImage realGrayImage2 = realGrayImage1.diff(realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage2.diff(realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage2);
      assertNotNull(realGrayImage3);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertNotNull(rOI1);
      
      int int3 = rOI0.X();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-3200), rOI0.uy());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int3);
      assertNotSame(rOI0, rOI1);
      
      int int4 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(1, int4);
      assertNotSame(rOI1, rOI0);
      
      int int5 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.add(realGrayImage2, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 6;
      float[] floatArray0 = null;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(6, 6, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotNull(realGrayImage3);
      
      RealGrayImage realGrayImage4 = realGrayImage0.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0, realGrayImage4.X());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotNull(realGrayImage4);
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, int4);
      
      RealGrayImage realGrayImage5 = realGrayImage2.add(realGrayImage3, rOI0, rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(1, realGrayImage5.X());
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(1, realGrayImage5.Y());
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage5.max(), 0.01F);
      assertEquals(0.0F, realGrayImage5.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertSame(realGrayImage2, realGrayImage5);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertSame(realGrayImage5, realGrayImage2);
      assertNotNull(realGrayImage5);
      
      // Undeclared exception!
      try { 
        realGrayImage3.subtract(749, 290, (-1711.229F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 290
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, (-3213));
      assertEquals(0, rOI0.ux());
      assertEquals(3214, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-3213), rOI0.uy());
      assertNotNull(rOI0);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(imageProducer0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertNotNull(rOI1);
      
      int int0 = rOI0.X();
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(0, rOI0.ux());
      assertEquals(3214, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-3213), rOI0.uy());
      assertEquals(1, int0);
      assertNotSame(rOI0, rOI1);
      
      int int1 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(1, int1);
      assertNotSame(rOI1, rOI0);
      
      int int2 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(1, int2);
      assertNotSame(rOI1, rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-1815);
      int int1 = 5853;
      float[] floatArray0 = new float[13];
      floatArray0[1] = (float) 5853;
      floatArray0[2] = (float) (-1815);
      floatArray0[3] = (float) 5853;
      floatArray0[1] = (float) 5853;
      floatArray0[5] = (float) (-1815);
      floatArray0[6] = (float) 5853;
      floatArray0[7] = (float) (-1815);
      floatArray0[8] = (float) (-1815);
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((-1815), 5853, floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(327, 0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(327, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(327, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      RealGrayImage realGrayImage2 = realGrayImage0.addbuffer(30, 0, 845.1F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(327, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(30, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      float float0 = realGrayImage0.absSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(327, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      
      float[][] floatArray0 = new float[0][1];
      RealGrayImage realGrayImage3 = new RealGrayImage(floatArray0);
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage3);
      
      // Undeclared exception!
      try { 
        realGrayImage1.get(0, (-4047));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4047
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = (-535);
      Float float0 = Float.valueOf(255.0F);
      assertEquals(255.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (-535));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-535.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = Float.valueOf(255.0F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(255.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      float[][] floatArray0 = new float[0][4];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      
      float float3 = realGrayImage0.addSum();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0.0F, float3, 0.01F);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = 4936.05F;
      floatArray1[1] = 0.0F;
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage((-1562), 1648, floatArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[][] floatArray0 = new float[6][1];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-44.9F);
      floatArray2[1] = 0.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = 0.0F;
      floatArray2[5] = (-1.0F);
      floatArray2[6] = 0.0F;
      floatArray2[7] = (-1.0F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[2];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[9];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = (-3651.8F);
      floatArray4[1] = (-44.9F);
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-1.0F);
      floatArray4[4] = (-44.9F);
      floatArray4[5] = (-44.9F);
      floatArray4[6] = 0.0F;
      floatArray4[7] = (-1.0F);
      floatArray4[8] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray5[0] = 0.0F;
      floatArray5[1] = (-44.9F);
      floatArray5[2] = 0.0F;
      floatArray5[3] = (-3651.8F);
      floatArray5[4] = (-44.9F);
      floatArray5[5] = 255.0F;
      floatArray5[6] = (-44.9F);
      floatArray5[7] = (-1.0F);
      floatArray5[8] = (-44.9F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[2];
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray1));
      
      floatArray6[0] = (-44.9F);
      floatArray6[1] = 0.0F;
      floatArray0[5] = floatArray6;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[][] floatArray0 = new float[3][9];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 2153.7798F;
      floatArray1[1] = 1704.979F;
      floatArray1[2] = (-522.61127F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1704.979F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1648);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1648, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 1648, (float) 1648);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1648, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1648, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = null;
      int int1 = (-535);
      int int2 = (-16777216);
      float float0 = (-893.0F);
      int int3 = 8;
      Float float1 = Float.valueOf(255.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(255.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = Float.valueOf((-2065.9F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-2065.9F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf(255.0F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(255.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      // Undeclared exception!
      try { 
        realGrayImage0.set((-16777216), (-2302), float3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2302
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(9, 2, 255, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int2);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(9, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = new RealGrayImage(realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(9, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(2, realGrayImage3.Y());
      assertNotNull(realGrayImage3);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage4 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0.0F, realGrayImage4.max(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(1, realGrayImage4.X());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(1, realGrayImage4.Y());
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotNull(realGrayImage4);
      
      Float float0 = new Float((double) (-32768.0F));
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-32768.0F), float1, 0.01F);
      
      Float float2 = new Float((float) 1);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      float float3 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals((-32768.0F), float3, 0.01F);
      
      RealGrayImage realGrayImage5 = realGrayImage4.clear(float0);
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((-32768.0F), realGrayImage5.max(), 0.01F);
      assertEquals(1, realGrayImage5.X());
      assertEquals(1, realGrayImage5.Y());
      assertEquals((-32768.0F), realGrayImage5.min(), 0.01F);
      assertEquals(32768.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage5.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage5.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-32768.0F), realGrayImage4.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage4.sqrSum(), 0.01);
      assertEquals(1, realGrayImage4.X());
      assertEquals((-32768.0F), realGrayImage4.addSum(), 0.01F);
      assertEquals(32768.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(1, realGrayImage4.Y());
      assertSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertSame(realGrayImage4, realGrayImage5);
      assertNotNull(realGrayImage5);
      
      float float4 = realGrayImage3.absSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertFalse(realGrayImage1.equals((Object)realGrayImage5));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage5));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(9, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(2, realGrayImage3.Y());
      assertEquals(0.0F, float4, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage2);
      
      rOI0.setROI((-151), 9, 1, 0);
      assertEquals(9, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals((-151), rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(10, rOI0.Y());
      assertEquals(153, rOI0.X());
      
      float float5 = realGrayImage5.absSum();
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertFalse(realGrayImage1.equals((Object)realGrayImage5));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((-32768.0F), realGrayImage5.max(), 0.01F);
      assertEquals(1, realGrayImage5.X());
      assertEquals(1, realGrayImage5.Y());
      assertEquals((-32768.0F), realGrayImage5.min(), 0.01F);
      assertEquals(32768.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage5.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage5.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(9, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals((-151), rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(10, rOI0.Y());
      assertEquals(153, rOI0.X());
      assertEquals((-32768.0F), realGrayImage4.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage4.sqrSum(), 0.01);
      assertEquals(1, realGrayImage4.X());
      assertEquals((-32768.0F), realGrayImage4.addSum(), 0.01F);
      assertEquals(32768.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(1, realGrayImage4.Y());
      assertEquals(32768.0F, float5, 0.01F);
      assertSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertSame(realGrayImage4, realGrayImage5);
      
      RealGrayImage realGrayImage6 = null;
      try {
        realGrayImage6 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      Float float0 = Float.valueOf((float) 8);
      assertEquals(8.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((float) 8);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(8.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      // Undeclared exception!
      try { 
        realGrayImage0.set(0, 0, float1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      int int0 = 2;
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 13, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int2);
      
      int int3 = rOI0.X();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int3);
      
      int int4 = rOI0.Y();
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int4);
      
      int int5 = rOI0.ux();
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int5);
      
      RealGrayImage realGrayImage2 = realGrayImage1.divide(realGrayImage1, rOI0, rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(Double.NaN, realGrayImage1.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(Float.NaN, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(Double.NaN, realGrayImage2.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage2.absSum(), 0.01F);
      assertEquals(Float.NaN, realGrayImage2.addSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      float float0 = 4936.05F;
      int int6 = 1253;
      int int7 = 81;
      int int8 = 348;
      realGrayImage1.addbuffer(int6, int7, int8, int5, float0);
      int int9 = 0;
      realGrayImage2.addbuffer(int6, int5, int9, int0, (float) int2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(9, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int1);
      
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(1, 2, (-32768.0F));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotNull(realGrayImage3);
      
      Float float0 = new Float((double) (-32768.0F));
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-32768.0F), float1, 0.01F);
      
      Float float2 = new Float((float) 1);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      float float3 = float0.floatValue();
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals((-32768.0F), float3, 0.01F);
      
      RealGrayImage realGrayImage4 = realGrayImage3.clear(float0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(32768.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.addSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals((-32768.0F), realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage3.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage4.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(1, realGrayImage4.Y());
      assertEquals(1, realGrayImage4.X());
      assertEquals((-32768.0F), realGrayImage4.addSum(), 0.01F);
      assertEquals(32768.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage4.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotNull(realGrayImage4);
      
      RealGrayImage realGrayImage5 = realGrayImage4.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(32768.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.addSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals((-32768.0F), realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage3.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage4.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(1, realGrayImage4.Y());
      assertEquals(1, realGrayImage4.X());
      assertEquals((-32768.0F), realGrayImage4.addSum(), 0.01F);
      assertEquals(32768.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage4.sqrSum(), 0.01);
      assertEquals(1.073741824E9, realGrayImage5.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage5.min(), 0.01F);
      assertEquals(1, realGrayImage5.Y());
      assertEquals(32768.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage5.max(), 0.01F);
      assertEquals(1, realGrayImage5.X());
      assertEquals((-32768.0F), realGrayImage5.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage5);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertNotNull(realGrayImage5);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotNull(rOI1);
      
      int int3 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, int3);
      assertNotSame(rOI1, rOI0);
      
      int int4 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, int4);
      assertNotSame(rOI1, rOI0);
      
      int int5 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      
      int int6 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, int6);
      assertNotSame(rOI1, rOI0);
      
      String string2 = realGrayImage3.toString(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage5));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage5));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(32768.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.addSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals((-32768.0F), realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage3.sqrSum(), 0.01);
      assertEquals("1:1\n-32768.0 \n", string2);
      assertNotSame(rOI1, rOI0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(rOI0, rOI1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage4);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 302;
      RealGrayImage realGrayImage0 = new RealGrayImage(6, 302);
      assertEquals(6, realGrayImage0.X());
      assertEquals(302, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.clear();
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(6, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(302, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(6, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(302, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI(0, 0, 0, (-3213));
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-3213), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(3214, rOI0.Y());
      assertNotNull(rOI0);
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-3213), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(3214, rOI0.Y());
      assertEquals((-3213), int1);
      
      // Undeclared exception!
      try { 
        realGrayImage1.addbuffer((-3213), 6, 302, 302, (float) 302);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      int int0 = (-1);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 0, 0, (-1), 3382.0F);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int2);
      
      int int3 = rOI0.X();
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int3);
      
      int int4 = rOI0.Y();
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int4);
      
      // Undeclared exception!
      try { 
        realGrayImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertNotNull(realGrayImage2);
      
      ImageProducer imageProducer0 = realGrayImage1.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(imageProducer0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      Float float0 = Float.valueOf((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((float) 0);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.multiply((float) 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      float float2 = Float.min(0, 0);
      assertEquals(0.0F, float2, 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage0.set(0, 0, float1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage2.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotNull(realGrayImage3);
      
      rOI0.setROI(3093, 1, 444, 1339);
      assertEquals(1339, rOI0.ly());
      assertEquals(1339, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(444, rOI0.ux());
      assertEquals(3093, rOI0.lx());
      assertEquals(2650, rOI0.X());
      
      // Undeclared exception!
      try { 
        realGrayImage1.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 444
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, (-3213));
      assertEquals((-3213), rOI0.uy());
      assertEquals(3214, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(imageProducer0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertNotNull(rOI1);
      
      int int0 = rOI0.X();
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals((-3213), rOI0.uy());
      assertEquals(3214, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      assertNotSame(rOI0, rOI1);
      
      int int1 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, int1);
      assertNotSame(rOI1, rOI0);
      
      int int2 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, int2);
      assertNotSame(rOI1, rOI0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1014, 0, 1076, 1014, (-1.0F));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1014, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1014, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(1014, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, (-3200));
      assertEquals(0, rOI0.ux());
      assertEquals((-3200), rOI0.uy());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.ux());
      assertEquals((-3200), rOI0.uy());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-3200), int0);
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals((-3200), rOI0.uy());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, int1);
      
      int int2 = rOI0.ly();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals((-3200), rOI0.uy());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, int2);
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals((-3200), rOI0.uy());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, int3);
      
      float[][] floatArray0 = new float[0][2];
      RealGrayImage realGrayImage1 = new RealGrayImage(floatArray0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage1);
      
      RealGrayImage realGrayImage2 = realGrayImage1.diff(realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage2.diff(realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage3);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage2);
      assertNotNull(realGrayImage3);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertNotNull(rOI1);
      
      int int4 = rOI0.X();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(0, rOI0.ux());
      assertEquals((-3200), rOI0.uy());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, int4);
      assertNotSame(rOI0, rOI1);
      
      int int5 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      
      int int6 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int0);
      assertTrue(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(1, int6);
      assertNotSame(rOI1, rOI0);
      
      int int7 = rOI0.Y();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertEquals(0, rOI0.ux());
      assertEquals((-3200), rOI0.uy());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3201, int7);
      assertNotSame(rOI0, rOI1);
      
      // Undeclared exception!
      try { 
        realGrayImage3.divide(realGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ImageProducer imageProducer0 = realGrayImage1.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(imageProducer0);
      
      JScrollPane jScrollPane0 = null;
      try {
        jScrollPane0 = new JScrollPane();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class javax.swing.RepaintManager
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(0, 1653, (float) 0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(1653, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(1, realGrayImage3.Y());
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotNull(realGrayImage3);
      
      String string2 = realGrayImage1.toString(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals("1:2\n0.0 \n", string2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(string2);
      
      RealGrayImage realGrayImage4 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1, realGrayImage4.X());
      assertEquals(0.0F, realGrayImage4.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(1, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotNull(realGrayImage4);
      
      RealGrayImage realGrayImage5 = realGrayImage0.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage5.max(), 0.01F);
      assertEquals(0, realGrayImage5.Y());
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(0, realGrayImage5.X());
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage5.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertNotNull(realGrayImage5);
      
      realGrayImage3.clip(1, (-875));
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage5));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage5));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(1.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(1.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(1, realGrayImage3.Y());
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      
      RealGrayImage realGrayImage6 = realGrayImage5.clear();
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage6.equals((Object)realGrayImage4));
      assertFalse(realGrayImage6.equals((Object)realGrayImage3));
      assertFalse(realGrayImage6.equals((Object)realGrayImage2));
      assertFalse(realGrayImage6.equals((Object)realGrayImage0));
      assertFalse(realGrayImage6.equals((Object)realGrayImage1));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage5.max(), 0.01F);
      assertEquals(0, realGrayImage5.Y());
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(0, realGrayImage5.X());
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage5.min(), 0.01F);
      assertEquals(0, realGrayImage6.X());
      assertEquals(0, realGrayImage6.Y());
      assertEquals(0.0F, realGrayImage6.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage6.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage6.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage6.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage6.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage6);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertSame(realGrayImage5, realGrayImage6);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage6, realGrayImage4);
      assertNotSame(realGrayImage6, realGrayImage2);
      assertNotSame(realGrayImage6, realGrayImage3);
      assertNotSame(realGrayImage6, realGrayImage0);
      assertNotSame(realGrayImage6, realGrayImage1);
      assertSame(realGrayImage6, realGrayImage5);
      assertNotNull(realGrayImage6);
      
      RealGrayImage realGrayImage7 = realGrayImage6.divide((float) 2);
      assertFalse(realGrayImage7.equals((Object)realGrayImage4));
      assertFalse(realGrayImage7.equals((Object)realGrayImage1));
      assertFalse(realGrayImage7.equals((Object)realGrayImage3));
      assertFalse(realGrayImage7.equals((Object)realGrayImage2));
      assertFalse(realGrayImage7.equals((Object)realGrayImage0));
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage6));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage6.equals((Object)realGrayImage4));
      assertFalse(realGrayImage6.equals((Object)realGrayImage3));
      assertFalse(realGrayImage6.equals((Object)realGrayImage2));
      assertFalse(realGrayImage6.equals((Object)realGrayImage0));
      assertFalse(realGrayImage6.equals((Object)realGrayImage1));
      assertEquals(0, realGrayImage7.X());
      assertEquals(0.0, realGrayImage7.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage7.absSum(), 0.01F);
      assertEquals(0, realGrayImage7.Y());
      assertEquals(0.0F, realGrayImage7.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage7.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage7.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage5.max(), 0.01F);
      assertEquals(0, realGrayImage5.Y());
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(0, realGrayImage5.X());
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage5.min(), 0.01F);
      assertEquals(0, realGrayImage6.X());
      assertEquals(0, realGrayImage6.Y());
      assertEquals(0.0F, realGrayImage6.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage6.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage6.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage6.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage6.min(), 0.01F);
      assertNotSame(realGrayImage7, realGrayImage4);
      assertNotSame(realGrayImage7, realGrayImage1);
      assertNotSame(realGrayImage7, realGrayImage2);
      assertNotSame(realGrayImage7, realGrayImage3);
      assertNotSame(realGrayImage7, realGrayImage0);
      assertSame(realGrayImage7, realGrayImage5);
      assertSame(realGrayImage7, realGrayImage6);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage6);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage7);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertSame(realGrayImage5, realGrayImage6);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertSame(realGrayImage5, realGrayImage7);
      assertSame(realGrayImage6, realGrayImage7);
      assertNotSame(realGrayImage6, realGrayImage4);
      assertNotSame(realGrayImage6, realGrayImage2);
      assertNotSame(realGrayImage6, realGrayImage3);
      assertNotSame(realGrayImage6, realGrayImage0);
      assertNotSame(realGrayImage6, realGrayImage1);
      assertSame(realGrayImage6, realGrayImage5);
      assertNotNull(realGrayImage7);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((-1793), (-1793));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(9, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int2);
      
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(1, 2, (-32768.0F));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotNull(realGrayImage2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage3 = realGrayImage2.add((float) 1, rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(1.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(1.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(2, realGrayImage3.Y());
      assertEquals(1.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1.0, realGrayImage3.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotNull(realGrayImage3);
      
      RealGrayImage realGrayImage4 = realGrayImage1.addbuffer(1, 0, (-1), 0, (-32768.0F));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(1, realGrayImage4.X());
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotNull(realGrayImage4);
      
      RealGrayImage realGrayImage5 = realGrayImage1.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(9, realGrayImage5.X());
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(2, realGrayImage5.Y());
      assertEquals(0.0F, realGrayImage5.min(), 0.01F);
      assertEquals(0.0F, realGrayImage5.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertNotNull(realGrayImage5);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, (-3213));
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(3214, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-3213), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(3214, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-3213), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals((-3213), int0);
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(3214, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-3213), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, int1);
      
      int int2 = rOI0.ly();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(3214, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-3213), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, int2);
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(3214, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-3213), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, int3);
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(3214, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-3213), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(3214, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-3213), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, int5);
      
      int int6 = rOI0.ux();
      assertFalse(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(3214, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-3213), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, int6);
      
      int int7 = rOI0.lx();
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertFalse(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(3214, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-3213), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, int7);
      
      int int8 = rOI0.ux();
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int6);
      assertFalse(int8 == int0);
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(3214, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals((-3213), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, int8);
      
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3213
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, (-3200));
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-3200), rOI0.uy());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-3200), rOI0.uy());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-3200), int0);
      
      Integer integer0 = new Integer((-3200));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-3200), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3200));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals((-3200), (int)integer1);
      assertNotNull(integer1);
      
      float[][] floatArray0 = new float[0][2];
      RealGrayImage realGrayImage1 = new RealGrayImage(floatArray0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage1);
      
      // Undeclared exception!
      try { 
        realGrayImage1.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, (-3200));
      assertEquals((-3200), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(3201, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals((-3200), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(3201, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertTrue(int1 == int0);
      assertEquals((-3200), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(3201, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      
      Integer integer0 = new Integer(0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertNotNull(rOI1);
      
      int int2 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, int2);
      assertNotSame(rOI1, rOI0);
      
      int int3 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, int3);
      assertNotSame(rOI1, rOI0);
      
      int int4 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, int4);
      assertNotSame(rOI1, rOI0);
      
      int int5 = rOI1.X();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, int5);
      assertNotSame(rOI1, rOI0);
      
      int int6 = rOI1.Y();
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, int6);
      assertNotSame(rOI1, rOI0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(0, 0, (float) 1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(9, 2, 255, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int2);
      
      RealGrayImage realGrayImage2 = new RealGrayImage(realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(9, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertNotNull(realGrayImage2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotNull(realGrayImage3);
      
      Float float0 = new Float((double) (-32768.0F));
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-32768.0F), float1, 0.01F);
      
      Float float2 = new Float((float) 1);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      float float3 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals((-32768.0F), float3, 0.01F);
      
      RealGrayImage realGrayImage4 = realGrayImage3.clear(float0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals((-32768.0F), realGrayImage3.addSum(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage3.sqrSum(), 0.01);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(32768.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals((-32768.0F), realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32768.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.min(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage4.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage4.addSum(), 0.01F);
      assertEquals(1, realGrayImage4.Y());
      assertEquals(1, realGrayImage4.X());
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotNull(realGrayImage4);
      
      float float4 = realGrayImage4.addSum();
      assertEquals(float4, float3, 0.01F);
      assertEquals(float4, float1, 0.01F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals((-32768.0F), realGrayImage3.addSum(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage3.sqrSum(), 0.01);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(32768.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals((-32768.0F), realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32768.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.min(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage4.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage4.addSum(), 0.01F);
      assertEquals(1, realGrayImage4.Y());
      assertEquals(1, realGrayImage4.X());
      assertEquals((-32768.0F), float4, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage1);
      
      // Undeclared exception!
      try { 
        realGrayImage1.divide((-405), 1, (-32768.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -405
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 1110;
      RealGrayImage realGrayImage0 = new RealGrayImage(1255, 1110);
      assertEquals(1110, realGrayImage0.Y());
      assertEquals(1255, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      Float float0 = Float.valueOf((float) 8);
      assertEquals(8.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((float) 0);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.multiply((float) 8);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      float float2 = realGrayImage0.addSum();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertSame(realGrayImage0, realGrayImage1);
      
      float float3 = Float.min((-2995.501F), 0);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((-2995.501F), float3, 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage0.set(0, 0, float1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage0);
      
      Float float0 = realGrayImage0.max();
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(float0);
      
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 327;
      RealGrayImage realGrayImage0 = new RealGrayImage(327, 327);
      assertEquals(327, realGrayImage0.Y());
      assertEquals(327, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(327, 0, (float) 327);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(327, realGrayImage0.Y());
      assertEquals(327, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(327, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      // Undeclared exception!
      realGrayImage0.addbuffer(30, 327, 845.1F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotNull(realGrayImage2);
      
      // Undeclared exception!
      try { 
        realGrayImage1.diff(realGrayImage2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 1, 0, 291, (-1181.2806F));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-1181.2806F), realGrayImage1.max(), 0.01F);
      assertEquals(1395424.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1181.2806F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-1181.2806F), realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals((-1181.2806F), realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      ImageProducer imageProducer0 = realGrayImage1.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-1181.2806F), realGrayImage1.max(), 0.01F);
      assertEquals(1395424.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1181.2806F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-1181.2806F), realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals((-1181.2806F), realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(imageProducer0);
      
      rOI0.setROI(289, 1176, 0, 1);
      assertEquals(290, rOI0.X());
      assertEquals(1176, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1176, rOI0.Y());
      assertEquals(289, rOI0.lx());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(290, rOI0.X());
      assertEquals(1176, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1176, rOI0.Y());
      assertEquals(289, rOI0.lx());
      assertEquals(290, int1);
      
      int int2 = rOI0.Y();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(290, rOI0.X());
      assertEquals(1176, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1176, rOI0.Y());
      assertEquals(289, rOI0.lx());
      assertEquals(1176, int2);
      
      JScrollPane jScrollPane0 = null;
      try {
        jScrollPane0 = new JScrollPane();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class javax.swing.RepaintManager
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(327, 0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(327, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 0, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(327, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      RealGrayImage realGrayImage2 = realGrayImage0.addbuffer(30, 0, 845.1F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(327, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(30, realGrayImage2.X());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      float float0 = realGrayImage0.absSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(327, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      
      float float1 = realGrayImage0.absSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertEquals(float1, float0, 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(327, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      
      RealGrayImage realGrayImage3 = null;
      try {
        realGrayImage3 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotNull(realGrayImage3);
      
      RealGrayImage realGrayImage4 = new RealGrayImage(realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage4.max(), 0.01F);
      assertEquals(1, realGrayImage4.X());
      assertEquals(2, realGrayImage4.Y());
      assertNotNull(realGrayImage4);
      
      ImageProducer imageProducer0 = realGrayImage1.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotNull(imageProducer0);
      
      String string2 = realGrayImage4.toString();
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage4.max(), 0.01F);
      assertEquals(1, realGrayImage4.X());
      assertEquals(2, realGrayImage4.Y());
      assertEquals("1:2\n0.0 0.0 \n", string2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotNull(string2);
      
      RealGrayImage realGrayImage5 = realGrayImage1.addbuffer(0, 1, (float) 0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage5.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage5.max(), 0.01F);
      assertEquals(0, realGrayImage5.X());
      assertEquals(1, realGrayImage5.Y());
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertNotNull(realGrayImage5);
      
      String string3 = realGrayImage2.toString();
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage5));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage5));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals("1:1\n0.0 \n", string3);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage5);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(string3);
      
      RealGrayImage realGrayImage6 = realGrayImage3.clear();
      assertFalse(realGrayImage6.equals((Object)realGrayImage0));
      assertFalse(realGrayImage6.equals((Object)realGrayImage1));
      assertFalse(realGrayImage6.equals((Object)realGrayImage4));
      assertFalse(realGrayImage6.equals((Object)realGrayImage2));
      assertFalse(realGrayImage6.equals((Object)realGrayImage5));
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage5));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage5));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals(0.0F, realGrayImage6.max(), 0.01F);
      assertEquals(0.0F, realGrayImage6.min(), 0.01F);
      assertEquals(0.0F, realGrayImage6.absSum(), 0.01F);
      assertEquals(1, realGrayImage6.Y());
      assertEquals(1, realGrayImage6.X());
      assertEquals(0.0F, realGrayImage6.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage6.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertNotSame(realGrayImage6, realGrayImage0);
      assertNotSame(realGrayImage6, realGrayImage1);
      assertNotSame(realGrayImage6, realGrayImage4);
      assertNotSame(realGrayImage6, realGrayImage2);
      assertSame(realGrayImage6, realGrayImage3);
      assertNotSame(realGrayImage6, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage6);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage6);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage6);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotNull(realGrayImage6);
      
      int int4 = realGrayImage3.Y();
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage6));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage6));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage5));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage5));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, int4);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage6);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage6);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage6);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Float float0 = Float.valueOf(255.0F);
      assertEquals(255.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((float) (-535));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-535.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = Float.valueOf(255.0F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(255.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      float[][] floatArray0 = new float[0][4];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      
      float float3 = realGrayImage0.addSum();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0.0F, float3, 0.01F);
      
      float[] floatArray1 = new float[5];
      floatArray1[0] = 4936.05F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 3182.66F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage(1648, 18, floatArray1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      int int0 = 2;
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int2);
      
      int int3 = rOI0.X();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int3);
      
      int int4 = rOI0.Y();
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int4);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotNull(realGrayImage3);
      
      Float float0 = new Float((-3771.4526));
      assertEquals((-3771.4526F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0F, float2, 0.01F);
      
      float float3 = ((Float)1.0F).floatValue();
      assertEquals(float3, float2, 0.01F);
      assertEquals(1.0F, float3, 0.01F);
      
      Float float4 = new Float(716.9266F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals(716.9266F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      float float5 = float4.floatValue();
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(716.9266F, float5, 0.01F);
      
      RealGrayImage realGrayImage4 = realGrayImage0.clear(float1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float5, 0.01F);
      assertEquals((float)float1, (float)float3, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float4, 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotNull(realGrayImage4);
      
      float float6 = realGrayImage3.addSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0.0F, float6, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage2);
      
      // Undeclared exception!
      try { 
        realGrayImage4.divide(1023, 1023, 727.04F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1023
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[][] floatArray0 = new float[3][9];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 2153.7798F;
      floatArray1[1] = 1704.979F;
      floatArray1[2] = (-522.61127F);
      floatArray1[3] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1704.979F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray0[2] = floatArray3;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 1110;
      RealGrayImage realGrayImage0 = new RealGrayImage(1270, 1110);
      assertEquals(1270, realGrayImage0.X());
      assertEquals(1110, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      Integer integer0 = new Integer(1110);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1110, (int)integer0);
      assertNotNull(integer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int2);
      
      int int3 = rOI0.X();
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int3);
      
      int int4 = rOI0.Y();
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int4);
      
      // Undeclared exception!
      try { 
        realGrayImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 6;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(6, 6, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, (-3200));
      assertEquals(0, rOI0.lx());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-3200), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-3200), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals((-3200), int1);
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-3200), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, int2);
      
      int int3 = rOI0.ly();
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-3200), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, int3);
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals(0, rOI0.lx());
      assertEquals(3201, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-3200), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, int4);
      
      float[][] floatArray0 = new float[0][2];
      RealGrayImage realGrayImage1 = new RealGrayImage(floatArray0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage1);
      
      RealGrayImage realGrayImage2 = realGrayImage1.diff(realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage2.diff(realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage3);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage3);
      assertSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotNull(realGrayImage3);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        realGrayImage0.add(66.0F, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      Integer integer0 = new Integer(931);
      assertEquals(931, (int)integer0);
      assertNotNull(integer0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.clear();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 945;
      int int1 = 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(945, 1);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(945, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      realGrayImage0.addbuffer(945, 945, 945, 1, (float) 945);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer(0, (-7), 0, (-7), (float) 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      int int1 = rOI0.X();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int2);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotNull(realGrayImage3);
      
      RealGrayImage realGrayImage4 = new RealGrayImage(realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0.0F, realGrayImage4.max(), 0.01F);
      assertEquals(1, realGrayImage4.X());
      assertEquals(2, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertNotNull(realGrayImage4);
      
      String string2 = realGrayImage3.toString();
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals("1:1\n0.0 \n", string2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotNull(string2);
      
      rOI0.setROI(660, 1, 30, (-1));
      assertEquals((-1), rOI0.uy());
      assertEquals(30, rOI0.ux());
      assertEquals(631, rOI0.X());
      assertEquals(660, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(3, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realGrayImage2.median(1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(9, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int2);
      
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(1, 2, (-32768.0F));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotNull(realGrayImage2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotNull(realGrayImage3);
      
      Float float0 = new Float((double) (-32768.0F));
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-32768.0F), float1, 0.01F);
      
      Float float2 = new Float((float) 1);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      float float3 = float0.floatValue();
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals((-32768.0F), float3, 0.01F);
      
      RealGrayImage realGrayImage4 = realGrayImage3.clear(float0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(32768.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals((-32768.0F), realGrayImage3.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.min(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage3.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(1, realGrayImage4.X());
      assertEquals((-32768.0F), realGrayImage4.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.addSum(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage4.sqrSum(), 0.01);
      assertEquals(32768.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(1, realGrayImage4.Y());
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotNull(realGrayImage4);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      ImageProducer imageProducer0 = realGrayImage1.getJavaImage();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(imageProducer0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1, realGrayImage2.Y());
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotNull(realGrayImage3);
      
      RealGrayImage realGrayImage4 = new RealGrayImage(realGrayImage1);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(1, realGrayImage4.X());
      assertEquals(2, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage4.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.min(), 0.01F);
      assertNotNull(realGrayImage4);
      
      String string2 = realGrayImage3.toString();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals("1:1\n0.0 \n", string2);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotNull(string2);
      
      String string3 = realGrayImage3.toString();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals("1:1\n0.0 \n", string3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotNull(string3);
      
      double double0 = realGrayImage0.sqrSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      
      // Undeclared exception!
      realGrayImage3.addbuffer(1087, 1903, 839, 1, (float) 0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      String string2 = realGrayImage1.toString(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals("1:2\n0.0 \n", string2);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        realGrayImage0.divide(2, 754, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 754
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(9, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int1);
      
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(1, 2, (-32768.0F));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotNull(realGrayImage2);
      
      int int2 = rOI0.Y();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotNull(realGrayImage3);
      
      Float float0 = new Float((double) (-32768.0F));
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-32768.0F), float1, 0.01F);
      
      Float float2 = new Float((float) 1);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      RealGrayImage realGrayImage4 = realGrayImage3.clear(float0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(9, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(32768.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage3.X());
      assertEquals((-32768.0F), realGrayImage3.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.min(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage3.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage4.addSum(), 0.01F);
      assertEquals(1.073741824E9, realGrayImage4.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage4.min(), 0.01F);
      assertEquals(1, realGrayImage4.X());
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(32768.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(1, realGrayImage4.Y());
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotNull(realGrayImage4);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int3);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      String string2 = realGrayImage1.toString(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals("1:2\n0.0 \n", string2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotNull(string2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotNull(realGrayImage3);
      
      RealGrayImage realGrayImage4 = realGrayImage0.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotNull(realGrayImage4);
      
      rOI0.setROI(1, 1, 1, 0);
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      realGrayImage2.clip(1, (-875));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(1.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(1.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1.0F, realGrayImage2.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage3);
      
      double double0 = realGrayImage2.sqrSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(1.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(1.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1.0, double0, 0.01);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage3);
      
      // Undeclared exception!
      try { 
        realGrayImage2.multiply(8, 8, 1872.78F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals("0:0\n", string0);
      assertNotNull(string0);
      
      String string1 = realGrayImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals("0:0\n", string1);
      assertNotNull(string1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 13, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = new Integer(1);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int3);
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int4);
      
      RealGrayImage realGrayImage2 = realGrayImage1.divide(realGrayImage1, rOI0, rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(Float.NaN, realGrayImage1.addSum(), 0.01F);
      assertEquals(Float.NaN, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(Double.NaN, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(Float.NaN, realGrayImage2.addSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(Double.NaN, realGrayImage2.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage2.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage2.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(Float.NaN, realGrayImage1.addSum(), 0.01F);
      assertEquals(Float.NaN, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(Double.NaN, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(Float.NaN, realGrayImage2.addSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(Double.NaN, realGrayImage2.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage2.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(Float.NaN, realGrayImage3.absSum(), 0.01F);
      assertEquals(Double.NaN, realGrayImage3.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage3.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotNull(realGrayImage3);
      
      String string2 = realGrayImage0.toString();
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals("0:0\n", string2);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotNull(string2);
      
      RealGrayImage realGrayImage4 = realGrayImage3.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(Float.NaN, realGrayImage1.addSum(), 0.01F);
      assertEquals(Float.NaN, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(Double.NaN, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(Float.NaN, realGrayImage2.addSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(Double.NaN, realGrayImage2.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage2.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(Float.NaN, realGrayImage3.absSum(), 0.01F);
      assertEquals(Double.NaN, realGrayImage3.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage3.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(1, realGrayImage4.X());
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(1, realGrayImage4.Y());
      assertEquals(Float.NaN, realGrayImage4.absSum(), 0.01F);
      assertEquals(Double.NaN, realGrayImage4.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage4.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotNull(realGrayImage4);
      
      realGrayImage3.clip(1, 13);
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(Float.NaN, realGrayImage1.addSum(), 0.01F);
      assertEquals(Float.NaN, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(Double.NaN, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(Float.NaN, realGrayImage2.addSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(2, realGrayImage2.Y());
      assertEquals(Double.NaN, realGrayImage2.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage2.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(1, realGrayImage3.Y());
      assertEquals(Float.NaN, realGrayImage3.absSum(), 0.01F);
      assertEquals(Double.NaN, realGrayImage3.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage3.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage4);
      
      double double0 = realGrayImage0.sqrSum();
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, double0, 0.01);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage2);
      
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer((-611), 2, (-3706.62F));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 1648);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(1648, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 1648, (float) 1648);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(1648, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1648, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        realGrayImage1.addbuffer((-535), (-16777216), 0, 0, (-893.0F));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int1);
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage1.copy(rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotNull(realGrayImage3);
      
      RealGrayImage realGrayImage4 = realGrayImage0.copy();
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotNull(realGrayImage4);
      
      RealGrayImage realGrayImage5 = realGrayImage2.add(realGrayImage3, rOI0, rOI0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage5.X());
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(1, realGrayImage5.Y());
      assertEquals(0.0F, realGrayImage5.min(), 0.01F);
      assertEquals(0.0F, realGrayImage5.max(), 0.01F);
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage5);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertSame(realGrayImage5, realGrayImage2);
      assertNotNull(realGrayImage5);
      
      RealGrayImage realGrayImage6 = realGrayImage5.add(0.0F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage5));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage3));
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage4));
      assertFalse(realGrayImage1.equals((Object)realGrayImage5));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage3));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage5));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage6.equals((Object)realGrayImage0));
      assertFalse(realGrayImage6.equals((Object)realGrayImage1));
      assertFalse(realGrayImage6.equals((Object)realGrayImage4));
      assertFalse(realGrayImage6.equals((Object)realGrayImage3));
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.Y());
      assertEquals(1, realGrayImage5.X());
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(1, realGrayImage5.Y());
      assertEquals(0.0F, realGrayImage5.min(), 0.01F);
      assertEquals(0.0F, realGrayImage5.max(), 0.01F);
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage6.max(), 0.01F);
      assertEquals(0.0F, realGrayImage6.min(), 0.01F);
      assertEquals(0.0, realGrayImage6.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage6.absSum(), 0.01F);
      assertEquals(1, realGrayImage6.Y());
      assertEquals(1, realGrayImage6.X());
      assertEquals(0.0F, realGrayImage6.addSum(), 0.01F);
      assertNotSame(realGrayImage0, realGrayImage5);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage4);
      assertNotSame(realGrayImage0, realGrayImage6);
      assertNotSame(realGrayImage1, realGrayImage4);
      assertNotSame(realGrayImage1, realGrayImage6);
      assertNotSame(realGrayImage1, realGrayImage5);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage3);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage6);
      assertSame(realGrayImage2, realGrayImage5);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage6);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage5, realGrayImage6);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage6, realGrayImage0);
      assertNotSame(realGrayImage6, realGrayImage1);
      assertSame(realGrayImage6, realGrayImage2);
      assertNotSame(realGrayImage6, realGrayImage4);
      assertSame(realGrayImage6, realGrayImage5);
      assertNotSame(realGrayImage6, realGrayImage3);
      assertNotNull(realGrayImage6);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      rOI0.ux();
      realGrayImage1.divide(realGrayImage2, rOI0, rOI0);
      realGrayImage1.copy(rOI0);
      realGrayImage2.clip(0, 1208);
      // Undeclared exception!
      try { 
        realGrayImage0.multiply((-791.6F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.toString();
      realGrayImage0.toString();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 2, 0, 2, (float) 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.Y();
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      rOI0.ux();
      realGrayImage1.divide(realGrayImage2, rOI0, rOI0);
      RealGrayImage realGrayImage3 = realGrayImage2.copy(rOI0);
      realGrayImage3.copy();
      realGrayImage3.clip((-138), (-1));
      assertEquals((-1.0F), realGrayImage3.addSum(), 0.01F);
      
      realGrayImage1.sqrSum();
      realGrayImage1.max();
      assertEquals(Float.NaN, realGrayImage1.absSum(), 0.01F);
  }
}
