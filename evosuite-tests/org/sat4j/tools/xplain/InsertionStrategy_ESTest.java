/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:44:45 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.xplain.InsertionStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InsertionStrategy_ESTest extends InsertionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(5);
      VecInt vecInt1 = new VecInt(5, 5);
      vecInt1.shrinkTo((-444));
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<SingleSolutionDetector>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn("]_OC$y3Mt").when(fullClauseSelectorSolver0).getLogPrefix();
      doReturn(true).when(fullClauseSelectorSolver0).isVerbose();
      doReturn(vecInt1).when(fullClauseSelectorSolver0).unsatExplanation();
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SingleSolutionDetector>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SingleSolutionDetector>>(fullClauseSelectorSolver0);
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(clausalCardinalitiesDecorator0, hashMap0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(5);
      IVecInt iVecInt0 = vecInt0.clone();
      iVecInt0.push((-851));
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<SingleSolutionDetector>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(iVecInt0).when(fullClauseSelectorSolver0).unsatExplanation();
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SingleSolutionDetector>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SingleSolutionDetector>>(fullClauseSelectorSolver0);
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      IVecInt iVecInt1 = insertionStrategy0.explain(clausalCardinalitiesDecorator0, hashMap0, vecInt0);
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt1.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(5);
      int[] intArray0 = vecInt0.toArray();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<SingleSolutionDetector>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn("]_OC$y3Mt").when(fullClauseSelectorSolver0).getLogPrefix();
      doReturn(true).when(fullClauseSelectorSolver0).isVerbose();
      doReturn(vecInt0).when(fullClauseSelectorSolver0).unsatExplanation();
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SingleSolutionDetector>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SingleSolutionDetector>>(fullClauseSelectorSolver0);
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, insertionStrategy0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.moveTo2(vecInt0);
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(clausalCardinalitiesDecorator0, hashMap0, vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(dimacsStringSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      VecInt vecInt0 = new VecInt();
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain((ISolver) null, hashMap0, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.InsertionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(singleSolutionDetector0, hashMap0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(5, 5);
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<SingleSolutionDetector>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fullClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(fullClauseSelectorSolver0).isVerbose();
      doReturn(vecInt0).when(fullClauseSelectorSolver0).unsatExplanation();
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      insertionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(5, 5);
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<SingleSolutionDetector>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, false, true).when(fullClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("F8nm").when(fullClauseSelectorSolver0).getLogPrefix();
      doReturn(true, false).when(fullClauseSelectorSolver0).isVerbose();
      doReturn(vecInt0).when(fullClauseSelectorSolver0).unsatExplanation();
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(5);
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<SingleSolutionDetector>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(fullClauseSelectorSolver0).isVerbose();
      doReturn(vecInt0).when(fullClauseSelectorSolver0).unsatExplanation();
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SingleSolutionDetector>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SingleSolutionDetector>>(fullClauseSelectorSolver0);
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      int[] intArray0 = new int[7];
      VecInt vecInt1 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(clausalCardinalitiesDecorator0, hashMap0, vecInt1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(5);
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<SingleSolutionDetector>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(fullClauseSelectorSolver0).getLogPrefix();
      doReturn(true).when(fullClauseSelectorSolver0).isVerbose();
      doReturn(vecInt0).when(fullClauseSelectorSolver0).unsatExplanation();
      ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SingleSolutionDetector>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<FullClauseSelectorSolver<SingleSolutionDetector>>(fullClauseSelectorSolver0);
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      int[] intArray0 = new int[3];
      intArray0[0] = (-444);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.moveTo2(vecInt0);
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(clausalCardinalitiesDecorator0, hashMap0, vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      VecInt vecInt0 = new VecInt(5, 5);
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<SingleSolutionDetector>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, false).when(fullClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("F8nm").when(fullClauseSelectorSolver0).getLogPrefix();
      doReturn(true, false).when(fullClauseSelectorSolver0).isVerbose();
      doReturn(vecInt0).when(fullClauseSelectorSolver0).unsatExplanation();
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      insertionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      String string0 = insertionStrategy0.toString();
      assertEquals("Replay (Insertion-based) minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      insertionStrategy0.cancelExplanationComputation();
      VecInt vecInt0 = new VecInt(5, 5);
      vecInt0.toArray();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<SingleSolutionDetector>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false, false, true).when(fullClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("F8nm").when(fullClauseSelectorSolver0).getLogPrefix();
      doReturn(true, false).when(fullClauseSelectorSolver0).isVerbose();
      doReturn(vecInt0).when(fullClauseSelectorSolver0).unsatExplanation();
      HashMap<Integer, InsertionStrategy> hashMap0 = new HashMap<Integer, InsertionStrategy>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(fullClauseSelectorSolver0, hashMap0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
