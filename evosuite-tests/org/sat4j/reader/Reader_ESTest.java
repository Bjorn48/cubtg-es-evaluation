/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 07:56:34 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.util.zip.ZipException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.reader.AIGReader;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.GroupedCNFReader;
import org.sat4j.reader.InstanceReader;
import org.sat4j.reader.LecteurDimacs;
import org.sat4j.reader.Reader;
import org.sat4j.specs.IGroupSolver;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.DimacsStringSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Reader_ESTest extends Reader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("w");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".gz");
      DimacsReader dimacsReader0 = new DimacsReader(iSolver0);
      try { 
        dimacsReader0.parseInstance("w");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorproblem line expected (p cnf ...)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      DimacsReader dimacsReader0 = new DimacsReader(iSolver0);
      // Undeclared exception!
      try { 
        dimacsReader0.parseInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "The tim");
      try { 
        dimacsReader0.parseInstance("The tim");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(dimacsStringSolver0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        lecteurDimacs0.parseInstance((InputStream) dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null, (Reader) null);
      // Undeclared exception!
      try { 
        instanceReader0.hasAMapping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        Reader.getInputStreamFromFilename("http://sm:MI;V1G'~G[LD");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // For input string: \"MI;V1G'~G[LD\"
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        Reader.getInputStreamFromFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      try { 
        Reader.getInputStreamFromFilename("V3");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        Reader.getInputStreamFromFilename("http://");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: 
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".lzma");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\", shape=box, Polor=\"oran>e\", style=dot2ed]");
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "\", shape=box, Polor=\"oran>e\", style=dot2ed]");
      try { 
        dimacsReader0.parseInstance(".lzma");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".lzma.bz2");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "|%Z0J2l4|$%");
      try { 
        Reader.getInputStreamFromFilename(".lzma.bz2");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("tnrU7+.gz");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bz2");
      try { 
        Reader.getInputStreamFromFilename("tnrU7+.gz");
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      try { 
        dimacsReader0.parseInstance("http://sm:MI;V1G'~G[LD");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // For input string: \"MI;V1G'~G[LD\"
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      DimacsReader dimacsReader0 = new DimacsReader(iSolver0);
      assertFalse(dimacsReader0.isVerbose());
      
      dimacsReader0.setVerbosity(true);
      assertTrue(dimacsReader0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      StringReader stringReader0 = new StringReader("!H:7l}*W<7.^HdC9");
      // Undeclared exception!
      try { 
        groupedCNFReader0.parseInstance((java.io.Reader) stringReader0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Use #parseInstance(InputStream) instead
         //
         verifyException("org.sat4j.reader.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      dimacsReader0.setUseMapping(false);
      assertFalse(dimacsReader0.isUsingMapping());
      assertFalse(dimacsReader0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      AIGReader aIGReader0 = new AIGReader(iSolver0);
      boolean boolean0 = aIGReader0.hasAMapping();
      assertFalse(aIGReader0.isVerbose());
      assertFalse(boolean0);
      assertFalse(aIGReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "decisions\t\t: ");
      boolean boolean0 = dimacsReader0.isUsingMapping();
      assertFalse(boolean0);
      assertFalse(dimacsReader0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "decisions\t\t: ");
      dimacsReader0.getMapping();
      assertFalse(dimacsReader0.isVerbose());
      assertFalse(dimacsReader0.isUsingMapping());
  }
}
