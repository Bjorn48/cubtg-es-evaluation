/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:25:08 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IOptimizationProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Binomial;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FullClauseSelectorSolver_ESTest extends FullClauseSelectorSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[0];
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = (LexicoDecorator<DimacsOutputSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(lexicoDecorator0).modelWithInternalVariables();
      FullClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>>(lexicoDecorator0, true);
      int[] intArray1 = fullClauseSelectorSolver0.model();
      assertNotSame(intArray1, intArray0);
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<GateTranslator>((GateTranslator) null, false);
      boolean boolean0 = fullClauseSelectorSolver0.isSkipDuplicatedEntries();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(statisticsSolver0);
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<AbstractMinimalModel>(abstractMinimalModel0, false);
      VecInt vecInt0 = new VecInt(8);
      fullClauseSelectorSolver0.addNonControlableClause(vecInt0);
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0).when(iSolver0).nextFreeVarId(anyBoolean());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      ModelIterator modelIterator0 = new ModelIterator(solutionCounter0);
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIterator>(modelIterator0, true);
      fullClauseSelectorSolver0.addClause(vecInt0);
      assertEquals(3, vecInt0.size());
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(statisticsSolver0);
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>(solutionCounter0, false);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FullClauseSelectorSolver<ManyCore<StatisticsSolver>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<StatisticsSolver>>((ManyCore<StatisticsSolver>) null, false);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[0];
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(false, abstractMinimalModelArray0);
      FullClauseSelectorSolver<ManyCore<AbstractMinimalModel>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<AbstractMinimalModel>>(manyCore0, true);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.model();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      SearchParams searchParams0 = new SearchParams((-258));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(miniSATLearning0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, glucose21Restarts0, iLogAble0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0);
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, false);
      try { 
        fullClauseSelectorSolver0.addNonControlableClause(vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, true);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt((IVecInt) null);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addNonControlableClause(readOnlyVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, false);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addControlableClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 471;
      ManyCore<AbstractMinimalModel> manyCore0 = (ManyCore<AbstractMinimalModel>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(manyCore0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<ManyCore<AbstractMinimalModel>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<AbstractMinimalModel>>(manyCore0, false);
      VecInt vecInt0 = new VecInt(intArray0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(fullClauseSelectorSolver0, vecInt0);
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<AbstractMinimalModel>(minimal4InclusionModel0, true);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver1.addControlableClause(vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FullClauseSelectorSolver<GateTranslator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<GateTranslator>((GateTranslator) null, false);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(fullClauseSelectorSolver0);
      Binomial binomial0 = new Binomial();
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0, binomial0);
      FullClauseSelectorSolver<ClausalCardinalitiesDecorator<MinOneDecorator>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<ClausalCardinalitiesDecorator<MinOneDecorator>>(clausalCardinalitiesDecorator0, false);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver1.addClause(vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(47);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsStringSolver0);
      ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0, binomial0);
      FullClauseSelectorSolver<ClausalCardinalitiesDecorator<MinOneDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ClausalCardinalitiesDecorator<MinOneDecorator>>(clausalCardinalitiesDecorator0, false);
      VecInt vecInt0 = new VecInt(677, 670);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addClause(vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(statisticsSolver0, vecInt0);
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<AbstractMinimalModel>(abstractMinimalModel0, true);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addControlableClause(vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LexicoDecorator<Minimal4InclusionModel> lexicoDecorator0 = new LexicoDecorator<Minimal4InclusionModel>((Minimal4InclusionModel) null);
      FullClauseSelectorSolver<LexicoDecorator<Minimal4InclusionModel>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<Minimal4InclusionModel>>(lexicoDecorator0, true);
      fullClauseSelectorSolver0.model();
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[9];
      ManyCore<AbstractMinimalModel> manyCore0 = (ManyCore<AbstractMinimalModel>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(manyCore0).modelWithInternalVariables();
      FullClauseSelectorSolver<ManyCore<AbstractMinimalModel>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<AbstractMinimalModel>>(manyCore0, false);
      int[] intArray1 = fullClauseSelectorSolver0.model();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      IteratorInt iteratorInt0 = vecInt0.iterator();
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(iteratorInt0).when(iVecInt0).iterator();
      doReturn((IVecInt) null).when(iVecInt0).push(anyInt());
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Constr constr0 = cardinalityDataStructure0.createUnregisteredClause(vecInt0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(constr0).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(iSolver0).nextFreeVarId(anyBoolean());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIterator>(modelIterator0, true);
      IConstr iConstr0 = fullClauseSelectorSolver0.addClause(iVecInt0);
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertNotNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, true);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(statisticsSolver0);
      fullClauseSelectorSolver0.addControlableClause(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, dimacsOutputSolver0.nVars());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addClause(vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      fullClauseSelectorSolver0.getConstraints();
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[9];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1667);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, true);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, true);
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addNonControlableClause(vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, false);
      fullClauseSelectorSolver0.getAddedVars();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      boolean boolean0 = fullClauseSelectorSolver0.isSkipDuplicatedEntries();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FullClauseSelectorSolver<ModelIteratorToSATAdapter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIteratorToSATAdapter>((ModelIteratorToSATAdapter) null, false);
      fullClauseSelectorSolver0.getLastClause();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ManyCore<SingleSolutionDetector> manyCore0 = (ManyCore<SingleSolutionDetector>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<ManyCore<SingleSolutionDetector>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<SingleSolutionDetector>>(manyCore0, false);
      fullClauseSelectorSolver0.getConstrs();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>((DimacsOutputSolver) null, false);
      fullClauseSelectorSolver0.getLastConstr();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[5];
      ManyCore<AbstractMinimalModel> manyCore0 = (ManyCore<AbstractMinimalModel>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(manyCore0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(manyCore0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<ManyCore<AbstractMinimalModel>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<AbstractMinimalModel>>(manyCore0, false);
      VecInt vecInt0 = new VecInt(intArray0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(fullClauseSelectorSolver0, vecInt0, (SolutionFoundListener) null);
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<AbstractMinimalModel>(abstractMinimalModel0, false);
      fullClauseSelectorSolver1.addControlableClause(vecInt0);
      assertFalse(fullClauseSelectorSolver1.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter((IOptimizationProblem) null, solutionFoundListener0);
      FullClauseSelectorSolver<OptToSatAdapter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<OptToSatAdapter>(optToSatAdapter0, false);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = VecInt.EMPTY;
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, 0);
      fullClauseSelectorSolver0.setLastConstr(atLeast0);
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }
}
