/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 10:22:05 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(1168.875F);
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setMovable(false);
      homeLight1.isVisible();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Sash sash0 = new Sash(1.0F, (-1.0F), 1.0F, (-1.0F), 1.0F);
      Integer integer0 = new Integer(2208);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-2932.2617F), 3323.76F, (-3093.4219F), 3323.76F, true, true, integer0, (float[][]) null, true, (-2932.2617F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setWidth((-1753.303F));
      homePieceOfFurniture0.setDepth((-2932.2617F));
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setY((-2932.2617F));
      homePieceOfFurniture0.setName("");
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-304));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isNameCenterPointAt((-1117.0F), 3016.0864F, 1587.0F);
      homePieceOfFurniture0.isNameVisible();
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.getModel();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(1.0F, 4565.81F, 1.0F, (-1.0F), (-1.0F));
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal((-0.7187569F));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "i{Qd", "", (Content) null, (Content) null, (Content) null, 1.0F, 294.12F, 3323.8F, 6013.95F, true, (-0.7187569F), 6013.95F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("i{Qd");
      Float.valueOf(294.12F);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow0.isTopLeftPointAt((-0.0054701567F), 0.0F, (-0.7187569F));
      Level level0 = new Level("U_\":b*!:d7#v", (-2279.489F), (-2279.489F), (-2279.489F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("U_\":b*!:d7#v", propertyChangeListener0);
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeDoorOrWindow1.isAtLevel(level0);
      homeDoorOrWindow1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      float float0 = 3800.4F;
      Sash sash0 = new Sash(0.68662703F, 3800.4F, 0.68662703F, 1.3999095F, 333.244F);
      Sash sash1 = new Sash((-1.0F), 1.3999095F, 1.3999095F, 0.68662703F, 333.244F);
      sashArray0[11] = sash1;
      float[][] floatArray0 = new float[6][6];
      float float1 = (-1689.7671F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Sd", "", "", (Content) null, (Content) null, (Content) null, 1.3999095F, (-1689.7671F), (-1.0F), 333.244F, true, (-1689.7671F), 2630.2837F, sashArray0, floatArray0, "i{Sd", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      homeDoorOrWindow1.getName();
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      homeDoorOrWindow1.setName("E1<H50Y<?J");
      homeDoorOrWindow1.isTopRightPointAt(1.3999095F, 205.0F, (-1689.7671F));
      homeDoorOrWindow1.setNameAngle(3800.4F);
      homeDoorOrWindow0.isNameCenterPointAt(166.622F, 0.5F, (-1689.7671F));
      // Undeclared exception!
      try { 
        homeDoorOrWindow2.setHeight(791.3531F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.isNameCenterPointAt(166.622F, 0.5F, 1581.3062F);
      homeDoorOrWindow1.setNameAngle(166.622F);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer((-1536));
      Integer integer1 = new Integer((-1536));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-595.9328F), (-1536), (-1536), (-1536), true, "", integer0, (float[][]) null, false, 2808.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(2808.0F, (-1536), (-1.0F));
      homePieceOfFurniture0.setNameXOffset(0.3926991F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.intersectsRectangle(2.1873832F, 2808.0F, 2808.0F, (-1.0F));
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 0.0F, (-1.0F), 1.0F, 1.0F, false, (-2382.4014F), 0.3926991F, sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.move(1872.0F, (-1.0F));
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.isNameCenterPointAt(0.0F, 1.0F, 1872.0F);
      homeDoorOrWindow0.setElevation((-1.0F));
      homeDoorOrWindow1.setNameAngle(1872.0F);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow1.getShininess();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "kMn9.J", "kMn9.J", (Content) null, (Content) null, (Content) null, (-609.671F), 1581.3062F, 3324.527F, (-609.671F), true, (-1689.7671F), (-609.671F), sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.intersectsRectangle(3324.527F, (-609.671F), 0.3926991F, 333.244F);
      homeDoorOrWindow1.getModel();
      homeDoorOrWindow0.getShininess();
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow0.setShininess((Float) null);
      homeDoorOrWindow1.getShininess();
      System.setCurrentTimeMillis(2335L);
      homeDoorOrWindow1.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(1.0F, (-1.0F), 1.0F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1.0F, (-1689.7671F), 6013.95F, true, (-1689.7671F), (-1.0F), sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      homeDoorOrWindow0.isBottomRightPointAt(1.0F, 1.3999095F, (-1689.7671F));
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      homeDoorOrWindow1.intersectsRectangle((-1264.2968F), 1.0F, 0.3926991F, 333.244F);
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.setAngle(0.0F);
      homeDoorOrWindow3.setWidth(1.0F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1872.0F;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, (Content) null, (Content) null, (Content) null, 1872.0F, (-1.0F), 1.0F, 1.0F, false, (-2381.2642F), 0.3926991F, sashArray0, floatArray0, "E5%!@", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.isBottomRightPointAt((-1.0F), (-1.0F), 1872.0F);
      homePieceOfFurniture0.move(1872.0F, (-1.0F));
      homePieceOfFurniture0.getName();
      homeDoorOrWindow0.isNameCenterPointAt(1872.0F, 1.0F, 5.3785872F);
      homeDoorOrWindow0.setNameAngle((-2532.295F));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isNameCenterPointAt((-1117.0F), 3016.0864F, 1587.0F);
      homePieceOfFurniture0.setNameXOffset(0.3926991F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.getName();
      homePieceOfFurniture0.isPointAt(1.0F, (-1.0F), 2.0F);
      homePieceOfFurniture0.getShininess();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(1.0F, 4565.81F, 1.0F, (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 4565.81F, (-1.0F), 13.877942F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.containsPoint(333.244F, 3323.76F, 1.0F);
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.isBottomLeftPointAt(1.0F, 936.0F, 1581.3062F);
      homeDoorOrWindow0.setNameYOffset(1.0F);
      Float float0 = Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow1.isBottomRightPointAt(0.3926991F, (-1.0F), 1762.58F);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal1 = new BigDecimal((-2283));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("#%|UH4O-T*xS9-'", "$9Qd", "", (Content) null, (Content) null, 3766.74F, 2231.093F, 333.244F, 1762.58F, true, 2231.093F, 6013.95F, sashArray0, floatArray0, "#%|UH4O-T*xS9-'", false, bigDecimal1, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setElevation(6013.95F);
      homeDoorOrWindow0.isBottomRightPointAt(6013.95F, 333.244F, 3.4028235E38F);
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow0.getShininess();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "2Lj\u0000!xjG8m", "2Lj\u0000!xjG8m", (Content) null, (Content) null, (Content) null, 2808.0F, (-1566), (-1.0F), (-1566), true, (float[][]) null, "2Lj\u0000!xjG8m", true, bigDecimal0, bigDecimal0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.setX(124.29104F);
      homePieceOfFurniture0.isNameCenterPointAt((-1117.0F), 3016.0864F, 1587.0F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.getName();
      homePieceOfFurniture0.isPointAt(1.0F, (-1.0F), 2.0F);
      homePieceOfFurniture0.getShininess();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(1.0F, 4565.81F, 1.0F, (-13.193746F), (-13.193746F));
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal((-0.7187569F));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "i{Qd", "", (Content) null, (Content) null, (Content) null, 1.0F, (-0.7187569F), 3323.8F, 6013.95F, true, (-0.7187569F), 6013.95F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("i{Qd");
      Float.valueOf(4565.81F);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow0.isTopLeftPointAt((-0.0054701567F), 0.0F, (-0.7187569F));
      Level level0 = new Level("U_\":b*!:d7#v", (-2279.489F), (-2279.489F), (-2279.489F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("U_\":b*!:d7#v", propertyChangeListener0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(1.0F, 0.0F, 1.0F, 0.0F, 333.244F);
      Sash sash1 = new Sash(1.0F, 0.0F, 1.0F, 1474.1F, 1474.1F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1.0F, 3324.527F, 6013.95F, true, (-1689.7671F), 0.5649058F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getDescription();
      Integer integer0 = new Integer((-3480));
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.getShininess();
      homeDoorOrWindow0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 1.3999095F, 1.3999095F, 0.68662703F, 333.0F);
      sashArray0[11] = sash0;
      Integer integer0 = new Integer(2354);
      Integer.valueOf(983);
      Integer.valueOf(1);
      Integer.valueOf(1);
      Integer integer1 = Integer.valueOf(983);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-1566), 1.3999095F, (-3619.0F), (-1730.9323F), true, true, integer1, (float[][]) null, true, 1, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setWidth((-3619.0F));
      homePieceOfFurniture0.setDepth((-979.9229F));
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setY(0.3926991F);
      HomePieceOfFurniture.Property.values();
      homePieceOfFurniture1.getY();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(1168.875F);
      Float float1 = new Float((-1623.7F));
      LightSource lightSource0 = new LightSource((-1.0F), 158.0F, 0.0F, (-1264), float1);
      lightSourceArray0[5] = lightSource0;
      LightSource lightSource1 = new LightSource(1687.8942F, 0.0F, 1144.5787F, (-1264));
      lightSourceArray0[6] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, 158.0F, (-1623.7F), (-1264), float0);
      lightSourceArray0[7] = lightSource2;
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(1.0F, 4565.81F, 1.0F, (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 4565.81F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.containsPoint(333.244F, 3323.76F, 0.0F);
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.setNameYOffset(1.0F);
      Float float0 = Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.containsPoint(333.244F, 333.244F, (-979.9303F));
      homeDoorOrWindow1.containsPoint(0.0F, (-5196.037F), 0.0F);
      homeDoorOrWindow0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.getIcon();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 333.244F);
      sashArray0[1] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "8{014Qr", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, (-1.0F), 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeDoorOrWindow0);
      homeDoorOrWindow0.setDepth(0.0F);
      homeDoorOrWindow0.isDeformable();
      homeDoorOrWindow0.getName();
      homePieceOfFurniture0.isNameCenterPointAt(1581.3062F, (-0.71382F), 1581.3062F);
      homeDoorOrWindow0.setElevation(790.1531F);
      homeDoorOrWindow0.setNameAngle(958.738F);
      homeDoorOrWindow0.getShininess();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Sash sash0 = new Sash((-1.0F), 1.3999095F, 1.3999095F, 0.68662703F, 333.0F);
      sashArray0[11] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 1.3999095F, 333.0F, (-1.0F), 333.0F, true, 333.0F, 3800.4F, sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setName("E1<H50Y<?J");
      homeDoorOrWindow0.isTopRightPointAt(1.3999095F, 205.0F, (-1689.7671F));
      homeDoorOrWindow0.setNameAngle(1.3999095F);
      homeDoorOrWindow0.isNameCenterPointAt(333.0F, 205.0F, (-1.0F));
      homeDoorOrWindow0.isBottomLeftPointAt(333.0F, (-387.2751F), 3800.4F);
      homeDoorOrWindow0.setNameVisible(true);
      homeDoorOrWindow0.isBottomLeftPointAt(333.0F, 0.0F, 0.0F);
      homeDoorOrWindow0.setName("");
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.setHeight(0.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.getModelRotation();
      homeDoorOrWindow0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(1.0F, (-1.0F), 1.0F, (-1.0F), 333.244F);
      Sash sash1 = new Sash(1.0F, (-1.0F), 1872.0F, 1474.1F, 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3324.527F, 6013.95F, true, (-1689.7671F), 0.5649058F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      Float float0 = Float.valueOf(3324.527F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.getNameStyle();
      homeDoorOrWindow0.isBottomRightPointAt(333.244F, 1134.3F, (-803.6F));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.setX(124.29104F);
      homePieceOfFurniture0.isNameCenterPointAt((-1117.0F), 3016.0864F, 1587.0F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.getName();
      homePieceOfFurniture0.isPointAt(1.0F, (-1.0F), 2.0F);
      homePieceOfFurniture0.getShininess();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setVisible(false);
      homePieceOfFurniture0.getName();
      homeDoorOrWindow1.setName("");
      homePieceOfFurniture0.isTopLeftPointAt(333.244F, 2.0F, 333.244F);
      homeDoorOrWindow0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 4545.4966F, 1.0F, (-613.5F), 4545.4966F, false, false, integer0, (float[][]) null, false, (-613.5F), false);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setAngle((-1566));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(0.68662703F, 4565.81F, 0.68662703F, (-1.0F), 333.244F);
      Sash sash1 = new Sash((-1.0F), (-1.0F), (-1.0F), 0.68662703F, 333.244F);
      sashArray0[11] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, (-1689.7671F), (-1.0F), 333.244F, true, (-1689.7671F), 1436.1443F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow2.isTopRightPointAt(1.0F, 205.0F, (-1689.7671F));
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.isNameCenterPointAt(166.622F, 0.5F, (-1689.7671F));
      homeDoorOrWindow1.isBottomLeftPointAt(0.68662703F, (-1.0F), 1.0F);
      homeDoorOrWindow3.setDescription("i{Qd");
      homeDoorOrWindow3.setName("yr=2q%Y>d");
      homeDoorOrWindow0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(1.0F, (-1.0F), 1.0F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[3][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1.0F, (-1689.7671F), 6013.95F, true, (-1689.7671F), (-1.0F), sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      homeDoorOrWindow0.setX(1.0F);
      HomePieceOfFurniture.Property.values();
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isNameCenterPointAt((-1117.0F), 3016.0864F, 1587.0F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.getName();
      homePieceOfFurniture0.isPointAt(1.0F, (-1.0F), 2.0F);
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture0.isVisible();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer((-1536));
      Integer integer1 = new Integer((-1536));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 4565.81F, (-613.5F), (-1536), (-1536), false, integer0, (float[][]) null, true, 2808.0F, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(2808.0F, (-1536), (-1.0F));
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.isPointAt((-1.0F), (-1.0F), 2.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setVisible(false);
      homePieceOfFurniture0.getName();
      homeDoorOrWindow1.setName("");
      homeDoorOrWindow0.getElevation();
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture0.getPoints();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float((float) 222);
      LightSource lightSource0 = new LightSource(0.0F, 3489.2F, 0.0F, 222, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1687.8942F, 2383.896F, 0.0F, 222, float0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, (-1.0F), 0.0F, 222, float0);
      lightSourceArray0[2] = lightSource2;
      Float float1 = new Float(1168.875F);
      LightSource lightSource3 = new LightSource(2802.9F, 2383.896F, 2802.9F, 222, float1);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(3489.2F, 1141.11F, 0.0F, 546);
      lightSourceArray0[4] = lightSource4;
      Float float2 = new Float((-1623.7F));
      LightSource lightSource5 = new LightSource((-1.0F), 158.0F, 0.0F, (-1264), float2);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(1687.8942F, 0.0F, 1141.11F, (-1264));
      lightSourceArray0[6] = lightSource6;
      LightSource lightSource7 = new LightSource(0.0F, 158.0F, (-1623.7F), (-1264), float1);
      lightSourceArray0[7] = lightSource7;
      LightSource lightSource8 = new LightSource(3489.2F, 0.0F, 546, 46);
      lightSourceArray0[8] = lightSource8;
      BigDecimal bigDecimal0 = new BigDecimal(46);
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 0.0F, 3489.2F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getHeight();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(1.0F, 4565.81F, 1.0F, (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 4565.81F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.containsPoint(333.244F, 3323.76F, 1.0F);
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.setNameYOffset(1.0F);
      Float float0 = Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow1.isBottomRightPointAt(0.3926991F, (-1.0F), 1762.58F);
      homeDoorOrWindow0.getShininess();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(9.761561F, 9.761561F, 9.761561F, (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(9.761561F, (-1.0F), 1872.0F, 1474.1F, 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 9.761561F, 1581.3F, 3324.527F, 6013.95F, true, (-1689.7671F), 0.5649058F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setName("");
      homeDoorOrWindow0.setNameAngle(952.5F);
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      homeDoorOrWindow3.setDescription("");
      homeDoorOrWindow0.setName("Aeil[7-HqY.Ajg o");
      homeDoorOrWindow1.setDepth(0.5649058F);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow3.setDescription("i{Qd");
      homeDoorOrWindow3.isTopLeftPointAt((-1.0F), 1.0F, (-2532.295F));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), 3.5889637F, 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-19.228355F), 3.5889637F, 1872.0F, 1474.1F, 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 3.5889637F, (-1689.7671F), 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow0.isNameCenterPointAt(166.622F, 0.5F, (-1689.7671F));
      homeDoorOrWindow1.isBottomLeftPointAt((-1.0F), 3.5889637F, 1474.1F);
      Random.setNextRandom(12);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1872.0F;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, (Content) null, (Content) null, (Content) null, 1872.0F, (-1.0F), 1.0F, 1.0F, false, (-2381.2642F), 0.3926991F, sashArray0, floatArray0, "E5%!@", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.isBottomRightPointAt((-1.0F), (-1.0F), 1872.0F);
      homePieceOfFurniture0.move(1872.0F, (-1.0F));
      homePieceOfFurniture0.getName();
      homeDoorOrWindow0.isNameCenterPointAt(1872.0F, 1.0F, 5.3785872F);
      homeDoorOrWindow0.setElevation(5.3785872F);
      homeDoorOrWindow0.setNameAngle((-2532.1243F));
      homePieceOfFurniture0.getShininess();
      HomePieceOfFurniture.Property.values();
      homePieceOfFurniture0.getDepth();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj!jG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("2Lj!jG8m", (Content) null, (Content) null, 4565.81F, (-613.5F), 1474.1F, 1474.1F, false, false, integer0, (float[][]) null, true, (-1566), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setY(905.0F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal1 = new BigDecimal((-2283));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, 3766.74F, 2231.093F, 333.244F, 1762.58F, true, 2.0F, 6013.95F, sashArray0, floatArray0, "", true, bigDecimal1, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.setHeight((-2523.49F));
      HomePieceOfFurniture.SortableProperty.values();
      homeDoorOrWindow0.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      homeDoorOrWindow2.intersectsRectangle(4.2175255F, 0.0F, 915.4737F, 2842.4211F);
      homeDoorOrWindow0.setVisible(true);
      homeDoorOrWindow2.getName();
      homeDoorOrWindow1.setName("");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isNameCenterPointAt((-1117.0F), 3016.0864F, 1587.0F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.getName();
      homePieceOfFurniture0.isPointAt(1.0F, (-1.0F), 2.0F);
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture0.getTexture();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(1168.875F);
      Float float1 = new Float((-1623.7F));
      LightSource lightSource0 = new LightSource((-1.0F), 158.0F, 0.0F, (-1264), float1);
      lightSourceArray0[5] = lightSource0;
      LightSource lightSource1 = new LightSource(1687.8942F, 0.0F, 1141.11F, (-1264));
      lightSourceArray0[6] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, 158.0F, (-1623.7F), (-1264), float0);
      lightSourceArray0[7] = lightSource2;
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-304));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isNameCenterPointAt((-1.0F), 3016.0864F, 1587.0F);
      homePieceOfFurniture0.isDoorOrWindow();
      homePieceOfFurniture0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Sash sash1 = new Sash(0.0F, 0.0F, 3.4959633F, 1474.1F, 1474.1F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 0.0F, 1580.5496F, 3324.527F, 6013.95F, true, (-1689.7671F), 3.4959633F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getName();
      homeDoorOrWindow1.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setDescription("");
      homeDoorOrWindow0.isTexturable();
      homeDoorOrWindow1.getIcon();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal1 = new BigDecimal((-2283));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("#%|UH4O-T*xS9-'", "$9Qd", "", (Content) null, (Content) null, 3766.74F, 2207.707F, 333.244F, 1762.58F, true, 2.0F, 6013.95F, sashArray0, floatArray0, "#%|UH4O-T*xS9-'", true, bigDecimal1, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameStyle((TextStyle) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow0.getY();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-22.693678F), 4565.81F, (-22.693678F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      homeDoorOrWindow2.getName();
      homeDoorOrWindow1.setName("");
      homeDoorOrWindow2.setNameAngle((-1.0F));
      homeDoorOrWindow1.intersectsRectangle((-22.693678F), 0.3926991F, 4565.81F, 0.0F);
      homeDoorOrWindow0.setWidth(3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 1.0F, 333.244F, 1474.1F, 333.244F);
      sashArray0[1] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "8{014Qr", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 1.0F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homeDoorOrWindow0);
      homeDoorOrWindow0.move(1.0F, (-1.0F));
      homeDoorOrWindow0.setDepth(0.0F);
      homeDoorOrWindow0.setNameYOffset(0.0F);
      homeDoorOrWindow0.isDeformable();
      TextStyle textStyle0 = new TextStyle(1.0F);
      homeDoorOrWindow0.setNameStyle(textStyle0);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.getDescription();
      homeDoorOrWindow0.setX(1.0F);
      homeDoorOrWindow0.setAngle((-1.0F));
      homePieceOfFurniture1.isTexturable();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 4565.81F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homePieceOfFurniture0.containsPoint(333.244F, 2.0F, 1.0F);
      homePieceOfFurniture0.getName();
      Float float0 = Float.valueOf(2.0F);
      homeDoorOrWindow1.isBottomRightPointAt(1.0F, 4565.81F, 0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow1.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 4545.4966F, 1.0F, (-613.5F), 4545.4966F, false, false, integer0, (float[][]) null, false, (-613.5F), false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setY(1970.2676F);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal1 = new BigDecimal((-2283));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, 3766.74F, 2231.093F, 333.244F, 6013.95F, true, 2.0F, 6013.95F, sashArray0, floatArray0, "", true, bigDecimal1, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getGroundElevation();
      HomePieceOfFurniture.SortableProperty.values();
      homeDoorOrWindow0.getIcon();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.getName();
      homeDoorOrWindow1.setName("");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(4565.81F);
      String string0 = "";
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", "", (Content) null, (Content) null, (Content) null, 1.0F, (-1566), 1.0F, 4565.81F, true, "", (float[][]) null, "", false, false, true, bigDecimal0, bigDecimal0, "");
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      float float0 = 905.0F;
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setWidth(4565.81F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer((-1536));
      Integer integer1 = new Integer((-1536));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-613.5F), (-1536), (-1536), (-1536), true, "", integer0, (float[][]) null, false, 2808.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(2808.0F, (-1536), (-1.0F));
      homePieceOfFurniture0.setNameXOffset(0.0F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.isPointAt(2.1873832F, (-1.0F), 2.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Sash[] sashArray0 = new Sash[6];
      Sash sash0 = new Sash((-22.693678F), 4565.81F, (-22.693678F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1591.1659F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      homeDoorOrWindow2.getName();
      homeDoorOrWindow1.setName("");
      homeDoorOrWindow2.setNameAngle((-1.0F));
      homeDoorOrWindow1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.0952740898778));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj!jG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 4565.81F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.isMovable();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(1168.875F);
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setMovable(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float1 = new Float((-1.0));
      homeLight0.setShininess(float1);
      homeLight0.getLevel();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(1.0F, 4565.81F, 1.0F, (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 4565.81F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.containsPoint(333.244F, 3323.76F, 1.0F);
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.setNameYOffset(1.0F);
      Float float0 = Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow1.containsPoint(333.244F, 333.244F, (-979.9303F));
      homeDoorOrWindow1.containsPoint(0.0F, (-5196.037F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.isNameCenterPointAt(166.622F, 0.5F, 1581.3062F);
      homeDoorOrWindow1.isBottomLeftPointAt((-1.0F), (-1.0F), 1474.1F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(1168.875F);
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("Windows");
      catalogLight0.setCategory(furnitureCategory0);
      homeLight1.setMovable(true);
      homeLight1.isVisible();
      homeLight0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal((-208.0952740898778));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal1 = new BigDecimal((-2283));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("#%|UH4O-T*xS9-'", "$9Qd", "", (Content) null, (Content) null, 3766.74F, 2231.093F, 333.244F, 1762.58F, true, 2231.093F, 6013.95F, sashArray0, floatArray0, "#%|UH4O-T*xS9-'", false, bigDecimal1, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomRightPointAt(6013.95F, 333.244F, 3.4028235E38F);
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow0.getPrice();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.2F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      System.setCurrentTimeMillis(1L);
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("", "", "", (Content) null, (Content) null, (Content) null, 0.0F, (-1.0F), 1581.3062F, 1L, false, lightSourceArray0, floatArray0, "", true, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getLevel();
      homeLight1.setLevel((Level) null);
      homeLight0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, (-1.0F), 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homeDoorOrWindow0);
      homeDoorOrWindow0.setDepth(0.0F);
      homeDoorOrWindow0.isDeformable();
      TextStyle textStyle0 = new TextStyle(790.1531F, true, true);
      homeDoorOrWindow0.setNameStyle(textStyle0);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.2F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      float[][] floatArray0 = new float[9][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{@d", "i{@d", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{@d", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setVisible(false);
      homeDoorOrWindow1.setName("i{@d");
      homePieceOfFurniture0.isTopLeftPointAt(333.2F, (-1.0F), 333.2F);
      homeDoorOrWindow1.getDepth();
      homePieceOfFurniture0.isTopRightPointAt(1.0F, (-1.0F), 1.0F);
      homeDoorOrWindow0.isPointAt(3323.76F, 3323.76F, 1474.1F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.containsPoint(333.244F, 2.0F, 1.0F);
      homePieceOfFurniture0.getName();
      Float float0 = Float.valueOf(2.0F);
      homeDoorOrWindow1.isBottomRightPointAt(1474.1F, 4565.81F, 0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.setName("");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 1.3999095F, 1.3999095F, 0.68662703F, 333.0F);
      sashArray0[11] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 1.3999095F, (-1689.7671F), (-1.0F), 333.0F, true, (-1689.7671F), 2630.2837F, sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      homeDoorOrWindow0.setName("E1<H50Y<?J");
      homeDoorOrWindow0.isTopRightPointAt(1.3999095F, 205.0F, (-1689.7671F));
      homeDoorOrWindow0.setNameAngle(3800.4F);
      homeDoorOrWindow0.isNameCenterPointAt(166.622F, 0.092076F, (-1689.7671F));
      homeDoorOrWindow0.isBottomLeftPointAt(0.68662703F, 1.3999095F, 1.3999095F);
      homeDoorOrWindow0.setDescription("");
      homeDoorOrWindow0.setName("yr=2q%Y>d");
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.setHeight(0.0F);
      homeDoorOrWindow0.getShininess();
      homeDoorOrWindow0.getY();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 1.3999095F, 1.3999095F, 0.68662703F, 333.0F);
      sashArray0[11] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 1.3999095F, 333.0F, (-1.0F), 333.0F, true, 333.0F, 2630.2837F, sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.68662703F);
      homeDoorOrWindow0.setName("E1<H50Y<?J");
      homeDoorOrWindow0.isTopRightPointAt(1.3999095F, 205.0F, 2630.2837F);
      homeDoorOrWindow0.setNameAngle(3761.1423F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.isBottomLeftPointAt(0.68662703F, 1.3999095F, 1.3999095F);
      homeDoorOrWindow0.setNameVisible(true);
      homeDoorOrWindow0.isBottomLeftPointAt(333.0F, 333.0F, 0.68662703F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getDescription();
      homeDoorOrWindow0.setX(1.0F);
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow1.getIcon();
      homeDoorOrWindow0.setNameVisible(false);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "i{Qd", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setVisible(false);
      homeDoorOrWindow1.setName("");
      homePieceOfFurniture0.isTopLeftPointAt(333.244F, (-1.0F), 333.244F);
      homeDoorOrWindow1.getDepth();
      homePieceOfFurniture0.isTopRightPointAt(255.6375F, (-1.0F), (-136.0F));
      homeDoorOrWindow0.isPointAt(902.8F, 902.8F, 1474.1F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), (-1.0F), 4565.81F, (-1.0F), 13.877942F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray1 = new Sash[4];
      sashArray1[0] = sash0;
      sashArray1[1] = sash0;
      sashArray1[2] = sash0;
      sashArray1[3] = sash0;
      BigDecimal bigDecimal1 = new BigDecimal((-2283));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("#%|UH4Os-T*xS9-'", "i{Qd", "", (Content) null, (Content) null, 3766.74F, 2230.9F, 3323.76F, 1762.58F, true, 1.0F, 6013.95F, sashArray1, floatArray0, "#%|UH4Os-T*xS9-'", true, bigDecimal1, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isBottomRightPointAt(110.0F, 3323.76F, 3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal((-0.10586685062869915));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-304));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), (-1.0F), true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isNameCenterPointAt((-1117.0F), 905.0F, (-1811.6865F));
      homePieceOfFurniture0.isNameVisible();
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.isResizable();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer((-1536));
      Integer integer1 = new Integer((-1536));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-613.5F), (-1536), (-1536), (-1536), true, "", integer0, (float[][]) null, false, 2808.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(2808.0F, (-1536), (-1.0F));
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.isPointAt(2.1873832F, (-1.0F), 2.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homeDoorOrWindow1);
      homeDoorOrWindow1.setDepth(905.0F);
      homeDoorOrWindow0.isDeformable();
      homeDoorOrWindow1.getElevation();
      homePieceOfFurniture0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal1 = new BigDecimal((-2283));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("#%|UH4O-T*xS9-'", "$9Qd", "", (Content) null, (Content) null, 3766.74F, 2231.093F, 333.244F, 1762.58F, true, 2231.093F, 6013.95F, sashArray0, floatArray0, "#%|UH4O-T*xS9-'", true, bigDecimal1, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      System.setCurrentTimeMillis((-2283));
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(1.0F, 4565.81F, 1.0F, (-1.0F), (-1.0F));
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal((-0.7187569F));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "i{Qd", "", (Content) null, (Content) null, (Content) null, 1.0F, 4565.81F, 3323.8F, 6013.95F, true, (-0.7187569F), 6013.95F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("i{Qd");
      Float.valueOf(1.0F);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow0.isTopLeftPointAt((-0.0054701567F), 0.0F, (-0.7187569F));
      Level level0 = new Level("U_\":b*!:d7#v", (-2279.489F), (-2279.489F), (-2279.489F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("U_\":b*!:d7#v", propertyChangeListener0);
      homeDoorOrWindow1.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3324.527F, 6013.95F, true, (-1689.7671F), 0.5649058F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getName();
      homeDoorOrWindow1.setNameYOffset(1581.3062F);
      homeDoorOrWindow0.intersectsRectangle(3324.527F, 1.0F, 0.3926991F, 333.244F);
      homeDoorOrWindow1.setAngle(0.0F);
      homeDoorOrWindow0.setWidth(1.0F);
      homeDoorOrWindow1.getModel();
      homeDoorOrWindow1.setVisible(true);
      homeDoorOrWindow1.getNameXOffset();
      homeDoorOrWindow1.getModel();
      homeDoorOrWindow1.setHeight(3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow2.getIcon();
      homeDoorOrWindow2.setWidth((-1689.7671F));
      homeDoorOrWindow1.setNameYOffset(1694.0F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homeDoorOrWindow1);
      homeDoorOrWindow1.setDepth(905.0F);
      homePieceOfFurniture0.isTopRightPointAt(1872.0F, 1872.0F, 1721.88F);
      homeDoorOrWindow0.isDeformable();
      homePieceOfFurniture0.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj!jG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 4565.81F, 1.0F, (-613.5F), 4565.81F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setY(0.0F);
      homePieceOfFurniture0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(1168.875F);
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", propertyChangeListener0);
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      homeLight1.setMovable(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-239L));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(1.0F, 1.0F, 1.0F, (-1.0F), (-1.0F));
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(1.0F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 1581.3062F, 1.0F, true, (-1689.7671F), 1.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.containsPoint(1.0F, (-1.0F), 1.0F);
      homeDoorOrWindow0.isBottomLeftPointAt(1.0F, 935.9999F, 1581.3062F);
      homeDoorOrWindow0.setNameYOffset(1.0F);
      homeDoorOrWindow1.setAngle((-1689.7671F));
      Float.valueOf(1.0F);
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow1.isTopLeftPointAt((-1689.7671F), 935.9999F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Super class isn't cloneable", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListenerProxy0);
      Integer integer0 = new Integer(1);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Super class isn't cloneable", (Content) null, (Content) null, 2674.0588F, (-1490.0F), 1.0F, (-3199.3125F), true, true, integer0, (float[][]) null, true, (-1490.0F), false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer.compare((-2145967259), (-2145967259));
      homePieceOfFurniture0.setNameAngle(0);
      homePieceOfFurniture0.setDepth(1);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.getElevation();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-14.7048F), (-14.7048F), (-14.7048F), 0.68662703F, (-14.7048F));
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, (-14.7048F), (-1689.7671F), (-14.7048F), 0.68662703F, false, (-1689.7671F), 0.68662703F, sashArray0, floatArray0, "i{Qd", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setName("i{Qd");
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.isNameCenterPointAt((-14.7048F), 0.092076F, (-1689.7671F));
      homeDoorOrWindow0.isBottomLeftPointAt(0.68662703F, (-14.7048F), (-14.7048F));
      homeDoorOrWindow0.setDescription("i{Qd");
      homeDoorOrWindow1.setNameVisible(false);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), 1.0F, 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), 1.0F, 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.isNameCenterPointAt(166.622F, 0.5F, 1581.3062F);
      homeDoorOrWindow1.setNameAngle(166.622F);
      homeDoorOrWindow3.containsPoint((-1.0F), (-691.0F), 0.5F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal1 = new BigDecimal((-2283));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, 3766.74F, 2231.093F, 333.244F, 6013.95F, true, 2.0F, 6013.95F, sashArray0, floatArray0, "", true, bigDecimal1, bigDecimal0);
      bigDecimal1.toString();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getGroundElevation();
      HomePieceOfFurniture.SortableProperty.values();
      homeDoorOrWindow0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1872.0F;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, (Content) null, (Content) null, (Content) null, 1872.0F, (-1.0F), 1.0F, 1.0F, false, (-2381.2642F), 0.3926991F, sashArray0, floatArray0, "E5%!@", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.isBottomRightPointAt((-1.0F), (-1.0F), 1872.0F);
      homePieceOfFurniture0.move(1872.0F, (-1.0F));
      homePieceOfFurniture0.getName();
      homeDoorOrWindow0.isNameCenterPointAt(1872.0F, 1.0F, 5.3785872F);
      homeDoorOrWindow0.setElevation(5.3785872F);
      homeDoorOrWindow0.setNameAngle((-2532.295F));
      homePieceOfFurniture0.getShininess();
      HomePieceOfFurniture.Property.values();
      Level level0 = new Level("U_\":b*!:d7#v", (-2279.489F), (-2279.489F), (-2279.489F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("U_\":b*!:d7#v", propertyChangeListener0);
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeDoorOrWindow0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", "", (Content) null, (Content) null, (Content) null, 4565.81F, 1.0F, (-1566), (-1566), false, "", (float[][]) null, "", false, false, true, bigDecimal0, bigDecimal0, "");
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setDepth(905.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(1.0F, (-1.0F), 1.0F, (-1.0F), 333.244F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 333.244F, 3324.527F, 6013.95F, true, (-1689.7671F), (-1.0F), sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.intersectsRectangle(3324.527F, 1.0F, 0.3926991F, 333.244F);
      homeDoorOrWindow1.setTexture((HomeTexture) null);
      homeDoorOrWindow1.isTopRightPointAt(0.3926991F, 1.0F, 333.244F);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-209.95774330162834));
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 4545.4966F, 1.0F, (-613.5F), 4545.4966F, false, false, integer0, (float[][]) null, false, (-613.5F), false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-304));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(903.37115F);
      homePieceOfFurniture0.isNameCenterPointAt((-1.0F), 3016.0864F, 1587.0F);
      homePieceOfFurniture0.isNameVisible();
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.getY();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), 1.0F, 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), 1.0F, 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.isNameCenterPointAt(166.622F, 0.5F, 1581.3062F);
      homeDoorOrWindow1.setNameAngle(166.622F);
      homeDoorOrWindow1.setDepth(1581.3062F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), 1.0F, 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), 1.0F, 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.isNameCenterPointAt(166.622F, 0.5F, 1581.3062F);
      homeDoorOrWindow1.setNameAngle(166.622F);
      homeDoorOrWindow0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(1.0F, 1.0F, 1.0F, (-1.0F), (-1.0F));
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(1.0F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 6013.95F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      homeDoorOrWindow0.containsPoint(1.0F, 3323.76F, 1.0F);
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.isBottomLeftPointAt(1.0F, 935.9999F, 1581.3062F);
      homeDoorOrWindow0.setNameYOffset(1.0F);
      homeDoorOrWindow1.setAngle((-1689.7671F));
      Float.valueOf(1.0F);
      homeDoorOrWindow1.getModel();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow2.setHeight(5.3559766F);
      homeDoorOrWindow1.isTopLeftPointAt(6013.95F, 935.9999F, (-1.0F));
      homeDoorOrWindow1.getAngle();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer integer0 = new Integer((-1557));
      Integer integer1 = new Integer((-1557));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-613.5F), (-1557), (-1557), (-1557), true, "", integer0, (float[][]) null, false, 2808.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getDescription();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homeDoorOrWindow1);
      homeDoorOrWindow1.setDepth(905.0F);
      homeDoorOrWindow0.isDeformable();
      homePieceOfFurniture0.setNameVisible(true);
      HomePieceOfFurniture.SortableProperty.values();
      homeDoorOrWindow1.setMovable(true);
      homeDoorOrWindow1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(1.0F, 0.0F, 1.0F, 0.0F, 333.244F);
      Sash sash1 = new Sash(1.0F, 0.0F, 3.259176F, 1474.1F, 1474.1F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1.0F, 3324.527F, 6013.95F, true, (-1689.7671F), 0.5649058F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.setDepth(2379.0F);
      homeDoorOrWindow0.isDeformable();
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow0.setY(0.5F);
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow0.isBottomRightPointAt(398.0F, (-1689.7671F), (-327.94F));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), 1.0F, 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), 1.0F, 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setModelMirrored(true);
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.isNameCenterPointAt(166.622F, 0.5F, 1581.3062F);
      homeDoorOrWindow1.setNameAngle(166.622F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, (-14.7048F), (-14.7048F), (-14.7048F), (-14.7048F), false, (-14.7048F), (-14.7048F), sashArray0, floatArray0, "i{Qd", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setName("i{Qd");
      homeDoorOrWindow0.isNameCenterPointAt((-14.7048F), 0.092076F, (-14.7048F));
      homeDoorOrWindow0.isBottomLeftPointAt((-14.7048F), (-14.7048F), (-14.7048F));
      homeDoorOrWindow0.setDescription("i{Qd");
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, (-1.0F), 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, (-1689.7671F), (-1.0F), 333.244F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.isNameCenterPointAt(166.622F, 0.5F, (-1689.7671F));
      homeDoorOrWindow1.isBottomLeftPointAt((-1.0F), (-1.0F), 1.0F);
      homeDoorOrWindow3.setDescription("i{Qd");
      homeDoorOrWindow3.setName("yr=2q%Y>d");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setY(1474.1F);
      homePieceOfFurniture0.getName();
      homeDoorOrWindow1.setName("");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1557));
      Integer.min((-1557), (-1557));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-613.5F), (-1557), (-1557), (-1557), true, "", integer0, (float[][]) null, false, 2808.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(2808.0F, (-1557), (-1.0F));
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setNameXOffset(0.3926991F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.isPointAt(2.1873832F, (-1.0F), 2.0F);
      Float float0 = new Float((-613.5F));
      homePieceOfFurniture0.isBottomLeftPointAt((-613.5F), (-2082.0F), (-1557));
      homePieceOfFurniture0.clone();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.getName();
      Float float0 = Float.valueOf((-1.0F));
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.setName("");
      homeDoorOrWindow1.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1557));
      Integer.min((-1557), (-1557));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-613.5F), (-1557), (-1557), (-1557), true, "", integer0, (float[][]) null, false, 2808.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(2808.0F, (-1557), (-1117.0F));
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setNameXOffset(0.3926991F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.isPointAt(2.1873832F, (-1.0F), 2.0F);
      Float float0 = new Float((-1117.0F));
      homePieceOfFurniture0.isBottomLeftPointAt((-1117.0F), (-2082.0F), (-1557));
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(1.0F, 4565.81F, 1.0F, 1581.3062F, 333.244F);
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 6013.95F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.containsPoint(333.244F, 3323.76F, 1.0F);
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.isBottomLeftPointAt(1.0F, 936.0F, 1581.3062F);
      homeDoorOrWindow0.setNameYOffset(1.0F);
      homeDoorOrWindow1.setAngle((-1689.7671F));
      Float float0 = Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow1.isBottomRightPointAt(1581.3062F, 1.0F, 1762.58F);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.clone();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.containsPoint(816.0F, 2.0F, 1.0F);
      homePieceOfFurniture0.getName();
      Float float0 = Float.valueOf((-1.0F));
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.setName("");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-304));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isNameCenterPointAt((-1.0F), 3016.0864F, 1587.0F);
      homePieceOfFurniture0.isNameVisible();
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), 1.0F, 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), 1.0F, 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float((float) 222);
      LightSource lightSource0 = new LightSource(1875.92F, 3489.2F, 0.0F, 222, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1687.8942F, 2383.896F, 0.0F, 222, float0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, (-1.0F), 0.0F, 222, float0);
      lightSourceArray0[2] = lightSource2;
      Float float1 = new Float(1168.875F);
      LightSource lightSource3 = new LightSource(2802.9F, 2383.896F, 2802.9F, 222, float1);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(3489.2F, 1141.11F, 0.0F, 546);
      lightSourceArray0[4] = lightSource4;
      Float float2 = new Float((-1623.7F));
      LightSource lightSource5 = new LightSource((-1.0F), 158.0F, 0.0F, (-1264), float2);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(1687.8942F, 0.0F, 1141.11F, (-1264));
      lightSourceArray0[6] = lightSource6;
      LightSource lightSource7 = new LightSource(0.0F, 158.0F, (-1623.7F), (-1264), float1);
      lightSourceArray0[7] = lightSource7;
      LightSource lightSource8 = new LightSource(3489.2F, 0.0F, 546, 46);
      lightSourceArray0[8] = lightSource8;
      BigDecimal bigDecimal1 = new BigDecimal(46);
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal1, bigDecimal1);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(1.0F, 0.0F, 1.0F, 0.0F, 333.244F);
      Sash sash1 = new Sash(1.0F, 0.0F, 3.4959633F, 1474.1F, 1474.1F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1580.5496F, 3324.527F, 6013.95F, true, (-1689.7671F), 3.4959633F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getName();
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      homeDoorOrWindow0.setName("CATALOG_ID");
      homeDoorOrWindow1.getGroundElevation();
      homeDoorOrWindow2.setHeight(3324.527F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.getStaircaseCutOutShape();
      homeDoorOrWindow2.getIcon();
      homeDoorOrWindow2.getModel();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1557));
      Integer integer1 = new Integer((-1557));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-613.5F), (-1557), (-1557), (-1557), true, "", integer0, (float[][]) null, false, 2808.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      homePieceOfFurniture0.isBottomRightPointAt(2808.0F, (-1557), (-1117.0F));
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setNameXOffset(0.3926991F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.isPointAt(2.1873832F, (-1.0F), 2.0F);
      Float float0 = new Float((-1117.0F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      homePieceOfFurniture0.getNameAngle();
      homePieceOfFurniture0.setElevation((-2499.533F));
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 1.3999095F, 1.3999095F, 0.68662703F, 333.0F);
      sashArray0[11] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 1.3999095F, 333.0F, (-1.0F), 333.0F, true, 333.0F, 2630.2837F, sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameXOffset(0.68662703F);
      homeDoorOrWindow0.intersectsRectangle((-1959.8458F), 333.0F, 0.3926991F, (-1959.8458F));
      homeDoorOrWindow0.setAngle(0.68662703F);
      homeDoorOrWindow0.getModel();
      homeDoorOrWindow0.getShininess();
      HomePieceOfFurniture.Property.values();
      Float float0 = new Float((double) (-1.0F));
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.getShininess();
      System.setCurrentTimeMillis((-1197L));
      homeDoorOrWindow0.getModelRotation();
      homeDoorOrWindow0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$4");
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(1168.875F);
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setMovable(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getValueAddedTaxPercentage();
      homeLight0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(1.0F, 0.0F, 1.0F, 0.0F, 333.244F);
      Sash sash1 = new Sash(1.0F, 0.0F, 3.259176F, 1474.1F, 1474.1F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1.0F, 3324.527F, 6013.95F, true, (-1689.7671F), 0.5649058F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.getDescription();
      Integer integer0 = new Integer((-3480));
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.getShininess();
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.setShininess((Float) null);
      homeDoorOrWindow0.isPointAt(0.0F, (-1689.7671F), 254.8785F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(4565.81F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 4565.81F, 1.0F, (-613.5F), 4565.81F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setWidth(4565.81F);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setY(0.0F);
      HomePieceOfFurniture.Property.values();
      homePieceOfFurniture0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 4565.81F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homePieceOfFurniture0.containsPoint(333.244F, 3323.76F, 1.0F);
      homePieceOfFurniture0.getName();
      Float float0 = Float.valueOf(333.244F);
      homeDoorOrWindow1.isBottomRightPointAt(1.0F, 4565.81F, 0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow1.isAtLevel((Level) null);
      homeDoorOrWindow0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.HomePieceOfFurniture$8", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy(")", propertyChangeListenerProxy0);
      Integer integer0 = new Integer((-1557));
      Integer integer1 = new Integer((-1557));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("e~53A?q", (Content) null, (Content) null, (-1.0F), 1.0F, 905.0F, (-613.5F), true, "", integer1, (float[][]) null, true, 1.0F, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(1581.3062F, (-1557), 1.0F);
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy1);
      homePieceOfFurniture0.setNameXOffset(0.3926991F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.isPointAt(1581.3062F, 1184.78F, (-306.75F));
      Float float0 = new Float(0.23516676F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homePieceOfFurniture0.isNameCenterPointAt((-613.5F), (-613.5F), 0.3926991F);
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("Aeil[7-HqY.Ajg o");
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow2.getIcon();
      // Undeclared exception!
      try { 
        homeDoorOrWindow2.setWidth((-1689.7671F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(1.0F, (-1.0F), 1.0F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[3][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1.0F, (-1689.7671F), 6013.95F, true, (-1689.7671F), (-1.0F), sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setNameVisible(false);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isVisible();
      homeDoorOrWindow1.getDescription();
      homeDoorOrWindow0.setColor((Integer) null);
      homeDoorOrWindow1.getShininess();
      homeDoorOrWindow1.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(1168.875F);
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setMovable(true);
      homeLight1.isVisible();
      homeLight0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 0.0F, (-1.0F), 1.0F, 1.0F, false, (-2381.2642F), 0.3926991F, sashArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.move(1872.0F, (-1.0F));
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.isNameCenterPointAt(0.0F, 1.0F, 1872.0F);
      homeDoorOrWindow0.setElevation((-1.0F));
      homeDoorOrWindow0.setNameAngle((-2532.295F));
      Float float0 = new Float((-1.0F));
      HomePieceOfFurniture.Property.values();
      Level level0 = new Level("U_\":b*!:d7#v", (-2279.489F), (-2279.489F), (-2279.489F));
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1872.0F;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "tutr2Uh(%", (String) null, (Content) null, (Content) null, (Content) null, 1872.0F, (-1.0F), 1.0F, 1.0F, false, (-2381.2642F), 0.3926991F, sashArray0, floatArray0, "E5%!@", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.move(1872.0F, (-1.0F));
      homePieceOfFurniture0.getName();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      homeDoorOrWindow0.removePropertyChangeListener(propertyChangeListenerProxy0);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setWidth(5.2831855F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), 3.5889637F, 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-19.228355F), 3.5889637F, 3.5889637F, 1474.1F, 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 3.5889637F, (-1689.7671F), 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow0.isNameCenterPointAt(166.622F, 0.5F, (-1689.7671F));
      homeDoorOrWindow1.isBottomLeftPointAt((-1.0F), 3.5889637F, 1474.1F);
      homeDoorOrWindow2.getNameStyle();
      homeDoorOrWindow1.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setVisible(false);
      homePieceOfFurniture0.getName();
      homeDoorOrWindow1.setName("");
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("d~KY)'Sc_VoGz]'u`7", propertyChangeListener0);
      homeDoorOrWindow0.removePropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setNameVisible(false);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal((-0.10586685062869915));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-304));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isNameCenterPointAt((-1117.0F), 3016.0864F, (-1811.6865F));
      homePieceOfFurniture0.isNameVisible();
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.isResizable();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 4545.4966F, 1.0F, (-613.5F), 4545.4966F, false, false, integer0, (float[][]) null, false, (-613.5F), false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), (-1.0F), (-1.0F), 850.5613F, 333.244F);
      sashArray0[1] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "8{014Qr", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, (-1.0F), 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homeDoorOrWindow0);
      homeDoorOrWindow0.move(4.2175255F, (-1284.0F));
      homePieceOfFurniture1.setNameAngle(2303.696F);
      homeDoorOrWindow0.setDepth(0.0F);
      homeDoorOrWindow0.isDeformable();
      TextStyle textStyle0 = new TextStyle((-1.0F));
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.setColor((Integer) null);
      homePieceOfFurniture0.getNameAngle();
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj!jG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 4565.81F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.getColor();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isNameCenterPointAt((-1117.0F), 3016.0864F, 1587.0F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.getName();
      homePieceOfFurniture0.isPointAt(1.0F, (-1.0F), 2.0F);
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture0.setMovable(false);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal1 = new BigDecimal((-2283));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, 3766.74F, 2231.093F, 333.244F, 6013.95F, true, 2.0F, 6013.95F, sashArray0, floatArray0, "", true, bigDecimal1, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getGroundElevation();
      bigDecimal1.abs();
      homeDoorOrWindow0.isTopRightPointAt(68.454124F, 2231.093F, (-3216.0032F));
      HomePieceOfFurniture.SortableProperty.values();
      homeDoorOrWindow0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      int int0 = (-9);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        MockURL.URL("W7Z-lzd", "", (-9), "", uRLStreamHandler0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-9
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj!jG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 4565.81F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 4565.81F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homePieceOfFurniture0.containsPoint(333.244F, 3323.76F, 1.0F);
      homePieceOfFurniture0.getName();
      Float float0 = Float.valueOf(333.244F);
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow1.isBottomRightPointAt(1.0F, 4565.81F, 0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow1.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1872.0F;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, (Content) null, (Content) null, (Content) null, 1872.0F, (-1.0F), 1.0F, 1.0F, false, (-2381.2642F), 0.3926991F, sashArray0, floatArray0, "E5%!@", false, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getCategory();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.isBottomRightPointAt((-1.0F), (-1.0F), 1872.0F);
      homePieceOfFurniture0.move(1872.0F, (-1.0F));
      homePieceOfFurniture0.getName();
      homeDoorOrWindow0.isNameCenterPointAt(1872.0F, 1.0F, 5.3785872F);
      homeDoorOrWindow0.setElevation(5.3785872F);
      homeDoorOrWindow0.getShininess();
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1464L);
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isResizable();
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      homePieceOfFurniture0.getValueAddedTaxPercentage();
      homePieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture1.isBottomLeftPointAt((-613.5F), 851.2799F, 454.0F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, (-1689.7671F), 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.isNameCenterPointAt(166.622F, 0.5F, (-1689.7671F));
      homeDoorOrWindow1.isBottomLeftPointAt((-1.0F), (-1.0F), 1474.1F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), 3.5889637F, 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-19.228355F), 3.5889637F, 3.5889637F, 1474.1F, 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 3.5889637F, (-1689.7671F), 3323.76F, 6013.95F, true, (-1689.7671F), 2.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameAngle(4565.81F);
      TextStyle textStyle0 = new TextStyle(3555.5F);
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(true);
      homeDoorOrWindow2.setNameStyle(textStyle1);
      homeDoorOrWindow0.isNameCenterPointAt(166.622F, (-13.997138F), (-1689.7671F));
      homeDoorOrWindow1.isBottomLeftPointAt((-1.0F), 3.5889637F, 1474.1F);
      homeDoorOrWindow2.getNameStyle();
      homeDoorOrWindow1.isDoorOrWindow();
      homeDoorOrWindow1.setX(166.622F);
      homeDoorOrWindow2.getNameYOffset();
      homeDoorOrWindow0.setX((-19.228355F));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1872.0F;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, (Content) null, (Content) null, (Content) null, 1872.0F, (-1.0F), 1.0F, 1.0F, false, (-2381.2642F), 0.3926991F, sashArray0, floatArray0, "E5%!@", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.move(1872.0F, (-1.0F));
      homePieceOfFurniture0.getName();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      homeDoorOrWindow0.removePropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.getName();
      homeDoorOrWindow1.setName("");
      homePieceOfFurniture0.setNameAngle((-1.0F));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-qY.Aj o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1.0F, 3324.0F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.isNameCenterPointAt(166.622F, 0.5F, 1.0F);
      homeDoorOrWindow1.isBottomLeftPointAt((-1.0F), (-1.0F), 1474.1F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      float float0 = 333.244F;
      Sash sash0 = new Sash((-1.0F), (-14.7048F), (-14.7048F), 0.68662703F, 333.244F);
      sashArray0[11] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, (-14.7048F), (-1689.7671F), (-1.0F), 333.244F, false, (-1689.7671F), 2630.2837F, sashArray0, floatArray0, "i{Qd", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName("i{Qd");
      homeDoorOrWindow1.setNameAngle(3800.4F);
      homeDoorOrWindow0.isNameCenterPointAt(166.622F, 0.092076F, (-1689.7671F));
      homeDoorOrWindow1.isBottomLeftPointAt(0.68662703F, (-14.7048F), (-14.7048F));
      homeDoorOrWindow2.setDescription("i{Qd");
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal1 = new BigDecimal((-2283));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, 3766.74F, 2231.093F, 333.244F, 6013.95F, true, 2.0F, 6013.95F, sashArray0, floatArray0, "", true, bigDecimal1, bigDecimal0);
      bigDecimal1.toString();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getGroundElevation();
      HomePieceOfFurniture.SortableProperty.values();
      homeDoorOrWindow0.isBottomLeftPointAt(333.244F, 2.0F, 6013.95F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(0.68662703F, 4565.81F, 0.68662703F, 1.0F, 333.244F);
      Sash sash1 = new Sash((-1.0F), 1.0F, 1.0F, 0.68662703F, 333.244F);
      sashArray0[11] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, (-1689.7671F), (-1.0F), 333.244F, true, (-1689.7671F), 1436.1443F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow2.isPointAt(1.0F, 3019.0F, 3019.0F);
      homeDoorOrWindow2.isTopRightPointAt(1.0F, 205.0F, (-1689.7671F));
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.isNameCenterPointAt(166.622F, 0.5F, (-1689.7671F));
      homeDoorOrWindow1.isBottomLeftPointAt(0.68662703F, 1.0F, 1.0F);
      homeDoorOrWindow3.setDescription("i{Qd");
      homeDoorOrWindow3.setName("yr=2q%Y>d");
      homeDoorOrWindow0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1872.0F;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, (Content) null, (Content) null, (Content) null, 1872.0F, (-1.0F), 1.0F, 1.0F, false, (-2381.2642F), 0.3926991F, sashArray0, floatArray0, "E5%!@", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.isBottomRightPointAt((-1.0F), (-1.0F), 1872.0F);
      homePieceOfFurniture0.move(1872.0F, (-1.0F));
      homePieceOfFurniture0.getName();
      homeDoorOrWindow0.isNameCenterPointAt(1872.0F, 1.0F, 5.3785872F);
      homeDoorOrWindow0.setElevation(5.3785872F);
      homeDoorOrWindow0.setNameAngle((-2532.295F));
      homePieceOfFurniture0.getShininess();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, (-1.0F), 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setDepth(0.0F);
      homeDoorOrWindow0.isDeformable();
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.isVisible();
      bigDecimal0.longValue();
      Float float0 = new Float(790.6531F);
      TextStyle textStyle0 = new TextStyle((-71.051F), true, true);
      homePieceOfFurniture0.setNameStyle(textStyle0);
      homePieceOfFurniture0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homeDoorOrWindow1);
      homeDoorOrWindow1.setDepth(905.0F);
      homeDoorOrWindow0.isDeformable();
      homePieceOfFurniture0.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "kMn9.z", "kMn9.z", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3324.527F, 1.0F, true, (-1689.7671F), 1.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameYOffset(1581.3062F);
      homeDoorOrWindow0.intersectsRectangle(3324.527F, 1.0F, 0.3926991F, 333.244F);
      homeDoorOrWindow1.setAngle(0.0F);
      homeDoorOrWindow1.getModel();
      homeDoorOrWindow1.getNameXOffset();
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 0.0F, 732.0F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(4565.81F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 4565.81F, 1.0F, (-613.5F), 4565.81F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setWidth(4565.81F);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isMovable();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setY(0.0F);
      homePieceOfFurniture0.setName("");
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(1168.875F);
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1876.7365F, 3489.2F, 1876.7365F, 1876.7365F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setMovable(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getTexture();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1557));
      Integer.min((-1557), (-1557));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-613.5F), (-1557), (-1557), (-1557), true, "", integer0, (float[][]) null, false, 2808.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(2808.0F, (-1557), (-1117.0F));
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setNameXOffset(0.3926991F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.isPointAt(2.1873832F, (-1.0F), 2.0F);
      Integer.remainderUnsigned(207, (-1557));
      Float float0 = new Float((-1117.0F));
      homePieceOfFurniture0.isBottomLeftPointAt((-1117.0F), (-2082.0F), (-1557));
      homePieceOfFurniture0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isNameCenterPointAt((-1117.0F), 3016.0864F, 1587.0F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.getName();
      homePieceOfFurniture0.isPointAt(1.0F, (-1.0F), 2.0F);
      homePieceOfFurniture0.getShininess();
      homePieceOfFurniture0.isBottomRightPointAt((-1.0F), 0.5F, 903.37115F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(1.0F, 4565.81F, 1.0F, (-1.0F), (-1.0F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 4565.81F, (-1.0F), (-1.0F));
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal((-1.0F));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 294.12F, 3323.76F, 6013.95F, true, (-1.0F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("Aeil[7-HqY.Ajg o");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.containsPoint(1.0F, 3323.76F, 1.0F);
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.setNameYOffset((-0.0054701567F));
      Float float0 = Float.valueOf(1.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.containsPoint((-1.0F), (-1.0F), (-979.9303F));
      homeDoorOrWindow1.containsPoint(0.0F, 6013.95F, 0.0F);
      homeDoorOrWindow1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-27.869125F), 4565.81F, (-27.869125F), (-1.0F), 333.2F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      System.setCurrentTimeMillis(1L);
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX_PERCENTAGE", "", "VALUE_ADDED_TAX_PERCENTAGE", (Content) null, (Content) null, (Content) null, 0.0F, (-1.0F), 1581.3062F, 1L, false, lightSourceArray0, floatArray0, "", true, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getLevel();
      Integer integer0 = new Integer(0);
      integer0.equals((Object) null);
      homeLight0.setColor(integer0);
      homeLight0.setLevel((Level) null);
      homeLight0.getCurrency();
      homeLight0.getTexture();
      Level level0 = new Level("VALUE_ADDED_TAX_PERCENTAGE", (-3393.9F), (-1.0F), (-1.0F));
      homeLight0.setLevel(level0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, (Content) null, (Content) null, (Content) null, 1872.0F, (-1.0F), 1.0F, 1.0F, false, (-2381.2642F), 0.3927F, sashArray0, floatArray0, "E5%!@", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow1.clone();
      homeDoorOrWindow2.isBottomRightPointAt((-1.0F), (-1.0F), 1872.0F);
      homeDoorOrWindow1.move(1872.0F, (-1.0F));
      homeDoorOrWindow2.setNameAngle(1872.0F);
      homeDoorOrWindow2.getPoints();
      homeDoorOrWindow2.getName();
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow4 = homeDoorOrWindow2.clone();
      homeDoorOrWindow4.getShininess();
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow2.setNameStyle((TextStyle) null);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj!jG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 4565.81F, 1.0F, (-613.5F), 4565.81F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      TextStyle textStyle0 = new TextStyle(2.0F);
      homePieceOfFurniture0.setNameStyle(textStyle0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setY(0.0F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(1.0F, 4565.81F, 1.0F, (-1.0F), (-1.0F));
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(4565.81F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 6013.95F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.containsPoint(1.0F, 3323.76F, 1.0F);
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.isBottomLeftPointAt(1.0F, 936.0F, 1581.3062F);
      homeDoorOrWindow0.setNameYOffset(1.0F);
      homeDoorOrWindow1.setAngle((-1689.7671F));
      Float float0 = Float.valueOf(1.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow0.isBottomRightPointAt(936.0F, 790.1531F, (-1.0F));
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer((-1536));
      Integer integer1 = new Integer((-1536));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 4565.81F, (-613.5F), (-1536), (-1536), false, integer0, (float[][]) null, true, 2808.0F, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(2808.0F, (-1536), (-1.0F));
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.isPointAt(2.1873832F, (-1.0F), 2.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture.Property.values();
      homePieceOfFurniture0.isTopLeftPointAt(2.1873832F, 1102.8F, 231.6F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-615.5619F), 1.0F, true, true, integer0, (float[][]) null, false, (-615.5619F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(905.0F);
      homePieceOfFurniture0.getX();
      homePieceOfFurniture0.getNameStyle();
      homePieceOfFurniture0.getHeight();
      homePieceOfFurniture0.getWidth();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(1.0F, 4565.81F, 1.0F, (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 4565.81F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 294.12F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.containsPoint(333.244F, 3323.76F, 1.0F);
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.setNameYOffset((-0.0054701567F));
      Float float0 = Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.containsPoint(333.244F, 333.244F, (-979.9303F));
      homeDoorOrWindow1.containsPoint(0.0F, 6013.95F, 0.0F);
      homeDoorOrWindow1.getValueAddedTax();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("&|~.#uewv\u0001{J<", (PropertyChangeListener) null);
      homeDoorOrWindow1.addPropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      float[][] floatArray0 = new float[3][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 39.970642F, 39.970642F, (-1689.7671F), 6013.95F, true, (-1689.7671F), (-1.0F), sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      homeDoorOrWindow0.getColor();
      homeDoorOrWindow0.getPoints();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.getName();
      Float float0 = Float.valueOf((-1.0F));
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.setName("");
      homeDoorOrWindow1.getLevel();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("o}i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 2919.154F, 3323.76F, 3323.76F, true, 2919.154F, 0.0F, sashArray0, floatArray0, "o}i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow1.getName();
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("Linux");
      homeDoorOrWindow3.setY(2303.696F);
      homeDoorOrWindow1.setNameAngle(1.0F);
      homeDoorOrWindow1.setNameAngle(1.0F);
      homeDoorOrWindow3.isNameCenterPointAt(1474.1F, 492.32922F, 1.0F);
      homeDoorOrWindow3.setElevation(3323.76F);
      homeDoorOrWindow3.setY(1.0F);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", "", (Content) null, (Content) null, (Content) null, 4565.81F, 1.0F, (-1566), (-1566), false, "", (float[][]) null, "", false, false, true, bigDecimal0, bigDecimal0, "");
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setDepth(905.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-5.1289005F), 4565.81F, (-5.1289005F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-5.1289005F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, (-5.1289005F), 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.5649058F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      homeDoorOrWindow1.intersectsRectangle(3323.76F, (-5.1289005F), 0.3926991F, 333.244F);
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.setAngle(0.0F);
      homeDoorOrWindow3.setWidth((-5.1289005F));
      homeDoorOrWindow0.getLevel();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(1168.875F);
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setMovable(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight1.isModelMirrored();
      homeLight0.isNameCenterPointAt(3489.2F, 3489.2F, (-3039.0F));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(0.68662703F, 4565.81F, 0.68662703F, (-1.0F), 333.244F);
      Sash sash1 = new Sash((-1.0F), (-1.0F), (-1.0F), 0.68662703F, 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, (-1689.7671F), (-1.0F), 333.244F, true, (-1689.7671F), 1436.1443F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.isNameCenterPointAt(166.622F, 0.5F, (-1689.7671F));
      homeDoorOrWindow1.isBottomLeftPointAt(0.68662703F, (-1.0F), 1.0F);
      homeDoorOrWindow3.setDescription("i{Qd");
      homeDoorOrWindow3.move(0.0F, 333.244F);
      homeDoorOrWindow3.setName("yr=2q%Y>d");
      homeDoorOrWindow0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal1 = new BigDecimal((-2283));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("#%|UH4O-T*xS9-'", "$9Qd", "", (Content) null, (Content) null, 3766.74F, 2231.093F, 333.244F, 1762.58F, true, 2.0F, 6013.95F, sashArray0, floatArray0, "#%|UH4O-T*xS9-'", true, bigDecimal1, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomRightPointAt(110.0F, 333.244F, 6013.95F);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("o}i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 2919.154F, 3323.76F, 3323.76F, true, 2919.154F, 0.0F, sashArray0, floatArray0, "o}i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow1.getName();
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("Linux");
      homeDoorOrWindow3.setY(2303.696F);
      homeDoorOrWindow1.setNameAngle(1.0F);
      homeDoorOrWindow1.setNameAngle(1.0F);
      homeDoorOrWindow3.isNameCenterPointAt(1474.1F, 492.32922F, 1.0F);
      homeDoorOrWindow3.setElevation(3323.76F);
      homeDoorOrWindow3.getShininess();
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow1.setShininess((Float) null);
      homeDoorOrWindow0.getShininess();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal1 = new BigDecimal((-2283));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("#%|UH4Os-T*xS9-'", "$9Qd", "", (Content) null, (Content) null, 3766.74F, 2230.9F, 3323.76F, 1762.58F, true, 2.0F, 6013.95F, sashArray0, floatArray0, "#%|UH4Os-T*xS9-'", true, bigDecimal1, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomRightPointAt(110.0F, 3323.76F, 3.4028235E38F);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), (-1.0F), 1474.1F, 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, (-1689.7671F), 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      String[] stringArray0 = new String[0];
      Float float0 = new Float(1474.1F);
      LightSource[] lightSourceArray0 = new LightSource[5];
      Float float1 = new Float(0.0F);
      float1.floatValue();
      LightSource lightSource0 = new LightSource(1474.1F, 905.8663F, 1.0F, (-3300), (Float) 0.0F);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(588.15454F, (-1.0F), (-1261.457F), (-3300), float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, (-1.0F), (-1689.7671F), (-3300));
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(0.0F, 1581.3062F, 3323.76F, (-3300));
      lightSourceArray0[3] = lightSource3;
      Float.floatToIntBits(2248.558F);
      LightSource lightSource4 = new LightSource(333.244F, (-1.0F), (-2098.2F), (-3300), (Float) 2248.558F);
      lightSourceArray0[4] = lightSource4;
      CatalogLight catalogLight0 = new CatalogLight("", "i{Qd", "0_FwPF@zRm", "Aeil[7-HqY.Ajg o", stringArray0, (Long) null, float0, (Content) null, (Content) null, (Content) null, (-1261.457F), 0.0F, 6961.3955F, (-1689.7671F), true, lightSourceArray0, "com.eteks.sweethome3d.model.Level", floatArray0, "com.eteks.sweethome3d.tools.OperatingSystem$3", true, false, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.tools.OperatingSystem$3");
      catalogDoorOrWindow0.compareTo((CatalogPieceOfFurniture) catalogLight0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getName();
      homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow2.isAtLevel((Level) null);
      homeDoorOrWindow0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 1.3999095F, 1.3999095F, 0.68662703F, 333.0F);
      sashArray0[11] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 1.3999095F, 333.0F, (-1.0F), 333.0F, true, 333.0F, 2630.2837F, sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      bigDecimal0.toPlainString();
      homeDoorOrWindow0.isNameCenterPointAt(1.3999095F, 0.092076F, 1.3999095F);
      homeDoorOrWindow0.intersectsRectangle(0.092076F, 0.3926991F, 270.81F, 0.092076F);
      homeDoorOrWindow0.isTexturable();
      homeDoorOrWindow0.getIcon();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1872.0F;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, (Content) null, (Content) null, (Content) null, 1872.0F, (-1.0F), 1.0F, 1.0F, false, (-2381.2642F), 0.3926991F, sashArray0, floatArray0, "E5%!@", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.isBottomRightPointAt((-1.0F), (-1.0F), 1872.0F);
      homePieceOfFurniture0.move(1872.0F, (-1.0F));
      homePieceOfFurniture0.getName();
      homeDoorOrWindow0.isNameCenterPointAt(1872.0F, 1.0F, 5.3785872F);
      homePieceOfFurniture0.isNameCenterPointAt(3047.8645F, (-1222.64F), (-2532.295F));
      homeDoorOrWindow1.setNameAngle(333.244F);
      homeDoorOrWindow1.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-304));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), (-1.0F), true, true, integer0, (float[][]) null, false, (-613.5F), true);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isNameCenterPointAt((-1117.0F), 905.0F, (-1811.6865F));
      homePieceOfFurniture0.isNameVisible();
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.isResizable();
      homePieceOfFurniture0.setDepth(1.0F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 4565.81F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homePieceOfFurniture0.containsPoint(333.244F, 3323.76F, 1.0F);
      homePieceOfFurniture0.getName();
      Float float0 = Float.valueOf(333.244F);
      homeDoorOrWindow1.isBottomRightPointAt(1.0F, 4565.81F, (-706.6972F));
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow1.isAtLevel((Level) null);
      homePieceOfFurniture0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 1.3999095F, 1.3999095F, 0.68662703F, 333.0F);
      sashArray0[11] = sash0;
      Integer integer0 = new Integer(2354);
      Integer.valueOf(983);
      Integer.valueOf(1);
      Integer.valueOf(1);
      Integer integer1 = Integer.valueOf(983);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-1566), 1.3999095F, (-3619.0F), (-1730.9323F), true, true, integer1, (float[][]) null, true, 1, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setWidth((-3619.0F));
      homePieceOfFurniture0.setDepth((-979.9229F));
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setY(0.3926991F);
      HomePieceOfFurniture.Property.values();
      homePieceOfFurniture0.getPrice();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = Integer.valueOf(2719);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("5jWK'KjQ0~z", (Content) null, (Content) null, (-2684.3748F), 333.244F, 0.0F, 333.244F, false, false, integer0, (float[][]) null, true, 2112.5F, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.getWidth();
      homePieceOfFurniture0.isBottomRightPointAt(2112.5F, 0.0F, 144.324F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 4545.4966F, 1.0F, (-613.5F), 4545.4966F, false, false, integer0, (float[][]) null, false, (-613.5F), false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(1634.259F, 4545.4966F, (-2996.7358F), (-216.9835F), (-1.0F));
      sashArray0[0] = sash0;
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      Sash sash1 = new Sash((-1.0F), 1.313373F, 1.0F, (-3132.6262F), 1.313373F);
      sashArray0[1] = sash1;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.tools.ResourceURLContent", "", "", (Content) null, (Content) null, (Content) null, 5353.39F, 1.0F, (-613.5F), (-3132.6262F), true, (-3132.6262F), 799.973F, sashArray0, (float[][]) null, "", false, false, true, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.tools.ResourceURLContent");
      catalogPieceOfFurniture0.compareTo((CatalogPieceOfFurniture) catalogDoorOrWindow0);
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(1168.875F);
      assertEquals(1168.875F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1875.92F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("/%2?\" m7Tr", catalogLight0.getName());
      assertEquals(1875.92F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getCreator());
      assertEquals(3489.2F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogLight0.getDescription());
      assertEquals(1875.92F, catalogLight0.getWidth(), 0.01F);
      assertNotNull(catalogLight0);
      assertEquals(9, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1875.92F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("/%2?\" m7Tr", catalogLight0.getName());
      assertEquals(1875.92F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getCreator());
      assertEquals(3489.2F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogLight0.getDescription());
      assertEquals(1875.92F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1875.92F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(937.96F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(1744.6F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(1875.92F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3489.2F, homeLight0.getDepth(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getName());
      assertEquals(1875.92F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1875.92F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNotNull(homeLight0);
      assertEquals(9, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1875.92F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("/%2?\" m7Tr", catalogLight0.getName());
      assertEquals(1875.92F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getCreator());
      assertEquals(3489.2F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogLight0.getDescription());
      assertEquals(1875.92F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1875.92F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(937.96F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(1744.6F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(1875.92F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3489.2F, homeLight0.getDepth(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getName());
      assertEquals(1875.92F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1875.92F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1875.92F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(3489.2F, homeLight1.getDepth(), 0.01F);
      assertEquals(1875.92F, homeLight1.getWidth(), 0.01F);
      assertEquals(1875.92F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(1744.6F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(1875.92F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(937.96F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("/%2?\" m7Tr", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight1.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight1.getDescription());
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(9, lightSourceArray0.length);
      
      homeLight1.setMovable(true);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1875.92F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("/%2?\" m7Tr", catalogLight0.getName());
      assertEquals(1875.92F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getCreator());
      assertEquals(3489.2F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogLight0.getDescription());
      assertEquals(1875.92F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1875.92F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(937.96F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(1744.6F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(1875.92F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3489.2F, homeLight0.getDepth(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getName());
      assertEquals(1875.92F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1875.92F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1875.92F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(3489.2F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(1875.92F, homeLight1.getWidth(), 0.01F);
      assertEquals(1875.92F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(1744.6F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(1875.92F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(937.96F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("/%2?\" m7Tr", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight1.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight1.getDescription());
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(9, lightSourceArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1875.92F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("/%2?\" m7Tr", catalogLight0.getName());
      assertEquals(1875.92F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getCreator());
      assertEquals(3489.2F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogLight0.getDescription());
      assertEquals(1875.92F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1875.92F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(937.96F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(1744.6F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(1875.92F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3489.2F, homeLight0.getDepth(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getName());
      assertEquals(1875.92F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1875.92F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1875.92F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(3489.2F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(1875.92F, homeLight1.getWidth(), 0.01F);
      assertEquals(1875.92F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(1744.6F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(1875.92F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(937.96F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("/%2?\" m7Tr", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight1.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight1.getDescription());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(1875.92F, homeLight2.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight2.getDescription());
      assertEquals(1875.92F, homeLight2.getHeight(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight2.getName());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertEquals(1875.92F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(937.96F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(1744.6F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(1875.92F, homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(3489.2F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(9, lightSourceArray0.length);
      
      homeLight0.setNameAngle((-2686.1936F));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1875.92F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("/%2?\" m7Tr", catalogLight0.getName());
      assertEquals(1875.92F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getCreator());
      assertEquals(3489.2F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogLight0.getDescription());
      assertEquals(1875.92F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1875.92F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(937.96F, homeLight0.getX(), 0.01F);
      assertEquals(3.009708F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(1744.6F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(1875.92F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3489.2F, homeLight0.getDepth(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getName());
      assertEquals(1875.92F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1875.92F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(9, lightSourceArray0.length);
      
      homeLight0.setDescription("b5/");
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1875.92F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("/%2?\" m7Tr", catalogLight0.getName());
      assertEquals(1875.92F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getCreator());
      assertEquals(3489.2F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogLight0.getDescription());
      assertEquals(1875.92F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1875.92F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(937.96F, homeLight0.getX(), 0.01F);
      assertEquals(3.009708F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(1744.6F, homeLight0.getY(), 0.01F);
      assertEquals("b5/", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(1875.92F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3489.2F, homeLight0.getDepth(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getName());
      assertEquals(1875.92F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1875.92F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(9, lightSourceArray0.length);
      
      Content content0 = homeLight1.getIcon();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1875.92F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("/%2?\" m7Tr", catalogLight0.getName());
      assertEquals(1875.92F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getCreator());
      assertEquals(3489.2F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogLight0.getDescription());
      assertEquals(1875.92F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1875.92F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(937.96F, homeLight0.getX(), 0.01F);
      assertEquals(3.009708F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(1744.6F, homeLight0.getY(), 0.01F);
      assertEquals("b5/", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(1875.92F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3489.2F, homeLight0.getDepth(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getName());
      assertEquals(1875.92F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1875.92F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1875.92F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(3489.2F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(1875.92F, homeLight1.getWidth(), 0.01F);
      assertEquals(1875.92F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(1744.6F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(1875.92F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(937.96F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("/%2?\" m7Tr", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight1.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight1.getDescription());
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(content0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(9, lightSourceArray0.length);
      
      TextStyle textStyle0 = homeLight0.getNameStyle();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1875.92F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("/%2?\" m7Tr", catalogLight0.getName());
      assertEquals(1875.92F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getCreator());
      assertEquals(3489.2F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogLight0.getDescription());
      assertEquals(1875.92F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1875.92F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(937.96F, homeLight0.getX(), 0.01F);
      assertEquals(3.009708F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(1744.6F, homeLight0.getY(), 0.01F);
      assertEquals("b5/", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals(1875.92F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(3489.2F, homeLight0.getDepth(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getName());
      assertEquals(1875.92F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(1875.92F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertNull(textStyle0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(9, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomeFurnitureGroup", "com.eteks.sweethome3d.model.HomeFurnitureGroup", "com.eteks.sweethome3d.model.HomeFurnitureGroup", (Content) null, (Content) null, 0.0F, (-105.0F), 165.622F, 451.0F, true, (-105.0F), 333.244F, sashArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isTopLeftPointAt(1474.1F, 6013.95F, 6013.95F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float((float) 222);
      LightSource lightSource0 = new LightSource(1875.92F, 3489.2F, 0.0F, 222, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1687.8942F, 2383.896F, 0.0F, 222, float0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, (-1.0F), 0.0F, 222, float0);
      lightSourceArray0[2] = lightSource2;
      Float float1 = new Float(1168.875F);
      LightSource lightSource3 = new LightSource(2802.9F, 2383.896F, 2802.9F, 222, float1);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(3489.2F, 1141.11F, 0.0F, 546);
      lightSourceArray0[4] = lightSource4;
      Float float2 = new Float((-1623.7F));
      LightSource lightSource5 = new LightSource((-1.0F), 158.0F, 0.0F, (-1264), float2);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(1687.8942F, 0.0F, 1141.11F, (-1264));
      lightSourceArray0[6] = lightSource6;
      LightSource lightSource7 = new LightSource(0.0F, 158.0F, (-1623.7F), (-1264), float1);
      lightSourceArray0[7] = lightSource7;
      LightSource lightSource8 = new LightSource(3489.2F, 0.0F, 546, 46);
      lightSourceArray0[8] = lightSource8;
      BigDecimal bigDecimal0 = new BigDecimal(46);
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getAngle();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[7];
      Sash sash0 = new Sash(134.48123F, 173.0F, (-1844.8129F), 2810.14F, 134.48123F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.3926991F, (-403.05783F), (-403.05783F), 0.5F, 3.4028235E38F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-1.0F), (-4254.1294F), 1.0F, 1.0F, (-1.0F));
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(0.0F, 1.0F, (-1844.8129F), 277.09454F, 0.5F);
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(2810.14F, 0.0F, 1.0F, 0.0F, 173.0F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(2601.841F, 0.0F, (-1844.8129F), 0.0F, (-1844.8129F));
      sashArray0[5] = sash5;
      Sash sash6 = new Sash((-4254.1294F), 0.0F, (-989.9386F), 0.5F, 3.4028235E38F);
      sashArray0[6] = sash6;
      Integer integer0 = Integer.valueOf(2719);
      float[][] floatArray0 = new float[7][7];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 173.0F;
      floatArray1[1] = (-1.0F);
      floatArray1[2] = 1.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[8];
      floatArray2[0] = 2810.14F;
      floatArray2[1] = 3.4028235E38F;
      floatArray2[2] = 134.48123F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = (-403.05783F);
      floatArray2[5] = 2601.841F;
      floatArray2[6] = 0.0F;
      floatArray2[7] = (float) 2719;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.3926991F;
      floatArray3[3] = 0.5F;
      floatArray3[4] = 3.4028235E38F;
      floatArray3[5] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[2];
      floatArray5[0] = 1.0F;
      floatArray5[1] = 0.3926991F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[2];
      floatArray6[0] = (float) 2719;
      floatArray6[1] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[8];
      floatArray7[0] = (float) 2719;
      floatArray7[1] = 0.5F;
      floatArray7[2] = 1.0F;
      floatArray7[3] = 0.0F;
      floatArray7[4] = 3.4028235E38F;
      floatArray7[5] = 0.0F;
      floatArray7[6] = 0.0F;
      floatArray7[7] = 0.5F;
      floatArray0[6] = floatArray7;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", resourceURLContent0, resourceURLContent0, (-4254.1294F), (-4254.1294F), 0.5F, (-4254.1294F), false, 173.0F, 2810.14F, sashArray0, integer0, floatArray0, true, 0.0F, true);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setAngle(1.0F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 333.244F);
      sashArray0[1] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "8{014Qr", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, (-1.0F), 6013.95F, true, (-1689.7671F), 333.244F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      bigDecimal0.longValue();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homeDoorOrWindow0);
      homeDoorOrWindow0.setDepth((-1.0F));
      homeDoorOrWindow0.isDeformable();
      homePieceOfFurniture0.setHeight((-36.655F));
      homeDoorOrWindow0.getName();
      homePieceOfFurniture1.isNameCenterPointAt(1581.3062F, (-1.8478802F), 1581.3062F);
      homeDoorOrWindow0.setElevation(790.1531F);
      homePieceOfFurniture0.isNameCenterPointAt(6013.95F, 6013.95F, 1581.3062F);
      homePieceOfFurniture0.setElevation(0.5649058F);
      homePieceOfFurniture0.getShininess();
      HomePieceOfFurniture.Property.values();
      homePieceOfFurniture0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(1.0F, 0.0F, 1.0F, 0.0F, 333.244F);
      Sash sash1 = new Sash(1.0F, 0.0F, 3.259176F, 1474.1F, 1474.1F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3324.527F, 6013.95F, true, (-1689.7671F), 0.5649058F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getName();
      homeDoorOrWindow1.getDescription();
      Integer integer0 = new Integer((-3480));
      homeDoorOrWindow1.setColor(integer0);
      homeDoorOrWindow1.getShininess();
      homeDoorOrWindow1.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Sash sash0 = new Sash((-27.869125F), 4565.81F, (-27.869125F), (-1.0F), 333.2F);
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      System.setCurrentTimeMillis(1L);
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX_PERCENTAGE", "", "VALUE_ADDED_TAX_PERCENTAGE", (Content) null, (Content) null, (Content) null, 0.0F, (-1.0F), 1581.3062F, 1L, false, lightSourceArray0, floatArray0, "", true, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getLevel();
      homeLight0.setLevel((Level) null);
      homeLight0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), (-14.7048F), (-14.7048F), 0.68662703F, (-1.0F));
      float[][] floatArray0 = new float[5][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, (-14.7048F), (-1689.7671F), (-1.0F), 0.68662703F, false, (-1689.7671F), 2630.2837F, sashArray0, floatArray0, "i{Qd", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName("i{Qd");
      homeDoorOrWindow1.isBottomLeftPointAt((-1.0F), 2.1873832F, 1045.8285F);
      homeDoorOrWindow2.setName("");
      homeDoorOrWindow1.getGroundElevation();
      // Undeclared exception!
      try { 
        homeDoorOrWindow2.setHeight(0.5F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(1.0F, 1.0F, 1.0F, (-1.0F), (-1.0F));
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      Float.valueOf(1.0F);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "0au}Lbs ;m@COKn74c<";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = "0au}Lbs ;m@COKn74c<";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Float float0 = new Float(0.5F);
      Integer integer0 = new Integer((-344));
      float[][] floatArray1 = new float[9][1];
      float[] floatArray2 = new float[3];
      floatArray2[0] = 0.5F;
      floatArray2[1] = 0.5F;
      floatArray2[2] = 0.5F;
      floatArray1[0] = floatArray2;
      float[] floatArray3 = new float[7];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 1.0F;
      floatArray3[2] = (float) (-344);
      floatArray3[3] = 0.0F;
      floatArray3[4] = 0.5F;
      floatArray3[5] = 0.0F;
      floatArray3[6] = 0.0F;
      floatArray1[1] = floatArray3;
      float[] floatArray4 = new float[6];
      floatArray4[0] = 0.5F;
      floatArray4[1] = 898.6247F;
      floatArray4[2] = 898.6247F;
      floatArray4[3] = (float) (-344);
      floatArray4[4] = (float) (-344);
      floatArray4[5] = 0.5F;
      floatArray1[2] = floatArray4;
      float[] floatArray5 = new float[9];
      floatArray5[0] = 1.0F;
      floatArray5[1] = 0.5F;
      floatArray5[2] = 898.6247F;
      floatArray5[3] = 1516.9651F;
      floatArray5[4] = 0.0F;
      floatArray5[5] = 0.0F;
      floatArray5[6] = 898.6247F;
      floatArray5[7] = 0.0F;
      floatArray5[8] = 0.5F;
      floatArray1[3] = floatArray5;
      float[] floatArray6 = new float[7];
      floatArray6[0] = 898.6247F;
      floatArray6[1] = 0.5F;
      floatArray6[2] = 0.0F;
      floatArray6[3] = 1516.9651F;
      floatArray6[4] = 0.0F;
      floatArray6[5] = 1.0F;
      floatArray6[6] = 898.6247F;
      floatArray1[4] = floatArray6;
      float[] floatArray7 = new float[8];
      floatArray7[0] = 0.0F;
      floatArray7[1] = 1516.9651F;
      floatArray7[2] = 898.6247F;
      floatArray7[3] = 0.0F;
      floatArray7[4] = 0.0F;
      floatArray7[5] = 0.0F;
      floatArray7[6] = 0.0F;
      floatArray7[7] = (-3038.7139F);
      floatArray1[5] = floatArray7;
      float[] floatArray8 = new float[7];
      floatArray8[0] = 0.5F;
      floatArray8[1] = 0.0F;
      floatArray8[2] = (-1878.957F);
      floatArray8[3] = 0.5F;
      floatArray8[4] = 1516.9651F;
      floatArray8[5] = 1.0F;
      floatArray8[6] = 0.0F;
      floatArray1[6] = floatArray8;
      float[] floatArray9 = new float[5];
      floatArray9[0] = 0.0F;
      floatArray9[1] = (-3038.7139F);
      floatArray9[2] = 0.0F;
      floatArray9[3] = 0.0F;
      floatArray9[4] = 0.0F;
      floatArray1[7] = floatArray9;
      float[] floatArray10 = new float[8];
      floatArray10[0] = (-3038.7139F);
      floatArray10[1] = 1.0F;
      floatArray10[2] = 0.5F;
      floatArray10[3] = 1.0F;
      floatArray10[4] = 0.5F;
      floatArray10[5] = 1.0F;
      floatArray10[6] = 1.0F;
      floatArray10[7] = 0.0F;
      floatArray1[8] = floatArray10;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("jar:", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 898.6247F, false, integer0, floatArray1, true, 0.0F, false);
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getModel();
      catalogPieceOfFurniture0.getWidth();
      LightSource[] lightSourceArray0 = new LightSource[3];
      LightSource lightSource0 = new LightSource(0.5F, 0.0F, (-1878.957F), (-344));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.0F, 0.0F, 898.6247F, (-2962));
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, 3910.94F, (-2962));
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("", "NAME_STYLE", "", (Content) null, (Content) null, (Content) null, 1481.0F, 0.0F, 1.0F, (-1065.1788F), true, lightSourceArray0, floatArray1, (String) null, false, false, true, bigDecimal0, bigDecimal0);
      catalogLight0.getDepth();
      catalogLight0.getHeight();
      catalogPieceOfFurniture0.getElevation();
      catalogLight0.isMovable();
      catalogLight0.isDoorOrWindow();
      catalogLight0.getColor();
      catalogPieceOfFurniture0.getModelRotation();
      CatalogLight catalogLight1 = new CatalogLight("", "G)LE?;W)A", "", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", stringArray0, (Long) null, (Float) 0.0F, (Content) null, (Content) null, (Content) null, (-93.4F), 0.5F, 0.0F, 0.5F, false, lightSourceArray0, "", floatArray1, "com.eteks.sweethome3d.tools.ResourceURLContent", true, false, false, bigDecimal0, bigDecimal0, "G)LE?;W)A");
      catalogLight1.getStaircaseCutOutShape();
      catalogLight1.isBackFaceShown();
      catalogLight1.isResizable();
      catalogLight1.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogLight1.getPrice();
      catalogLight0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight1);
      homePieceOfFurniture0.isMovable();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      Float float0 = new Float((float) (-1566));
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("0N2Q5`_Lpq+", "0N2Q5`_Lpq+", "7vkW", (Content) null, (Content) null, (Content) null, (-1834.8545F), (-1834.8545F), (-613.5F), 0.0F, true, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomeLight homeLight2 = homeLight1.clone();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      homeLight2.setMovable(false);
      homeLight2.isVisible();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 0.0F, (-1.0F), 1.0F, 1.0F, false, (-2381.2642F), (-0.6731924F), sashArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.move(1872.0F, (-1.0F));
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.isNameCenterPointAt(0.0F, 1.0F, 1872.0F);
      homeDoorOrWindow0.setElevation((-1.0F));
      homeDoorOrWindow1.setNameAngle(0.0F);
      Float float0 = new Float((-1931.4918F));
      HomePieceOfFurniture.Property.values();
      Level level0 = new Level("", (-1931.4918F), 4565.81F, 4565.81F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow1.getAngle();
      homeDoorOrWindow1.clone();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(1.0F, (-1.0F), 1.0F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[3][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1.0F, (-1689.7671F), 6013.95F, true, (-1689.7671F), (-1.0F), sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      Integer integer0 = Integer.valueOf(1648);
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.getWidth();
      homeDoorOrWindow0.getPrice();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(1168.875F);
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com. teks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com. teks.sweethome3d.model.HomePieceOfFurniture$4", propertyChangeListener0);
      HomeLight homeLight2 = new HomeLight(homeLight0);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(homeLight0, "com. teks.sweethome3d.model.HomePieceOfFurniture$4", (Object) null, homeLight2);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      homeLight1.setMovable(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-239L));
      homeLight0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(1.0F, 0.0F, 1.0F, 0.0F, 332.07394F);
      Sash sash1 = new Sash(1.0F, 0.0F, 1.0F, 1474.1F, 1474.1F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1.0F, 3324.527F, 6013.95F, true, (-1689.7671F), 0.5649058F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getDescription();
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.isBottomRightPointAt((-1689.7671F), 3324.527F, (-1.0F));
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("W7Z-lzd", "", 0, "", uRLStreamHandler0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(class0, "");
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(0, (-832.557F), 0.0F, 1.0F, (-832.557F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, 1757.923F, 0.0F, 0.0F, 0.0F);
      sashArray0[1] = sash1;
      float float0 = 0.0F;
      Sash sash2 = new Sash(3.4028235E38F, 0.0F, 0.0F, 2531.354F, 2422.0864F);
      sashArray0[2] = sash2;
      float float1 = 0.3926991F;
      float float2 = 446.0482F;
      float float3 = 1191.2723F;
      Sash sash3 = new Sash(0.0F, 0.0F, 0.3926991F, 446.0482F, 1191.2723F);
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(2531.354F, 0.0F, (-1.0F), (-570.0F), 0.0F);
      sashArray0[4] = sash4;
      float[][] floatArray0 = new float[5][7];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-1600.1F);
      floatArray1[2] = (float) 0;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 446.0482F;
      floatArray1[7] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[0];
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = (-1600.1F);
      floatArray3[1] = 0.0F;
      floatArray3[2] = 1191.2723F;
      floatArray3[3] = 2422.0864F;
      floatArray3[4] = (-832.557F);
      floatArray3[5] = (-1.0F);
      floatArray3[6] = 1.0F;
      floatArray3[7] = (-832.557F);
      floatArray3[8] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = (-1.0F);
      floatArray4[5] = 0.0F;
      floatArray4[6] = 446.0482F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[2];
      floatArray5[0] = (-1600.1F);
      floatArray5[1] = 0.0F;
      floatArray0[4] = floatArray5;
      String string0 = "$.-;";
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = null;
      try {
        catalogDoorOrWindow0 = new CatalogDoorOrWindow("W7Z-lzd", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent1, 0, 0, (-1600.1F), 0, true, 0, 1.0F, sashArray0, floatArray0, "$.-;", true, true, false, bigDecimal0, bigDecimal0, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer((-1536));
      Integer integer1 = new Integer((-1536));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-613.5F), (-1536), (-1536), (-1536), true, "", integer0, (float[][]) null, false, 2808.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameXOffset((-1536));
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.setY((-1536));
      homePieceOfFurniture0.setName("");
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float((float) 222);
      LightSource lightSource0 = new LightSource(1875.92F, 3489.2F, 0.0F, 222, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1687.8942F, 2383.896F, 0.0F, 222, float0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, (-1.0F), 0.0F, 222, float0);
      lightSourceArray0[2] = lightSource2;
      Float float1 = new Float(1168.875F);
      LightSource lightSource3 = new LightSource(2802.9F, 2383.896F, 2802.9F, 222, float1);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(3489.2F, 1141.11F, 0.0F, 546);
      lightSourceArray0[4] = lightSource4;
      Float float2 = new Float((-1623.7F));
      LightSource lightSource5 = new LightSource((-1.0F), 158.0F, 0.0F, (-1264), float2);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(1687.8942F, 0.0F, 1141.11F, (-1264));
      lightSourceArray0[6] = lightSource6;
      LightSource lightSource7 = new LightSource(0.0F, 158.0F, (-1623.7F), (-1264), float1);
      lightSourceArray0[7] = lightSource7;
      LightSource lightSource8 = new LightSource(3489.2F, 0.0F, 546, 46);
      lightSourceArray0[8] = lightSource8;
      BigDecimal bigDecimal0 = new BigDecimal(46);
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getHeight();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 4565.81F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homePieceOfFurniture0.containsPoint(333.244F, 3323.76F, 1.0F);
      homePieceOfFurniture0.getName();
      Float float0 = Float.valueOf(333.244F);
      homeDoorOrWindow1.isBottomRightPointAt(1.0F, 4565.81F, 0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow1.isAtLevel((Level) null);
      homeDoorOrWindow0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(1.0F, 4565.81F, 1.0F, (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 6013.95F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.containsPoint(333.244F, 3323.76F, (-1.0F));
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.isBottomLeftPointAt((-1.0F), 936.0F, 1581.3062F);
      homeDoorOrWindow0.setNameYOffset(1.0F);
      homeDoorOrWindow1.setAngle((-1689.7671F));
      Float float0 = Float.valueOf(333.244F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow1.isBottomRightPointAt((-1.0F), 1.0F, 1762.58F);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      homeDoorOrWindow2.setName((String) null);
      homeDoorOrWindow2.containsPoint(333.244F, 2.0F, 1.0F);
      homeDoorOrWindow2.getName();
      Float float0 = Float.valueOf(2.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.setName("");
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 335.39658F);
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      float float0 = 1.0F;
      float float1 = 0.3926991F;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 0.0F, (-1.0F), 1.0F, 1.0F, false, (-2381.2642F), 0.3926991F, sashArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.move(1872.0F, (-1.0F));
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.isNameCenterPointAt(0.0F, 1.0F, 1872.0F);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setVisible(true);
      homeDoorOrWindow1.setName("com.eteks.sweethome3d.model.HomePieceOfFurniture$11");
      homeDoorOrWindow1.isTopLeftPointAt(375.5F, (-1.0F), 0.3926991F);
      homeDoorOrWindow1.setName("com.eteks.sweethome3d.model.HomePieceOfFurniture$11");
      homeDoorOrWindow1.getGroundElevation();
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setHeight((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1872.0F;
      floatArray1[1] = 4565.81F;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = 1872.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = (-1.0F);
      floatArray2[1] = (-2381.2642F);
      floatArray2[2] = (-1689.7671F);
      floatArray2[3] = (-2381.2642F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = 1.0F;
      floatArray3[1] = 1.0F;
      floatArray3[2] = 1872.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      floatArray4[0] = 1872.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[7];
      floatArray5[0] = (-2381.2642F);
      floatArray5[1] = (-1689.7671F);
      floatArray5[2] = 1.0F;
      floatArray5[3] = (-2381.2642F);
      floatArray5[4] = (-1689.7671F);
      floatArray5[5] = 1872.0F;
      floatArray5[6] = (-1.0F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[3];
      floatArray6[0] = (-1.0F);
      floatArray6[1] = (-844.21F);
      floatArray6[2] = (-1.0F);
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = new BigDecimal(1.0F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("yPwel]I,?WFH1s0]5", "yPwel]I,?WFH1s0]5", "", (Content) null, (Content) null, (Content) null, 1.0F, (-1.0F), 1.0F, (-2381.2642F), true, (-1.0F), (-1.0F), sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.getName();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1557));
      Integer integer1 = new Integer((-1557));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-613.5F), (-1557), (-1557), (-1557), true, "", integer0, (float[][]) null, false, 2808.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(2808.0F, (-1557), (-1.0F));
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setNameXOffset(0.3926991F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.isPointAt(2.1873832F, (-1.0F), 2.0F);
      Float float0 = new Float((-613.5F));
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(1168.875F);
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setMovable(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), 3.5889637F, 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-19.228355F), 3.5889637F, 3.5889637F, 1474.1F, 333.244F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 3.5889637F, (-1689.7671F), 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow0.isNameCenterPointAt(166.622F, (-13.997138F), (-1689.7671F));
      homeDoorOrWindow1.isBottomLeftPointAt((-1.0F), 3.5889637F, 1474.1F);
      homeDoorOrWindow2.getNameStyle();
      homeDoorOrWindow1.isDoorOrWindow();
      homeDoorOrWindow1.setX(166.622F);
      homeDoorOrWindow2.getNameYOffset();
      homeDoorOrWindow2.getColor();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, (-1689.7671F), 1474.1F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow1.getName();
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      homeDoorOrWindow3.setY(6013.95F);
      homeDoorOrWindow1.setNameAngle(4565.81F);
      homeDoorOrWindow1.setNameAngle(166.622F);
      homeDoorOrWindow3.isNameCenterPointAt(1474.1F, 492.32922F, 1.0F);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow2.setAngle(1474.1F);
      homeDoorOrWindow1.setWidth(0.0F);
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow2.isTopRightPointAt((-1568.0F), 492.32922F, 166.622F);
      homeDoorOrWindow1.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(1.0F, 4565.81F, 1.0F, (-1.0F), 333.244F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 4565.81F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      homeDoorOrWindow0.containsPoint(333.244F, 3323.76F, 1.0F);
      homeDoorOrWindow0.getName();
      homeDoorOrWindow0.setNameYOffset(1.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow1.isBottomRightPointAt(0.3926991F, (-1.0F), 1762.58F);
      homeDoorOrWindow0.isTopLeftPointAt(1581.3062F, 2016.0F, 6013.95F);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(4545.4966F);
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("I&I+aE", (Content) null, (Content) null, 3.4028235E38F, 3149.5713F, 4545.4966F, 3149.5713F, false, false, integer0, (float[][]) null, false, 4545.4966F, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      Integer integer0 = new Integer(1146);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 4565.81F, 1.0F, (-613.5F), 4565.81F, false, false, integer0, (float[][]) null, false, (-613.5F), false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.getWidth();
      homePieceOfFurniture0.isBottomRightPointAt(4565.81F, 4565.81F, 1473.6F);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.6517F, 3324.3843F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("Wn:-Bk");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.getName();
      homePieceOfFurniture0.setName("E1<H50Y<?J");
      homeDoorOrWindow0.setY(2303.696F);
      homeDoorOrWindow0.setNameAngle(4565.81F);
      homeDoorOrWindow0.setNameAngle(166.622F);
      homeDoorOrWindow0.isNameCenterPointAt(1473.1257F, 492.32922F, 1581.6517F);
      HomePieceOfFurniture homePieceOfFurniture1 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.setAngle(1473.1257F);
      homeDoorOrWindow0.setWidth(0.0F);
      homeDoorOrWindow0.setModelMirrored(false);
      homePieceOfFurniture1.isBottomRightPointAt(166.622F, 1581.6517F, 1343.4F);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(1.0F, (-1.0F), 1.0F, (-1.0F), 333.244F);
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 333.244F, 3324.527F, 6013.95F, false, (-1689.7671F), (-1.0F), sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getName();
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.isDeformable();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow2.clone();
      homeDoorOrWindow0.getDepth();
      homeDoorOrWindow1.isTopRightPointAt(905.0F, 3.6938093F, 3221.7925F);
      homeDoorOrWindow0.getShininess();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "kMn9.z", "kMn9.z", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3324.527F, 1.0F, true, (-1689.7671F), 1.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      homePieceOfFurniture0.getShininess();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Sash[] sashArray0 = new Sash[10];
      Sash sash0 = new Sash(1.0F, (-1.0F), 1.0F, (-1.0F), 1.0F);
      float[][] floatArray0 = new float[3][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 1.0F, (-1689.7671F), 6013.95F, true, (-1689.7671F), (-1.0F), sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      Integer integer0 = Integer.valueOf(1648);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setColor(integer0);
      homeDoorOrWindow0.getColor();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-14.7048F), (-14.7048F), (-14.7048F), 0.68662703F, (-14.7048F));
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, (-14.7048F), (-1689.7671F), (-14.7048F), 0.68662703F, false, (-1689.7671F), 0.68662703F, sashArray0, floatArray0, "i{Qd", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setName("i{Qd");
      homeDoorOrWindow0.isNameCenterPointAt((-14.7048F), (-14.7048F), (-1689.7671F));
      homeDoorOrWindow0.isBottomLeftPointAt(0.68662703F, (-14.7048F), (-14.7048F));
      homeDoorOrWindow0.setDescription("i{Qd");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      homeDoorOrWindow0.getCurrency();
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float(1168.875F);
      BigDecimal.valueOf(64840.99841196928);
      Float float1 = new Float((-1623.7F));
      LightSource lightSource0 = new LightSource((-1.0F), 158.0F, 0.0F, (-1264), float1);
      lightSourceArray0[5] = lightSource0;
      LightSource lightSource1 = new LightSource(1687.8942F, 0.0F, 1141.11F, (-1264));
      lightSourceArray0[6] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, 158.0F, (-1623.7F), (-1264), float0);
      lightSourceArray0[7] = lightSource2;
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.getPrice();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      Integer integer0 = new Integer((-1536));
      Integer integer1 = new Integer((-1536));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-613.5F), (-1536), (-1536), (-1536), true, "", integer0, (float[][]) null, false, 2808.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameXOffset(0.3926991F);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.valueOf(0L, 14);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 1034.8866F, 0.3926991F, 3.4028235E38F, 1034.8866F, true, 0.3926991F, (-1.0F), sashArray0, (float[][]) null, "", false, false, false, bigDecimal0, bigDecimal0, (String) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.intersectsRectangle(1507.171F, (-1.0F), 270.81F, 1137.3657F);
      homeDoorOrWindow0.isTexturable();
      homeDoorOrWindow0.getIcon();
      homeDoorOrWindow0.getLevel();
      HomePieceOfFurniture.Property.values();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      Integer integer0 = new Integer((-1557));
      Integer.min((-1557), (-1557));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-613.5F), (-1557), (-1557), (-1557), true, "", integer0, (float[][]) null, false, 2808.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(2808.0F, (-1557), (-1117.0F));
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setNameXOffset(0.3926991F);
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.isPointAt(2.1873832F, (-1.0F), 2.0F);
      Float float0 = new Float((-1117.0F));
      homePieceOfFurniture0.isBottomLeftPointAt((-1117.0F), (-2082.0F), (-1557));
      homePieceOfFurniture0.setDescription((String) null);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      float[][] floatArray0 = new float[8][3];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 1901.1145F;
      floatArray1[1] = 1901.1145F;
      floatArray1[2] = 1901.1145F;
      floatArray1[3] = 1901.1145F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 1901.1145F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 1901.1145F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 1901.1145F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 1901.1145F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 1901.1145F;
      floatArray3[3] = 1901.1145F;
      floatArray3[4] = 1901.1145F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      floatArray4[0] = 1901.1145F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 1901.1145F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = 1901.1145F;
      floatArray6[3] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[1];
      floatArray7[0] = 0.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[5];
      floatArray8[0] = 1901.1145F;
      floatArray8[1] = 1901.1145F;
      floatArray8[2] = 1901.1145F;
      floatArray8[3] = 0.0F;
      floatArray8[4] = 1901.1145F;
      floatArray0[7] = floatArray8;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", "", (Content) null, (Content) null, (Content) null, 1901.1145F, 1901.1145F, 1901.1145F, 0.0F, false, "", floatArray0, "!o$P!CD^hhkX[F", true, false, true, bigDecimal0, bigDecimal0, "");
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getModel();
      catalogPieceOfFurniture0.getWidth();
      homePieceOfFurniture0.getDepth();
      catalogPieceOfFurniture0.getHeight();
      homePieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getColor();
      catalogPieceOfFurniture0.getModelRotation();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.isResizable();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      homePieceOfFurniture0.getPrice();
      homePieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      homePieceOfFurniture1.isBottomLeftPointAt(1901.1145F, 1901.1145F, 851.2799F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals(333.244F, sash0.getEndAngle(), 0.01F);
      assertEquals(4565.81F, sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1872.0F;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, (Content) null, (Content) null, (Content) null, 1872.0F, (-1.0F), 1.0F, 1.0F, false, (-2381.2642F), 0.3926991F, sashArray0, floatArray0, "E5%!@", false, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-2381.2642F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(936.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow1.clone();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-2381.2642F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(936.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(936.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertEquals(1.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals((-2381.2642F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(1.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = homeDoorOrWindow2.isBottomRightPointAt((-1.0F), (-1.0F), 1872.0F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-2381.2642F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(936.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(936.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertEquals(1.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals((-2381.2642F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(1.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow2.move(1872.0F, (-1.0F));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-2381.2642F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(936.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertEquals(1.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(2808.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals((-1.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(1.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      String string0 = homeDoorOrWindow2.getName();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-2381.2642F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(936.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertEquals(1.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(2808.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals((-1.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(1.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = homeDoorOrWindow0.isNameCenterPointAt(1872.0F, 1.0F, 5.3785872F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setElevation(5.3785872F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(5.3785872F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(5.3785872F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setNameAngle((-2532.295F));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(6.1119423F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(5.3785872F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(5.3785872F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      Float float0 = homeDoorOrWindow2.getShininess();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(6.1119423F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(5.3785872F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(5.3785872F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-2381.2642F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(936.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertEquals(1.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(2808.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals((-1.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(1.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNull(float0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow2.getPrice();
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(6.1119423F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(5.3785872F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(5.3785872F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-2381.2642F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(936.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertEquals(1.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(2808.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals((-1.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(1.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals(4565.81F, sash0.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      Integer integer0 = new Integer((-1536));
      assertEquals((-1536), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1536));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1536), (int)integer1);
      assertNotNull(integer1);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-613.5F), (-1536), (-1536), (-1536), true, "", integer0, (float[][]) null, false, 2808.0F, true);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(integer0.equals((Object)integer1));
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1536), (int)homePieceOfFurniture0.getColor());
      assertEquals((-613.5F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-768.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-1536.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-306.75F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(integer0.equals((Object)integer1));
      assertNotNull(homePieceOfFurniture0);
      
      homePieceOfFurniture0.setNameXOffset(0.3926991F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1536), (int)homePieceOfFurniture0.getColor());
      assertEquals((-613.5F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-768.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-1536.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-306.75F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(integer0.equals((Object)integer1));
      
      homePieceOfFurniture0.move((-1.0F), 2808.0F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1536), (int)homePieceOfFurniture0.getColor());
      assertEquals((-613.5F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-307.75F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-1536.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2040.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(integer0.equals((Object)integer1));
      
      String string0 = homePieceOfFurniture0.getDescription();
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1536), (int)homePieceOfFurniture0.getColor());
      assertEquals((-613.5F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-307.75F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-1536.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2040.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(integer0.equals((Object)integer1));
      assertNull(string0);
      
      homePieceOfFurniture0.setY((-1536));
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1536), (int)homePieceOfFurniture0.getColor());
      assertEquals((-613.5F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-307.75F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-1536.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(integer0.equals((Object)integer1));
      
      homePieceOfFurniture0.setName("");
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1536), (int)homePieceOfFurniture0.getColor());
      assertEquals((-613.5F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-307.75F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-1536.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(integer0.equals((Object)integer1));
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      
      Content content0 = homePieceOfFurniture0.getIcon();
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1536), (int)homePieceOfFurniture0.getColor());
      assertEquals((-613.5F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-307.75F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-1536.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-1536.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(integer0.equals((Object)integer1));
      assertNull(content0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals(333.244F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals(4565.81F, sash0.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      assertEquals(1872.0F, sash1.getWidth(), 0.01F);
      assertEquals((-1.0F), sash1.getYAxis(), 0.01F);
      assertEquals(1474.1F, sash1.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash1.getXAxis(), 0.01F);
      assertEquals(1.0F, sash1.getEndAngle(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1872.0F;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, (Content) null, (Content) null, (Content) null, 1872.0F, (-1.0F), 1.0F, 1.0F, false, (-2381.2642F), 0.3926991F, sashArray0, floatArray0, "E5%!@", false, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(936.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(1872.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow1.clone();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(936.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(1872.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.3926991F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals((-2381.2642F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow2.isResizable());
      assertEquals(1872.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals("", homeDoorOrWindow2.getName());
      assertEquals((-1.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(936.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(1.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals((-0.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertEquals(1.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow2.move(1872.0F, (-1.0F));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(936.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(1872.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.3926991F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals((-2381.2642F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow2.isResizable());
      assertEquals(1872.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals("", homeDoorOrWindow2.getName());
      assertEquals((-1.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(1.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(2808.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals((-1.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertEquals(1.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      String string0 = homeDoorOrWindow2.getName();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(936.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(1872.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.3926991F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals((-2381.2642F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow2.isResizable());
      assertEquals(1872.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals("", homeDoorOrWindow2.getName());
      assertEquals((-1.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(1.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(2808.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals((-1.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertEquals(1.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      assertEquals("2Lj\u0000!xjG8m", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeDoorOrWindow0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals("2Lj\u0000!xjG8m", propertyChangeListenerProxy0.getPropertyName());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      TextStyle textStyle0 = new TextStyle((-954.8743F), true, true);
      assertTrue(textStyle0.isBold());
      assertTrue(textStyle0.isItalic());
      assertEquals((-954.8743F), textStyle0.getFontSize(), 0.01F);
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = textStyle0.deriveStyle(212.75414F);
      assertTrue(textStyle0.isBold());
      assertTrue(textStyle0.isItalic());
      assertEquals((-954.8743F), textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle1.isItalic());
      assertEquals(212.75414F, textStyle1.getFontSize(), 0.01F);
      assertTrue(textStyle1.isBold());
      assertFalse(textStyle1.equals((Object)textStyle0));
      assertNotNull(textStyle1);
      assertNotSame(textStyle0, textStyle1);
      assertNotSame(textStyle1, textStyle0);
      
      homeDoorOrWindow2.setNameStyle(textStyle1);
      assertTrue(textStyle0.isBold());
      assertTrue(textStyle0.isItalic());
      assertEquals((-954.8743F), textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle1.isItalic());
      assertEquals(212.75414F, textStyle1.getFontSize(), 0.01F);
      assertTrue(textStyle1.isBold());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("E5%!@", catalogDoorOrWindow0.getCreator());
      assertEquals((-2381.2642F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1872.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1872.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(936.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(936.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(1872.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-2381.2642F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.3926991F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals((-2381.2642F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow2.isResizable());
      assertEquals(1872.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals("", homeDoorOrWindow2.getName());
      assertEquals((-1.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(1.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(2808.0F, homeDoorOrWindow2.getX(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals((-1.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertEquals(1.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertFalse(textStyle0.equals((Object)textStyle1));
      assertFalse(textStyle1.equals((Object)textStyle0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNotSame(textStyle0, textStyle1);
      assertNotSame(textStyle1, textStyle0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      assertEquals(333.244F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(4565.81F, sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "i{Qd", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("i{Qd", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(3323.76F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(0.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals("i{Qd", homeDoorOrWindow2.getName());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setVisible(false);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow1.setName("i{Qd");
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("i{Qd", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(3323.76F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = homeDoorOrWindow2.isTopLeftPointAt(333.244F, (-1.0F), 333.244F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(0.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals("i{Qd", homeDoorOrWindow2.getName());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      float float0 = homeDoorOrWindow1.getDepth();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("i{Qd", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(3323.76F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertEquals(1581.3062F, float0, 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = homeDoorOrWindow2.isTopRightPointAt(255.6375F, (-1.0F), (-136.0F));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(0.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals("i{Qd", homeDoorOrWindow2.getName());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean2 = homeDoorOrWindow0.isPointAt(902.8F, 902.8F, 1474.1F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow2.getValueAddedTaxPercentage();
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(0.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals("i{Qd", homeDoorOrWindow2.getName());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "kMn9.z", "kMn9.z", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3324.527F, 1.0F, true, (-1689.7671F), 1.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("kMn9.z", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("kMn9.z", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("kMn9.z", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("kMn9.z", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("kMn9.z", homeDoorOrWindow0.getDescription());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("kMn9.z", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("kMn9.z", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("kMn9.z", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("kMn9.z", homeDoorOrWindow0.getDescription());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("kMn9.z", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("kMn9.z", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("kMn9.z", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      float float0 = 0.0F;
      boolean boolean0 = homeDoorOrWindow1.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("kMn9.z", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("kMn9.z", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(1.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("kMn9.z", homeDoorOrWindow0.getDescription());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("kMn9.z", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("kMn9.z", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("kMn9.z", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      // Undeclared exception!
      try { 
        catalogDoorOrWindow0.compareTo((CatalogPieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(0.68662703F, 4565.81F, 0.68662703F, (-1.0F), 333.244F);
      assertEquals(0.68662703F, sash0.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(333.244F, sash0.getEndAngle(), 0.01F);
      assertEquals(4565.81F, sash0.getYAxis(), 0.01F);
      assertEquals(0.68662703F, sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 0.68662703F, 333.244F);
      assertEquals((-1.0F), sash1.getYAxis(), 0.01F);
      assertEquals(1872.0F, sash1.getWidth(), 0.01F);
      assertEquals((-1.0F), sash1.getXAxis(), 0.01F);
      assertEquals(333.244F, sash1.getEndAngle(), 0.01F);
      assertEquals(0.68662703F, sash1.getStartAngle(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, (-1689.7671F), (-1.0F), 333.244F, true, (-1689.7671F), 1436.1443F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertEquals((-844.88354F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(333.244F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertEquals((-844.88354F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(333.244F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-844.88354F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1436.1443F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertEquals((-844.88354F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(333.244F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertEquals((-844.88354F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(333.244F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(333.244F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(333.244F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(1436.1443F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow2.getName());
      assertEquals((-844.88354F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      String string0 = homeDoorOrWindow1.getName();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertEquals((-844.88354F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(333.244F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-844.88354F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1436.1443F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("Aeil[7-HqY.Ajg o", string0);
      assertNotNull(string0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertEquals((-844.88354F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(333.244F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(333.244F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(333.244F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(1436.1443F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow2.getName());
      assertEquals((-844.88354F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow3.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow3.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow3.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow3.getCurrency());
      assertTrue(homeDoorOrWindow3.isVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow3.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow3.getHeight(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow3.getNameXOffset(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow3.getCatalogId());
      assertFalse(homeDoorOrWindow3.isModelMirrored());
      assertFalse(homeDoorOrWindow3.isBackFaceShown());
      assertEquals((-844.88354F), homeDoorOrWindow3.getY(), 0.01F);
      assertTrue(homeDoorOrWindow3.isTexturable());
      assertNull(homeDoorOrWindow3.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow3.getWallDistance(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow3.getName());
      assertEquals(333.244F, homeDoorOrWindow3.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow3.isNameVisible());
      assertFalse(homeDoorOrWindow3.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow3.getWallThickness(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow3.getDescription());
      assertNull(homeDoorOrWindow3.getShininess());
      assertTrue(homeDoorOrWindow3.isResizable());
      assertTrue(homeDoorOrWindow3.isMovable());
      assertEquals(0.5F, homeDoorOrWindow3.getX(), 0.01F);
      assertNull(homeDoorOrWindow3.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow3.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow3.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow1));
      assertNotNull(homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow2.setName("E1<H50Y<?J");
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertEquals((-844.88354F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(333.244F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(333.244F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(333.244F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(1436.1443F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals((-844.88354F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow3));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow3);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow1.setNameAngle(4565.81F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertEquals((-844.88354F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(333.244F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(4.2175255F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-844.88354F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1436.1443F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = homeDoorOrWindow2.isNameCenterPointAt(166.622F, 0.5F, (-1689.7671F));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertEquals((-844.88354F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(333.244F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(333.244F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(333.244F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(1436.1443F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals((-844.88354F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow3));
      assertFalse(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow3);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = homeDoorOrWindow1.isBottomLeftPointAt(0.68662703F, (-1.0F), 1.0F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertEquals((-844.88354F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(333.244F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(4.2175255F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-844.88354F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1436.1443F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(boolean1 == boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(boolean1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow3.setDescription("i{Qd");
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertEquals((-844.88354F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(333.244F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(333.244F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(333.244F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(1436.1443F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals((-844.88354F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow3.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow3.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow3.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow3.getCurrency());
      assertTrue(homeDoorOrWindow3.isVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow3.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow3.getHeight(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow3.getNameXOffset(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow3.getCatalogId());
      assertFalse(homeDoorOrWindow3.isModelMirrored());
      assertFalse(homeDoorOrWindow3.isBackFaceShown());
      assertEquals((-844.88354F), homeDoorOrWindow3.getY(), 0.01F);
      assertTrue(homeDoorOrWindow3.isTexturable());
      assertNull(homeDoorOrWindow3.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow3.getWallDistance(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow3.getName());
      assertEquals(333.244F, homeDoorOrWindow3.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow3.isNameVisible());
      assertFalse(homeDoorOrWindow3.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow3.getWallThickness(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow3.getGroundElevation(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow3.getDescription());
      assertEquals(0.0F, homeDoorOrWindow3.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow3.getShininess());
      assertTrue(homeDoorOrWindow3.isResizable());
      assertTrue(homeDoorOrWindow3.isMovable());
      assertEquals(0.5F, homeDoorOrWindow3.getX(), 0.01F);
      assertNull(homeDoorOrWindow3.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow3.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow3.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow1));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow3.setName("yr=2q%Y>d");
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertEquals((-844.88354F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(333.244F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(333.244F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(333.244F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(1436.1443F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals((-844.88354F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow3.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow3.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow3.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow3.getCurrency());
      assertTrue(homeDoorOrWindow3.isVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow3.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow3.getHeight(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow3.getNameXOffset(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow3.getCatalogId());
      assertFalse(homeDoorOrWindow3.isModelMirrored());
      assertFalse(homeDoorOrWindow3.isBackFaceShown());
      assertEquals((-844.88354F), homeDoorOrWindow3.getY(), 0.01F);
      assertTrue(homeDoorOrWindow3.isTexturable());
      assertNull(homeDoorOrWindow3.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow3.getWallDistance(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow3.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow3.isNameVisible());
      assertFalse(homeDoorOrWindow3.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow3.getWallThickness(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow3.getGroundElevation(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow3.getDescription());
      assertEquals("yr=2q%Y>d", homeDoorOrWindow3.getName());
      assertEquals(0.0F, homeDoorOrWindow3.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow3.getShininess());
      assertTrue(homeDoorOrWindow3.isResizable());
      assertTrue(homeDoorOrWindow3.isMovable());
      assertEquals(0.5F, homeDoorOrWindow3.getX(), 0.01F);
      assertNull(homeDoorOrWindow3.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow3.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow3.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow1));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      float float0 = homeDoorOrWindow0.getGroundElevation();
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertEquals((-844.88354F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(333.244F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(333.244F, float0, 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow3.setDescription("i{Qd");
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(333.244F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1436.1443F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertEquals((-844.88354F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(333.244F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(333.244F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(333.244F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(1436.1443F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals((-844.88354F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow3.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow3.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow3.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow3.getCurrency());
      assertTrue(homeDoorOrWindow3.isVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow3.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow3.getHeight(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow3.getNameXOffset(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow3.getCatalogId());
      assertFalse(homeDoorOrWindow3.isModelMirrored());
      assertFalse(homeDoorOrWindow3.isBackFaceShown());
      assertEquals((-844.88354F), homeDoorOrWindow3.getY(), 0.01F);
      assertTrue(homeDoorOrWindow3.isTexturable());
      assertNull(homeDoorOrWindow3.getColor());
      assertEquals(1436.1443F, homeDoorOrWindow3.getWallDistance(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow3.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow3.isNameVisible());
      assertFalse(homeDoorOrWindow3.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow3.getWallThickness(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow3.getGroundElevation(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow3.getDescription());
      assertEquals("yr=2q%Y>d", homeDoorOrWindow3.getName());
      assertEquals(0.0F, homeDoorOrWindow3.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow3.getShininess());
      assertTrue(homeDoorOrWindow3.isResizable());
      assertTrue(homeDoorOrWindow3.isMovable());
      assertEquals(0.5F, homeDoorOrWindow3.getX(), 0.01F);
      assertNull(homeDoorOrWindow3.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow3.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow3.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow1));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(9.761561F, 4573.36F, 9.761561F, (-1.0F), 333.244F);
      assertEquals(9.761561F, sash0.getWidth(), 0.01F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(4573.36F, sash0.getYAxis(), 0.01F);
      assertEquals(333.244F, sash0.getEndAngle(), 0.01F);
      assertEquals(9.761561F, sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(9.761561F, (-1.0F), 1872.0F, 1474.1F, 1.0F);
      assertEquals((-1.0F), sash1.getYAxis(), 0.01F);
      assertEquals(1872.0F, sash1.getWidth(), 0.01F);
      assertEquals(1474.1F, sash1.getStartAngle(), 0.01F);
      assertEquals(9.761561F, sash1.getXAxis(), 0.01F);
      assertEquals(1.0F, sash1.getEndAngle(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      assertNotNull(sash1);
      
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 9.761561F, 1581.3062F, 3324.527F, 6013.95F, true, (-1689.7671F), 0.5649058F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals(9.761561F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals(9.761561F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(4.8807807F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(9.761561F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals(9.761561F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(4.8807807F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(9.761561F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.5649058F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(4.8807807F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(9.761561F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals(9.761561F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(4.8807807F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(9.761561F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals(0.5649058F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals(4.8807807F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertEquals(3324.527F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals(9.761561F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setName("");
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals(9.761561F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(4.8807807F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(9.761561F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setNameAngle(952.5F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals(9.761561F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(4.8807807F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(9.761561F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(3.7390187F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = homeDoorOrWindow2.isNameCenterPointAt(0.5649058F, 166.622F, 6013.95F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals(9.761561F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(4.8807807F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(9.761561F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(3.7390187F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals(0.5649058F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals(4.8807807F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertEquals(3324.527F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals(9.761561F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow1.setNameAngle(333.244F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals(9.761561F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(4.8807807F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(9.761561F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(3.7390187F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.5649058F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(4.8807807F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(9.761561F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(3324.527F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow1.getName());
      assertEquals(0.23516676F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = homeDoorOrWindow1.containsPoint(1474.1F, 3324.527F, 2521.0F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertEquals(9.761561F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertEquals(4.8807807F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.5649058F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(9.761561F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(3.7390187F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.5649058F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(4.8807807F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(9.761561F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(3324.527F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow1.getName());
      assertEquals(0.23516676F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      float[][] floatArray0 = new float[8][3];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 1901.1145F;
      floatArray1[0] = 1901.1145F;
      floatArray1[2] = 1901.1145F;
      floatArray1[3] = 1901.1145F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 1901.1145F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 1901.1145F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 1901.1145F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 1901.1145F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 1901.1145F;
      floatArray3[3] = 1901.1145F;
      floatArray3[4] = 1901.1145F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray4[0] = 1901.1145F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 1901.1145F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray1));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = 1901.1145F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[1];
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray3));
      
      floatArray7[0] = 0.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[5];
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray5));
      assertFalse(floatArray8.equals((Object)floatArray7));
      assertFalse(floatArray8.equals((Object)floatArray2));
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray3));
      
      floatArray8[0] = 1901.1145F;
      floatArray8[1] = 1901.1145F;
      floatArray8[2] = 1901.1145F;
      floatArray8[3] = 0.0F;
      floatArray8[4] = 1901.1145F;
      floatArray0[7] = floatArray8;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)0;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertNotNull(bigInteger0);
      assertEquals(6, byteArray0.length);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertNotNull(bigDecimal0);
      assertEquals(6, byteArray0.length);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", "", (Content) null, (Content) null, (Content) null, 1901.1145F, 1901.1145F, 1901.1145F, 0.0F, false, "", floatArray0, "!o$P!CD^hhkX[F", true, false, true, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      String string0 = catalogPieceOfFurniture0.getDescription();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      Content content0 = catalogPieceOfFurniture0.getIcon();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertNull(content0);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1901.1145F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      Content content1 = homePieceOfFurniture0.getPlanIcon();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1901.1145F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertNull(content1);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertEquals(1901.1145F, float0, 0.01F);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      float float1 = homePieceOfFurniture0.getDepth();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1901.1145F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1901.1145F, float1, 0.01F);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      float float2 = catalogPieceOfFurniture0.getHeight();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(1901.1145F, float2, 0.01F);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      float float3 = homePieceOfFurniture0.getElevation();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1901.1145F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      boolean boolean0 = catalogPieceOfFurniture0.isMovable();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertFalse(boolean0);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      boolean boolean1 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      Integer integer0 = catalogPieceOfFurniture0.getColor();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertNull(integer0);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      float[][] floatArray9 = catalogPieceOfFurniture0.getModelRotation();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertFalse(floatArray9.equals((Object)floatArray0));
      assertNotNull(floatArray9);
      assertNotSame(floatArray0, floatArray9);
      assertNotSame(floatArray9, floatArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      assertEquals(3, floatArray9.length);
      
      String string1 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertFalse(floatArray0.equals((Object)floatArray9));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(floatArray0, floatArray9);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      boolean boolean2 = catalogPieceOfFurniture0.isBackFaceShown();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertFalse(floatArray0.equals((Object)floatArray9));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(floatArray0, floatArray9);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      boolean boolean3 = homePieceOfFurniture0.isResizable();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1901.1145F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertFalse(floatArray0.equals((Object)floatArray9));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertNotSame(floatArray0, floatArray9);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      boolean boolean4 = catalogPieceOfFurniture0.isDeformable();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertFalse(floatArray0.equals((Object)floatArray9));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertNotSame(floatArray0, floatArray9);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      boolean boolean5 = catalogPieceOfFurniture0.isTexturable();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertFalse(floatArray0.equals((Object)floatArray9));
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5);
      assertNotSame(floatArray0, floatArray9);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      BigDecimal bigDecimal1 = homePieceOfFurniture0.getPrice();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)19712, bigDecimal1.shortValue());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1901.1145F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertFalse(floatArray0.equals((Object)floatArray9));
      assertNotNull(bigDecimal1);
      assertNotSame(floatArray0, floatArray9);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      BigDecimal bigDecimal2 = homePieceOfFurniture0.getValueAddedTaxPercentage();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)19712, bigDecimal2.shortValue());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1901.1145F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertFalse(floatArray0.equals((Object)floatArray9));
      assertNotNull(bigDecimal2);
      assertNotSame(floatArray0, floatArray9);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      String string2 = catalogPieceOfFurniture0.getCurrency();
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertFalse(floatArray0.equals((Object)floatArray9));
      assertEquals("", string2);
      assertNotNull(string2);
      assertNotSame(floatArray0, floatArray9);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1901.1145F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals("", homePieceOfFurniture1.getDescription());
      assertEquals(1901.1145F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(1901.1145F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(950.55725F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getCatalogId());
      assertEquals(1901.1145F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertFalse(floatArray0.equals((Object)floatArray9));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNotNull(homePieceOfFurniture1);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
      
      boolean boolean6 = homePieceOfFurniture1.isBottomLeftPointAt(1901.1145F, 0.0F, 851.2799F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)19712, bigInteger0.shortValue());
      assertEquals((short)19712, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("!o$P!CD^hhkX[F", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1901.1145F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1901.1145F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1901.1145F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals("", homePieceOfFurniture1.getDescription());
      assertEquals(1901.1145F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(1901.1145F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(950.55725F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(950.55725F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getCatalogId());
      assertEquals(1901.1145F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-105), (byte)15, (byte)19, (byte)77, (byte)0}, byteArray0);
      assertFalse(floatArray0.equals((Object)floatArray9));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6);
      assertNotSame(floatArray0, floatArray9);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertEquals(6, byteArray0.length);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      assertEquals((byte)48, bigDecimal0.byteValue());
      assertEquals((short) (-208), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Integer integer0 = new Integer((-1566));
      assertEquals((-1566), (int)integer0);
      assertNotNull(integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 4545.4966F, 4545.4966F, (-613.5F), 4545.4966F, false, false, integer0, (float[][]) null, false, (-613.5F), false);
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(4545.4966F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(4545.4966F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-613.5F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1566), (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(4545.4966F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2272.7483F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2272.7483F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(4545.4966F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = homePieceOfFurniture0.isDeformable();
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(4545.4966F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(4545.4966F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-613.5F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1566), (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(4545.4966F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2272.7483F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2272.7483F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(4545.4966F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(boolean0);
      
      homePieceOfFurniture0.setVisible(false);
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(4545.4966F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(4545.4966F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-613.5F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1566), (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(4545.4966F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2272.7483F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2272.7483F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(4545.4966F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      
      homePieceOfFurniture0.setModelMirrored(true);
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(4545.4966F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(4545.4966F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-613.5F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1566), (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(4545.4966F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2272.7483F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2272.7483F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(4545.4966F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      
      homePieceOfFurniture0.setVisible(true);
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(4545.4966F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(4545.4966F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(4545.4966F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-613.5F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1566), (int)homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(4545.4966F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2272.7483F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2272.7483F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(4545.4966F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), (-1.0F));
      assertEquals(4565.81F, sash0.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals((-1.0F), sash0.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      Integer integer0 = new Integer((-1536));
      assertEquals((-1536), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1536));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1536), (int)integer1);
      assertNotNull(integer1);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-613.5F), (-1536), (-1536), (-1536), true, "", integer0, (float[][]) null, false, 2808.0F, true);
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(integer0.equals((Object)integer1));
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-613.5F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1536), (int)homePieceOfFurniture0.getColor());
      assertEquals((-1536.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-768.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1536.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1536.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1536.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-306.75F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(integer0.equals((Object)integer1));
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = homePieceOfFurniture0.containsPoint((-613.5F), (-613.5F), (-1.0F));
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-613.5F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1536), (int)homePieceOfFurniture0.getColor());
      assertEquals((-1536.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-768.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1536.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1536.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1536.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-306.75F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(boolean0);
      
      boolean boolean1 = homePieceOfFurniture0.isBottomRightPointAt(2808.0F, (-1536), (-1.0F));
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-613.5F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1536), (int)homePieceOfFurniture0.getColor());
      assertEquals((-1536.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-768.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1536.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1536.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1536.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-306.75F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = homePieceOfFurniture0.getDescription();
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-613.5F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1536), (int)homePieceOfFurniture0.getColor());
      assertEquals((-1536.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-768.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1536.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1536.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1536.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-306.75F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(integer0.equals((Object)integer1));
      assertNull(string0);
      
      boolean boolean2 = homePieceOfFurniture0.isPointAt(2.1873832F, (-1.0F), 2.0F);
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-613.5F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1536), (int)homePieceOfFurniture0.getColor());
      assertEquals((-1536.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-768.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1536.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1536.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1536.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-306.75F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      float float0 = homePieceOfFurniture0.getY();
      assertEquals((-613.5F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-1536.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1536), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-613.5F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1536), (int)homePieceOfFurniture0.getColor());
      assertEquals((-1536.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-768.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1536.0F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1536.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1536.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-306.75F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(integer0.equals((Object)integer1));
      assertEquals((-768.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float((float) 222);
      assertEquals(222.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LightSource lightSource0 = new LightSource(1875.92F, 3489.2F, 0.0F, 222, float0);
      assertEquals(1875.92F, lightSource0.getX(), 0.01F);
      assertEquals(222.0F, lightSource0.getDiameter(), 0.01F);
      assertEquals(3489.2F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(222, lightSource0.getColor());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1687.8942F, 2383.896F, 0.0F, 222, float0);
      assertEquals(1687.8942F, lightSource1.getX(), 0.01F);
      assertEquals(222, lightSource1.getColor());
      assertEquals(0.0F, lightSource1.getZ(), 0.01F);
      assertEquals(222.0F, lightSource1.getDiameter(), 0.01F);
      assertEquals(2383.896F, lightSource1.getY(), 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.0F, (-1.0F), 0.0F, 222, float0);
      assertEquals((-1.0F), lightSource2.getY(), 0.01F);
      assertEquals(0.0F, lightSource2.getX(), 0.01F);
      assertEquals(222, lightSource2.getColor());
      assertEquals(222.0F, lightSource2.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource2.getZ(), 0.01F);
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertNotNull(lightSource2);
      
      lightSourceArray0[2] = lightSource2;
      Float float1 = new Float(1168.875F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1168.875F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      LightSource lightSource3 = new LightSource(2802.9F, 2383.896F, 2802.9F, 222, float1);
      assertEquals(2802.9F, lightSource3.getX(), 0.01F);
      assertEquals(222, lightSource3.getColor());
      assertEquals(2802.9F, lightSource3.getZ(), 0.01F);
      assertEquals(1168.875F, lightSource3.getDiameter(), 0.01F);
      assertEquals(2383.896F, lightSource3.getY(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertNotNull(lightSource3);
      
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(3489.2F, 1141.11F, 0.0F, 546);
      assertNull(lightSource4.getDiameter());
      assertEquals(3489.2F, lightSource4.getX(), 0.01F);
      assertEquals(546, lightSource4.getColor());
      assertEquals(0.0F, lightSource4.getZ(), 0.01F);
      assertEquals(1141.11F, lightSource4.getY(), 0.01F);
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertNotNull(lightSource4);
      
      lightSourceArray0[4] = lightSource4;
      Float float2 = new Float((-1623.7F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1623.7F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      LightSource lightSource5 = new LightSource((-1.0F), 158.0F, 0.0F, (-1264), float2);
      assertEquals((-1623.7F), lightSource5.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource5.getZ(), 0.01F);
      assertEquals(158.0F, lightSource5.getY(), 0.01F);
      assertEquals((-1264), lightSource5.getColor());
      assertEquals((-1.0F), lightSource5.getX(), 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertFalse(lightSource5.equals((Object)lightSource2));
      assertFalse(lightSource5.equals((Object)lightSource1));
      assertFalse(lightSource5.equals((Object)lightSource3));
      assertFalse(lightSource5.equals((Object)lightSource4));
      assertFalse(lightSource5.equals((Object)lightSource0));
      assertNotNull(lightSource5);
      
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(1687.8942F, 0.0F, 1141.11F, (-1264));
      assertEquals(0.0F, lightSource6.getY(), 0.01F);
      assertEquals(1687.8942F, lightSource6.getX(), 0.01F);
      assertEquals((-1264), lightSource6.getColor());
      assertNull(lightSource6.getDiameter());
      assertEquals(1141.11F, lightSource6.getZ(), 0.01F);
      assertFalse(lightSource6.equals((Object)lightSource0));
      assertFalse(lightSource6.equals((Object)lightSource4));
      assertFalse(lightSource6.equals((Object)lightSource2));
      assertFalse(lightSource6.equals((Object)lightSource3));
      assertFalse(lightSource6.equals((Object)lightSource1));
      assertFalse(lightSource6.equals((Object)lightSource5));
      assertNotNull(lightSource6);
      
      lightSourceArray0[6] = lightSource6;
      LightSource lightSource7 = new LightSource(0.0F, 158.0F, (-1623.7F), (-1264), float1);
      assertEquals(158.0F, lightSource7.getY(), 0.01F);
      assertEquals(0.0F, lightSource7.getX(), 0.01F);
      assertEquals(1168.875F, lightSource7.getDiameter(), 0.01F);
      assertEquals((-1264), lightSource7.getColor());
      assertEquals((-1623.7F), lightSource7.getZ(), 0.01F);
      assertFalse(lightSource7.equals((Object)lightSource4));
      assertFalse(lightSource7.equals((Object)lightSource3));
      assertFalse(lightSource7.equals((Object)lightSource0));
      assertFalse(lightSource7.equals((Object)lightSource6));
      assertFalse(lightSource7.equals((Object)lightSource5));
      assertFalse(lightSource7.equals((Object)lightSource1));
      assertFalse(lightSource7.equals((Object)lightSource2));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotNull(lightSource7);
      
      lightSourceArray0[7] = lightSource7;
      LightSource lightSource8 = new LightSource(3489.2F, 0.0F, 546, 46);
      assertEquals(546.0F, lightSource8.getZ(), 0.01F);
      assertNull(lightSource8.getDiameter());
      assertEquals(3489.2F, lightSource8.getX(), 0.01F);
      assertEquals(0.0F, lightSource8.getY(), 0.01F);
      assertEquals(46, lightSource8.getColor());
      assertFalse(lightSource8.equals((Object)lightSource1));
      assertFalse(lightSource8.equals((Object)lightSource3));
      assertFalse(lightSource8.equals((Object)lightSource6));
      assertFalse(lightSource8.equals((Object)lightSource5));
      assertFalse(lightSource8.equals((Object)lightSource7));
      assertFalse(lightSource8.equals((Object)lightSource0));
      assertFalse(lightSource8.equals((Object)lightSource4));
      assertFalse(lightSource8.equals((Object)lightSource2));
      assertNotNull(lightSource8);
      
      lightSourceArray0[8] = lightSource8;
      BigDecimal bigDecimal0 = new BigDecimal(46);
      assertEquals((short)46, bigDecimal0.shortValue());
      assertEquals((byte)46, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("/%2?\" m7Tr", "/%2?\" m7Tr", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", (Content) null, (Content) null, (Content) null, 1875.92F, 3489.2F, 1875.92F, 1875.92F, false, lightSourceArray0, (float[][]) null, "/%2?\" m7Tr", false, bigDecimal0, bigDecimal0);
      assertEquals((short)46, bigDecimal0.shortValue());
      assertEquals((byte)46, bigDecimal0.byteValue());
      assertEquals("/%2?\" m7Tr", catalogLight0.getName());
      assertEquals(1875.92F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("/%2?\" m7Tr", catalogLight0.getCreator());
      assertFalse(catalogLight0.isResizable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1875.92F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1875.92F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3489.2F, catalogLight0.getDepth(), 0.01F);
      assertNotNull(catalogLight0);
      assertEquals(9, lightSourceArray0.length);
      
      LightSource[] lightSourceArray1 = catalogLight0.getLightSources();
      assertEquals((short)46, bigDecimal0.shortValue());
      assertEquals((byte)46, bigDecimal0.byteValue());
      assertEquals("/%2?\" m7Tr", catalogLight0.getName());
      assertEquals(1875.92F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("/%2?\" m7Tr", catalogLight0.getCreator());
      assertFalse(catalogLight0.isResizable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1875.92F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1875.92F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3489.2F, catalogLight0.getDepth(), 0.01F);
      assertFalse(lightSourceArray1.equals((Object)lightSourceArray0));
      assertNotNull(lightSourceArray1);
      assertNotSame(lightSourceArray0, lightSourceArray1);
      assertNotSame(lightSourceArray1, lightSourceArray0);
      assertEquals(9, lightSourceArray0.length);
      assertEquals(9, lightSourceArray1.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)46, bigDecimal0.shortValue());
      assertEquals((byte)46, bigDecimal0.byteValue());
      assertEquals("/%2?\" m7Tr", catalogLight0.getName());
      assertEquals(1875.92F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("/%2?\" m7Tr", catalogLight0.getCreator());
      assertFalse(catalogLight0.isResizable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1875.92F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1875.92F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3489.2F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getCatalogId());
      assertEquals(1875.92F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1875.92F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(3489.2F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(937.96F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1875.92F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1744.6F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(1875.92F, homeLight0.getWidth(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(lightSourceArray0.equals((Object)lightSourceArray1));
      assertNotNull(homeLight0);
      assertEquals(9, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals((short)46, bigDecimal0.shortValue());
      assertEquals((byte)46, bigDecimal0.byteValue());
      assertEquals("/%2?\" m7Tr", catalogLight0.getName());
      assertEquals(1875.92F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("/%2?\" m7Tr", catalogLight0.getCreator());
      assertFalse(catalogLight0.isResizable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1875.92F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1875.92F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3489.2F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getCatalogId());
      assertEquals(1875.92F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1875.92F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(3489.2F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(937.96F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1875.92F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1744.6F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(1875.92F, homeLight0.getWidth(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight1.getDescription());
      assertEquals(1875.92F, homeLight1.getHeight(), 0.01F);
      assertEquals(1875.92F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(1875.92F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(1744.6F, homeLight1.getY(), 0.01F);
      assertEquals(937.96F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(1875.92F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("/%2?\" m7Tr", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isTexturable());
      assertEquals(3489.2F, homeLight1.getDepth(), 0.01F);
      assertFalse(lightSourceArray0.equals((Object)lightSourceArray1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(lightSourceArray0, lightSourceArray1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(9, lightSourceArray0.length);
      
      boolean boolean0 = homeLight1.isResizable();
      assertEquals((short)46, bigDecimal0.shortValue());
      assertEquals((byte)46, bigDecimal0.byteValue());
      assertEquals("/%2?\" m7Tr", catalogLight0.getName());
      assertEquals(1875.92F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("/%2?\" m7Tr", catalogLight0.getCreator());
      assertFalse(catalogLight0.isResizable());
      assertEquals("/%2?\" m7Tr", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1875.92F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1875.92F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3489.2F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getCatalogId());
      assertEquals(1875.92F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(1875.92F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(3489.2F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(937.96F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(1875.92F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1744.6F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(1875.92F, homeLight0.getWidth(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", homeLight1.getDescription());
      assertEquals(1875.92F, homeLight1.getHeight(), 0.01F);
      assertEquals(1875.92F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("/%2?\" m7Tr", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(1875.92F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(1744.6F, homeLight1.getY(), 0.01F);
      assertEquals(937.96F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(1875.92F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("/%2?\" m7Tr", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isTexturable());
      assertEquals(3489.2F, homeLight1.getDepth(), 0.01F);
      assertFalse(lightSourceArray0.equals((Object)lightSourceArray1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean0);
      assertNotSame(lightSourceArray0, lightSourceArray1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(9, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(333.244F, sash0.getEndAngle(), 0.01F);
      assertEquals(4565.81F, sash0.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      assertEquals(1.0F, sash1.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash1.getXAxis(), 0.01F);
      assertEquals(1872.0F, sash1.getWidth(), 0.01F);
      assertEquals(1474.1F, sash1.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash1.getYAxis(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      assertEquals("2Lj\u0000!xjG8m", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Integer integer0 = new Integer((-1566));
      assertEquals((-1566), (int)integer0);
      assertNotNull(integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 1.0F, false, false, integer0, (float[][]) null, false, (-613.5F), true);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2808.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNotNull(catalogPieceOfFurniture0);
      
      int int0 = Integer.remainderUnsigned((-1566), (-672));
      assertEquals((-1566), int0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2808.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals((-1566), (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1404.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(2808.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-613.5F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(homePieceOfFurniture0);
      
      String string0 = homePieceOfFurniture0.getStaircaseCutOutShape();
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2808.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals((-1566), (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1404.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(2808.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-613.5F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(integer0.equals((Object)int0));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(1.0F, (-1.0F), 1.0F, (-1.0F), 333.244F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(1.0F, sash0.getWidth(), 0.01F);
      assertEquals((-1.0F), sash0.getYAxis(), 0.01F);
      assertEquals(333.244F, sash0.getEndAngle(), 0.01F);
      assertEquals(1.0F, sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "", "", (Content) null, (Content) null, (Content) null, 1.0F, 333.244F, 3324.527F, 6013.95F, false, (-1689.7671F), (-1.0F), sashArray0, floatArray0, "i{Qd", false, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(333.244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(333.244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(166.622F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      String string0 = homeDoorOrWindow0.getName();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(333.244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(166.622F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(333.244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(166.622F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(333.244F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(166.622F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isDeformable();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(333.244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(166.622F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(333.244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getName());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertEquals(333.244F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(166.622F, homeDoorOrWindow2.getY(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertFalse(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertFalse(homeDoorOrWindow2.isResizable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertNotNull(homeDoorOrWindow2);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(333.244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getName());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertEquals(333.244F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(166.622F, homeDoorOrWindow2.getY(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertFalse(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertFalse(homeDoorOrWindow2.isResizable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow3.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow3.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow3.isModelMirrored());
      assertNull(homeDoorOrWindow3.getColor());
      assertEquals(0.5F, homeDoorOrWindow3.getX(), 0.01F);
      assertNull(homeDoorOrWindow3.getCurrency());
      assertTrue(homeDoorOrWindow3.isVisible());
      assertEquals(0.0F, homeDoorOrWindow3.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow3.getStaircaseCutOutShape());
      assertEquals(6013.95F, homeDoorOrWindow3.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow3.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow3.isResizable());
      assertEquals("i{Qd", homeDoorOrWindow3.getCatalogId());
      assertFalse(homeDoorOrWindow3.isMovable());
      assertEquals(3324.527F, homeDoorOrWindow3.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow3.getShininess());
      assertTrue(homeDoorOrWindow3.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow3.getWallThickness(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow3.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow3.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow3.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow3.getDescription());
      assertFalse(homeDoorOrWindow3.isBoundToWall());
      assertEquals(166.622F, homeDoorOrWindow3.getY(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow3.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow3.isBackFaceShown());
      assertEquals("", homeDoorOrWindow3.getName());
      assertFalse(homeDoorOrWindow3.isNameVisible());
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow1));
      assertNotNull(homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      float float0 = homeDoorOrWindow0.getDepth();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(333.244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(166.622F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(333.244F, float0, 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = homeDoorOrWindow1.isTopRightPointAt(905.0F, 1967.7954F, 3221.7925F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(333.244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(166.622F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(333.244F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(3324.527F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(166.622F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      Float float1 = homeDoorOrWindow0.getShininess();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3324.527F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(333.244F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(333.244F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(166.622F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3324.527F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(float1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 1.3999095F, 1.3999095F, 0.68662703F, 333.0F);
      assertEquals(333.0F, sash0.getEndAngle(), 0.01F);
      assertEquals(1.3999095F, sash0.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals(0.68662703F, sash0.getStartAngle(), 0.01F);
      assertEquals(1.3999095F, sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[11] = sash0;
      float[][] floatArray0 = new float[6][6];
      Integer integer0 = new Integer((-1566));
      assertEquals((-1566), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-538));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-538), (int)integer1);
      assertNotNull(integer1);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 3186.5178F, 0.68662703F, (-1.0F), 1.3999095F, true, true, integer1, floatArray0, false, 3.4028235E38F, true);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(3186.5178F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.3999095F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.68662703F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-538), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(6, floatArray0.length);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(3186.5178F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.3999095F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.68662703F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-538), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1593.2589F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.34331352F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.3999095F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.3999095F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.68662703F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-538), (int)homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(3186.5178F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(homePieceOfFurniture0);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = homePieceOfFurniture0.isDeformable();
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(3186.5178F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.3999095F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.68662703F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-538), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1593.2589F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.34331352F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.3999095F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.3999095F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.68662703F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-538), (int)homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(3186.5178F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean0);
      assertEquals(6, floatArray0.length);
      
      homePieceOfFurniture0.setVisible(true);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(3186.5178F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.3999095F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.68662703F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-538), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1593.2589F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.34331352F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.3999095F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.3999095F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.68662703F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-538), (int)homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(3186.5178F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(6, floatArray0.length);
      
      homePieceOfFurniture0.setModelMirrored(true);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(3186.5178F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.3999095F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.68662703F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-538), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1593.2589F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.34331352F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.3999095F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.3999095F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.68662703F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-538), (int)homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(3186.5178F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(6, floatArray0.length);
      
      Level level0 = homePieceOfFurniture0.getLevel();
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(3186.5178F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.3999095F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.68662703F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-538), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1593.2589F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.34331352F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.3999095F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.3999095F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.68662703F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-538), (int)homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(3186.5178F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(integer1.equals((Object)integer0));
      assertNull(level0);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = homePieceOfFurniture0.isAtLevel((Level) null);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(3186.5178F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.3999095F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.68662703F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-538), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1593.2589F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.34331352F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.3999095F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.3999095F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.68662703F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-538), (int)homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(3186.5178F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals(4565.81F, sash0.getYAxis(), 0.01F);
      assertEquals(333.244F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 333.244F);
      assertEquals((-1.0F), sash1.getYAxis(), 0.01F);
      assertEquals(1872.0F, sash1.getWidth(), 0.01F);
      assertEquals(1474.1F, sash1.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash1.getXAxis(), 0.01F);
      assertEquals(333.244F, sash1.getEndAngle(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, (-1.0F), 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeDoorOrWindow0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(1581.3062F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homePieceOfFurniture0.getName());
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("i{Qd", homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(790.6531F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(6013.95F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(6013.95F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNotNull(homePieceOfFurniture0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setDepth(0.0F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isDeformable();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow1.setNameVisible(true);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = homeDoorOrWindow1.isVisible();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      String string0 = homeDoorOrWindow1.getDescription();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.2F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals(4565.81F, sash0.getYAxis(), 0.01F);
      assertEquals(333.2F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      assertEquals(1872.0F, sash1.getWidth(), 0.01F);
      assertEquals((-1.0F), sash1.getXAxis(), 0.01F);
      assertEquals(1.0F, sash1.getEndAngle(), 0.01F);
      assertEquals(1474.1F, sash1.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash1.getYAxis(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[9][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{@d", "i{@d", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, false, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{@d", true, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow1.getName());
      assertEquals("i{@d", homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals("i{@d", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(3323.76F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals("i{@d", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      boolean boolean0 = homeDoorOrWindow2.isBottomRightPointAt(0.5F, 1474.1F, 6013.95F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals("i{@d", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(3323.76F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals("i{@d", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      homeDoorOrWindow0.setVisible(false);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      homeDoorOrWindow1.setName("i{@d");
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow1.getName());
      assertEquals("i{@d", homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertEquals(2, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      boolean boolean1 = homeDoorOrWindow2.isTopLeftPointAt(333.2F, (-1.0F), 333.2F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals("i{@d", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(3323.76F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals("i{@d", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      float float0 = homeDoorOrWindow1.getDepth();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow1.getName());
      assertEquals("i{@d", homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertEquals(1581.3062F, float0, 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertEquals(2, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      boolean boolean2 = homeDoorOrWindow2.isTopRightPointAt(1.0F, (-1.0F), (-136.0F));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals("i{@d", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(3323.76F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals("i{@d", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      boolean boolean3 = homeDoorOrWindow0.isPointAt(3323.76F, 3323.76F, 1474.1F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(boolean3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 1.3999095F, 1.3999095F, 0.68662703F, 333.0F);
      assertEquals(1.3999095F, sash0.getWidth(), 0.01F);
      assertEquals(0.68662703F, sash0.getStartAngle(), 0.01F);
      assertEquals(1.3999095F, sash0.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals(333.0F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[11] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 1.3999095F, 333.0F, (-1.0F), 333.0F, true, 333.0F, 2630.2837F, sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setName("E1<H50Y<?J");
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      String string0 = bigDecimal0.toPlainString();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("1", string0);
      assertNotNull(string0);
      
      boolean boolean0 = homeDoorOrWindow0.isNameCenterPointAt((-1033.5F), 1.0F, (-1.0F));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(boolean0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = homeDoorOrWindow0.isBottomLeftPointAt(0.68662703F, 638.7751F, 638.7751F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean2 = homeDoorOrWindow0.intersectsRectangle(638.7751F, (-1.0F), 333.0F, 0.68662703F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean3 = homeDoorOrWindow0.isTexturable();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      Content content0 = homeDoorOrWindow0.getIcon();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(content0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Sash sash0 = new Sash(1.0F, 4565.81F, 1.0F, (-1.0F), (-1.0F));
      assertEquals(1.0F, sash0.getWidth(), 0.01F);
      assertEquals(1.0F, sash0.getXAxis(), 0.01F);
      assertEquals(4565.81F, sash0.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      Float float0 = new Float(3.4028235E38F);
      assertEquals(3.4028235E38F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1.0F));
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "4+}njb9%Lg", (Content) null, (Content) null, (Content) null, 3489.2F, (-1.0F), 1069.128F, 1819.3F, false, lightSourceArray0, (float[][]) null, "4+}njb9%Lg", false, bigDecimal0, bigDecimal0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("4+}njb9%Lg", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1819.3F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("4+}njb9%Lg", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(3489.2F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(1069.128F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertNotNull(catalogLight0);
      assertEquals(0, lightSourceArray0.length);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("4+}njb9%Lg", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1819.3F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("4+}njb9%Lg", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(3489.2F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(1069.128F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals(1744.6F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertEquals(1819.3F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("4+}njb9%Lg", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(1069.128F, homeLight0.getHeight(), 0.01F);
      assertEquals(3489.2F, homeLight0.getWidth(), 0.01F);
      assertEquals(1819.3F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      assertEquals(0, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("4+}njb9%Lg", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1819.3F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("4+}njb9%Lg", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(3489.2F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(1069.128F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals(1744.6F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertEquals(1819.3F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("4+}njb9%Lg", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(1069.128F, homeLight0.getHeight(), 0.01F);
      assertEquals(3489.2F, homeLight0.getWidth(), 0.01F);
      assertEquals(1819.3F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-0.5F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("", homeLight1.getName());
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(1069.128F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(3489.2F, homeLight1.getWidth(), 0.01F);
      assertEquals(1744.6F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(1819.3F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals("4+}njb9%Lg", homeLight1.getDescription());
      assertEquals(1819.3F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(0, lightSourceArray0.length);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("4+}njb9%Lg", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1819.3F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("4+}njb9%Lg", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(3489.2F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(1069.128F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals(1744.6F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertEquals(1819.3F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("4+}njb9%Lg", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(1069.128F, homeLight0.getHeight(), 0.01F);
      assertEquals(3489.2F, homeLight0.getWidth(), 0.01F);
      assertEquals(1819.3F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(0, lightSourceArray0.length);
      
      BigDecimal bigDecimal2 = homeLight0.getPriceValueAddedTaxIncluded();
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("4+}njb9%Lg", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1819.3F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("4+}njb9%Lg", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(3489.2F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(1069.128F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals(1744.6F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertEquals(1819.3F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("4+}njb9%Lg", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(1069.128F, homeLight0.getHeight(), 0.01F);
      assertEquals(3489.2F, homeLight0.getWidth(), 0.01F);
      assertEquals(1819.3F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals(0, lightSourceArray0.length);
      
      homeLight1.setMovable(false);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("4+}njb9%Lg", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(1819.3F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("4+}njb9%Lg", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(3489.2F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(1069.128F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals(1744.6F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertEquals(1819.3F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("4+}njb9%Lg", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertEquals(1069.128F, homeLight0.getHeight(), 0.01F);
      assertEquals(3489.2F, homeLight0.getWidth(), 0.01F);
      assertEquals(1819.3F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-0.5F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("", homeLight1.getName());
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(1069.128F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(3489.2F, homeLight1.getWidth(), 0.01F);
      assertEquals(1744.6F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(1819.3F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals("4+}njb9%Lg", homeLight1.getDescription());
      assertEquals(1819.3F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeLight1.getDepth(), 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.0952740898778));
      assertEquals((short) (-208), bigDecimal0.shortValue());
      assertEquals((byte)48, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Lj\u0000!xjG8m", propertyChangeListener0);
      assertEquals("2Lj\u0000!xjG8m", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Integer integer0 = new Integer((-1566));
      assertEquals((-1566), (int)integer0);
      assertNotNull(integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2808.0F, 1.0F, (-613.5F), 4565.81F, true, true, integer0, (float[][]) null, false, (-613.5F), true);
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(4565.81F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(4565.81F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1566), (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1404.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-613.5F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2808.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(4565.81F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(4565.81F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNotNull(homePieceOfFurniture0);
      
      int int0 = Integer.compare((-1566), (-1566));
      assertEquals(0, int0);
      
      homePieceOfFurniture0.setNameAngle((-1816.1F));
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(4565.81F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1566), (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1404.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-613.5F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2808.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(4565.81F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(4565.81F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(6.0237637F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(integer0.equals((Object)int0));
      
      homePieceOfFurniture0.setDepth(905.0F);
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(4565.81F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1566), (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1404.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-613.5F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2808.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(4565.81F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(4565.81F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(6.0237637F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(905.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = homePieceOfFurniture0.isDeformable();
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(4565.81F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1566), (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1404.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-613.5F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2808.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(4565.81F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(4565.81F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(6.0237637F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(905.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      homePieceOfFurniture0.setModelMirrored(true);
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(4565.81F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1566), (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1404.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-613.5F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2808.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(4565.81F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(4565.81F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(6.0237637F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(905.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(integer0.equals((Object)int0));
      
      BigDecimal bigDecimal1 = homePieceOfFurniture0.getValueAddedTax();
      assertEquals((-613.5F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-613.5F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1566), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(2808.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(4565.81F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1566), (int)homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(1404.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-613.5F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2808.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(4565.81F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(4565.81F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(6.0237637F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(905.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(integer0.equals((Object)int0));
      assertNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.2F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals(4565.81F, sash0.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals(333.2F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      assertEquals(1.0F, sash1.getEndAngle(), 0.01F);
      assertEquals(1872.0F, sash1.getWidth(), 0.01F);
      assertEquals((-1.0F), sash1.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash1.getXAxis(), 0.01F);
      assertEquals(1474.1F, sash1.getStartAngle(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{@d", "i{@d", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{@d", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("i{@d", homeDoorOrWindow1.getName());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(3323.76F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("i{@d", homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals("i{@d", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals("i{@d", homeDoorOrWindow2.getName());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertEquals(0.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setVisible(false);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow1.setName("i{@d");
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("i{@d", homeDoorOrWindow1.getName());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(3323.76F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("i{@d", homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = homeDoorOrWindow2.isTopLeftPointAt(333.2F, (-1.0F), 333.2F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals("i{@d", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals("i{@d", homeDoorOrWindow2.getName());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertEquals(0.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      float float0 = homeDoorOrWindow1.getDepth();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("i{@d", homeDoorOrWindow1.getName());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(3323.76F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("i{@d", homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(1581.3062F, float0, 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = homeDoorOrWindow2.isTopRightPointAt(1.0F, (-1.0F), (-136.0F));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals("i{@d", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals("i{@d", homeDoorOrWindow2.getName());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertEquals(0.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean2 = homeDoorOrWindow0.isPointAt(3323.76F, 3323.76F, 1474.1F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{@d", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("i{@d", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("i{@d", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("i{@d", homeDoorOrWindow0.getCatalogId());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("i{@d", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(boolean2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash((-1.0F), 1.3999095F, 1.3999095F, 0.68662703F, 333.0F);
      assertEquals(1.3999095F, sash0.getYAxis(), 0.01F);
      assertEquals(0.68662703F, sash0.getStartAngle(), 0.01F);
      assertEquals(333.0F, sash0.getEndAngle(), 0.01F);
      assertEquals(1.3999095F, sash0.getWidth(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[11] = sash0;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 1.3999095F, 333.0F, (-1.0F), 333.0F, true, 333.0F, 2630.2837F, sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setNameXOffset(0.68662703F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setName("E1<H50Y<?J");
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isTopRightPointAt(1.3999095F, 205.0F, (-1689.7671F));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(boolean0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setNameAngle(3800.4F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(5.3559766F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean1 = homeDoorOrWindow0.isNameCenterPointAt(166.622F, 0.092076F, 1.3999095F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(5.3559766F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean2 = homeDoorOrWindow0.isBottomLeftPointAt(0.68662703F, 1.3999095F, 1.3999095F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(5.3559766F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setNameVisible(true);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(5.3559766F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean3 = homeDoorOrWindow0.isBottomLeftPointAt((-1689.7671F), (-1689.7671F), 0.68662703F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(5.3559766F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(5.3559766F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.69995475F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(333.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(333.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isNameVisible());
      assertEquals(333.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1.3999095F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2630.2837F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(5.3559766F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      String string0 = homeDoorOrWindow1.getDescription();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(5.3559766F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.69995475F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.69995475F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(333.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(333.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isNameVisible());
      assertEquals(333.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1.3999095F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2630.2837F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(5.3559766F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", "E1<H50Y<?J", "", (Content) null, (Content) null, (Content) null, 0.0F, 205.0F, 1.3999095F, (-1.0F), false, 3324.527F, 1.3999095F, sashArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(3324.527F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getColor());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertEquals("", catalogDoorOrWindow1.getId());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(1.3999095F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("E1<H50Y<?J", catalogDoorOrWindow1.getName());
      assertEquals(1.3999095F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(205.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      int int0 = catalogDoorOrWindow0.compareTo((CatalogPieceOfFurniture) catalogDoorOrWindow1);
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(3324.527F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow1.getColor());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getInformation());
      assertEquals("", catalogDoorOrWindow1.getId());
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(1.3999095F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("E1<H50Y<?J", catalogDoorOrWindow1.getName());
      assertEquals(1.3999095F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(205.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertEquals((-1), int0);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setX(1.0F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(5.3559766F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow1.setAngle(0.68662703F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(5.3559766F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.69995475F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(333.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(333.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isNameVisible());
      assertEquals(333.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1.3999095F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2630.2837F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.68662703F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(5.3559766F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean4 = homeDoorOrWindow0.isTexturable();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(5.3559766F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean4);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow1.clone();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(333.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(1.3999095F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(333.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(333.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2630.2837F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(2630.2837F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(1.3999095F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertEquals(5.3559766F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow2.getY(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertEquals(333.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isNameVisible());
      assertEquals(0.69995475F, homeDoorOrWindow2.getX(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals(333.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.68662703F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(0.68662703F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(5.3559766F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1.3999095F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(333.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(333.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(2630.2837F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.69995475F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(333.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("E1<H50Y<?J", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(333.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isNameVisible());
      assertEquals(333.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.68662703F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1.3999095F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2630.2837F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.68662703F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(5.3559766F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(166.5F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(333.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(21, sashArray0.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[7];
      Sash sash0 = new Sash(134.48123F, 173.0F, (-1844.8129F), 2810.14F, 134.48123F);
      assertEquals(2810.14F, sash0.getStartAngle(), 0.01F);
      assertEquals(173.0F, sash0.getYAxis(), 0.01F);
      assertEquals(134.48123F, sash0.getXAxis(), 0.01F);
      assertEquals((-1844.8129F), sash0.getWidth(), 0.01F);
      assertEquals(134.48123F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.3926991F, (-403.05783F), (-403.05783F), (-4254.1294F), 3.4028235E38F);
      assertEquals(0.3926991F, sash1.getXAxis(), 0.01F);
      assertEquals((-403.05783F), sash1.getWidth(), 0.01F);
      assertEquals((-403.05783F), sash1.getYAxis(), 0.01F);
      assertEquals(3.4028235E38F, sash1.getEndAngle(), 0.01F);
      assertEquals((-4254.1294F), sash1.getStartAngle(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-1.0F), (-4254.1294F), 1.0F, 1.0F, (-1.0F));
      assertEquals((-4254.1294F), sash2.getYAxis(), 0.01F);
      assertEquals(1.0F, sash2.getWidth(), 0.01F);
      assertEquals((-1.0F), sash2.getXAxis(), 0.01F);
      assertEquals(1.0F, sash2.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash2.getEndAngle(), 0.01F);
      assertFalse(sash2.equals((Object)sash1));
      assertFalse(sash2.equals((Object)sash0));
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(0.0F, 1.0F, (-1844.8129F), 277.09454F, 134.48123F);
      assertEquals(1.0F, sash3.getYAxis(), 0.01F);
      assertEquals(277.09454F, sash3.getStartAngle(), 0.01F);
      assertEquals(134.48123F, sash3.getEndAngle(), 0.01F);
      assertEquals((-1844.8129F), sash3.getWidth(), 0.01F);
      assertEquals(0.0F, sash3.getXAxis(), 0.01F);
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash0));
      assertFalse(sash3.equals((Object)sash1));
      assertNotNull(sash3);
      
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(2810.14F, 0.0F, 1.0F, 0.0F, 173.0F);
      assertEquals(0.0F, sash4.getYAxis(), 0.01F);
      assertEquals(173.0F, sash4.getEndAngle(), 0.01F);
      assertEquals(1.0F, sash4.getWidth(), 0.01F);
      assertEquals(0.0F, sash4.getStartAngle(), 0.01F);
      assertEquals(2810.14F, sash4.getXAxis(), 0.01F);
      assertFalse(sash4.equals((Object)sash3));
      assertFalse(sash4.equals((Object)sash1));
      assertFalse(sash4.equals((Object)sash0));
      assertFalse(sash4.equals((Object)sash2));
      assertNotNull(sash4);
      
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(2601.841F, 0.0F, (-1844.8129F), 0.0F, (-1844.8129F));
      assertEquals((-1844.8129F), sash5.getEndAngle(), 0.01F);
      assertEquals((-1844.8129F), sash5.getWidth(), 0.01F);
      assertEquals(0.0F, sash5.getStartAngle(), 0.01F);
      assertEquals(2601.841F, sash5.getXAxis(), 0.01F);
      assertEquals(0.0F, sash5.getYAxis(), 0.01F);
      assertFalse(sash5.equals((Object)sash0));
      assertFalse(sash5.equals((Object)sash3));
      assertFalse(sash5.equals((Object)sash2));
      assertFalse(sash5.equals((Object)sash4));
      assertFalse(sash5.equals((Object)sash1));
      assertNotNull(sash5);
      
      Sash sash6 = new Sash((-4254.1294F), 0.0F, (-989.9386F), (-4254.1294F), 3.4028235E38F);
      assertEquals(3.4028235E38F, sash6.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash6.getYAxis(), 0.01F);
      assertEquals((-4254.1294F), sash6.getXAxis(), 0.01F);
      assertEquals((-989.9386F), sash6.getWidth(), 0.01F);
      assertEquals((-4254.1294F), sash6.getStartAngle(), 0.01F);
      assertFalse(sash6.equals((Object)sash5));
      assertFalse(sash6.equals((Object)sash3));
      assertFalse(sash6.equals((Object)sash1));
      assertFalse(sash6.equals((Object)sash4));
      assertFalse(sash6.equals((Object)sash2));
      assertFalse(sash6.equals((Object)sash0));
      assertNotNull(sash6);
      
      sashArray0[6] = sash6;
      Integer integer0 = Integer.valueOf(2719);
      assertEquals(2719, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = new float[7][7];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 173.0F;
      floatArray1[1] = (-1.0F);
      floatArray1[2] = 1.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[8];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 2810.14F;
      floatArray2[1] = 3.4028235E38F;
      floatArray2[2] = 134.48123F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = (-403.05783F);
      floatArray2[5] = 2601.841F;
      floatArray2[6] = 0.0F;
      floatArray2[7] = (float) 2719;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.3926991F;
      floatArray3[3] = 0.5F;
      floatArray3[4] = 3.4028235E38F;
      floatArray3[5] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[2];
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray5[0] = 1.0F;
      floatArray5[1] = 0.3926991F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[2];
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray1));
      
      floatArray6[0] = (float) 2719;
      floatArray6[1] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[8];
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray1));
      
      floatArray7[0] = (float) 2719;
      floatArray7[1] = 0.5F;
      floatArray7[2] = 1.0F;
      floatArray7[3] = 0.0F;
      floatArray7[4] = 3.4028235E38F;
      floatArray7[5] = 0.0F;
      floatArray7[6] = 0.0F;
      floatArray7[7] = 0.5F;
      floatArray0[6] = floatArray7;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", resourceURLContent0, resourceURLContent0, (-4254.1294F), (-4254.1294F), 0.5F, (-4254.1294F), false, 173.0F, 2810.14F, sashArray0, integer0, floatArray0, true, 0.0F, true);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-4254.1294F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2719, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(2810.14F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.5F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(173.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-4254.1294F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-4254.1294F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getId());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-4254.1294F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2719, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(2810.14F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.5F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(173.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-4254.1294F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-4254.1294F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-4254.1294F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-4254.1294F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-2127.0647F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-2127.0647F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-4254.1294F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-4254.1294F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(173.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.5F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2810.14F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(2719, (int)homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(7, floatArray0.length);
      assertEquals(7, sashArray0.length);
      
      homeDoorOrWindow0.setAngle((-1.0F));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-4254.1294F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2719, (int)catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(2810.14F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.5F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(173.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-4254.1294F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-4254.1294F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-4254.1294F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-4254.1294F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-2127.0647F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-2127.0647F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-4254.1294F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-4254.1294F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(173.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(5.2831855F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.5F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2810.14F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(2719, (int)homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(7, floatArray0.length);
      assertEquals(7, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Sash sash0 = new Sash((-1.0F), (-1.0F), 4565.81F, (-1.0F), 13.877942F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(4565.81F, sash0.getWidth(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getYAxis(), 0.01F);
      assertEquals(13.877942F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = new BigDecimal(333.244F);
      assertEquals((short)333, bigDecimal0.shortValue());
      assertEquals((byte)77, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertEquals("", furnitureCategory0.getName());
      assertNotNull(furnitureCategory0);
      
      Float float0 = Float.valueOf(333.244F);
      assertEquals(333.244F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal1 = new BigDecimal((-2283));
      assertEquals((byte)21, bigDecimal1.byteValue());
      assertEquals((short) (-2283), bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(bigDecimal1);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("#%|UH4Os-T*xS9-'", "i{Qd", "", (Content) null, (Content) null, 3766.74F, 2230.9F, 3323.76F, 1762.58F, true, 1.0F, 6013.95F, sashArray0, floatArray0, "#%|UH4Os-T*xS9-'", true, bigDecimal1, bigDecimal0);
      assertEquals((short)333, bigDecimal0.shortValue());
      assertEquals((byte)77, bigDecimal0.byteValue());
      assertEquals((byte)21, bigDecimal1.byteValue());
      assertEquals((short) (-2283), bigDecimal1.shortValue());
      assertEquals(3766.74F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1762.58F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2230.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(4, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)333, bigDecimal0.shortValue());
      assertEquals((byte)77, bigDecimal0.byteValue());
      assertEquals((byte)21, bigDecimal1.byteValue());
      assertEquals((short) (-2283), bigDecimal1.shortValue());
      assertEquals(3766.74F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1762.58F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2230.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertEquals(2230.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(3766.74F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1883.37F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1762.58F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1115.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1762.58F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(4, sashArray0.length);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("PRICE_VALUE_ADDED_TAX_INCLUDED", (Content) null, 2.0F, (-899.7081F));
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(2.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals((-899.7081F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogTexture0.getName());
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(2.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals((-899.7081F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogTexture0.getName());
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(2.0F, homeTexture0.getWidth(), 0.01F);
      assertEquals((-899.7081F), homeTexture0.getHeight(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeTexture0.getName());
      assertNotNull(homeTexture0);
      
      boolean boolean1 = homeTexture0.equals((Object) null);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(2.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals((-899.7081F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogTexture0.getName());
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(2.0F, homeTexture0.getWidth(), 0.01F);
      assertEquals((-899.7081F), homeTexture0.getHeight(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeTexture0.getName());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      homeDoorOrWindow0.setTexture(homeTexture0);
      assertEquals((short)333, bigDecimal0.shortValue());
      assertEquals((byte)77, bigDecimal0.byteValue());
      assertEquals((byte)21, bigDecimal1.byteValue());
      assertEquals((short) (-2283), bigDecimal1.shortValue());
      assertEquals(3766.74F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1762.58F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2230.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertEquals(2230.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(3766.74F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1883.37F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1762.58F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1115.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1762.58F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(2.0F, catalogTexture0.getWidth(), 0.01F);
      assertEquals((-899.7081F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogTexture0.getName());
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(2.0F, homeTexture0.getWidth(), 0.01F);
      assertEquals((-899.7081F), homeTexture0.getHeight(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeTexture0.getName());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(6, floatArray0.length);
      assertEquals(4, sashArray0.length);
      
      boolean boolean2 = homeDoorOrWindow0.isBottomRightPointAt(110.0F, 3323.76F, 3.4028235E38F);
      assertEquals((short)333, bigDecimal0.shortValue());
      assertEquals((byte)77, bigDecimal0.byteValue());
      assertEquals((byte)21, bigDecimal1.byteValue());
      assertEquals((short) (-2283), bigDecimal1.shortValue());
      assertEquals(3766.74F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1762.58F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2230.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertEquals(2230.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(3766.74F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1883.37F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1762.58F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1115.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1762.58F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(boolean2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(6, floatArray0.length);
      assertEquals(4, sashArray0.length);
      
      homeDoorOrWindow0.setDescription("");
      assertEquals((short)333, bigDecimal0.shortValue());
      assertEquals((byte)77, bigDecimal0.byteValue());
      assertEquals((byte)21, bigDecimal1.byteValue());
      assertEquals((short) (-2283), bigDecimal1.shortValue());
      assertEquals(3766.74F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1762.58F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2230.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertEquals(2230.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(3766.74F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1883.37F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1762.58F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1115.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1762.58F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(6, floatArray0.length);
      assertEquals(4, sashArray0.length);
      
      float float1 = homeDoorOrWindow0.getNameXOffset();
      assertEquals((short)333, bigDecimal0.shortValue());
      assertEquals((byte)77, bigDecimal0.byteValue());
      assertEquals((byte)21, bigDecimal1.byteValue());
      assertEquals((short) (-2283), bigDecimal1.shortValue());
      assertEquals(3766.74F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1762.58F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("i{Qd", catalogDoorOrWindow0.getName());
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2230.9F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(6013.95F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("i{Qd", homeDoorOrWindow0.getName());
      assertEquals(2230.9F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(3766.74F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("#%|UH4Os-T*xS9-'", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1883.37F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(1.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1762.58F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1115.45F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1762.58F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(6, floatArray0.length);
      assertEquals(4, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-1.0F), 4565.81F, (-1.0F), (-1.0F), 333.244F);
      assertEquals(333.244F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(4565.81F, sash0.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1872.0F, 1474.1F, 1.0F);
      assertEquals(1474.1F, sash1.getStartAngle(), 0.01F);
      assertEquals(1872.0F, sash1.getWidth(), 0.01F);
      assertEquals(1.0F, sash1.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash1.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash1.getXAxis(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("i{Qd", "Aeil[7-HqY.Ajg o", "", (Content) null, (Content) null, (Content) null, 1.0F, 1581.3062F, 3323.76F, 6013.95F, true, (-1689.7671F), 0.0F, sashArray0, floatArray0, "i{Qd", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(3323.76F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow2.getName());
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = homeDoorOrWindow2.intersectsRectangle(4.2175255F, 0.0F, 915.4737F, 2842.4211F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow2.getName());
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow0.setVisible(false);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      String string0 = homeDoorOrWindow2.getName();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(790.6531F, homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals(1581.3062F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals(6013.95F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow2.getName());
      assertEquals("i{Qd", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals((-1689.7671F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertEquals("Aeil[7-HqY.Ajg o", string0);
      assertNotNull(string0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      homeDoorOrWindow1.setName("");
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3323.76F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getCreator());
      assertEquals(1581.3062F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1689.7671F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(6013.95F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("i{Qd", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Aeil[7-HqY.Ajg o", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3323.76F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Aeil[7-HqY.Ajg o", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(6013.95F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isVisible());
      assertEquals((-1689.7671F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(790.6531F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1689.7671F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("i{Qd", homeDoorOrWindow1.getCatalogId());
      assertEquals(6013.95F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(6013.95F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(3323.76F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1581.3062F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertEquals(2, sashArray0.length);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-208.83221724556682));
      Integer integer0 = new Integer((-1566));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 4565.81F, 1.0F, (-613.5F), 4565.81F, false, false, integer0, (float[][]) null, false, (-613.5F), false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, 4565.81F, 1.0F, true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homePieceOfFurniture0.setTexture(homeTexture0);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.getWidth();
      boolean boolean0 = homePieceOfFurniture0.isBottomRightPointAt(4565.81F, 4565.81F, 1473.6F);
      assertFalse(homePieceOfFurniture0.isVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Sash[] sashArray0 = new Sash[21];
      Sash sash0 = new Sash(0.68662703F, 3800.4F, 0.68662703F, 1.3999095F, 0.68662703F);
      Sash sash1 = new Sash((-1.0F), 1.3999095F, 1.3999095F, 0.68662703F, 1.3999095F);
      sashArray0[11] = sash1;
      float[][] floatArray0 = new float[6][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 1.3999095F, (-1689.7671F), (-1.0F), (-1.0F), true, (-1689.7671F), 2630.2837F, sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameXOffset((-1689.7671F));
      homeDoorOrWindow1.getName();
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName("E1<H50Y<?J");
      homeDoorOrWindow1.isTopRightPointAt(1.3999095F, 205.0F, (-1689.7671F));
      homeDoorOrWindow0.isNameCenterPointAt(166.622F, 0.5F, (-1689.7671F));
      homeDoorOrWindow1.isBottomLeftPointAt(0.68662703F, 1.3999095F, 1.3999095F);
      homeDoorOrWindow2.setDescription("");
      homeDoorOrWindow2.setName("yr=2q%Y>d");
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.setHeight(0.0F);
      homeDoorOrWindow2.isTopLeftPointAt(2268.9607F, 3.6727486F, (-2501.99F));
      assertEquals((-1689.7671F), homeDoorOrWindow0.getNameXOffset(), 0.01F);
  }
}
