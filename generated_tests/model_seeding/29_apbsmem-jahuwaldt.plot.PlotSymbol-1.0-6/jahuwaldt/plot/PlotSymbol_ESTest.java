/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 21:04:31 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.SquareSymbol;
import jahuwaldt.plot.TabDSymbol;
import jahuwaldt.plot.Triangle4Symbol;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.SystemColor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlotSymbol_ESTest extends PlotSymbol_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SquareSymbol squareSymbol0 = new SquareSymbol();
      assertEquals(8, squareSymbol0.getSize());
      
      squareSymbol0.setSize(0);
      int int0 = squareSymbol0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SquareSymbol squareSymbol0 = new SquareSymbol();
      int int0 = squareSymbol0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SquareSymbol squareSymbol0 = new SquareSymbol();
      SystemColor systemColor0 = SystemColor.menuText;
      squareSymbol0.setFillColor(systemColor0);
      squareSymbol0.getFillColor();
      assertEquals(8, squareSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SquareSymbol squareSymbol0 = new SquareSymbol();
      SystemColor systemColor0 = SystemColor.control;
      squareSymbol0.setBorderColor(systemColor0);
      squareSymbol0.getBorderColor();
      assertEquals(8, squareSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SquareSymbol squareSymbol0 = new SquareSymbol();
      Color color0 = new Color(376);
      squareSymbol0.setBorderColor(color0);
      squareSymbol0.getBorderColor();
      assertEquals(8, squareSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TabDSymbol tabDSymbol0 = new TabDSymbol();
      // Undeclared exception!
      try { 
        tabDSymbol0.draw((Graphics) null, (-597), (-597));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PolygonSymbol", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SquareSymbol squareSymbol0 = new SquareSymbol();
      squareSymbol0.getFillColor();
      assertEquals(8, squareSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Triangle4Symbol triangle4Symbol0 = new Triangle4Symbol();
      triangle4Symbol0.getBorderColor();
      assertEquals(8, triangle4Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Triangle4Symbol triangle4Symbol0 = new Triangle4Symbol();
      triangle4Symbol0.setBorderColor((Color) null);
      triangle4Symbol0.getBorderColor();
      assertEquals(8, triangle4Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SquareSymbol squareSymbol0 = new SquareSymbol();
      SquareSymbol squareSymbol1 = (SquareSymbol)squareSymbol0.clone();
      assertNotSame(squareSymbol1, squareSymbol0);
      assertEquals(8, squareSymbol1.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SquareSymbol squareSymbol0 = new SquareSymbol();
      squareSymbol0.setSize((-711));
      int int0 = squareSymbol0.getSize();
      assertEquals((-711), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SquareSymbol squareSymbol0 = new SquareSymbol();
      SystemColor systemColor0 = SystemColor.window;
      squareSymbol0.setFillColor(systemColor0);
      squareSymbol0.getFillColor();
      assertEquals(8, squareSymbol0.getSize());
  }
}
