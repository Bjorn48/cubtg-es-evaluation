/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:00:54 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.BinaryClauses;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CounterBasedPrimeImplicantStrategy_ESTest extends CounterBasedPrimeImplicantStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(4677.278453509181);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      NoRestarts noRestarts0 = new NoRestarts();
      PureOrder pureOrder0 = new PureOrder((-1713));
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, pureOrder0, noRestarts0);
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, (-99));
      solver0.addConstr(binaryClauses0);
      solver0.findModel();
      // Undeclared exception!
      try { 
        counterBasedPrimeImplicantStrategy0.compute(solver0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        counterBasedPrimeImplicantStrategy0.compute((Solver<? extends DataStructureFactory>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      iVecInt0.insertFirst(32);
      AtLeast atLeast0 = new AtLeast((ILits) null, iVecInt0, 32);
      solver0.addConstr(atLeast0);
      solver0.findModel();
      // Undeclared exception!
      try { 
        counterBasedPrimeImplicantStrategy0.compute(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        counterBasedPrimeImplicantStrategy0.getPrimeImplicantAsArrayWithHoles();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the compute method first!
         //
         verifyException("org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, lubyRestarts0);
      int[] intArray0 = solver0.findModel();
      solver0.setVerbose(true);
      int[] intArray1 = counterBasedPrimeImplicantStrategy0.compute(solver0);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, lubyRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      iVecInt0.insertFirst(32);
      solver0.addBlockingClause(iVecInt0);
      AtLeast atLeast0 = new AtLeast((ILits) null, iVecInt0, 32);
      solver0.addConstr(atLeast0);
      solver0.findModel();
      int[] intArray0 = counterBasedPrimeImplicantStrategy0.compute(solver0);
      assertEquals(32, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      SearchParams searchParams0 = new SearchParams(32, 32);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, iLogAble0);
      Constr constr0 = Constr.TAUTOLOGY;
      solver0.addConstr(constr0);
      solver0.findModel();
      // Undeclared exception!
      try { 
        counterBasedPrimeImplicantStrategy0.compute(solver0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Algo2 does not work with constraints other than clauses and cardinalitiesclass org.sat4j.specs.Constr$1
         //
         verifyException("org.sat4j.minisat.core.CounterBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CounterBasedPrimeImplicantStrategy counterBasedPrimeImplicantStrategy0 = new CounterBasedPrimeImplicantStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, lubyRestarts0);
      int[] intArray0 = solver0.findModel();
      counterBasedPrimeImplicantStrategy0.compute(solver0);
      int[] intArray1 = counterBasedPrimeImplicantStrategy0.getPrimeImplicantAsArrayWithHoles();
      assertNotSame(intArray1, intArray0);
  }
}
