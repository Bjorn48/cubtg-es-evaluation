/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 00:30:19 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jigl.image.ColorModel;
import jigl.image.ROI;
import jigl.image.types.RealColorImage;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealColorImage_ESTest extends RealColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 2212;
      RealColorImage realColorImage1 = new RealColorImage(212, 2212);
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(2212, realColorImage1.Y());
      assertEquals(212, realColorImage1.X());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      float float0 = 653.5027F;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(653.5027F, 653.5027F, (-908.1111F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int1 = 0;
      Float[] floatArray0 = new Float[0];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int2 = 1441;
      ColorModel colorModel0 = ColorModel.HLS;
      realColorImage0.colorModel = colorModel0;
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.HLS, realColorImage0.getColorModel());
      
      int int3 = 0;
      int int4 = 0;
      int int5 = 0;
      rOI0.setROI(3681, 0, 0, (-656));
      assertEquals(3681, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-656), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(657, rOI0.Y());
      assertEquals(3682, rOI0.X());
      
      rOI0.setROI(3681, 0, 16, (-2764));
      assertEquals(3681, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(16, rOI0.ux());
      assertEquals((-2764), rOI0.uy());
      assertEquals(2765, rOI0.Y());
      assertEquals(3666, rOI0.X());
      
      rOI0.setROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI(0, 1441, 1441, 0);
      assertEquals(1441, rOI0.ly());
      assertEquals(1441, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1442, rOI0.X());
      assertEquals(1442, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.set(0, 0, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(42, 42);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(42, realColorImage0.X());
      assertEquals(42, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = 0;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      String string0 = realColorImage0.toString(rOI0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(42, realColorImage0.X());
      assertEquals(42, realColorImage0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals("42:42\nnull \n42:42\nnull \n42:42\nnull \n", string0);
      assertNotNull(string0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(42, realColorImage0.X());
      assertEquals(42, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(42, realColorImage1.Y());
      assertEquals(42, realColorImage1.X());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(42, realColorImage0.X());
      assertEquals(42, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(42, realColorImage1.Y());
      assertEquals(42, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(42, realColorImage2.X());
      assertEquals(42, realColorImage2.Y());
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotNull(realColorImage2);
      
      String string1 = realColorImage2.toString(rOI0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(42, realColorImage0.X());
      assertEquals(42, realColorImage0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(42, realColorImage1.Y());
      assertEquals(42, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(42, realColorImage2.X());
      assertEquals(42, realColorImage2.Y());
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("42:42\nnull \n42:42\nnull \n42:42\nnull \n", string1);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotNull(string1);
      
      RealColorImage realColorImage3 = new RealColorImage(2198, 0);
      assertEquals(2198, realColorImage3.X());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(0, realColorImage3.Y());
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage0));
      assertNotNull(realColorImage3);
      
      // Undeclared exception!
      try { 
        realColorImage3.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      int int0 = 5;
      RealColorImage realColorImage1 = new RealColorImage(5, 4216);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(1474, (-16777216), (float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = null;
      int int0 = 0;
      int int1 = (-2190);
      ROI rOI0 = new ROI(0, (-2190), 0, (-2190));
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-2190), rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-2190), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) (-2190);
      floatArray0[2] = (float) (-2190);
      floatArray0[3] = (float) 0;
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer((-2190), 487, 0, (-2190), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-2071);
      ROI rOI0 = new ROI(0, (-2071), (-2071), (-1066));
      assertEquals(1006, rOI0.Y());
      assertEquals((-1066), rOI0.ly());
      assertEquals(2072, rOI0.X());
      assertEquals((-2071), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals((-2071), rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      Float float0 = realColorImage0.maxComponent();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = realColorImage0.minComponent();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(32767.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float[] floatArray0 = new float[1];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage1 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      RealColorImage realColorImage2 = realColorImage0.diff(realColorImage1);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotNull(realColorImage2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      String string0 = realColorImage0.toString();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(0, 0, (float) 0, (float) 0, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RealColorImage realColorImage0 = null;
      try {
        realColorImage0 = new RealColorImage((RealColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.get((-2071), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-16777216);
      floatArray0[1] = (float) (-16777216);
      floatArray0[2] = (float) (-16777216);
      // Undeclared exception!
      try { 
        realColorImage0.divide((-16777216), (-16777216), floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      Float float0 = realColorImage0.maxComponent();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = realColorImage0.minComponent();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(32767.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float[] floatArray0 = new float[1];
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = null;
      int int0 = 0;
      int int1 = (-2209);
      ROI rOI0 = new ROI(0, (-2209), 0, (-2209));
      assertEquals((-2209), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-2209), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 0, (-2209), (-2209));
      assertEquals((-2209), rOI0.uy());
      assertEquals((-2209), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2210, rOI0.Y());
      assertEquals(2210, rOI0.X());
      
      // Undeclared exception!
      try { 
        realColorImage0.add((RealColorImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 0;
      int int1 = 0;
      ROI rOI0 = new ROI((-1676), 0, (-1676), 0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-1676), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals((-1676), rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.clip((-1676), 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.YIQ;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      double[] doubleArray0 = realColorImage0.sqrSum();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 192;
      floatArray0[1] = (float) 0;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0, 192, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 192
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(16, 16, (float) 16, (float) 16, (float) 16, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(42, 42);
      assertEquals(42, realColorImage0.X());
      assertEquals(42, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 0;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      String string0 = realColorImage0.toString(rOI0);
      assertEquals(42, realColorImage0.X());
      assertEquals(42, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals("42:42\nnull \n42:42\nnull \n42:42\nnull \n", string0);
      assertNotNull(string0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(42, realColorImage0.X());
      assertEquals(42, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(42, realColorImage1.X());
      assertEquals(42, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertEquals(42, realColorImage0.X());
      assertEquals(42, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(42, realColorImage1.X());
      assertEquals(42, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(42, realColorImage2.X());
      assertEquals(42, realColorImage2.Y());
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotNull(realColorImage2);
      
      String string1 = realColorImage2.toString(rOI0);
      assertEquals(42, realColorImage0.X());
      assertEquals(42, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(42, realColorImage1.X());
      assertEquals(42, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(42, realColorImage2.X());
      assertEquals(42, realColorImage2.Y());
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("42:42\nnull \n42:42\nnull \n42:42\nnull \n", string1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotNull(string1);
      
      RealColorImage realColorImage3 = realColorImage1.copy(rOI0);
      assertEquals(42, realColorImage0.X());
      assertEquals(42, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(42, realColorImage1.X());
      assertEquals(42, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(1, realColorImage3.X());
      assertEquals(1, realColorImage3.Y());
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage3, realColorImage2);
      assertNotSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage3, realColorImage1);
      assertNotNull(realColorImage3);
      
      // Undeclared exception!
      try { 
        realColorImage3.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(1.4E-45F, 0.0F, (-591.1727F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2257;
      floatArray0[2] = (-3385.9224F);
      floatArray0[3] = 580.0F;
      floatArray0[4] = (float) 2257;
      // Undeclared exception!
      realColorImage0.addbuffer(2257, 2257, 0, 16, floatArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Float float0 = new Float((double) (-1743));
      assertEquals((-1743.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((-1743), 8, (Float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.YIQ;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      RealColorImage realColorImage1 = realColorImage0.divide(0, (float) 0);
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.YIQ, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertNotNull(realColorImage1);
      
      ColorModel colorModel1 = ColorModel.RGB;
      realColorImage1.setColorModel(colorModel1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertFalse(colorModel1.equals((Object)colorModel0));
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(colorModel1, colorModel0);
      
      Float float0 = realColorImage0.minComponent();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertSame(realColorImage0, realColorImage1);
      assertNotNull(float0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 2040;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 2872;
      floatArray0[4] = (float) 2040;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 2040;
      RealColorImage realColorImage2 = realColorImage0.addbuffer(0, 0, 0, 2872, floatArray0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {2040.0F, 0.0F, 0.0F, 2872.0F, 2040.0F, 0.0F, 0.0F, 0.0F, 2040.0F}, floatArray0, 0.01F);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotNull(realColorImage2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1);
      floatArray0[2] = (float) (-1);
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer((-1), (-1), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1223, 0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1223, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1223, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1223, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI(1223, 0, 0, 0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1224, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1223, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float((double) (-2408));
      assertEquals((-2408.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float((float) 1223);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1223.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      // Undeclared exception!
      try { 
        realColorImage0.set((-2408), 0, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int1 = (-976);
      // Undeclared exception!
      try { 
        realColorImage0.subtract((-976), (float) (-976));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -976
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ROI rOI0 = new ROI((-197), 0, 5, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(203, rOI0.X());
      assertEquals(5, rOI0.lx());
      assertEquals((-197), rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((-1797), (-197), (float) (-197), (float) (-197), 32767.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 42;
      RealColorImage realColorImage0 = new RealColorImage(42, 42);
      assertEquals(42, realColorImage0.X());
      assertEquals(42, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int1 = 2198;
      int int2 = 0;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      String string0 = realColorImage0.toString(rOI0);
      assertEquals(42, realColorImage0.X());
      assertEquals(42, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals("42:42\nnull \n42:42\nnull \n42:42\nnull \n", string0);
      assertNotNull(string0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(42, realColorImage0.X());
      assertEquals(42, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(42, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(42, realColorImage1.X());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      RealColorImage realColorImage2 = new RealColorImage(2198, 0);
      assertEquals(2198, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      
      // Undeclared exception!
      try { 
        realColorImage2.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }
}
