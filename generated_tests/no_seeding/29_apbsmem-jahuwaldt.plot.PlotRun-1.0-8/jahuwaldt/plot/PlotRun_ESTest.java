/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 21:53:45 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.BoxULSymbol;
import jahuwaldt.plot.PlotDatum;
import jahuwaldt.plot.PlotRun;
import jahuwaldt.plot.RTriangle2Symbol;
import jahuwaldt.plot.TabUpSymbol;
import jahuwaldt.plot.Triangle2Symbol;
import jahuwaldt.plot.Triangle4Symbol;
import jahuwaldt.plot.XSymbol;
import java.awt.Color;
import java.awt.SystemColor;
import java.time.ZoneId;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Set;
import javax.swing.JToggleButton;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlotRun_ESTest extends PlotRun_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PlotRun plotRun0 = new PlotRun(linkedList0);
      PlotDatum plotDatum0 = new PlotDatum(0, 0.0, true);
      plotRun0.add(0, (Object) plotDatum0);
      assertEquals(0.0, plotDatum0.getYError(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[1];
      PlotDatum plotDatum0 = new PlotDatum(2568.42, 2568.42, false);
      plotDatumArray0[0] = plotDatum0;
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      RTriangle2Symbol rTriangle2Symbol0 = new RTriangle2Symbol();
      plotRun0.setPlotSymbol(rTriangle2Symbol0);
      assertEquals(1, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[3];
      XSymbol xSymbol0 = new XSymbol();
      PlotDatum plotDatum0 = new PlotDatum(2936.32298938977, (-2376.078599155), true, xSymbol0);
      plotDatumArray0[0] = plotDatum0;
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      // Undeclared exception!
      try { 
        plotRun0.getMaxY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      int int0 = plotRun0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[8];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      int int0 = plotRun0.size();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[8];
      PlotDatum plotDatum0 = new PlotDatum((-215.42274916417), 0.0, true);
      plotDatumArray0[1] = plotDatum0;
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      Object object0 = plotRun0.set(1, plotDatumArray0[0]);
      assertNotNull(object0);
      assertEquals(8, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      XSymbol xSymbol0 = new XSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, xSymbol0);
      plotRun0.remove(0);
      assertEquals(4, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      double double0 = plotRun0.getMinY();
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[4];
      Triangle4Symbol triangle4Symbol0 = new Triangle4Symbol();
      PlotDatum plotDatum0 = new PlotDatum(394.93925498, (-1025.5194081015816), true, triangle4Symbol0);
      plotDatumArray0[0] = plotDatum0;
      plotDatumArray0[1] = plotDatumArray0[0];
      plotDatumArray0[2] = plotDatum0;
      plotDatumArray0[3] = plotDatumArray0[1];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      double double0 = plotRun0.getMinY();
      assertEquals((-1025.5194081015816), double0, 0.01);
      assertEquals(4, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PlotRun plotRun0 = new PlotRun(linkedList0);
      double double0 = plotRun0.getMinX();
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[8];
      PlotDatum plotDatum0 = new PlotDatum(0.0, (-3356.51088041), true);
      plotDatumArray0[0] = plotDatum0;
      PlotDatum plotDatum1 = new PlotDatum((-3356.51088041), 0.0, true);
      plotDatumArray0[1] = plotDatum1;
      plotDatumArray0[2] = plotDatum1;
      plotDatumArray0[3] = plotDatumArray0[0];
      plotDatumArray0[4] = plotDatumArray0[0];
      plotDatumArray0[5] = plotDatumArray0[0];
      plotDatumArray0[6] = plotDatumArray0[3];
      plotDatumArray0[7] = plotDatumArray0[1];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      double double0 = plotRun0.getMinX();
      assertEquals((-3356.51088041), double0, 0.01);
      assertEquals(8, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[7];
      PlotDatum plotDatum0 = new PlotDatum(1731.37296669718, 1731.37296669718, false);
      plotDatumArray0[2] = plotDatum0;
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      Object object0 = plotRun0.get(2);
      assertNotNull(object0);
      assertEquals(7, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[9];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      Color color0 = Color.getHSBColor((-1587.0785F), (-1587.0785F), 0.53358966F);
      // Undeclared exception!
      try { 
        plotRun0.setLineColor(color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.set(18, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PlotRun plotRun0 = new PlotRun(linkedList0);
      // Undeclared exception!
      try { 
        plotRun0.set((-1), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[4];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      // Undeclared exception!
      try { 
        plotRun0.getMinY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[1];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      // Undeclared exception!
      try { 
        plotRun0.getMinX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[1];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      // Undeclared exception!
      try { 
        plotRun0.getMaxX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.get(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.add(5, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<JToggleButton> linkedList0 = new LinkedList<JToggleButton>();
      PlotRun plotRun0 = new PlotRun(linkedList0);
      // Undeclared exception!
      try { 
        plotRun0.add((-2976), (Object) linkedList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.LinkedList cannot be cast to jahuwaldt.plot.PlotDatum
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun((PlotDatum[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun((Collection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Triangle2Symbol triangle2Symbol0 = new Triangle2Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, triangle2Symbol0);
      PlotRun plotRun1 = (PlotRun)plotRun0.clone();
      assertEquals(2, plotRun1.size());
      assertEquals(2, plotRun0.size());
      assertNotSame(plotRun1, plotRun0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      XSymbol xSymbol0 = new XSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, xSymbol0);
      SystemColor systemColor0 = SystemColor.controlText;
      plotRun0.setLineColor(systemColor0);
      assertEquals(5, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      double double0 = plotRun0.getMaxY();
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Triangle2Symbol triangle2Symbol0 = new Triangle2Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, triangle2Symbol0);
      double double0 = plotRun0.getMinY();
      assertEquals(2, plotRun0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Triangle2Symbol triangle2Symbol0 = new Triangle2Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, triangle2Symbol0);
      double double0 = plotRun0.getMaxX();
      assertEquals(2, plotRun0.size());
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Triangle2Symbol triangle2Symbol0 = new Triangle2Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, true, triangle2Symbol0);
      double double0 = plotRun0.getMinX();
      assertEquals(2, plotRun0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      PlotRun plotRun0 = new PlotRun(set0);
      assertEquals(0, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayDeque<PlotDatum> arrayDeque0 = new ArrayDeque<PlotDatum>();
      XSymbol xSymbol0 = new XSymbol();
      PlotDatum plotDatum0 = new PlotDatum((-638.96983532089), (-638.96983532089), true, xSymbol0);
      arrayDeque0.add(plotDatum0);
      PlotRun plotRun0 = new PlotRun(arrayDeque0);
      assertEquals(1, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      PlotRun plotRun1 = new PlotRun(plotRun0);
      assertEquals(0, plotRun1.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      Triangle2Symbol triangle2Symbol0 = new Triangle2Symbol();
      double[] doubleArray1 = new double[3];
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun(doubleArray0, doubleArray1, true, triangle2Symbol0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      TabUpSymbol tabUpSymbol0 = new TabUpSymbol();
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun(doubleArray0, (double[]) null, true, tabUpSymbol0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BoxULSymbol boxULSymbol0 = new BoxULSymbol();
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun((double[]) null, (double[]) null, false, boxULSymbol0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      plotRun0.clear();
      assertEquals(0, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      Triangle2Symbol triangle2Symbol0 = new Triangle2Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, triangle2Symbol0);
      plotRun0.iterator();
      assertEquals(2, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[1];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      // Undeclared exception!
      try { 
        plotRun0.remove((-2276));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      plotRun0.add((Object) null);
      // Undeclared exception!
      try { 
        plotRun0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.get((-714));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[4];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      // Undeclared exception!
      try { 
        plotRun0.set((-1), plotRun0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // jahuwaldt.plot.PlotRun cannot be cast to jahuwaldt.plot.PlotDatum
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }
}
