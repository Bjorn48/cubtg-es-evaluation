/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 23:33:02 GMT 2019
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.SyncFailedException;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleCharStream_ESTest extends SimpleCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[3] = 'D';
      charArray0[2] = '_';
      charArray0[3] = 'U';
      charArray0[5] = '^';
      charArray0[6] = '!';
      stringReader0.read(charArray0, 0, 0);
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, 0);
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 10, 2053);
      simpleCharStream0.adjustBeginLineColumn(1, (-1));
      simpleCharStream0.getBeginColumn();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "com.pmdesigns.jvc.tools.SimpleCharStream");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)9;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 1819, (byte) (-1), (byte)1);
      byteArrayInputStream0.reset();
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "#73jpXX~w.OeYdW4");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-214), 99);
      simpleCharStream0.adjustBeginLineColumn((-214), (-33));
      simpleCharStream0.getBeginColumn();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      simpleCharStream0.ReInit((Reader) stringReader0, (-33), 2048, 3794);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) pushbackInputStream0, (int) (byte) (-2), 3794);
      simpleCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 784, 784);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      byteArrayInputStream0.read();
      InputStream inputStream0 = null;
      byteArrayInputStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          int int0 = (-33);
          FileSystemHandling.createFolder((EvoSuiteFile) null);
          StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
          stringReader0.read();
          stringReader0.close();
          int int1 = (-214);
          SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-214), 99);
          simpleCharStream0.adjustBeginLineColumn(int1, int0);
          int int2 = simpleCharStream0.getBeginColumn();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          int int3 = 2048;
          int int4 = 3794;
          int[] intArray0 = new int[1];
          intArray0[0] = int1;
          simpleCharStream0.bufcolumn = intArray0;
          simpleCharStream0.ReInit((Reader) stringReader0, int2, int3, int4);
          byte[] byteArray0 = new byte[7];
          byte byte0 = (byte)0;
          byteArray0[0] = byte0;
          byte byte1 = (byte)75;
          byteArray0[1] = byte1;
          byte byte2 = (byte) (-96);
          byteArray0[2] = byte2;
          byte byte3 = (byte)53;
          byteArray0[3] = byte3;
          byte byte4 = (byte)79;
          byteArray0[4] = byte4;
          byte byte5 = (byte) (-2);
          byteArray0[5] = byte5;
          byte byte6 = (byte)53;
          byteArray0[6] = byte6;
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
          PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
          // Undeclared exception!
          try { 
            simpleCharStream0.getLine();
            fail("Expecting exception: ArrayIndexOutOfBoundsException");
          
          } catch(ArrayIndexOutOfBoundsException e) {
             //
             // -1
             //
             verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(3623).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-3889));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleCharStream0.FillBuff();
      simpleCharStream0.getLine();
      simpleCharStream0.getColumn();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 789, 789);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      byteArrayInputStream0.read();
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-33);
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      int int1 = (-214);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-214), 99);
      simpleCharStream0.adjustBeginLineColumn(int1, int0);
      int int2 = simpleCharStream0.getBeginColumn();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      int int3 = 2048;
      int int4 = 3794;
      simpleCharStream0.ReInit((Reader) stringReader0, int2, int3, int4);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)75;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-96);
      byteArray0[2] = byte2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream1);
      int int5 = 4054;
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream1, int4, int5);
      simpleCharStream0.readChar();
      int int6 = 4094;
      simpleCharStream0.GetSuffix(int6);
      simpleCharStream0.GetImage();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), (-3104));
      simpleCharStream0.backup((-3889));
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(297);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, 297, 297);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 421, 421);
      simpleCharStream0.bufpos = 421;
      simpleCharStream0.adjustBeginLineColumn(421, 421);
      simpleCharStream0.getBeginColumn();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InputStream inputStream0 = null;
      int int0 = 185;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, (-1), (-1), 3242);
      // Undeclared exception!
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 421, 421);
      simpleCharStream0.adjustBeginLineColumn(421, 421);
      simpleCharStream0.getBeginColumn();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      fileDescriptor0.sync();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)9;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 1819, (byte) (-1), 0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 8, (int) (byte)0);
      byteArrayInputStream0.reset();
      simpleCharStream0.FillBuff();
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "", 0, (int) (byte) (-1));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, "!9[ f*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2563), (-502));
      byteArrayInputStream0.reset();
      byteArrayInputStream0.skip(0L);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      simpleCharStream0.inBuf = (-2563);
      simpleCharStream0.bufsize = (-502);
      byteArrayInputStream0.reset();
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = 'i';
      simpleCharStream0.buffer = charArray0;
      simpleCharStream0.backup(297);
      String string0 = "/R1:";
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "/R1:", (-502), (-788));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InputStream inputStream0 = null;
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      String string0 = simpleCharStream0.GetImage();
      simpleCharStream0.backup((-3889));
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, string0, 0, (-1031));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      int int0 = 1;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "", 1, (-1404));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "com.pmdesigns.jvc.tools.SimpleCharStream";
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      int int0 = (-2895);
      int int1 = 1581;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2895), 99, 1581);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1581);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[6] = (byte)9;
      byteArray0[3] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 4074, (byte) (-1), (byte)9);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, (int) (byte)9, 897, 897);
      byteArrayInputStream0.mark(446);
      String string0 = "";
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "", (-1), 37);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.prevCharIsLF = false;
      simpleCharStream0.line = 99;
      simpleCharStream0.getBeginLine();
      int int0 = (-762);
      simpleCharStream0.backup((-762));
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("com.pmdesigns.jvc.tools.SimpleCharStream");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 99, 99);
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StringReader stringReader0 = new StringReader("{e");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      simpleCharStream0.backup((-1));
      simpleCharStream0.GetImage();
      simpleCharStream0.getBeginLine();
      simpleCharStream0.getBeginColumn();
      simpleCharStream0.getEndLine();
      simpleCharStream0.getEndColumn();
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = 'D';
      charArray0[2] = '_';
      charArray0[3] = 'U';
      charArray0[4] = 'D';
      charArray0[5] = '^';
      charArray0[6] = '!';
      stringReader0.read(charArray0, 0, 0);
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.line = 0;
      boolean boolean0 = true;
      simpleCharStream0.getBeginLine();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      try { 
        simpleCharStream0.ReInit((InputStream) pushbackInputStream0, "", 4096, (-2738), 0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 1819, (byte) (-1), 0);
      byteArrayInputStream0.reset();
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "", 0, (int) (byte) (-1));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, 0);
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 99, 99, 99);
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, 0, 1, 0);
      simpleCharStream0.getTabSize(1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.getBeginColumn();
      simpleCharStream0.backup((-1101));
      simpleCharStream0.getBeginLine();
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      simpleCharStream0.ReInit((Reader) stringReader0);
      simpleCharStream0.setTabSize(1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-1), (byte)8);
      simpleCharStream0.bufpos = (-1);
      simpleCharStream0.ExpandBuff(false);
      simpleCharStream0.GetImage();
      byteArrayInputStream0.read(byteArray0);
      simpleCharStream0.Done();
      // Undeclared exception!
      try { 
        simpleCharStream0.getBeginLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-3889));
      simpleCharStream0.GetImage();
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.skip((-3104));
      stringReader0.read();
      stringReader0.close();
      simpleCharStream0.ReInit((Reader) stringReader0, (-3889), 99);
      StringReader stringReader1 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader1.skip((-3889));
      stringReader1.close();
      simpleCharStream0.ReInit((Reader) stringReader1, 8, (-1));
      simpleCharStream0.ReInit((Reader) stringReader0, 1078, (-548), 3158);
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('.');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InputStream inputStream0 = null;
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.getBeginColumn();
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((Reader) stringReader0, (-1214), (-1214), (-3104));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 789;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 789, 789);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      byteArrayInputStream0.read();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.markSupported();
      byteArrayInputStream0.markSupported();
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream((InputStream) null, (byte) (-59), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 789, 789);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream1);
      int int0 = 796;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(bufferedInputStream0, 4067, 796, (-2710));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, "^dPBd|Sd'L");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 99, 1);
      simpleCharStream0.Done();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, "", 1, (-3169), 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-3889));
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(297);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, "com.pmdesigns.jvc.tools.SimpleCharStream", 1581, 1581);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 185, 185, 185);
      simpleCharStream0.backup((-3409));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 2200);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " t<\"c<jiW.");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      mockFileInputStream0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0);
      int int0 = 185;
      simpleCharStream0.ReInit((InputStream) mockFileInputStream0);
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('Y');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 422, 422);
      simpleCharStream0.bufpos = 422;
      simpleCharStream0.adjustBeginLineColumn(422, 422);
      simpleCharStream0.getBeginColumn();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      char char0 = 'v';
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1741);
      pipedInputStream0.mark((byte)87);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, 1, (int) (byte)87, (int) (byte)22);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = 'D';
      charArray0[2] = '_';
      charArray0[3] = 'U';
      charArray0[4] = '\"';
      charArray0[5] = '^';
      charArray0[6] = '!';
      stringReader0.read(charArray0, 0, 0);
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "com.pmdesigns.jvc.tools.SimpleCharStream";
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = 'x';
      charArray0[2] = '\'';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      stringReader0.read();
      stringReader0.close();
      int int0 = (-724);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 46, (-724));
      simpleCharStream0.ReInit((Reader) stringReader0, 46, 46);
      simpleCharStream0.prevCharIsCR = false;
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 422, 0);
      simpleCharStream0.bufpos = 0;
      simpleCharStream0.adjustBeginLineColumn(422, 422);
      simpleCharStream0.getBeginColumn();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      simpleCharStream0.ExpandBuff(false);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      InputStream inputStream0 = null;
      int int0 = 297;
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      int int1 = 1;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.bufsize = (-1153);
      // Undeclared exception!
      try { 
        simpleCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.GetImage();
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, (-884), (-1695));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-3889));
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(297);
      simpleCharStream0.BeginToken();
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, 1, 297);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, 185, 185);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, 185, 185);
      try { 
        simpleCharStream0.ReInit((InputStream) sequenceInputStream0, "JmfNfG", 398, (-1));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      InputStream inputStream0 = null;
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.getBeginColumn();
      simpleCharStream0.backup((-1101));
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, 1, 3289, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      StringReader stringReader0 = new StringReader("{e");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      simpleCharStream0.backup((-1));
      simpleCharStream0.GetImage();
      simpleCharStream0.getBeginColumn();
      simpleCharStream0.getEndLine();
      simpleCharStream0.getEndColumn();
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      int int0 = 1;
      InputStream inputStream0 = null;
      int int1 = 1320;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mO3G");
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, 1320, 1320, 1320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.markSupported();
      stringReader0.close();
      stringReader0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1581);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.getTabSize(1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 422;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 422, (-33));
      simpleCharStream0.bufpos = (-33);
      simpleCharStream0.adjustBeginLineColumn(int0, int0);
      simpleCharStream0.getBeginColumn();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 765;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (String) null, (-2708), 765, 765);
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (String) null);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-214), 99);
      simpleCharStream0.adjustBeginLineColumn((-214), (-33));
      simpleCharStream0.getBeginColumn();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      simpleCharStream0.ReInit((Reader) stringReader0, (-33), 2048, 3794);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-96);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream1);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream1, 3794, 4054);
      simpleCharStream0.readChar();
      simpleCharStream0.GetSuffix(4094);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, (String) null, (-1387), 1, 149);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "i#zi?'^/j]B", 1, 1, 1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-214), 99);
      simpleCharStream0.adjustBeginLineColumn((-214), (-33));
      simpleCharStream0.getBeginColumn();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.mark(4040);
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('m');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2259, 0, 2259);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) sequenceInputStream0, (-1380), 2048, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.getBeginColumn();
      simpleCharStream0.backup((-1101));
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      int int0 = (-3104);
      int int1 = 1;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(0);
      InputStream inputStream0 = null;
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream((InputStream) null, 1320, 1320, 1320);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.GetImage();
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      simpleCharStream0.ReInit((Reader) stringReader0, 3617, (-1));
      simpleCharStream0.ReInit((Reader) stringReader0, 1, 0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-3889));
      simpleCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 159);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      simpleCharStream0.GetImage();
      simpleCharStream0.getBeginLine();
      simpleCharStream0.getBeginColumn();
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      InputStream inputStream0 = null;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (String) null);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 858;
      pipedInputStream0.mark(858);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream0);
      int int1 = 557;
      bufferedInputStream0.markSupported();
      pipedInputStream0.mark(557);
      simpleCharStream0.prevCharIsLF = true;
      simpleCharStream0.setTabSize((-1215));
      simpleCharStream0.setTabSize(858);
      String string0 = "com.pmdesigns.jvc.tools.SimpleCharStream";
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      try { 
        simpleCharStream0.ReInit((InputStream) sequenceInputStream0, "G;Ab$DA#z;5!K=", 858, 3326);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      InputStream inputStream0 = null;
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-3889));
      simpleCharStream0.GetImage();
      StringReader stringReader0 = new StringReader("com.pmdesigns.jc.tools.Simpl1CharStream");
      stringReader0.skip((-3104));
      simpleCharStream0.UpdateLineColumn('t');
      stringReader0.read();
      stringReader0.close();
      simpleCharStream0.ReInit((Reader) stringReader0, (-3889), 99);
      StringReader stringReader1 = new StringReader("com.pmdesigns.jc.tools.Simpl1CharStream");
      stringReader1.skip((-3889));
      stringReader1.close();
      simpleCharStream0.ReInit((Reader) stringReader1, 8, (-1));
      simpleCharStream0.ReInit((Reader) stringReader0, 1078, (-548), 3158);
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('.');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = (-3169);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, "", (-3169), (-3169));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-3104), 1);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-3889));
      simpleCharStream0.GetImage();
      simpleCharStream0.adjustBeginLineColumn(273, 4084);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1854));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, "", (-235), 5761);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, 185, 185);
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 0, 0);
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 1267;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 276, 276, 1267);
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream0, "2B}Hyn,y", 1267, 276, 1267);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, (String) null, 4082, 4082);
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = (-33);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      stringReader0.read();
      stringReader0.close();
      int int1 = (-214);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-214), 99);
      simpleCharStream0.adjustBeginLineColumn(int1, int0);
      int int2 = simpleCharStream0.getBeginColumn();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      int int3 = 2048;
      int int4 = 3794;
      simpleCharStream0.ReInit((Reader) stringReader0, int2, int3, int4);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)75;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-96);
      byteArray0[2] = byte2;
      byte byte3 = (byte)53;
      byteArray0[3] = byte3;
      byte byte4 = (byte)79;
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-2);
      byteArray0[5] = byte5;
      byte byte6 = (byte)53;
      byteArray0[6] = byte6;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) pushbackInputStream0, (int) byteArray0[5], int4);
      simpleCharStream0.readChar();
      int int5 = 1463;
      simpleCharStream0.GetSuffix(int5);
  }
}
