/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:17:12 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.net.URI;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.ExitCode;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IOrder;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.ISimplifier;
import org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy;
import org.sat4j.minisat.core.LearnedConstraintsEvaluationType;
import org.sat4j.minisat.core.LearningStrategy;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomLiteralSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;
import org.sat4j.specs.SearchListener;
import org.sat4j.tools.AbstractMinimalModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Solver_ESTest extends Solver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = new SearchParams(32, 32);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 32);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      phaseInLastLearnedClauseSelectionStrategy0.assignLiteral(163);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap1, lubyRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.setExpectedNumberOfClauses(163);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy1 = (PhaseInLastLearnedClauseSelectionStrategy)tabuListDecorator0.getPhaseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy1);
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertNotSame(phaseInLastLearnedClauseSelectionStrategy1, phaseInLastLearnedClauseSelectionStrategy0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(phaseInLastLearnedClauseSelectionStrategy1.equals((Object)phaseInLastLearnedClauseSelectionStrategy0));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy1.toString());
      
      VarOrderHeap varOrderHeap2 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy1);
      assertNotNull(varOrderHeap2);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(phaseInLastLearnedClauseSelectionStrategy1.equals((Object)phaseInLastLearnedClauseSelectionStrategy0));
      assertFalse(varOrderHeap2.equals((Object)varOrderHeap0));
      assertFalse(varOrderHeap2.equals((Object)varOrderHeap1));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy1.toString());
      assertEquals(0, varOrderHeap2.numberOfInterestingVariables());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(5, solver1.nVars());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = 1572;
      // Undeclared exception!
      try { 
        solver0.backtrack(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1572
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      assertNotNull(phaseCachingAutoEraseStrategy0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(3418);
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(3418, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.onRestart();
      assertEquals(3418L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(3418, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, (SearchParams) null, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(3418L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(3418, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.registerLiteral(32);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(3418L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(3418, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(33, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(34, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(33, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3119);
      intArray0[1] = 4079;
      intArray0[2] = (-110);
      intArray0[3] = 1235;
      intArray0[5] = 1715;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-3119), 4079, (-110), 1235, 0, 1715}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      subsetVarOrder0.setLits(lits0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-3119), 4079, (-110), 1235, 0, 1715}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(miniSATLearning0, mixedDataStructureSingleWL0, (SearchParams) null, subsetVarOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-3119), 4079, (-110), 1235, 0, 1715}, intArray0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      
      solver0.setTimeout(1235);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-3119), 4079, (-110), 1235, 0, 1715}, intArray0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(1235, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      
      solver0.setLearningStrategy(miniSATLearning0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-3119), 4079, (-110), 1235, 0, 1715}, intArray0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(1235, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning2 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning2);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning2.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = null;
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator((VarOrderHeap) null, 541);
      assertNotNull(tabuListDecorator0);
      
      // Undeclared exception!
      try { 
        tabuListDecorator0.assignLiteral(541);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.TabuListDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      RestartStrategy restartStrategy0 = null;
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-293.3454), (-487));
      assertNotNull(searchParams0);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals((-487), int0);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      
      // Undeclared exception!
      try { 
        solver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-490));
      assertNotNull(searchParams0);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.updateVarAtDecisionLevel(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.95);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      iLogAble0.log("pu^bA^;<+ipB0n?");
      iLogAble0.log("V0`mZ[MrXF'ss?-(+p");
      iLogAble0.log("$gt*6o");
      iLogAble0.log("org.sat4j.tools.ClausalCardinalitiesDecorator");
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(100.0);
      assertNotNull(activeLearning0);
      assertEquals(100.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver0);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      
      int int0 = solver0.getTimeout();
      assertEquals(2147483, int0);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(2645);
      assertNotNull(fixedLengthLearning0);
      assertEquals(2645, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals(2645, fixedLengthLearning0.getMaxLength());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      solver1.decayActivities();
      assertEquals(2645, fixedLengthLearning0.getMaxLength());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<MixedDataStructureDanielWL> solver0 = null;
      try {
        solver0 = new Solver<MixedDataStructureDanielWL>((LearningStrategy<MixedDataStructureDanielWL>) null, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      
      VecInt vecInt0 = new VecInt(3118, 3118);
      assertNotNull(vecInt0);
      assertEquals(3118, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3118, vecInt0.size());
      
      IConstr iConstr0 = solver0.addAtMost(vecInt0, 3118);
      assertNull(iConstr0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3120, solver0.newVar());
      assertEquals(3119, solver0.realNumberOfVariables());
      assertEquals(3119, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(3118, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3118, vecInt0.size());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-293.3454), (-487));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals((-487), int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      
      try { 
        solver1.discardCurrentModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(1548);
      assertNotNull(searchParams0);
      assertEquals(1548, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(1523);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams1 = new SearchParams();
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      String string0 = searchParams1.toString();
      assertNotNull(string0);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams1, pureOrder0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      FixedPeriodRestarts fixedPeriodRestarts1 = (FixedPeriodRestarts)solver0.getRestartStrategy();
      assertNotNull(fixedPeriodRestarts1);
      assertNotSame(searchParams1, searchParams0);
      assertSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      int[] intArray0 = new int[3];
      intArray0[0] = 1523;
      intArray0[1] = 1523;
      intArray0[2] = 1523;
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams1, randomWalkDecorator0, arminRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      int int0 = solver1.newVar();
      assertEquals(3, int0);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.nVars());
      assertEquals(4, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, levelBasedVarOrderHeap0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, levelBasedVarOrderHeap0, eMARestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      
      solver1.setLogger(iLogAble0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(4056);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(4056, pureOrder0.getPeriod());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL1, searchParams0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      solver0.stop();
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(4056);
      assertNotNull(activeLearning0);
      assertEquals(4056.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      ILogAble iLogAble0 = null;
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = vecInt0.get(0);
      assertEquals(0, int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertSame(vecInt0, iVecInt0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      boolean boolean1 = vecInt0.isEmpty();
      assertFalse(boolean1);
      assertSame(vecInt0, iVecInt0);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      VecInt vecInt1 = new VecInt(intArray0);
      assertNotNull(vecInt1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(8, vecInt1.size());
      
      int int1 = vecInt1.size();
      assertEquals(8, int1);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(int1 == int0);
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(8, vecInt1.size());
      
      vecInt0.shrink(1351);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1352), vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.push(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(0.999, 0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin1);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      
      SearchParams searchParams1 = new SearchParams(0);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      ILogAble iLogAble0 = mock(ILogAble.class, new ViolatedAssumptionAnswer());
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin1, searchParams1, randomWalkDecorator0, noRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      ILogAble iLogAble1 = solver0.out;
      assertNotNull(iLogAble1);
      assertSame(iLogAble1, iLogAble0);
      
      iLogAble1.log("4<c#ZFAmel>a");
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertNotSame(searchParams1, searchParams0);
      assertSame(iLogAble1, iLogAble0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, iLogAble1);
      assertNotNull(solver1);
      assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = new VecInt();
      assertNotNull(vecInt1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      int int0 = vecInt1.size();
      assertEquals(0, int0);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      IVecInt iVecInt0 = vecInt1.push(0);
      assertNotNull(iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      
      IteratorInt iteratorInt0 = vecInt1.iterator();
      assertNotNull(iteratorInt0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 541);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      varOrderHeap0.assignLiteral((-668));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 541;
      intArray0[3] = (-2189);
      // Undeclared exception!
      try { 
        solver2.addClauseOnTheFly(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 541
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder(4056);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL1, searchParams0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      solver0.stop();
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(4056);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(4056.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(10);
      assertNotNull(fixedLengthLearning0);
      assertEquals(10, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, fixedLengthLearning0.getMaxLength());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      // Undeclared exception!
      try { 
        solver1.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      cardinalityDataStructureYanMax0.setLearner(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      SearchParams searchParams0 = new SearchParams((-293.3454), (-487));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals((-487), int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, (RestartStrategy) null, (ILogAble) null);
      assertNotNull(solver2);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      
      solver2.modelFound();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      
      try { 
        solver1.discardCurrentModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>((-1348));
      assertNotNull(percentLengthLearning0);
      assertEquals((-1348), percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder(787);
      assertNotNull(pureOrder0);
      assertEquals(787, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      URI uRI0 = MockURI.aFileURI;
      assertNotNull(uRI0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.delete();
      assertFalse(boolean0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      
      String string0 = mockFile0.getName();
      assertEquals("foo.bar", string0);
      assertNotNull(string0);
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("foo.bar", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      pureOrder0.printStat(mockPrintWriter0, "");
      assertEquals(787, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("file:///tmp/foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawFragment());
      assertEquals("/tmp/foo.bar", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawAuthority());
      assertEquals("file", uRI0.getScheme());
      assertFalse(uRI0.isOpaque());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/tmp/foo.bar", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/tmp", mockFile0.getParent());
      assertEquals("foo.bar", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, pureOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals((-1348), percentLengthLearning0.getLimit());
      assertEquals(787, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      solver0.reset();
      assertEquals((-1348), percentLengthLearning0.getLimit());
      assertEquals(787, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      SearchParams searchParams0 = new SearchParams(787, (-174));
      assertNotNull(searchParams0);
      assertEquals((-174), searchParams0.getInitConflictBound());
      assertEquals(787.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      boolean boolean1 = arminRestarts0.shouldRestart();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(823);
      assertNotNull(percentLengthLearning1);
      assertEquals(823, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, pureOrder0, arminRestarts0);
      assertNotNull(solver1);
      assertEquals(823, percentLengthLearning1.getLimit());
      assertEquals(787, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(823, percentLengthLearning1.getLimit());
      assertEquals(787, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<CardinalityDataStructure> solver2 = null;
      try {
        solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, (CardinalityDataStructure) null, searchParams0, pureOrder0, arminRestarts0, iLogAble0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-490));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.updateVarAtDecisionLevel(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.95);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      // Undeclared exception!
      try { 
        solver0.primeImplicant((-71));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      negativeLiteralSelectionStrategy0.init(500);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = (LevelBasedVarOrderHeap)solver0.getOrder();
      assertNotNull(levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams((-490));
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      
      Solver<MixedDataStructureDanielHT> solver1 = null;
      try {
        solver1 = new Solver<MixedDataStructureDanielHT>((LearningStrategy<MixedDataStructureDanielHT>) null, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap1, (RestartStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      int int0 = 0;
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      
      searchParams0.setVarDecay((-2064.5853749814305));
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      
      RestartStrategy restartStrategy0 = null;
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, searchParams0, pureOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      solver0.setLogPrefix("j,KdIL0");
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals("j,KdIL0", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      
      solver0.setTimeoutOnConflicts(0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("j,KdIL0", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      
      MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      IVecInt iVecInt0 = solver1.unsatExplanation();
      assertNull(iVecInt0);
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      // Undeclared exception!
      try { 
        solver1.suggestNextLiteralToBranchOn(253);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      boolean boolean0 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, pureOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(32, (-1));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(3097);
      assertNotNull(fixedLengthLearning0);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ILogAble iLogAble0 = solver1.out;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, glucose21Restarts0, iLogAble0);
      assertNotNull(solver2);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      double double0 = constr0.getActivity();
      assertEquals(0.0, double0, 0.01);
      
      constr0.setActivity(0.0);
      iLogAble0.log("org.sat4j.minisat.core.Solver$1");
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      iLogAble0.log((String) null);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertEquals(8, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics1 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics1);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-6930.5));
      assertNotNull(randomWalkDecorator0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-6930.5), randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver3 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics1, mixedDataStructureDanielWLConciseBinary0, searchParams0, randomWalkDecorator0, lubyRestarts0, iLogAble0);
      assertNotNull(solver3);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-6930.5), randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(9, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(10, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(9, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver3.setTimeout((-1526));
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-6930.5), randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(3, solver3.nVars());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(4, solver3.newVar());
      assertEquals((-1526), solver3.getTimeout());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(12, solver1.newVar());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(11, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver2.setDataStructureFactory(cardinalityDataStructureYanMax0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(14, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(13, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(13, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      Solver<ClausalDataStructureWL> solver4 = null;
      try {
        solver4 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, (ClausalDataStructureWL) null, searchParams0, randomWalkDecorator0, glucose21Restarts0, iLogAble0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      searchParams0.setVarDecay((-2064.5853749814305));
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, searchParams0, pureOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      
      solver0.setLogPrefix("j,KdIL0");
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("j,KdIL0", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      
      solver0.setTimeoutOnConflicts(0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getTimeout());
      assertEquals("j,KdIL0", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      
      MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      
      IVecInt iVecInt0 = solver1.unsatExplanation();
      assertNull(iVecInt0);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      
      VecInt vecInt0 = new VecInt(653, 653);
      assertNotNull(vecInt0);
      assertEquals(653, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(653, vecInt0.last());
      
      IVecInt iVecInt1 = vecInt0.push(0);
      assertNotNull(iVecInt1);
      assertSame(iVecInt1, vecInt0);
      assertSame(vecInt0, iVecInt1);
      assertFalse(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.last());
      assertEquals(654, iVecInt1.size());
      assertEquals(654, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertSame(vecInt0, iVecInt1);
      assertEquals(654, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      IVecInt iVecInt2 = vecInt0.push(57);
      assertNotNull(iVecInt2);
      assertSame(iVecInt2, iVecInt1);
      assertSame(iVecInt2, vecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt2);
      assertEquals(655, iVecInt2.size());
      assertEquals(57, iVecInt2.last());
      assertFalse(iVecInt2.isEmpty());
      assertEquals(57, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(655, vecInt0.size());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver2);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      // Undeclared exception!
      try { 
        solver2.dimacs2internal((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-873));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-873), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams((-1196.3206309675), (-873), (-1196.3206309675), 0);
      assertNotNull(searchParams0);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("%/KB7D@s!U>2sCb.");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning1);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      
      // Undeclared exception!
      try { 
        solver0.addClauseOnTheFly((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-873));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-873), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams((-1196.3206309675), (-873), (-1196.3206309675), (-873));
      assertNotNull(searchParams0);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-873), searchParams0.getInitConflictBound());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("c ");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("c ");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("c ");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("c ");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals((-873), fixedLengthLearning0.getMaxLength());
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-873), searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      int int0 = solver0.qhead;
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        solver0.record((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte) (-37);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte)86, (byte) (-66), (byte)32, (byte) (-48), (byte) (-37), (byte) (-51), (byte) (-37)}, byteArray0);
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder((-2890));
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2890), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2890), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      boolean boolean1 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      lubyRestarts0.newConflict();
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(32);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2890), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean2 = solver0.assume((byte)120);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(1, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.decisionLevel());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-2890), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(1548);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1548, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(1523);
      assertNotNull(pureOrder0);
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams1 = new SearchParams();
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams1, pureOrder0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      FixedPeriodRestarts fixedPeriodRestarts1 = (FixedPeriodRestarts)solver0.getRestartStrategy();
      assertNotNull(fixedPeriodRestarts1);
      assertNotSame(searchParams1, searchParams0);
      assertSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts1, iLogAble0);
      assertNotNull(solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1548, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1548;
      intArray0[1] = 1523;
      intArray0[2] = 1523;
      // Undeclared exception!
      try { 
        solver1.addAtMostOnTheFly(intArray0, (-1821));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-490));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.updateVarAtDecisionLevel(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.95);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning1, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      
      solver1.setTimeout(0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-51);
      byteArray0[7] = (byte) (-37);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)120, (byte)86, (byte) (-66), (byte)86, (byte) (-48), (byte) (-37), (byte) (-51), (byte) (-37)}, byteArray0);
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder((-2890));
      assertNotNull(pureOrder0);
      assertEquals((-2890), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals((-2890), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      boolean boolean1 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      searchParams0.setInitConflictBound(9);
      assertEquals(9, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      lubyRestarts0.newConflict();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(32);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-2890), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean2 = solver0.assume((byte)120);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(1, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals((-2890), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      assertNotNull(tabuListDecorator0);
      assertEquals((-2890), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning1, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(9, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals((-2890), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      int int0 = solver1.nAssigns();
      assertEquals(0, int0);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(9, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals((-2890), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 588;
      intArray0[3] = 435;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      LearningStrategy<ClausalDataStructureWL> learningStrategy1 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy1, clausalDataStructureWL0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(learningStrategy0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      int int0 = searchParams1.getInitConflictBound();
      assertEquals(100, int0);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(9, solver0.nVars());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(100, int1);
      assertSame(searchParams0, searchParams1);
      assertTrue(int1 == int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(100, int2);
      assertSame(searchParams0, searchParams1);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(1.5, double0, 0.01);
      assertSame(searchParams0, searchParams1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams1, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(11, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.nVars());
      
      solver2.setKeepSolverHot(false);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(14, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(9, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(10, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      
      Constr constr0 = solver2.propagate();
      assertNull(constr0);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(15, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(16, solver0.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(11, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(12, solver1.newVar());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      String string0 = solver3.getLogPrefix();
      assertEquals("c ", string0);
      assertNotNull(string0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(3, solver3.nVars());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(4, solver3.newVar());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(learningStrategy0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[1] = 1;
      intArray0[2] = 588;
      SearchParams searchParams1 = new SearchParams(1, 1035);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1035, searchParams1.getInitConflictBound());
      assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(100, int0);
      assertNotSame(searchParams0, searchParams1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertNotNull(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      FixedPeriodRestarts fixedPeriodRestarts1 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts1);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      
      fixedPeriodRestarts1.reset();
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      
      iLogAble0.log("s\n");
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertNotSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(fixedPeriodRestarts0.equals((Object)fixedPeriodRestarts1));
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      iLogAble0.log("propagations\t\t: ");
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertNotSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(fixedPeriodRestarts0.equals((Object)fixedPeriodRestarts1));
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams1, levelBasedVarOrderHeap0, fixedPeriodRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(fixedPeriodRestarts0.equals((Object)fixedPeriodRestarts1));
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(1035, searchParams1.getInitConflictBound());
      assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      solver1.setTimeout(588);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(fixedPeriodRestarts0.equals((Object)fixedPeriodRestarts1));
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(11, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(588, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1035, searchParams1.getInitConflictBound());
      assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts1);
      assertNotNull(solver2);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.nVars());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      // Undeclared exception!
      try { 
        solver2.backtrack(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 588
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>((-4049));
      assertNotNull(percentLengthLearning0);
      assertEquals((-4049), percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(1428);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1428, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder((-4049));
      assertNotNull(pureOrder0);
      assertEquals((-4049), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      String string0 = percentLengthLearning0.toString();
      assertEquals("Limit learning to clauses of size smaller or equal to -4049% of the number of variables", string0);
      assertNotNull(string0);
      assertEquals((-4049), percentLengthLearning0.getLimit());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedliterals());
      
      eMARestarts0.init(searchParams1, solverStats0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(eMARestarts0.shouldRestart());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedliterals());
      
      eMARestarts0.onRestart();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(eMARestarts0.shouldRestart());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals((-4049), percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1428, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4049), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(eMARestarts0.shouldRestart());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      EMARestarts eMARestarts1 = (EMARestarts)solver0.getRestartStrategy();
      assertNotNull(eMARestarts1);
      assertSame(eMARestarts0, eMARestarts1);
      assertSame(eMARestarts1, eMARestarts0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals((-4049), percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1428, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4049), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(eMARestarts0.shouldRestart());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      assertFalse(eMARestarts1.shouldRestart());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(1548);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1548, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder(1523);
      assertNotNull(pureOrder0);
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams1 = new SearchParams();
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(1);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning1 = new ActiveLearning<MixedDataStructureDanielWL>(0.0);
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.0, activeLearning1.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning1, mixedDataStructureDanielWL0, searchParams1, pureOrder0, fixedPeriodRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.0, activeLearning1.getActivityPercent(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      
      PureOrder pureOrder1 = (PureOrder)solver0.getOrder();
      assertNotNull(pureOrder1);
      assertSame(pureOrder0, pureOrder1);
      assertNotSame(searchParams1, searchParams0);
      assertSame(pureOrder1, pureOrder0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.0, activeLearning1.getActivityPercent(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(1523, pureOrder1.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, pureOrder1, fixedPeriodRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(1523, pureOrder1.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      
      solver1.setExpectedNumberOfClauses(1548);
      assertSame(pureOrder0, pureOrder1);
      assertNotSame(searchParams1, searchParams0);
      assertSame(pureOrder1, pureOrder0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(1523, pureOrder1.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      assertNotNull(tabuListDecorator0);
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)tabuListDecorator0.getPhaseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertSame(pureOrder0, pureOrder1);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning2 = new ActiveLearning<CardinalityDataStructureYanMin>(0.0);
      assertNotNull(activeLearning2);
      assertEquals(0.0, activeLearning2.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning2.getLimit());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(activeLearning2, cardinalityDataStructureYanMin0, searchParams1, pureOrder0, fixedPeriodRestarts0, (ILogAble) null);
      assertNotNull(solver2);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, activeLearning2.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning2.getLimit());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(6, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      int[] intArray0 = new int[0];
      solver1.backtrack(intArray0);
      assertNotSame(solver1, solver2);
      assertSame(pureOrder0, pureOrder1);
      assertNotSame(searchParams1, searchParams0);
      assertSame(pureOrder1, pureOrder0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(9, solver0.nVars());
      assertEquals(10, solver0.newVar());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(1523, pureOrder1.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>((-1040.774639587));
      assertNotNull(activeLearning0);
      assertEquals((-1040.774639587), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      Solver<ClausalDataStructureWL> solver0 = null;
      try {
        solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, (IOrder) null, noRestarts0, (ILogAble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertNotNull(searchParams1);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      
      int int0 = searchParams1.getInitConflictBound();
      assertEquals(100, int0);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(10, solver0.newVar());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.nVars());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(100, int1);
      assertSame(searchParams0, searchParams1);
      assertTrue(int1 == int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      int int2 = searchParams1.getInitConflictBound();
      assertEquals(100, int2);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      
      double double0 = searchParams1.getConflictBoundIncFactor();
      assertEquals(1.5, double0, 0.01);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(13, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(14, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(9, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(10, solver1.newVar());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(16, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(17, solver2.newVar());
      assertEquals(16, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(17, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(17, solver0.nVars());
      assertEquals(18, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      long long0 = solver2.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertNotSame(solver2, solver0);
      assertSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver2);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver0.equals((Object)solver2));
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(20, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(21, solver2.newVar());
      assertEquals(20, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(22, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(21, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(21, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics1);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics1, cardinalityDataStructureYanMin0, searchParams1, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver3);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver0.equals((Object)solver2));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(23, solver0.nVars());
      assertEquals(24, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(23, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(11, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(11, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(12, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertEquals(2, solver3.newVar());
      
      String string0 = solver3.getLogPrefix();
      assertEquals("c ", string0);
      assertNotNull(string0);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver2);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver0.equals((Object)solver2));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(25, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(25, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(26, solver0.newVar());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(14, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(13, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(13, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(3, solver3.nVars());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      
      // Undeclared exception!
      try { 
        solver2.forget(1428);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(4056);
      assertNotNull(pureOrder0);
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL1, searchParams0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      solver0.stop();
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(4056);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(4056.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(4056);
      assertNotNull(fixedLengthLearning0);
      assertEquals(4056, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver1);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(4056, fixedLengthLearning0.getMaxLength());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics1 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics1);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics1, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver2);
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      solver2.setSearchParams(searchParams0);
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, pureOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver0.toString();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, (-933.63153065851));
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-933.63153065851), randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, randomWalkDecorator0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-933.63153065851), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      solver0.setRestartStrategy(glucose21Restarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-933.63153065851), randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      
      searchParams0.setVarDecay((-2064.5853749814305));
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, searchParams0, pureOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      solver0.setLogPrefix("j,KdIL0");
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("j,KdIL0", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      solver0.setTimeoutOnConflicts(0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("j,KdIL0", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.getTimeout());
      
      MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, varOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.nVars());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(7, solver1.realNumberOfVariables());
      
      activeLearning0.setOrder(varOrderHeap0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(solver0, solver1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertEquals("j,KdIL0", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getTimeout());
      
      fixedPeriodRestarts0.reset();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      iLogAble0.log(" with flag ");
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(solver0, solver1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("j,KdIL0", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.getTimeout());
      assertEquals(12, solver0.newVar());
      
      iLogAble0.log((String) null);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(solver0, solver1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("j,KdIL0", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(14, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.getTimeout());
      
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning1 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(miniSATLearning1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning1, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver2);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(15, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(16, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("j,KdIL0", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(15, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.getTimeout());
      
      solver2.setTimeout(0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(solver0, solver1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertFalse(solver0.isVerbose());
      assertEquals(18, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(17, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(17, solver0.nVars());
      assertEquals("j,KdIL0", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.getTimeout());
      
      ActiveLearning<CardinalityDataStructure> activeLearning1 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(activeLearning1, cardinalityDataStructure0, searchParams0, pureOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver3);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(19, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(20, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(19, solver0.nVars());
      assertEquals("j,KdIL0", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.getTimeout());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(1, solver3.nVars());
      
      // Undeclared exception!
      try { 
        solver3.isSatisfiable(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3119);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(4079);
      assertNotNull(searchParams0);
      assertEquals(4079, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1.0E-4);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.0E-4, randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      randomWalkDecorator0.varDecayActivity();
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.0E-4, randomWalkDecorator0.getProbability(), 0.01);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, noRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertEquals(4079, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      
      ILogAble iLogAble1 = solver0.out;
      assertNotNull(iLogAble1);
      assertSame(iLogAble1, iLogAble0);
      
      iLogAble0.log("c ");
      assertSame(iLogAble0, iLogAble1);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, (SearchParams) null, varOrderHeap0, lubyRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = new VecInt();
      assertNotNull(vecInt1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      int int0 = vecInt1.size();
      assertEquals(0, int0);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      IVecInt iVecInt0 = vecInt0.push(4079);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertEquals(1, vecInt0.size());
      assertEquals(4079, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4079, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertEquals(1, vecInt0.size());
      assertEquals(4079, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      IVecInt iVecInt1 = vecInt0.push((-2892));
      assertNotNull(iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt1, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt1.equals((Object)vecInt1));
      assertEquals(2, vecInt0.size());
      assertEquals((-2892), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-2892), iVecInt1.last());
      assertEquals(2, iVecInt1.size());
      
      IVecInt iVecInt2 = solver1.dimacs2internal(vecInt0);
      assertNotNull(iVecInt2);
      assertNotSame(solver1, solver0);
      assertNotSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt1);
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertNotSame(iVecInt2, iVecInt0);
      assertNotSame(iVecInt2, vecInt1);
      assertNotSame(iVecInt2, iVecInt1);
      assertNotSame(iVecInt2, vecInt0);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(iVecInt2.equals((Object)iVecInt0));
      assertFalse(iVecInt2.equals((Object)vecInt1));
      assertFalse(iVecInt2.equals((Object)iVecInt1));
      assertFalse(iVecInt2.equals((Object)vecInt0));
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4081, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4080, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(4080, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, vecInt0.size());
      assertEquals((-2892), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(iVecInt2.isEmpty());
      assertEquals(2, iVecInt2.size());
      assertEquals(5785, iVecInt2.last());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = solver0.isSatisfiable((IVecInt) vecInt1, false);
      assertTrue(boolean0);
      assertNotSame(vecInt1, iVecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertSame(iLogAble0, iLogAble1);
      assertNotSame(solver0, solver1);
      assertFalse(vecInt1.equals((Object)iVecInt2));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt1));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(solver0.equals((Object)solver1));
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(4079, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(4082, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4083, solver0.newVar());
      assertEquals(4082, solver0.nVars());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, varOrderHeap1, lubyRestarts0);
      assertNotNull(solver2);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IConstr iConstr0 = solver2.addConstr((Constr) null);
      assertNull(iConstr0);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(0.999, 1860);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1860, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin1);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      
      SearchParams searchParams1 = new SearchParams(0);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, (-2053.55826));
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2053.55826), randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      varOrderHeap1.varDecayActivity();
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin1, searchParams0, varOrderHeap1, fixedPeriodRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1860, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      ILogAble iLogAble1 = solver0.out;
      assertNotNull(iLogAble1);
      assertSame(iLogAble1, iLogAble0);
      
      iLogAble0.log((String) null);
      assertSame(iLogAble0, iLogAble1);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin1, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1860, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int0 = vecInt0.size();
      assertEquals(0, int0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = solver1.dimacs2internal(vecInt0);
      assertNotNull(iVecInt0);
      assertNotSame(solver1, solver0);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertSame(iLogAble0, iLogAble1);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1860, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver1.getRestartStrategy();
      assertNotNull(lubyRestarts1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertNotSame(solver1, solver0);
      assertNotSame(searchParams0, searchParams1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertSame(iLogAble0, iLogAble1);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1860, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(32, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LearningStrategy<MixedDataStructureSingleWL> learningStrategy0 = (LearningStrategy<MixedDataStructureSingleWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy1 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 588;
      int int0 = 435;
      intArray0[3] = 435;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RestartStrategy restartStrategy0 = null;
      LearningStrategy<ClausalDataStructureWL> learningStrategy2 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy2, clausalDataStructureWL0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(100, int1);
      assertFalse(int1 == int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(100, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(1.5, double0, 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      // Undeclared exception!
      try { 
        solver1.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = new SearchParams(32, 32);
      assertNotNull(searchParams0);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      phaseInLastLearnedClauseSelectionStrategy0.assignLiteral(163);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, lubyRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.setExpectedNumberOfClauses(163);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 32;
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      RestartStrategy restartStrategy0 = null;
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      
      int int0 = 3118;
      EvoSuiteFile evoSuiteFile0 = null;
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver1 = (Solver)lightFactory0.defaultSolver();
      assertNotNull(solver1);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      
      VecInt vecInt0 = (VecInt)AbstractMinimalModel.negativeLiterals(solver1);
      assertNotNull(vecInt0);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals((-2), vecInt0.last());
      
      // Undeclared exception!
      try { 
        solver0.isSatisfiable((IVecInt) vecInt0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      boolean boolean0 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("D*PK_Y}M");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("D*PK_Y}M");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      searchParams0.setVarDecay(1038.0);
      assertEquals(1038.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      mUSLauncher0.log("");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(596.359);
      assertNotNull(activeLearning0);
      assertEquals(596.359, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, glucose21Restarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(1038.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(596.359, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      
      int int0 = solver0.qhead;
      assertEquals(0, int0);
      
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>(0);
      assertNotNull(fixedLengthLearning0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      
      SearchListener<Solver<CardinalityDataStructureYanMax>> searchListener0 = solver0.getSearchListener();
      assertNotNull(searchListener0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(1038.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(596.359, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(4056);
      assertNotNull(pureOrder0);
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL1, searchParams0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      solver0.stop();
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(4056);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(4056.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = vecInt0.get(0);
      assertEquals(0, int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.size());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      ActiveLearning<MixedDataStructureSingleWL> activeLearning1 = new ActiveLearning<MixedDataStructureSingleWL>(1.0E-20);
      assertNotNull(activeLearning1);
      assertEquals(1.0E-20, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(activeLearning1, mixedDataStructureSingleWL0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(1.0E-20, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      // Undeclared exception!
      try { 
        solver1.setLearningStrategy(activeLearning1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      varOrderHeap0.varDecayActivity();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, varOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      
      solver0.setDBSimplificationAllowed(false);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning1 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning1);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertNotNull(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts1 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts1);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning1, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts1);
      assertNotNull(solver1);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotNull(iLogAble0);
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      iLogAble0.log("s\n");
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      iLogAble0.log("propagations\t\t: ");
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, fixedPeriodRestarts0, iLogAble0);
      assertNotNull(solver2);
      assertFalse(fixedPeriodRestarts0.equals((Object)fixedPeriodRestarts1));
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(10, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(9, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(9, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      
      solver2.setTimeoutMs(4L);
      assertNotSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(fixedPeriodRestarts0.equals((Object)fixedPeriodRestarts1));
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(11, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(12, solver1.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, pureOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(32, (-1));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = 3097;
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(3097);
      assertNotNull(fixedLengthLearning0);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ILogAble iLogAble0 = solver1.out;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, glucose21Restarts0, iLogAble0);
      assertNotNull(solver2);
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      double double0 = constr0.getActivity();
      assertEquals(0.0, double0, 0.01);
      
      constr0.setActivity(0.0);
      IVecInt iVecInt0 = null;
      // Undeclared exception!
      try { 
        solver2.analyzeFinalConflictInTermsOfAssumptions(constr0, (IVecInt) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LearningStrategy<MixedDataStructureSingleWL> learningStrategy0 = (LearningStrategy<MixedDataStructureSingleWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy1 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 588;
      intArray0[3] = 435;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      LearningStrategy<ClausalDataStructureWL> learningStrategy2 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy2, clausalDataStructureWL0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(learningStrategy1, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      
      int int0 = searchParams1.getInitConflictBound();
      assertEquals(100, int0);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(9, solver0.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.nVars());
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(100, int1);
      assertSame(searchParams0, searchParams1);
      assertTrue(int1 == int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(100, int2);
      assertSame(searchParams0, searchParams1);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(1.5, double0, 0.01);
      assertSame(searchParams0, searchParams1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-430));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-430), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals((-430), fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      fixedLengthLearning0.setVarActivityListener(solver1);
      assertSame(searchParams0, searchParams1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-430), fixedLengthLearning0.getMaxLength());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      double double1 = constr0.getActivity();
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      constr0.setActivity(0.0);
      // Undeclared exception!
      try { 
        solver2.record(constr0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No elements in a tautology
         //
         verifyException("org.sat4j.specs.Constr$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 435;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      LearningStrategy<ClausalDataStructureWL> learningStrategy1 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy1, clausalDataStructureWL1, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(learningStrategy0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(100, int0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(100, int1);
      assertTrue(int1 == int0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(100, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(1.5, double0, 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      long long0 = solver2.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertNotSame(solver2, solver0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(solver0, solver2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver0.equals((Object)solver2));
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      String string0 = solver3.getLogPrefix();
      assertEquals("c ", string0);
      assertNotNull(string0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.nVars());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      // Undeclared exception!
      try { 
        solver2.forget(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      boolean boolean0 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, pureOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(32, (-1));
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(3097);
      assertNotNull(fixedLengthLearning0);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ILogAble iLogAble0 = solver1.out;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, glucose21Restarts0, iLogAble0);
      assertNotNull(solver2);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2, solver2.newVar());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      double double0 = constr0.getActivity();
      assertEquals(0.0, double0, 0.01);
      
      constr0.setActivity(0.0);
      VecInt vecInt0 = (VecInt)solver2.implied;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int int0 = vecInt0.containsAt(3097);
      assertEquals((-1), int0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.nVars());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, pureOrder0, glucose21Restarts0, mUSLauncher0);
      assertNotNull(solver3);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(1, solver3.nVars());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      // Undeclared exception!
      try { 
        solver3.addAtLeast((IVecInt) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(4056);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(4056);
      assertNotNull(activeLearning0);
      assertEquals(4056.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(10);
      assertNotNull(fixedLengthLearning0);
      assertEquals(10, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin1);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin1, pureOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(4056.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      int[] intArray0 = solver0.findModel();
      assertNotNull(intArray0);
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(4056.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(100L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      solver0.backtrack(intArray0);
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(4056.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(100L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(0.999, 0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin1);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      
      SearchParams searchParams1 = new SearchParams(0);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      ILogAble iLogAble0 = mock(ILogAble.class, new ViolatedAssumptionAnswer());
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin1, searchParams1, randomWalkDecorator0, noRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      
      ILogAble iLogAble1 = solver0.out;
      assertNotNull(iLogAble1);
      assertSame(iLogAble1, iLogAble0);
      
      iLogAble1.log("4<c#ZFAmel>a");
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertNotSame(searchParams1, searchParams0);
      assertSame(iLogAble1, iLogAble0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, iLogAble1);
      assertNotNull(solver1);
      assertFalse(cardinalityDataStructureYanMin0.equals((Object)cardinalityDataStructureYanMin1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = new VecInt();
      assertNotNull(vecInt1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      int int0 = vecInt1.size();
      assertEquals(0, int0);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      IVecInt iVecInt0 = vecInt1.push(0);
      assertNotNull(iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertEquals(0, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals(0, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt1.iterator();
      assertNotNull(iteratorInt0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      IVecInt iVecInt1 = vecInt1.push(0);
      assertNotNull(iVecInt1);
      assertSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(iVecInt1, vecInt1);
      assertSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.last());
      assertEquals(2, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2, iVecInt1.size());
      assertEquals(0, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      
      // Undeclared exception!
      try { 
        solver0.dimacs2internal(iVecInt1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3119);
      intArray0[1] = 4079;
      intArray0[2] = (-110);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(4079);
      assertNotNull(fixedLengthLearning0);
      assertEquals(4079, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(4079, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      SearchParams searchParams0 = new SearchParams(3120.7664011751, 2805);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2805, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3120.7664011751, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2805, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3120.7664011751, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams1 = new SearchParams(0);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      ILogAble iLogAble0 = mock(ILogAble.class, new ViolatedAssumptionAnswer());
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, randomWalkDecorator0, noRestarts0, iLogAble0);
      assertNotNull(solver2);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      
      ILogAble iLogAble1 = solver2.out;
      assertNotNull(iLogAble1);
      assertSame(iLogAble1, iLogAble0);
      
      iLogAble1.log("4<c#ZFAmel>a");
      assertNotSame(searchParams1, searchParams0);
      assertSame(iLogAble1, iLogAble0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(3, solver2.nVars());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      
      Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, iLogAble1);
      assertNotNull(solver3);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2805, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3120.7664011751, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(6, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      
      IVecInt iVecInt0 = solver3.createBlockingClauseForCurrentModel();
      assertNotNull(iVecInt0);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(searchParams1, searchParams0);
      assertSame(iLogAble1, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2805, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3120.7664011751, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals(7, solver2.nVars());
      assertEquals(8, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(4, solver3.newVar());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(3, solver3.nVars());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      AtLeast atLeast0 = (AtLeast)solver1.addAtLeast(iVecInt0, (-3119));
      assertNotNull(atLeast0);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(searchParams1, searchParams0);
      assertSame(iLogAble1, iLogAble0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2805, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3120.7664011751, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertEquals(1, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(10, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(9, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(9, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(5, solver3.nVars());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(6, solver3.newVar());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertEquals((-3119), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.simplify());
      assertEquals(0, atLeast0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(1548);
      assertNotNull(searchParams0);
      assertEquals(1548, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(1523);
      assertNotNull(pureOrder0);
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams1 = new SearchParams();
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams1, pureOrder0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      
      FixedPeriodRestarts fixedPeriodRestarts1 = (FixedPeriodRestarts)solver0.getRestartStrategy();
      assertNotNull(fixedPeriodRestarts1);
      assertNotSame(searchParams1, searchParams0);
      assertSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts1, iLogAble0);
      assertNotNull(solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1548, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        solver1.addAtMostOnTheFly(intArray0, 1259);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = new SearchParams(32, 32);
      assertNotNull(searchParams0);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 32);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      phaseInLastLearnedClauseSelectionStrategy0.assignLiteral(163);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ILogAble iLogAble1 = solver0.out;
      assertNotNull(iLogAble1);
      assertSame(iLogAble1, iLogAble0);
      
      iLogAble0.log("c ");
      assertSame(iLogAble0, iLogAble1);
      
      LubyRestarts lubyRestarts1 = new LubyRestarts();
      assertNotNull(lubyRestarts1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, lubyRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt();
      assertNotNull(vecInt1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      int int0 = vecInt1.size();
      assertEquals(0, int0);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      VecInt vecInt2 = (VecInt)vecInt1.push(653);
      assertNotNull(vecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, vecInt2);
      assertSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertEquals(653, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(653, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      assertEquals(1, vecInt2.size());
      
      IteratorInt iteratorInt0 = vecInt1.iterator();
      assertNotNull(iteratorInt0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, vecInt2);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(653, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      
      VecInt vecInt3 = (VecInt)vecInt0.push(1457);
      assertNotNull(vecInt3);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, vecInt3);
      assertNotSame(vecInt3, vecInt2);
      assertSame(vecInt3, vecInt0);
      assertNotSame(vecInt3, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt3.equals((Object)vecInt2));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1457, vecInt0.last());
      assertFalse(vecInt3.isEmpty());
      assertEquals(1, vecInt3.size());
      assertEquals(1457, vecInt3.last());
      
      VecInt vecInt4 = (VecInt)solver0.dimacs2internal(vecInt0);
      assertNotNull(vecInt4);
      assertNotSame(vecInt0, vecInt4);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, vecInt3);
      assertNotSame(lubyRestarts0, lubyRestarts1);
      assertNotSame(vecInt4, vecInt2);
      assertNotSame(vecInt4, vecInt1);
      assertNotSame(vecInt4, vecInt3);
      assertNotSame(vecInt4, vecInt0);
      assertSame(iLogAble0, iLogAble1);
      assertNotSame(solver0, solver1);
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertFalse(vecInt4.equals((Object)vecInt2));
      assertFalse(vecInt4.equals((Object)vecInt1));
      assertFalse(vecInt4.equals((Object)vecInt3));
      assertFalse(vecInt4.equals((Object)vecInt0));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1457, vecInt0.last());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(2914, vecInt4.last());
      assertFalse(vecInt4.isEmpty());
      assertEquals(1, vecInt4.size());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1458, solver0.realNumberOfVariables());
      assertEquals(1459, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1458, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = solver0.isSatisfiable((IVecInt) vecInt0, false);
      assertTrue(boolean0);
      assertNotSame(vecInt0, vecInt4);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, vecInt3);
      assertNotSame(lubyRestarts0, lubyRestarts1);
      assertSame(iLogAble0, iLogAble1);
      assertNotSame(solver0, solver1);
      assertFalse(vecInt0.equals((Object)vecInt4));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1457, vecInt0.last());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1460, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1460, solver0.realNumberOfVariables());
      assertEquals(1461, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      String string0 = fixedPeriodRestarts0.toString();
      assertEquals("constant restarts strategy every 0 conflicts", string0);
      assertNotNull(string0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      
      boolean boolean0 = solver0.isSatisfiable(false);
      assertTrue(boolean0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      
      fixedPeriodRestarts0.reset();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      solver0.addAllClauses(vec0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertNotNull(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap1);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts1 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts1);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap1, fixedPeriodRestarts1);
      assertNotNull(solver1);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotNull(iLogAble0);
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      fixedPeriodRestarts1.reset();
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      
      iLogAble0.log("s\n");
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      iLogAble0.log("propagations\t\t: ");
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>(1606);
      assertNotNull(percentLengthLearning1);
      assertEquals(1606, percentLengthLearning1.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, naturalStaticOrder0, fixedPeriodRestarts1);
      assertNotNull(solver2);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(1606, percentLengthLearning1.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1606;
      intArray0[1] = 1606;
      intArray0[2] = 1606;
      intArray0[3] = 1606;
      intArray0[4] = 1606;
      intArray0[5] = 1606;
      intArray0[6] = 1606;
      // Undeclared exception!
      try { 
        solver2.addClauseOnTheFly(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1606
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-293.3454), (-487));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals((-487), int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      
      String string0 = searchParams0.toString();
      assertNotNull(string0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      // Undeclared exception!
      try { 
        solver0.suggestNextLiteralToBranchOn((-487));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-873));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-873), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams((-1196.3206309675), (-873), (-1196.3206309675), (-873));
      assertNotNull(searchParams0);
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-873), searchParams0.getInitConflictBound());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("c ");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("c ");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("c ");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("c ");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals((-873), fixedLengthLearning0.getMaxLength());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-873), searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      
      int int0 = solver0.qhead;
      assertEquals(0, int0);
      
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureSingleWL>(0);
      assertNotNull(fixedLengthLearning1);
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning1, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-873), searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      
      // Undeclared exception!
      try { 
        solver1.setLearnedConstraintsDeletionStrategy(solver0.age_based);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      boolean boolean0 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, pureOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(32, (-1));
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(3097);
      assertNotNull(fixedLengthLearning0);
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ILogAble iLogAble0 = solver1.out;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, glucose21Restarts0, iLogAble0);
      assertNotNull(solver2);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, pureOrder0, lubyRestarts0);
      assertNotNull(solver3);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isVerbose());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ILogAble iLogAble1 = solver3.getLogger();
      assertNotNull(iLogAble1);
      assertSame(iLogAble1, iLogAble0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(3, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      Solver<CardinalityDataStructureYanMax> solver4 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax1, searchParams0, pureOrder0, lubyRestarts0, iLogAble1);
      assertNotNull(solver4);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver4.equals((Object)solver2));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(5, solver3.nVars());
      assertEquals(6, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(1, solver4.nVars());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2, solver4.newVar());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.decisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(2147483, solver4.getTimeout());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams1 = solver2.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertSame(searchParams0, searchParams1);
      assertSame(iLogAble0, iLogAble1);
      assertNotSame(solver2, solver4);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver2.equals((Object)solver4));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams2 = new SearchParams(0.0, 2686);
      assertNotNull(searchParams2);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertEquals(0.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2686, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      
      int int0 = searchParams2.getInitConflictBound();
      assertEquals(2686, int0);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(searchParams2, searchParams1);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertEquals(0.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2686, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      
      int int1 = searchParams1.getInitConflictBound();
      assertEquals((-1), int1);
      assertNotSame(searchParams1, searchParams2);
      assertSame(searchParams1, searchParams0);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertNotSame(searchParams0, searchParams2);
      assertSame(searchParams0, searchParams1);
      assertSame(iLogAble0, iLogAble1);
      assertNotSame(solver2, solver4);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(solver2.equals((Object)solver4));
      assertFalse(searchParams1.equals((Object)searchParams2));
      assertFalse(int1 == int0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertEquals(8, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int int2 = searchParams1.getInitConflictBound();
      assertEquals((-1), int2);
      assertNotSame(searchParams1, searchParams2);
      assertSame(searchParams1, searchParams0);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertNotSame(searchParams0, searchParams2);
      assertSame(searchParams0, searchParams1);
      assertSame(iLogAble0, iLogAble1);
      assertNotSame(solver2, solver4);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(solver2.equals((Object)solver4));
      assertFalse(searchParams1.equals((Object)searchParams2));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(3097, fixedLengthLearning0.getMaxLength());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(9, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(10, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(9, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals(8, solver2.newVar());
      assertEquals(7, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      double double0 = searchParams2.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(searchParams2, searchParams1);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertEquals(0.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2686, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      Solver<MixedDataStructureSingleWL> solver5 = new Solver<MixedDataStructureSingleWL>(miniSATLearning0, mixedDataStructureSingleWL0, searchParams2, pureOrder0, glucose21Restarts0);
      assertNotNull(solver5);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(solver5.equals((Object)solver0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0.0, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(2686, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver5.currentDecisionLevel());
      assertEquals(3, solver5.realNumberOfVariables());
      assertEquals(4, solver5.newVar());
      assertEquals(0, solver5.getPropagationLevel());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertFalse(solver5.isVerbose());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(0, solver5.nConstraints());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(3, solver5.nVars());
      assertEquals("c ", solver5.getLogPrefix());
      
      Solver<MixedDataStructureSingleWL> solver6 = new Solver<MixedDataStructureSingleWL>(miniSATLearning0, mixedDataStructureSingleWL0, pureOrder0, lubyRestarts0);
      assertNotNull(solver6);
      assertFalse(solver6.equals((Object)solver0));
      assertFalse(solver6.equals((Object)solver5));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver6.currentDecisionLevel());
      assertEquals(0, solver6.getPropagationLevel());
      assertFalse(solver6.isVerbose());
      assertEquals(5, solver6.nVars());
      assertEquals(5, solver6.realNumberOfVariables());
      assertEquals(6, solver6.newVar());
      assertEquals("c ", solver6.getLogPrefix());
      assertEquals(0, solver6.nConstraints());
      assertFalse(solver6.isSolverKeptHot());
      assertFalse(solver6.isDBSimplificationAllowed());
      assertEquals(0, solver6.decisionLevel());
      assertEquals(2147483, solver6.getTimeout());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver6.setLearnedConstraintsDeletionStrategy(solver0.activity_based_low_memory);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-873));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-873), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onRestart();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals((-873), fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      fixedPeriodRestarts0.reset();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      solver0.addAllClauses(vec0);
      assertEquals((-873), fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning1 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning1);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertNotNull(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap1);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts1 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts1);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning1, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(fixedPeriodRestarts0.equals((Object)fixedPeriodRestarts1));
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotNull(iLogAble0);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(fixedPeriodRestarts0.equals((Object)fixedPeriodRestarts1));
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      iLogAble0.log("s\n");
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(fixedPeriodRestarts0.equals((Object)fixedPeriodRestarts1));
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      iLogAble0.log("s\n");
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(fixedPeriodRestarts0.equals((Object)fixedPeriodRestarts1));
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-293.3454), (-487));
      assertNotNull(searchParams0);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals((-487), int0);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      boolean boolean1 = arminRestarts0.shouldRestart();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      int int1 = solver0.nVars();
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      mUSLauncher0.log("%/KB7D@s!U>2sCb.");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("%/KB7D@s!U>2sCb.");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 588;
      intArray0[3] = 435;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      LearningStrategy<ClausalDataStructureWL> learningStrategy1 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy1, clausalDataStructureWL0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      String string0 = solver1.getLogPrefix();
      assertEquals("c ", string0);
      assertNotNull(string0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(1548);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1548, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(1523);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams1 = new SearchParams();
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams1, pureOrder0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      
      clausalDataStructureWL0.setUnitPropagationListener(solver0);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      
      FixedPeriodRestarts fixedPeriodRestarts1 = (FixedPeriodRestarts)solver0.getRestartStrategy();
      assertNotNull(fixedPeriodRestarts1);
      assertNotSame(searchParams1, searchParams0);
      assertSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts1, iLogAble0);
      assertNotNull(solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1548, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMin>(1523);
      assertNotNull(activeLearning1);
      assertEquals(1523.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(activeLearning1, cardinalityDataStructureYanMin0, searchParams1, pureOrder0, fixedPeriodRestarts1, (ILogAble) null);
      assertNotNull(solver2);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1523.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(10, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams1, randomWalkDecorator0, fixedPeriodRestarts1, (ILogAble) null);
      assertNotNull(solver3);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      
      solver3.expireTimeout();
      assertNotSame(searchParams1, searchParams0);
      assertSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(3, solver3.nVars());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(14, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(13, solver0.realNumberOfVariables());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      
      // Undeclared exception!
      try { 
        solver2.getIthConstr(1426);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1426
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      
      searchParams0.setVarDecay((-2064.5853749814305));
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      
      RestartStrategy restartStrategy0 = null;
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, searchParams0, pureOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      solver0.setLogPrefix("j,KdIL0");
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("j,KdIL0", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      solver0.setTimeoutOnConflicts(0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("j,KdIL0", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      
      // Undeclared exception!
      try { 
        solver1.reduceDB();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-873));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-873), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams((-1196.3206309675), (-873), (-1196.3206309675), 0);
      assertNotNull(searchParams0);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("%/KB7D@s!U>2sCb.");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("%/KB7D@s!U>2sCb.");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals((-873), fixedLengthLearning0.getMaxLength());
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      
      int int0 = solver0.getTimeout();
      assertEquals(2147483, int0);
      assertEquals((-873), fixedLengthLearning0.getMaxLength());
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      
      // Undeclared exception!
      try { 
        solver0.record((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3119);
      intArray0[1] = 4079;
      intArray0[2] = (-110);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(4079);
      assertNotNull(fixedLengthLearning0);
      assertEquals(4079, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(4079, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      
      SearchParams searchParams0 = new SearchParams(3120.7664011751, 2805);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2805, searchParams0.getInitConflictBound());
      assertEquals(3120.7664011751, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2805, searchParams0.getInitConflictBound());
      assertEquals(3120.7664011751, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      boolean boolean0 = solver1.isSolverKeptHot();
      assertFalse(boolean0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2805, searchParams0.getInitConflictBound());
      assertEquals(3120.7664011751, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL1 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL1);
      assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(989);
      assertNotNull(percentLengthLearning1);
      assertEquals(989, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver2);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(989, percentLengthLearning1.getLimit());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      
      ILogAble iLogAble0 = solver2.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(989, percentLengthLearning1.getLimit());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0, (ILogAble) null);
      assertNotNull(solver3);
      assertFalse(solver3.equals((Object)solver1));
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(6, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals(0, solver3.nConstraints());
      assertEquals(5, solver3.nVars());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2805, searchParams0.getInitConflictBound());
      assertEquals(3120.7664011751, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      boolean boolean1 = solver1.isNeedToReduceDB();
      assertFalse(boolean1);
      assertNotSame(solver1, solver3);
      assertTrue(boolean1 == boolean0);
      assertFalse(solver1.equals((Object)solver3));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2805, searchParams0.getInitConflictBound());
      assertEquals(3120.7664011751, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(8, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder((-2890));
      assertNotNull(pureOrder0);
      assertEquals((-2890), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals((-2890), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      boolean boolean0 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      lubyRestarts0.newConflict();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(32);
      assertNotNull(activeLearning0);
      assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals((-2890), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver0.assume((-370));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMin> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, (IOrder) null, lubyRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(4069);
      assertNotNull(fixedLengthLearning0);
      assertEquals(4069, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(4069, fixedLengthLearning0.getMaxLength());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      // Undeclared exception!
      try { 
        solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-873));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-873), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams((-1196.3206309675), (-873), (-1196.3206309675), 0);
      assertNotNull(searchParams0);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 435;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning1 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning1);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning1, clausalDataStructureWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver1);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals((-873.0), searchParams1.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1196.3206309675), searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, int0);
      assertSame(searchParams0, searchParams1);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(0, int1);
      assertSame(searchParams0, searchParams1);
      assertTrue(int1 == int0);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int2 = searchParams1.getInitConflictBound();
      assertEquals(0, int2);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(9, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals((-873.0), searchParams1.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1196.3206309675), searchParams1.getVarDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      
      String string0 = searchParams0.toString();
      assertNotNull(string0);
      assertSame(searchParams0, searchParams1);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals((-1196.3206309675), double0, 0.01);
      assertSame(searchParams0, searchParams1);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertNotNull(solver2);
      assertEquals((-1196.3206309675), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-873.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1196.3206309675), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      
      // Undeclared exception!
      try { 
        solver2.setLearnedConstraintsDeletionStrategy(solver0.lbd_based);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      SearchParams searchParams0 = new SearchParams((-490));
      assertNotNull(searchParams0);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.95);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>((-237));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-237), fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals((-237), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      solver1.setLearningStrategy(fixedLengthLearning0);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals((-237), fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 0);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      randomWalkDecorator0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      // Undeclared exception!
      try { 
        solver1.toString();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      VecInt vecInt0 = new VecInt(3118, 3118);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3118, vecInt0.last());
      assertEquals(3118, vecInt0.size());
      
      IConstr iConstr0 = solver0.addAtMost(vecInt0, 3118);
      assertNull(iConstr0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3119, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3120, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3119, solver0.nVars());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3118, vecInt0.last());
      assertEquals(3118, vecInt0.size());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-293.3454), (-487));
      assertNotNull(searchParams0);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = new Integer(3118);
      assertEquals(3118, int0);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("%/KB7D@s!U>2sCb.");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("%/KB7D@s!U>2sCb.");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(2);
      assertNotNull(lubyRestarts0);
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver1);
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      solver1.addClause(vecInt0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      RestartStrategy restartStrategy0 = null;
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IConstr iConstr0 = solver0.addAtMost(vecInt0, 3118);
      assertNull(iConstr0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-293.3454), (-487));
      assertNotNull(searchParams0);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals((-487), int0);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver1.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ILogAble iLogAble0 = mock(ILogAble.class, new ViolatedAssumptionAnswer());
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, noRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      ILogAble iLogAble1 = solver0.out;
      assertNotNull(iLogAble1);
      assertSame(iLogAble1, iLogAble0);
      
      iLogAble1.log("4<c#ZFAmel>a");
      assertSame(iLogAble1, iLogAble0);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4<c#ZFAmel>a");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "4<c#ZFAmel>a");
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      solver0.printStat(printWriter0, "4<c#ZFAmel>a");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      boolean boolean0 = solver1.isSolverKeptHot();
      assertFalse(boolean0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning2);
      assertEquals(0, percentLengthLearning2.getLimit());
      
      LubyRestarts lubyRestarts1 = new LubyRestarts(0);
      assertNotNull(lubyRestarts1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts1.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning2, cardinalityDataStructureYanMax0, randomWalkDecorator0, lubyRestarts1);
      assertNotNull(solver2);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0, percentLengthLearning2.getLimit());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts1.getFactor());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 32;
      intArray0[2] = 0;
      intArray0[3] = (-2806);
      intArray0[4] = 32;
      // Undeclared exception!
      try { 
        solver0.backtrack(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2806
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 588;
      intArray0[3] = 435;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      LearningStrategy<ClausalDataStructureWL> learningStrategy1 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy1, clausalDataStructureWL0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(learningStrategy0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      
      int int0 = searchParams1.getInitConflictBound();
      assertEquals(100, int0);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(10, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(100, int1);
      assertSame(searchParams0, searchParams1);
      assertTrue(int1 == int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(100, int2);
      assertSame(searchParams0, searchParams1);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(1.5, double0, 0.01);
      assertSame(searchParams0, searchParams1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onRestart();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams1, subsetVarOrder0, fixedPeriodRestarts0, iLogAble0);
      assertNotNull(solver2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        iVecInt0.containsAt(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-490));
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.updateVarAtDecisionLevel(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.95);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      
      Constr constr0 = solver0.propagate();
      assertNull(constr0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      
      boolean boolean0 = solver0.isVerbose();
      assertFalse(boolean0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-418.3963624021571));
      assertNotNull(activeLearning0);
      assertEquals((-418.3963624021571), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals((-418.3963624021571), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      int int0 = solver1.nAssigns();
      assertEquals(0, int0);
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals((-418.3963624021571), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      ILits iLits0 = solver0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(7, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3119);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(4079);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(4079, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 1.0E-4);
      assertNotNull(randomWalkDecorator0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1.0E-4, randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      randomWalkDecorator0.varDecayActivity();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1.0E-4, randomWalkDecorator0.getProbability(), 0.01);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(4079, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      ILogAble iLogAble1 = solver0.out;
      assertNotNull(iLogAble1);
      assertSame(iLogAble1, iLogAble0);
      
      iLogAble0.log("c ");
      assertSame(iLogAble0, iLogAble1);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, (SearchParams) null, pureOrder0, lubyRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int0 = vecInt0.size();
      assertEquals(0, int0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.push(4079);
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(4079, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4079, iVecInt0.last());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertSame(vecInt0, iVecInt0);
      assertEquals(4079, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IVecInt iVecInt1 = vecInt0.push((-2892));
      assertNotNull(iVecInt1);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertSame(iVecInt1, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals((-2892), vecInt0.last());
      assertEquals(2, iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-2892), iVecInt1.last());
      
      boolean boolean0 = solver0.isSatisfiable((IVecInt) vecInt0, false);
      assertTrue(boolean0);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(iLogAble0, iLogAble1);
      assertNotSame(solver0, solver1);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals((-2892), vecInt0.last());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(4079, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4080, solver0.nVars());
      assertEquals(4080, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4081, solver0.newVar());
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, noRestarts0, iLogAble1);
      assertNotNull(solver2);
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(4079, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.nVars());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4082, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4082, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4083, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      solver2.setSimplifier(solver1.NO_SIMPLIFICATION);
      assertSame(iLogAble0, iLogAble1);
      assertNotSame(solver0, solver1);
      assertSame(iLogAble1, iLogAble0);
      assertNotSame(solver1, solver0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(4079, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4086, solver0.realNumberOfVariables());
      assertEquals(4087, solver0.newVar());
      assertEquals(4086, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4086, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4085, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(4085, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(4056);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(4056);
      assertNotNull(activeLearning0);
      assertEquals(4056.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(10);
      assertNotNull(fixedLengthLearning0);
      assertEquals(10, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin1);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin1, pureOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(4056.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      int[] intArray0 = solver0.findModel();
      assertNotNull(intArray0);
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(4056.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(100L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = null;
      try {
        solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>((LearningStrategy<MixedDataStructureDanielWLConciseBinary>) null, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-490));
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>(0);
      assertNotNull(fixedLengthLearning0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      clauseOnlyLearning0.setSolver((Solver<CardinalityDataStructureYanMin>) null);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin1);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin1, searchParams0, randomWalkDecorator0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      
      solver1.setLearningStrategy(fixedLengthLearning0);
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator((VarOrderHeap) null, (-490));
      assertNotNull(tabuListDecorator0);
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = solver0.isSatisfiable();
      assertTrue(boolean0);
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 435;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      LearningStrategy<ClausalDataStructureWL> learningStrategy1 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy1, clausalDataStructureWL1, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(learningStrategy0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(100, int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      int int1 = solver0.rootLevel;
      assertEquals(0, int1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertFalse(int1 == int0);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(100, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(1.5, double0, 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      long long0 = solver2.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertNotSame(solver2, solver0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(solver0, solver2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver0.equals((Object)solver2));
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(9, solver0.nVars());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics1 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics1);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver3 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics1, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isVerbose());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      solver3.setTimeout(7);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(3, solver3.nVars());
      assertEquals(7, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isVerbose());
      assertEquals(4, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver4 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver4);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 0, 435}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver0.equals((Object)solver2));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.nConstraints());
      assertEquals(2, solver4.newVar());
      assertFalse(solver4.isVerbose());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(1, solver4.nVars());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.decisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      // Undeclared exception!
      try { 
        solver4.isSatisfiable(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-531);
      intArray0[1] = (-531);
      int int0 = (-110);
      intArray0[2] = (-110);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>((-531));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-531), fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals((-531), fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      levelBasedVarOrderHeap0.setVarDecay((-110));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      // Undeclared exception!
      try { 
        solver0.unset((-110));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-293.3454), (-487));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals((-487), int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      
      try { 
        solver1.discardCurrentModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 588;
      intArray0[3] = 435;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      LearningStrategy<ClausalDataStructureWL> learningStrategy1 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy1, clausalDataStructureWL1, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(learningStrategy0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      int int0 = searchParams1.getInitConflictBound();
      assertEquals(100, int0);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(100, int1);
      assertSame(searchParams0, searchParams1);
      assertTrue(int1 == int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(100, int2);
      assertSame(searchParams0, searchParams1);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(1.5, double0, 0.01);
      assertSame(searchParams0, searchParams1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams1, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(11, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(11, solver0.realNumberOfVariables());
      
      long long0 = solver2.getTimeoutMs();
      assertEquals(2147483647L, long0);
      assertSame(searchParams1, searchParams0);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(solver2, solver0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(solver0, solver2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver0.equals((Object)solver2));
      assertFalse(solver2.equals((Object)solver0));
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(9, solver1.nVars());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(10, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(14, solver0.newVar());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(13, solver0.nVars());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams1, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver3);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver0.equals((Object)solver2));
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(12, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(11, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(15, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(16, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(15, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      String string0 = solver3.getLogPrefix();
      assertEquals("c ", string0);
      assertNotNull(string0);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(solver0, solver2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver0.equals((Object)solver2));
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(13, solver1.nVars());
      assertEquals(13, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(14, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(3, solver3.nVars());
      assertEquals(0, solver3.nConstraints());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(17, solver0.nVars());
      assertEquals(18, solver0.newVar());
      assertEquals(17, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      // Undeclared exception!
      try { 
        solver2.forget(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-490));
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.updateVarAtDecisionLevel(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.95);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      
      Constr constr0 = solver0.propagate();
      assertNull(constr0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      
      // Undeclared exception!
      try { 
        solver0.primeImplicant((-71));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = null;
      int[] intArray0 = new int[6];
      intArray0[0] = (-3119);
      intArray0[1] = 4079;
      intArray0[2] = (-110);
      intArray0[3] = 1235;
      intArray0[4] = 130;
      intArray0[5] = 1715;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-3119), 4079, (-110), 1235, 130, 1715}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(miniSATLearning0, mixedDataStructureSingleWL0, (SearchParams) null, subsetVarOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-3119), 4079, (-110), 1235, 130, 1715}, intArray0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      
      solver0.setLearningStrategy(miniSATLearning0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-3119), 4079, (-110), 1235, 130, 1715}, intArray0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = null;
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      Solver<ClausalDataStructureWL> solver1 = null;
      try {
        solver1 = new Solver<ClausalDataStructureWL>((LearningStrategy<ClausalDataStructureWL>) null, (ClausalDataStructureWL) null, subsetVarOrder0, noRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>(1445);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1445, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 3);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      varOrderHeap0.assignLiteral(1445);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(3418);
      assertNotNull(lubyRestarts0);
      assertEquals(3418, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.onRestart();
      assertEquals(3418, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(3418L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(3418, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(3418L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver0.fixedSize(1445);
      assertNotNull(learnedConstraintsDeletionStrategy0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(3418, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(3418L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(2.0, 2.0, 2.0, 18);
      assertNotNull(searchParams0);
      assertEquals(2.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(18, searchParams0.getInitConflictBound());
      assertEquals(2.0, searchParams0.getVarDecay(), 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 18;
      intArray0[1] = 18;
      intArray0[2] = 18;
      intArray0[3] = 18;
      intArray0[4] = 2018;
      intArray0[5] = 18;
      intArray0[6] = 18;
      intArray0[7] = 18;
      intArray0[8] = 18;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {18, 18, 18, 18, 2018, 18, 18, 18, 18}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertNotNull(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      iLogAble0.log("s\n");
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      iLogAble0.log("propagations\t\t: ");
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, miniSATRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {18, 18, 18, 18, 2018, 18, 18, 18, 18}, intArray0);
      assertEquals(2.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(18, searchParams0.getInitConflictBound());
      assertEquals(2.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(9, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      
      solver1.setLogPrefix("`|]L(@");
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {18, 18, 18, 18, 2018, 18, 18, 18, 18}, intArray0);
      assertEquals(2.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(18, searchParams0.getInitConflictBound());
      assertEquals(2.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("`|]L(@", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      
      VecInt vecInt0 = (VecInt)solver0.trail;
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        solver1.addParity(vecInt0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      VecInt vecInt0 = new VecInt(3118, 3118);
      assertNotNull(vecInt0);
      assertEquals(3118, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3118, vecInt0.last());
      
      IConstr iConstr0 = solver0.addAtMost(vecInt0, 3118);
      assertNull(iConstr0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3119, solver0.nVars());
      assertEquals(3119, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3120, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3118, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3118, vecInt0.last());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-293.3454), (-487));
      assertNotNull(searchParams0);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals((-487), int0);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("%/KB7D@s!U>2sCb.");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("%/KB7D@s!U>2sCb.");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertNull(searchParams0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams1 = new SearchParams(0);
      assertNotNull(searchParams1);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      ILogAble iLogAble0 = mock(ILogAble.class, new ViolatedAssumptionAnswer());
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, searchParams1, randomWalkDecorator0, noRestarts0, iLogAble0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      
      ILogAble iLogAble1 = solver1.out;
      assertNotNull(iLogAble1);
      assertSame(iLogAble1, iLogAble0);
      
      iLogAble1.log("4<c#ZFAmel>a");
      assertSame(iLogAble1, iLogAble0);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, (SearchParams) null, levelBasedVarOrderHeap0, lubyRestarts0, iLogAble1);
      assertNotNull(solver2);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(5, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int int0 = solver2.decisionLevel();
      assertEquals(0, int0);
      assertSame(iLogAble1, iLogAble0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(7, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      fixedPeriodRestarts0.onRestart();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, pureOrder0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver0.analyzeFinalConflictInTermsOfAssumptions((Constr) null, (IVecInt) null, 4078);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(6);
      assertNotNull(percentLengthLearning0);
      assertEquals(6, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 588;
      intArray0[3] = 435;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      LearningStrategy<ClausalDataStructureWL> learningStrategy1 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy1, clausalDataStructureWL0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(learningStrategy0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      
      int int0 = searchParams1.getInitConflictBound();
      assertEquals(100, int0);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(100, int1);
      assertSame(searchParams0, searchParams1);
      assertTrue(int1 == int0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(100, int2);
      assertSame(searchParams0, searchParams1);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(1.5, double0, 0.01);
      assertSame(searchParams0, searchParams1);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams1, randomWalkDecorator0, (RestartStrategy) null);
      assertNotNull(solver2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(6, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      
      int int3 = solver2.newVar();
      assertEquals(3, int3);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(6, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(14, solver0.newVar());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(10, solver1.newVar());
      assertEquals(9, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(9, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver2.decisionLevel());
      assertEquals(5, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(4, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(4, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3119);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(4079);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(4079, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1.0E-4);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.0E-4, randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      randomWalkDecorator0.varDecayActivity();
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.0E-4, randomWalkDecorator0.getProbability(), 0.01);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, noRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(4079, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      
      ILogAble iLogAble1 = solver0.out;
      assertNotNull(iLogAble1);
      assertSame(iLogAble1, iLogAble0);
      
      iLogAble0.log("c ");
      assertSame(iLogAble0, iLogAble1);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, (SearchParams) null, varOrderHeap0, lubyRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = new VecInt();
      assertNotNull(vecInt1);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      int int0 = vecInt1.size();
      assertEquals(0, int0);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotNull(iteratorInt0);
      assertNotSame(vecInt0, vecInt1);
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.push((-2907));
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertEquals((-2907), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-2907), iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      
      IVecInt iVecInt1 = solver1.dimacs2internal(vecInt0);
      assertNotNull(iVecInt1);
      assertNotSame(solver1, solver0);
      assertNotSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertNotSame(iVecInt1, vecInt1);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(iVecInt1.equals((Object)vecInt1));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2908, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2908, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2909, solver1.newVar());
      assertEquals((-2907), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, iVecInt1.size());
      assertEquals(5815, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = solver0.isSatisfiable((IVecInt) vecInt1, false);
      assertTrue(boolean0);
      assertNotSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertSame(iLogAble0, iLogAble1);
      assertNotSame(solver0, solver1);
      assertFalse(vecInt1.equals((Object)iVecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(4079, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2910, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2911, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2910, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      
      searchParams0.setVarDecay((-2064.5853749814305));
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, searchParams0, pureOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-2064.5853749814305), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onRestart();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(4267);
      assertNotNull(percentLengthLearning0);
      assertEquals(4267, percentLengthLearning0.getLimit());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(1000);
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1000, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, pureOrder0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(4267, percentLengthLearning0.getLimit());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1000, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 32;
      intArray0[1] = 4061;
      // Undeclared exception!
      try { 
        solver1.addClauseOnTheFly(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4061
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      LubyRestarts lubyRestarts1 = new LubyRestarts();
      assertNotNull(lubyRestarts1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(32, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int int0 = lubyRestarts1.nextLuby();
      assertEquals(1, int0);
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(32, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      lubyRestarts1.newConflict();
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(32, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(32);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, pureOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      
      // Undeclared exception!
      try { 
        solver0.assume(65535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65534
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-293.3454), (-487));
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals((-487), int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-487);
      intArray0[1] = (-487);
      intArray0[2] = (-487);
      intArray0[3] = (-487);
      intArray0[4] = (-487);
      intArray0[5] = (-164);
      intArray0[6] = (-487);
      intArray0[7] = (-487);
      intArray0[8] = (-487);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-487), (-487), (-487), (-487), (-487), (-164), (-487), (-487), (-487)}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {(-487), (-487), (-487), (-487), (-487), (-164), (-487), (-487), (-487)}, intArray0);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      // Undeclared exception!
      try { 
        solver0.addAtMost((IVecInt) null, (-6165));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = new SearchParams(32, 32);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 32);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      phaseInLastLearnedClauseSelectionStrategy0.assignLiteral(163);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap1, lubyRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.setExpectedNumberOfClauses(163);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy1 = (PhaseInLastLearnedClauseSelectionStrategy)tabuListDecorator0.getPhaseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy1);
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertNotSame(phaseInLastLearnedClauseSelectionStrategy1, phaseInLastLearnedClauseSelectionStrategy0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(phaseInLastLearnedClauseSelectionStrategy1.equals((Object)phaseInLastLearnedClauseSelectionStrategy0));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy1.toString());
      
      VarOrderHeap varOrderHeap2 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy1);
      assertNotNull(varOrderHeap2);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(phaseInLastLearnedClauseSelectionStrategy1.equals((Object)phaseInLastLearnedClauseSelectionStrategy0));
      assertFalse(varOrderHeap2.equals((Object)varOrderHeap0));
      assertFalse(varOrderHeap2.equals((Object)varOrderHeap1));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy1.toString());
      assertEquals(0, varOrderHeap2.numberOfInterestingVariables());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap2, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap2));
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(phaseInLastLearnedClauseSelectionStrategy1.equals((Object)phaseInLastLearnedClauseSelectionStrategy0));
      assertFalse(varOrderHeap2.equals((Object)varOrderHeap0));
      assertFalse(varOrderHeap2.equals((Object)varOrderHeap1));
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy1.toString());
      assertEquals(0, varOrderHeap2.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 32;
      // Undeclared exception!
      try { 
        solver1.backtrack(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(1548);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1548, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(1523);
      assertNotNull(pureOrder0);
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams1 = new SearchParams();
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams1, pureOrder0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      
      FixedPeriodRestarts fixedPeriodRestarts1 = (FixedPeriodRestarts)solver0.getRestartStrategy();
      assertNotNull(fixedPeriodRestarts1);
      assertNotSame(searchParams1, searchParams0);
      assertSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      activeLearning0.setSolver(solver0);
      assertNotSame(searchParams1, searchParams0);
      assertSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts1, iLogAble0);
      assertNotNull(solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1548, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1523, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1548;
      intArray0[1] = 1523;
      intArray0[2] = 1523;
      // Undeclared exception!
      try { 
        solver1.addAtMostOnTheFly(intArray0, (-1821));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(4056);
      assertNotNull(pureOrder0);
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL1, searchParams0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      solver0.stop();
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(4056);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(4056.0, activeLearning0.getActivityPercent(), 0.01);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      boolean boolean1 = arminRestarts0.shouldRestart();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(1420);
      assertNotNull(percentLengthLearning0);
      assertEquals(1420, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL2 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL2);
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL2, pureOrder0, glucose21Restarts0);
      assertNotNull(solver1);
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1420, percentLengthLearning0.getLimit());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotNull(iLogAble0);
      assertNotSame(clausalDataStructureWL2, clausalDataStructureWL0);
      assertNotSame(clausalDataStructureWL2, clausalDataStructureWL1);
      assertNotSame(solver1, solver0);
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1420, percentLengthLearning0.getLimit());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, glucose21Restarts0, iLogAble0);
      assertNotNull(solver2);
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1420, percentLengthLearning0.getLimit());
      
      boolean boolean2 = solver2.isNeedToReduceDB();
      assertFalse(boolean2);
      assertNotSame(clausalDataStructureWL2, clausalDataStructureWL0);
      assertNotSame(clausalDataStructureWL2, clausalDataStructureWL1);
      assertNotSame(solver1, solver0);
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.nVars());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(4056, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1420, percentLengthLearning0.getLimit());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      ILogAble iLogAble0 = mock(ILogAble.class, new ViolatedAssumptionAnswer());
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, noRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      
      ILogAble iLogAble1 = solver0.out;
      assertNotNull(iLogAble1);
      assertSame(iLogAble1, iLogAble0);
      
      iLogAble1.log("4<c#ZFAmel>a");
      assertSame(iLogAble1, iLogAble0);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4<c#ZFAmel>a");
      assertNotNull(mockPrintWriter0);
      
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "4<c#ZFAmel>a");
      assertNotNull(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      
      solver0.printStat(printWriter0, "4<c#ZFAmel>a");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      fixedPeriodRestarts0.onRestart();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      boolean boolean0 = solver1.isSolverKeptHot();
      assertFalse(boolean0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(percentLengthLearning2);
      assertEquals(0, percentLengthLearning2.getLimit());
      
      LubyRestarts lubyRestarts1 = new LubyRestarts((-313));
      assertNotNull(lubyRestarts1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals((-313), lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning2, cardinalityDataStructureYanMax0, randomWalkDecorator0, lubyRestarts1);
      assertNotNull(solver2);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0, percentLengthLearning2.getLimit());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals((-313), lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 32;
      intArray0[2] = (-313);
      intArray0[3] = (-2806);
      intArray0[4] = 32;
      intArray0[5] = (-313);
      intArray0[6] = 0;
      intArray0[7] = 110;
      intArray0[8] = 32;
      // Undeclared exception!
      try { 
        solver2.addClauseOnTheFly(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 313
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-293.3454), (-487));
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        solver0.backtrack((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3119);
      intArray0[1] = 4079;
      intArray0[2] = (-110);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(4079);
      assertNotNull(fixedLengthLearning0);
      assertEquals(4079, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(4079, fixedLengthLearning0.getMaxLength());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      // Undeclared exception!
      try { 
        solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int[] intArray0 = new int[4];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL1, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(learningStrategy0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertSame(searchParams1, searchParams0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(100, int0);
      assertSame(searchParams0, searchParams1);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int1 = searchParams1.getInitConflictBound();
      assertEquals(100, int1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertSame(searchParams1, searchParams0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertTrue(int1 == int0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.nVars());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(10, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      int int2 = searchParams1.getInitConflictBound();
      assertEquals(100, int2);
      assertSame(searchParams0, searchParams1);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertSame(searchParams1, searchParams0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.nVars());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      double double0 = searchParams1.getConflictBoundIncFactor();
      assertEquals(1.5, double0, 0.01);
      assertSame(searchParams0, searchParams1);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertSame(searchParams1, searchParams0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(13, solver0.nVars());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(14, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(9, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(10, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      Solver<MixedDataStructureSingleWL> solver2 = null;
      try {
        solver2 = new Solver<MixedDataStructureSingleWL>(activeLearning0, (MixedDataStructureSingleWL) null, searchParams1, subsetVarOrder0, (RestartStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-51);
      byteArray0[5] = (byte) (-51);
      byteArray0[6] = (byte) (-51);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-100), (byte)4, (byte) (-25), (byte) (-51), (byte)0, (byte) (-51), (byte) (-51)}, byteArray0);
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts1 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts1);
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      
      boolean boolean1 = glucose21Restarts1.shouldRestart();
      assertFalse(boolean1);
      assertNotSame(glucose21Restarts1, glucose21Restarts0);
      assertTrue(boolean1 == boolean0);
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertNotSame(glucose21Restarts0, glucose21Restarts1);
      assertFalse(glucose21Restarts0.equals((Object)glucose21Restarts1));
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, pureOrder0, glucose21Restarts1);
      assertNotNull(solver0);
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, glucose21Restarts1);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      
      boolean boolean2 = solver0.assume(32);
      assertTrue(boolean2);
      assertNotSame(solver0, solver1);
      assertNotSame(glucose21Restarts1, glucose21Restarts0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(1, solver0.currentDecisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
      assertNotNull(solver2);
      assertFalse(glucose21Restarts0.equals((Object)glucose21Restarts1));
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      solver2.setNeedToReduceDB(false);
      assertNotSame(glucose21Restarts0, glucose21Restarts1);
      assertFalse(glucose21Restarts0.equals((Object)glucose21Restarts1));
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.nVars());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams((-490));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.95, double0, 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.updateVarAtDecisionLevel(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.95);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      
      RestartStrategy restartStrategy0 = null;
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      Constr constr0 = solver0.propagate();
      assertNull(constr0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-490), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      // Undeclared exception!
      try { 
        solver0.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3119);
      intArray0[1] = 4079;
      int int0 = (-110);
      intArray0[2] = (-110);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(4079);
      assertNotNull(fixedLengthLearning0);
      assertEquals(4079, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(4079, fixedLengthLearning0.getMaxLength());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      levelBasedVarOrderHeap0.setVarDecay((-110));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      // Undeclared exception!
      try { 
        solver0.unset((-110));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LearningStrategy<MixedDataStructureSingleWL> learningStrategy0 = (LearningStrategy<MixedDataStructureSingleWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy1 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 588;
      intArray0[3] = 435;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      LearningStrategy<ClausalDataStructureWL> learningStrategy2 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy2, clausalDataStructureWL0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(learningStrategy1, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      int int0 = searchParams1.getInitConflictBound();
      assertEquals(100, int0);
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(100, int1);
      assertSame(searchParams0, searchParams1);
      assertTrue(int1 == int0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(100, int2);
      assertSame(searchParams0, searchParams1);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(1.5, double0, 0.01);
      assertSame(searchParams0, searchParams1);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(learningStrategy0, mixedDataStructureSingleWL0, searchParams1, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver2);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 1, 588, 435}, intArray0);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(11, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(11, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      // Undeclared exception!
      try { 
        solver2.setLearnedConstraintsDeletionStrategy(solver0.size_based);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = null;
      int[] intArray0 = new int[6];
      intArray0[0] = (-3119);
      intArray0[1] = 4079;
      intArray0[2] = (-110);
      intArray0[3] = 1235;
      intArray0[4] = 130;
      int int0 = 1715;
      intArray0[5] = 1715;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-3119), 4079, (-110), 1235, 130, 1715}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(miniSATLearning0, mixedDataStructureSingleWL0, (SearchParams) null, subsetVarOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-3119), 4079, (-110), 1235, 130, 1715}, intArray0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(7);
      assertNotNull(fixedLengthLearning0);
      assertEquals(7, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL1, (SearchParams) null, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertNotNull(solver1);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-3119), 4079, (-110), 1235, 130, 1715}, intArray0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(7, fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      // Undeclared exception!
      try { 
        solver1.primeImplicant(1235);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      boolean boolean0 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, pureOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 32;
      intArray0[1] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {32, 32}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(32, vecInt0.last());
      assertEquals(2, vecInt0.size());
      
      Set<Integer> set0 = solver0.fromLastDecisionLevel(vecInt0);
      assertTrue(set0.contains(32));
      assertNotNull(set0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {32, 32}, intArray0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(vecInt0.isEmpty());
      assertEquals(32, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.undertimeout = false;
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      
      // Undeclared exception!
      try { 
        solver0.toString();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      String string0 = fixedPeriodRestarts0.toString();
      assertEquals("constant restarts strategy every 0 conflicts", string0);
      assertNotNull(string0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      fixedPeriodRestarts0.reset();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      solver0.addAllClauses(vec0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-293.3454), (-487));
      assertNotNull(searchParams0);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals((-487), int0);
      assertEquals((-293.3454), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-487), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      assertNotNull(randomLiteralSelectionStrategy0);
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap1);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      FixedPeriodRestarts fixedPeriodRestarts1 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts1);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap1, fixedPeriodRestarts1);
      assertNotNull(solver1);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotNull(iLogAble0);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      fixedPeriodRestarts1.reset();
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      
      iLogAble0.log("s\n");
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      iLogAble0.log("propagations\t\t: ");
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.nVars());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = null;
      try {
        solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, (IOrder) null, fixedPeriodRestarts0, iLogAble0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      //  // Unstable assertion: assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      //  // Unstable assertion: assertNotNull(clausalDataStructureWL0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMin0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      //  // Unstable assertion: assertNotNull(lubyRestarts0);
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = new SearchParams(32, 32);
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(32, searchParams0.getInitConflictBound());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      //  // Unstable assertion: assertNotNull(varOrderHeap0);
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 32);
      //  // Unstable assertion: assertNotNull(tabuListDecorator0);
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      int int0 = (-940);
      PureOrder pureOrder0 = new PureOrder((-940));
      //  // Unstable assertion: assertNotNull(pureOrder0);
      //  // Unstable assertion: assertEquals((-940), pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      //  // Unstable assertion: assertNotNull(randomWalkDecorator0);
      //  // Unstable assertion: assertEquals((-940), pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      //  // Unstable assertion: assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      //  // Unstable assertion: assertEquals((-940), pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      int int1 = 163;
      phaseInLastLearnedClauseSelectionStrategy0.assignLiteral((-940));
      //  // Unstable assertion: assertEquals((-940), pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      //  // Unstable assertion: assertNotNull(varOrderHeap1);
      //  // Unstable assertion: assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      //  // Unstable assertion: assertEquals((-940), pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      //  // Unstable assertion: assertNotNull(iLogAble0);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      //  // Unstable assertion: assertNotNull(percentLengthLearning0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, lubyRestarts0, iLogAble0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(32, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals((-940), pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int int2 = (-817);
      solver0.setExpectedNumberOfClauses((-817));
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(32, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals((-940), pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy1 = (PhaseInLastLearnedClauseSelectionStrategy)tabuListDecorator0.getPhaseSelectionStrategy();
      //  // Unstable assertion: assertNotNull(phaseInLastLearnedClauseSelectionStrategy1);
      //  // Unstable assertion: assertNotSame(phaseInLastLearnedClauseSelectionStrategy1, phaseInLastLearnedClauseSelectionStrategy0);
      //  // Unstable assertion: assertNotSame(varOrderHeap0, varOrderHeap1);
      //  // Unstable assertion: assertFalse(phaseInLastLearnedClauseSelectionStrategy1.equals((Object)phaseInLastLearnedClauseSelectionStrategy0));
      //  // Unstable assertion: assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy1.toString());
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      VarOrderHeap varOrderHeap2 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      //  // Unstable assertion: assertNotNull(varOrderHeap2);
      //  // Unstable assertion: assertFalse(varOrderHeap2.equals((Object)varOrderHeap1));
      //  // Unstable assertion: assertFalse(varOrderHeap2.equals((Object)varOrderHeap0));
      //  // Unstable assertion: assertFalse(phaseInLastLearnedClauseSelectionStrategy0.equals((Object)phaseInLastLearnedClauseSelectionStrategy1));
      //  // Unstable assertion: assertEquals(0, varOrderHeap2.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals((-940), pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      //  // Unstable assertion: assertNotNull(mUSLauncher0);
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      
      RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(varOrderHeap2, 32);
      //  // Unstable assertion: assertNotNull(randomWalkDecorator1);
      //  // Unstable assertion: assertFalse(varOrderHeap2.equals((Object)varOrderHeap1));
      //  // Unstable assertion: assertFalse(varOrderHeap2.equals((Object)varOrderHeap0));
      //  // Unstable assertion: assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      //  // Unstable assertion: assertFalse(phaseInLastLearnedClauseSelectionStrategy0.equals((Object)phaseInLastLearnedClauseSelectionStrategy1));
      //  // Unstable assertion: assertEquals(0, varOrderHeap2.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(32.0, randomWalkDecorator1.getProbability(), 0.01);
      //  // Unstable assertion: assertEquals((-940), pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator1, lubyRestarts0, mUSLauncher0);
      //  // Unstable assertion: assertNotNull(solver1);
      //  // Unstable assertion: assertFalse(varOrderHeap2.equals((Object)varOrderHeap1));
      //  // Unstable assertion: assertFalse(varOrderHeap2.equals((Object)varOrderHeap0));
      //  // Unstable assertion: assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      //  // Unstable assertion: assertFalse(solver1.equals((Object)solver0));
      //  // Unstable assertion: assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator1));
      //  // Unstable assertion: assertFalse(phaseInLastLearnedClauseSelectionStrategy0.equals((Object)phaseInLastLearnedClauseSelectionStrategy1));
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(0, varOrderHeap2.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(32, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(32.0, randomWalkDecorator1.getProbability(), 0.01);
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertEquals(5, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(6, solver1.newVar());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(5, solver1.nVars());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals((-940), pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      String string0 = percentLengthLearning0.toString();
      //  // Unstable assertion: assertEquals("Limit learning to clauses of size smaller or equal to 10% of the number of variables", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      
      // Undeclared exception!
      try { 
        solver1.getLiteralsPropagatedAt(4056);
       //  fail("Expecting exception: UnsupportedOperationException");
       // Unstable assertion
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      //  // Unstable assertion: assertNotNull(miniSATLearning0);
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructure0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      //  // Unstable assertion: assertNotNull(varOrderHeap0);
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      //  // Unstable assertion: assertNotNull(percentLengthLearning0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 0);
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      
      NoRestarts noRestarts0 = new NoRestarts();
      //  // Unstable assertion: assertNotNull(noRestarts0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      noRestarts0.onRestart();
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      //  // Unstable assertion: assertNotNull(fixedLengthLearning0);
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      //  // Unstable assertion: assertNotNull(clausalDataStructureWL0);
      
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      //  // Unstable assertion: assertNotNull(randomLiteralSelectionStrategy0);
      //  // Unstable assertion: assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      //  // Unstable assertion: assertNotNull(levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      //  // Unstable assertion: assertNotNull(fixedPeriodRestarts0);
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      
      ILogAble iLogAble0 = solver0.getLogger();
      //  // Unstable assertion: assertNotNull(iLogAble0);
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      
      iLogAble0.log("s\n");
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(5, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(6, solver0.newVar());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(5, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      
      iLogAble0.log("propagations\t\t: ");
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(7, solver0.nVars());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(7, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(8, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, noRestarts0, iLogAble0);
      //  // Unstable assertion: assertNotNull(solver1);
      //  // Unstable assertion: assertFalse(searchParams0.equals((Object)searchParams1));
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(9, solver0.nVars());
      //  // Unstable assertion: assertEquals(9, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(10, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(2, solver1.newVar());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(1, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver1.nVars());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      
      NoRestarts noRestarts1 = (NoRestarts)solver1.getRestartStrategy();
      //  // Unstable assertion: assertNotNull(noRestarts1);
      //  // Unstable assertion: assertSame(noRestarts0, noRestarts1);
      //  // Unstable assertion: assertSame(noRestarts1, noRestarts0);
      //  // Unstable assertion: assertFalse(searchParams0.equals((Object)searchParams1));
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(11, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(12, solver0.newVar());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(11, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertEquals(4, solver1.newVar());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(3, solver1.nVars());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(3, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(noRestarts1.shouldRestart());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts1.toString());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, varOrderHeap0, noRestarts1);
      //  // Unstable assertion: assertNotNull(solver2);
      //  // Unstable assertion: assertFalse(searchParams0.equals((Object)searchParams1));
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(13, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(13, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(14, solver0.newVar());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(5, solver1.nVars());
      //  // Unstable assertion: assertEquals(6, solver1.newVar());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(5, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(noRestarts1.shouldRestart());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts1.toString());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(2147483, solver2.getTimeout());
      //  // Unstable assertion: assertFalse(solver2.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver2.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver2.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver2.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver2.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver2.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver2.nConstraints());
      //  // Unstable assertion: assertFalse(solver2.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver2.nVars());
      //  // Unstable assertion: assertEquals(2, solver2.newVar());
      //  // Unstable assertion: assertEquals(1, solver2.realNumberOfVariables());
      
      solver2.setVerbose(true);
      //  // Unstable assertion: assertSame(noRestarts0, noRestarts1);
      //  // Unstable assertion: assertSame(noRestarts1, noRestarts0);
      //  // Unstable assertion: assertFalse(searchParams0.equals((Object)searchParams1));
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      //  // Unstable assertion: assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("random phase selection", randomLiteralSelectionStrategy0.toString());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(15, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(15, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(16, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(7, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(8, solver1.newVar());
      //  // Unstable assertion: assertEquals(7, solver1.nVars());
      //  // Unstable assertion: assertFalse(noRestarts1.shouldRestart());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts1.toString());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(solver2.isVerbose());
      //  // Unstable assertion: assertEquals(2147483, solver2.getTimeout());
      //  // Unstable assertion: assertFalse(solver2.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver2.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(4, solver2.newVar());
      //  // Unstable assertion: assertEquals(0, solver2.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver2.decisionLevel());
      //  // Unstable assertion: assertEquals(3, solver2.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver2.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver2.nConstraints());
      //  // Unstable assertion: assertFalse(solver2.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(3, solver2.nVars());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      //  // Unstable assertion: assertNotNull(percentLengthLearning0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder();
      //  // Unstable assertion: assertNotNull(pureOrder0);
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      //  // Unstable assertion: assertNotNull(miniSATRestarts0);
      //  // Unstable assertion: assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(miniSATRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, pureOrder0, miniSATRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(miniSATRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      
      ISimplifier iSimplifier0 = solver0.getSimplifier();
      //  // Unstable assertion: assertNotNull(iSimplifier0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(miniSATRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>((-141));
      //  // Unstable assertion: assertNotNull(percentLengthLearning1);
      //  // Unstable assertion: assertEquals((-141), percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = null;
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 0);
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      
      Solver<ClausalDataStructureWL> solver1 = null;
      try {
        solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, (ClausalDataStructureWL) null, pureOrder0, miniSATRestarts0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      //  // Unstable assertion: assertNotNull(miniSATLearning0);
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      //  // Unstable assertion: assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(1548);
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(1548, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder(1523);
      //  // Unstable assertion: assertNotNull(pureOrder0);
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(1523, pureOrder0.getPeriod());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      //  // Unstable assertion: assertNotNull(randomWalkDecorator0);
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(1523, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      //  // Unstable assertion: assertNotNull(activeLearning0);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams1 = new SearchParams();
      //  // Unstable assertion: assertNotNull(searchParams1);
      //  // Unstable assertion: assertFalse(searchParams1.equals((Object)searchParams0));
      //  // Unstable assertion: assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams1.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(1523);
      //  // Unstable assertion: assertNotNull(lubyRestarts0);
      //  // Unstable assertion: assertEquals(1523, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      //  // Unstable assertion: assertNotNull(fixedLengthLearning0);
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, randomWalkDecorator0, lubyRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(1523, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      //  // Unstable assertion: assertEquals(1523, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver0.undoOne();
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts(3418);
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.onRestart();
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, lubyRestarts0);
      ILogAble iLogAble0 = solver0.out;
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, iLogAble0);
      // Undeclared exception!
      try { 
        solver1.toString("");
       //  fail("Expecting exception: NoSuchFieldError");
       // Unstable assertion
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, (RestartStrategy) null);
      VecInt vecInt0 = new VecInt(3118, 3118);
      solver0.addAtMost(vecInt0, 3118);
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams((-293.3454), (-487));
      searchParams0.getInitConflictBound();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, (RestartStrategy) null);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(0);
      solver1.getRestartStrategy();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.log("%/KB7D@s!U>2sCb.");
      mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
      mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
      mUSLauncher0.log("%/KB7D@s!U>2sCb.");
      Solver<MixedDataStructureSingleWL> solver2 = null;
      try {
        solver2 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, (MixedDataStructureSingleWL) null, searchParams0, naturalStaticOrder0, (RestartStrategy) null, mUSLauncher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams((-15));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts0);
      SearchParams searchParams1 = solver0.getSearchParams();
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      FixedPeriodRestarts fixedPeriodRestarts1 = new FixedPeriodRestarts();
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts1);
      ILogAble iLogAble0 = solver1.getLogger();
      iLogAble0.log("s\n");
      iLogAble0.log("propagations\t\t: ");
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams1, randomWalkDecorator0, fixedPeriodRestarts0, iLogAble0);
      solver2.getLearnedConstraints();
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      SearchParams searchParams0 = new SearchParams(32, 32);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 32);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      LubyRestarts lubyRestarts1 = new LubyRestarts((-1));
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, lubyRestarts1);
      // Undeclared exception!
      try { 
        solver0.undoOne();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2890));
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      glucose21Restarts0.shouldRestart();
      glucose21Restarts0.onBackjumpToRootLevel();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      lubyRestarts0.newConflict();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, lubyRestarts0, iLogAble0);
      solver0.getTimeout();
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(32);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, randomWalkDecorator0, lubyRestarts0);
      // Undeclared exception!
      try { 
        solver1.assume((-370));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      int[] intArray0 = new int[6];
      intArray0[0] = (-3119);
      intArray0[1] = 4079;
      intArray0[2] = (-110);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(4079);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      SearchParams searchParams0 = new SearchParams(3120.7664011751, 2805);
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, (ILogAble) null);
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams1 = new SearchParams(0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0);
      NoRestarts noRestarts0 = new NoRestarts();
      ILogAble iLogAble0 = mock(ILogAble.class, new ViolatedAssumptionAnswer());
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, randomWalkDecorator0, noRestarts0, iLogAble0);
      ILogAble iLogAble1 = solver2.out;
      iLogAble1.log("4<c#ZFAmel>a");
      Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, iLogAble1);
      IVecInt iVecInt0 = solver3.createBlockingClauseForCurrentModel();
      solver1.addAtLeast(iVecInt0, (-3119));
      assertEquals(1, solver1.nConstraints());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-873));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-1196.3206309675), (-873), (-1196.3206309675), 0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.log("%/KB7D@s!U>2sCb.");
      mUSLauncher0.log("V0`mZ[MrXF'ss?-(+p");
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt(0, (-873));
      vecInt1.size();
      vecInt1.push(1236);
      vecInt0.iterator();
      vecInt1.push((-91));
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      solver0.dimacs2internal(vecInt0);
      // Undeclared exception!
      try { 
        solver0.isSatisfiable((IVecInt) vecInt0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(1548);
      PureOrder pureOrder0 = new PureOrder(1523);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams1 = new SearchParams();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams1, pureOrder0, fixedPeriodRestarts0);
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      iLogAble0.log("constraints type ");
      iLogAble0.log("constraints type ");
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, restartStrategy0, iLogAble0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMin>(1523);
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(activeLearning1, cardinalityDataStructureYanMin0, searchParams1, pureOrder0, restartStrategy0, (ILogAble) null);
      // Undeclared exception!
      try { 
        solver2.getIthConstr(1426);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1426
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LearningStrategy<MixedDataStructureSingleWL> learningStrategy0 = (LearningStrategy<MixedDataStructureSingleWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy1 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 588;
      intArray0[3] = 435;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      RestartStrategy restartStrategy0 = null;
      LearningStrategy<ClausalDataStructureWL> learningStrategy2 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy2, clausalDataStructureWL0, subsetVarOrder0, (RestartStrategy) null);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(learningStrategy1, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      String string0 = ":EGX&>}r[2aI)N6y2";
      // Undeclared exception!
      try { 
        solver1.enqueue(588);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 589
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(1548);
      PureOrder pureOrder0 = new PureOrder(1548);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams1 = new SearchParams();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      solver0.getRestartStrategy();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      iLogAble0.log("constraints type ");
      iLogAble0.log("learnt constraints type ");
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams1, pureOrder0, fixedPeriodRestarts0, iLogAble0);
      // Undeclared exception!
      try { 
        solver1.addAtMostOnTheFly((int[]) null, 2462);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      clausalDataStructureWL1.getVocabulary();
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 0);
      Float float0 = new Float(0.0);
      PureOrder pureOrder0 = new PureOrder(0);
      searchParams0.setVarDecay((-2064.5853749814305));
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, searchParams0, pureOrder0, (RestartStrategy) null);
      solver0.setLogPrefix("j,KdIL0");
      solver0.setTimeoutOnConflicts(0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, pureOrder0, (RestartStrategy) null);
      ActiveLearning<CardinalityDataStructure> activeLearning1 = new ActiveLearning<CardinalityDataStructure>();
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(4);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(5);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, randomWalkDecorator0, lubyRestarts0);
      SearchParams searchParams0 = solver0.getSearchParams();
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      solver1.getLogger();
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
  }
}
