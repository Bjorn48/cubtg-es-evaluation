* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.tools.Minimal4InclusionModel
* Starting Client-0
* Connecting to master process on port 19093
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.tools.Minimal4InclusionModel
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 128
* Using seed 1550521970545
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 30 / 128
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.5675675675675675
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3684210526315789
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.0
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.3684210526315789
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
[MASTER] 21:33:44.398 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.opt.MinOneDecorator due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.Minimal4CardinalityModel due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.OptToSatAdapter due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.opt.MaxSatDecorator due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 279
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.6756756756756757
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6842105263157895
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.42424242424242425
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6842105263157895
[MASTER] 21:33:50.387 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.opt.MinOneDecorator due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.ModelIteratorToSATAdapter due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.SubModelIterator due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.ClausalCardinalitiesDecorator due to org.evosuite.ga.ConstructionFailedException: Found no variables of type class org.sat4j.opt.MinOneDecorator
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 363
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8918918918918919
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7894736842105263
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.5454545454545454
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7894736842105263
[MASTER] 21:34:05.032 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.RestartStrategy
[MASTER] 21:34:05.208 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.ILits
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 462
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8918918918918919
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7894736842105263
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.5454545454545454
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7894736842105263
[MASTER] 21:34:10.861 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.sat4j.tools.FullClauseSelectorSolver<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureDanielWL>> canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 21:34:13.820 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.opt.MaxSatDecorator due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.SolutionCounter due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.SingleSolutionDetector due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.ModelIterator due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 21:34:14.899 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.IConstr
[MASTER] 21:34:14.924 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.GroupClauseSelectorSolver due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.RestartStrategy
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 556
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9459459459459459
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9090909090909091
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 1.0
[MASTER] 21:34:24.346 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.ManyCore due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.IOrder
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 649
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9459459459459459
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9090909090909091
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 1.0
[MASTER] 21:34:33.987 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.orders.RandomWalkDecorator due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.orders.VarOrderHeap due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.IPhaseSelectionStrategy
[MASTER] 21:34:34.122 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.ILogAble
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 740
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9459459459459459
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9090909090909091
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 1.0
[MASTER] 21:34:42.985 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.UnitPropagationListener
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 829
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9459459459459459
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9090909090909091
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 1.0
[MASTER] 21:34:44.334 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.NegationDecorator due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.IOrder
[MASTER] 21:34:50.239 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.Minimal4CardinalityModel due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.ModelIteratorToSATAdapter due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.SubModelIterator due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.Minimal4InclusionModel due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.GateTranslator due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 918
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9459459459459459
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9090909090909091
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9459459459459459
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9090909090909091
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 1.0
* Search finished after 127s and 8 generations, 17399 statements, best individual has fitness: 7.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9459459459459459
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9090909090909091
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 1.0
* Minimizing test suite
[MASTER] 21:36:16.492 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 95%
* Total number of goals: 37
* Number of covered goals: 35
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 12
* Number of covered goals: 12
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 91%
* Total number of goals: 33
* Number of covered goals: 30
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 75%
* Total number of goals: 8
* Number of covered goals: 6
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 100%
* Total number of goals: 19
* Number of covered goals: 19
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9459459459459459
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9090909090909091
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 1.0
* Generated 23 tests with total length 315
* Resulting test suite's coverage: 95% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:37:12.264 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.9236833333333333% of time used, but only 6/23 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 6%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9459459459459459
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9090909090909091
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 1.0
* Compiling and checking tests
[MASTER] 21:37:57.584 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<3594> but was:<1>
[MASTER] 21:37:57.595 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int[] intArray0 = new int[3];
intArray0[0] = 3594;
intArray0[1] = 1;
intArray0[2] = (-438);
UnitClause unitClause0 = new UnitClause(1);
assertNotNull(unitClause0);
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());

ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
doReturn((Object) intArray0, (Object) null).when(iSolver0).model();
doReturn(112, (-438), 3594, 3594, 0).when(iSolver0).nVars();
doReturn(unitClause0).when(iSolver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
doReturn((Object) intArray0, (Object) null).when(iSolver0).modelWithInternalVariables();
Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
assertEquals(3, intArray0.length);
assertNotNull(minimal4InclusionModel0);
assertArrayEquals(new int[] {3594, 1, (-438)}, intArray0);
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());

IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
IVecInt iVecInt1 = AbstractMinimalModel.positiveLiterals(minimal4InclusionModel0);
assertEquals(3, intArray0.length);
assertNotNull(iVecInt1);
assertArrayEquals(new int[] {3594, 1, (-438)}, intArray0);
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(3594, iVecInt1.last());
assertFalse(iVecInt1.isEmpty());
assertEquals(3594, iVecInt1.size());

UnitClause unitClause1 = (UnitClause)minimal4InclusionModel0.addAtMost(iVecInt1, 0);
assertEquals(3, intArray0.length);
assertNotNull(unitClause1);
assertArrayEquals(new int[] {3594, 1, (-438)}, intArray0);
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(3594, iVecInt1.last());
assertFalse(iVecInt1.isEmpty());
assertEquals(3594, iVecInt1.size());
assertFalse(unitClause1.learnt());
assertEquals(1, unitClause1.size());
assertFalse(unitClause1.simplify());
assertEquals(1, unitClause1.requiredNumberOfSatisfiedLiterals());
assertEquals(0.0, unitClause1.getActivity(), 0.01);
assertTrue(unitClause1.isSatisfied());
assertTrue(unitClause1.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause1.canBePropagatedMultipleTimes());
assertSame(unitClause0, unitClause1);
assertSame(unitClause1, unitClause0);

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(128);
assertNotNull(fixedLengthLearning0);
assertEquals(128, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

LubyRestarts lubyRestarts0 = new LubyRestarts(128);
assertNotNull(lubyRestarts0);
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, lubyRestarts0);
assertNotNull(solver0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

VecInt vecInt0 = (VecInt)iVecInt1.push(3594);
assertEquals(3, intArray0.length);
assertNotNull(vecInt0);
assertArrayEquals(new int[] {3594, 1, (-438)}, intArray0);
assertEquals(3595, vecInt0.size());
assertEquals(3594, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(3594, iVecInt1.last());
assertFalse(iVecInt1.isEmpty());
assertEquals(3595, iVecInt1.size());
assertSame(vecInt0, iVecInt1);
assertSame(unitClause0, unitClause1);
assertSame(iVecInt1, vecInt0);

int int0 = iVecInt1.size();
assertEquals(3, intArray0.length);
assertArrayEquals(new int[] {3594, 1, (-438)}, intArray0);
assertEquals(3595, int0);
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(3594, iVecInt1.last());
assertFalse(iVecInt1.isEmpty());
assertEquals(3595, iVecInt1.size());
assertSame(unitClause0, unitClause1);
assertSame(iVecInt1, vecInt0);

int int1 = vecInt0.last();
assertFalse(int1 == int0);
assertEquals(3, intArray0.length);
assertArrayEquals(new int[] {3594, 1, (-438)}, intArray0);
assertEquals(3594, int1);
assertEquals(3595, vecInt0.size());
assertEquals(3594, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(3594, iVecInt1.last());
assertFalse(iVecInt1.isEmpty());
assertEquals(3595, iVecInt1.size());
assertSame(vecInt0, iVecInt1);
assertSame(unitClause0, unitClause1);
assertSame(iVecInt1, vecInt0);

VecInt vecInt1 = (VecInt)iVecInt1.pop();
assertEquals(3, intArray0.length);
assertNotNull(vecInt1);
assertArrayEquals(new int[] {3594, 1, (-438)}, intArray0);
assertEquals(3594, vecInt1.size());
assertEquals(3594, vecInt1.last());
assertFalse(vecInt1.isEmpty());
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(3594, iVecInt1.last());
assertFalse(iVecInt1.isEmpty());
assertEquals(3594, iVecInt1.size());
assertSame(vecInt1, vecInt0);
assertSame(vecInt1, iVecInt1);
assertSame(unitClause0, unitClause1);
assertSame(iVecInt1, vecInt0);
assertSame(iVecInt1, vecInt1);

int int2 = iVecInt1.size();
assertFalse(int2 == int0);
assertTrue(int2 == int1);
assertEquals(3, intArray0.length);
assertArrayEquals(new int[] {3594, 1, (-438)}, intArray0);
assertEquals(3594, int2);
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(3594, iVecInt1.last());
assertFalse(iVecInt1.isEmpty());
assertEquals(3594, iVecInt1.size());
assertSame(unitClause0, unitClause1);
assertSame(iVecInt1, vecInt0);
assertSame(iVecInt1, vecInt1);

vecInt0.shrink(3595);
assertEquals(3, intArray0.length);
assertArrayEquals(new int[] {3594, 1, (-438)}, intArray0);
assertEquals((-1), vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertEquals((-1), iVecInt1.size());
assertFalse(iVecInt1.isEmpty());
assertSame(vecInt0, iVecInt1);
assertSame(vecInt0, vecInt1);
assertSame(unitClause0, unitClause1);
assertSame(iVecInt1, vecInt0);
assertSame(iVecInt1, vecInt1);

IVecInt iVecInt2 = VecInt.EMPTY;
assertFalse(iVecInt2.equals((Object)iVecInt0));
assertNotNull(iVecInt2);
assertEquals(0, iVecInt2.size());
assertTrue(iVecInt2.isEmpty());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 48);
assertNotNull(tabuListDecorator0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, (SearchParams) null, tabuListDecorator0, noRestarts0);
assertFalse(solver1.equals((Object)solver0));
assertNotNull(solver1);
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.realNumberOfVariables());
assertEquals(128, fixedLengthLearning0.getMaxLength());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

VecInt vecInt2 = (VecInt)solver1.getOutLearnt();
assertFalse(solver1.equals((Object)solver0));
assertFalse(vecInt2.equals((Object)iVecInt1));
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(vecInt2.equals((Object)vecInt1));
assertNotNull(vecInt2);
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.realNumberOfVariables());
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertEquals(128, fixedLengthLearning0.getMaxLength());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotSame(solver1, solver0);
assertNotSame(vecInt2, iVecInt1);
assertNotSame(vecInt2, vecInt0);
assertNotSame(vecInt2, vecInt1);

IVecInt[] iVecIntArray0 = new IVecInt[3];
iVecIntArray0[0] = iVecInt2;
iVecIntArray0[1] = (IVecInt) vecInt2;
iVecIntArray0[2] = (IVecInt) vecInt1;
Vec<IVecInt> vec0 = new Vec<IVecInt>(iVecIntArray0);
assertEquals(3, iVecIntArray0.length);
assertNotNull(vec0);
assertFalse(vec0.isEmpty());
assertEquals(3, vec0.size());

minimal4InclusionModel0.addAllClauses(vec0);
assertEquals(3, intArray0.length);
assertEquals(3, iVecIntArray0.length);
assertArrayEquals(new int[] {3594, 1, (-438)}, intArray0);
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(vec0.isEmpty());
assertEquals(3, vec0.size());
assertSame(unitClause0, unitClause1);

int[] intArray1 = minimal4InclusionModel0.model();
assertEquals(3, intArray0.length);
assertEquals(3, intArray1.length);
assertNotNull(intArray1);
assertArrayEquals(new int[] {3594, 1, (-438)}, intArray0);
assertArrayEquals(new int[] {3594, 1, (-438)}, intArray1);
assertFalse(unitClause0.simplify());
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.learnt());
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.isSatisfied());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertSame(intArray0, intArray1);
assertSame(intArray1, intArray0);
assertSame(unitClause0, unitClause1);

minimal4InclusionModel0.modelWithInternalVariables();

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'Minimal4InclusionModel_ESTest' to evosuite-tests
* Done!

* Computation finished
