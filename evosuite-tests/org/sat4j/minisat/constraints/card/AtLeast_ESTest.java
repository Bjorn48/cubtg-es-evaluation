/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 06:39:30 GMT 2019
 */

package org.sat4j.minisat.constraints.card;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.Undoable;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AtLeast_ESTest extends AtLeast_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      DotSearchTracing<MixedDataStructureSingleWL> dotSearchTracing0 = new DotSearchTracing<MixedDataStructureSingleWL>("y70Je!7y[EwRvlN");
      assertNotNull(dotSearchTracing0);
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 1640);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertEquals(1640, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, atLeast0.size());
      
      String string0 = atLeast0.toString((VarMapper) dotSearchTracing0);
      assertNotNull(string0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertEquals(1640, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, atLeast0.size());
      assertEquals(">= 1640", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      VecInt vecInt0 = new VecInt(4, 4);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(4, vecInt0.last());
      
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>(1);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertNotNull(minOneDecorator0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      
      IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, (-1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
      
      int int0 = atLeast0.getAssertionLevel(vecInt0, 2609);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(4, vecInt0.last());
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      VecInt vecInt0 = new VecInt(1630, 16384);
      assertNotNull(vecInt0);
      assertEquals(16384, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1630, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 1630);
      assertNotNull(atLeast0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(1630, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      
      atLeast0.maxUnsatisfied = 1630;
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(1630, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      
      boolean boolean0 = atLeast0.isSatisfied();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(1630, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 1621);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(1621, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      boolean boolean0 = atLeast0.isSatisfied();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(1621, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((IVec) null).when(iLits0).undos(anyInt());
      VecInt vecInt0 = new VecInt(563, 1625);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(563, vecInt0.size());
      assertEquals(1625, vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 1663);
      assertNotNull(atLeast0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1663, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertEquals(563, atLeast0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy((Comparator<Integer>) null);
      assertNotNull(watcherBasedPrimeImplicantStrategy0);
      
      // Undeclared exception!
      try { 
        atLeast0.propagatePI(watcherBasedPrimeImplicantStrategy0, 2065);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, (-1));
      assertNotNull(atLeast0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.learnt());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      atLeast0.calcReasonOnTheFly((-1751), vecInt0, vecInt0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.learnt());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>(1615);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(iLits0).isFalsified(anyInt());
      doReturn(vec0, (IVec) null).when(iLits0).undos(anyInt());
      VecInt vecInt0 = new VecInt(1630, 16384);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1630, vecInt0.size());
      assertEquals(16384, vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 1630);
      assertNotNull(atLeast0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1630, atLeast0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      
      // Undeclared exception!
      try { 
        atLeast0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 1257);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(1257, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      
      atLeast0.calcReason((-1431), iVecInt0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(1257, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 3852);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals(3852, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      atLeast0.undo(3852);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals(3852, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(iLits0).getLevel(anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      VecInt vecInt0 = new VecInt(1630, 16384);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1630, vecInt0.size());
      assertEquals(16384, vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 1630);
      assertNotNull(atLeast0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1630, atLeast0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      
      String string0 = atLeast0.toString();
      assertNotNull(string0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1630, atLeast0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(563, 16401);
      assertNotNull(vecInt0);
      assertEquals(563, vecInt0.size());
      assertEquals(16401, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 563);
      assertNotNull(atLeast0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(563, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(563, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      
      int int0 = atLeast0.size();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(563, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(563, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals(563, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 0);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(0, atLeast0.size());
      
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(0, atLeast0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 1621);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1621, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertEquals(0, atLeast0.size());
      
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1621, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertEquals(0, atLeast0.size());
      assertEquals(1621, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, varOrderHeap0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      int int0 = AtLeast.niceParameters(solver0, lits0, iVecInt0, 0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(1, vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 24);
      assertNotNull(atLeast0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(1, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertEquals(24, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      
      DotSearchTracing<Integer> dotSearchTracing0 = new DotSearchTracing<Integer>("Y}&g?Mp\"n[n)0R");
      assertNotNull(dotSearchTracing0);
      
      // Undeclared exception!
      try { 
        atLeast0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1176, 1299);
      assertNotNull(vecInt0);
      assertEquals(1176, vecInt0.size());
      assertEquals(1299, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-1));
      assertNotNull(atLeast0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertEquals(1176, atLeast0.size());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      // Undeclared exception!
      try { 
        atLeast0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      VecInt vecInt0 = new VecInt(1668, 16384);
      assertNotNull(vecInt0);
      assertEquals(1668, vecInt0.size());
      assertEquals(16384, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, (SearchParams) null, pureOrder0, arminRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      
      ILits iLits0 = solver0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 3875);
      assertNotNull(atLeast0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertFalse(atLeast0.simplify());
      assertEquals(1668, atLeast0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertEquals(3875, atLeast0.requiredNumberOfSatisfiedLiterals());
      
      // Undeclared exception!
      try { 
        atLeast0.remove(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16385
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Undoable[] undoableArray0 = new Undoable[0];
      Vec<Undoable> vec0 = new Vec<Undoable>(undoableArray0);
      assertEquals(0, undoableArray0.length);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      ReadOnlyVec<Undoable> readOnlyVec0 = new ReadOnlyVec<Undoable>(vec0);
      assertEquals(0, undoableArray0.length);
      assertNotNull(readOnlyVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      doReturn(readOnlyVec0).when(iLits0).undos(anyInt());
      VecInt vecInt0 = new VecInt(1630, 16384);
      assertNotNull(vecInt0);
      assertEquals(16384, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1630, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 1630);
      assertEquals(0, undoableArray0.length);
      assertNotNull(atLeast0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1630, atLeast0.size());
      
      // Undeclared exception!
      try { 
        atLeast0.register();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      VecInt vecInt0 = new VecInt(858, 858);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(858, vecInt0.last());
      assertEquals(858, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 858);
      assertNotNull(atLeast0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(858, atLeast0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(858, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      
      // Undeclared exception!
      try { 
        atLeast0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 859
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      assertNotNull(watcherBasedPrimeImplicantStrategy0);
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 1640);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(1640, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(0, atLeast0.size());
      
      // Undeclared exception!
      try { 
        atLeast0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1640);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1640
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, 2081);
      assertNotNull(atLeast0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(2081, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.size());
      
      // Undeclared exception!
      try { 
        atLeast0.propagate((UnitPropagationListener) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, 2081);
      assertNotNull(atLeast0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(2081, atLeast0.requiredNumberOfSatisfiedLiterals());
      
      // Undeclared exception!
      try { 
        atLeast0.propagate((UnitPropagationListener) null, 2081);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2081
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(472.1614225, 24);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(472.1614225, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(24, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(472.1614225, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(24, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      Solver solver1 = (Solver)solver0.getSolvingEngine();
      assertNotNull(solver1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(472.1614225, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(24, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      
      VecInt vecInt0 = new VecInt(1, 1);
      assertNotNull(vecInt0);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        AtLeast.niceParameters(solver1, (ILits) null, vecInt0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>(1.1907121771597582);
      assertNotNull(activeLearning0);
      assertEquals(1.1907121771597582, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      VecInt vecInt0 = new VecInt(1652, 16384);
      assertNotNull(vecInt0);
      assertEquals(16384, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1652, vecInt0.size());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, (SearchParams) null, pureOrder0, arminRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertEquals(1.1907121771597582, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      ILits iLits0 = solver0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(1.1907121771597582, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      // Undeclared exception!
      try { 
        AtLeast.niceParameters(solver0, iLits0, vecInt0, 261);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16384
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      VecInt vecInt0 = new VecInt(1628, 16384);
      assertNotNull(vecInt0);
      assertEquals(16384, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1628, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 1628);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(atLeast0.learnt());
      assertEquals(1628, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(1628, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      
      // Undeclared exception!
      try { 
        atLeast0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16385
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, 2081);
      assertNotNull(atLeast0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.learnt());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.locked());
      assertEquals(2081, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      
      // Undeclared exception!
      try { 
        atLeast0.getAssertionLevel((IVecInt) null, 2081);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 1621);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1621, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      // Undeclared exception!
      try { 
        atLeast0.get(1621);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1621
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt(333, 333);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(333, vecInt0.last());
      assertEquals(333, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 2081);
      assertNotNull(atLeast0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.locked());
      assertEquals(2081, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(333, atLeast0.size());
      
      // Undeclared exception!
      try { 
        atLeast0.calcReason(1894, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      VecInt vecInt0 = new VecInt(1630, 1630);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1630, vecInt0.size());
      assertEquals(1630, vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 0);
      assertNotNull(atLeast0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(atLeast0.learnt());
      assertEquals(1630, atLeast0.size());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      
      // Undeclared exception!
      try { 
        atLeast0.calcReason(2081, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1630
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder(18);
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(18, pureOrder0.getPeriod());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(18, pureOrder0.getPeriod());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      
      ILits iLits0 = solver0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(18, pureOrder0.getPeriod());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      // Undeclared exception!
      try { 
        AtLeast.atLeastNew(solver0, iLits0, (IVecInt) null, 18);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>((-2.9610236682916105));
      assertNotNull(activeLearning0);
      assertEquals((-2.9610236682916105), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      VecInt vecInt0 = new VecInt(1652, 16384);
      assertNotNull(vecInt0);
      assertEquals(1652, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(16384, vecInt0.last());
      
      SearchParams searchParams0 = new SearchParams(16384, 16384);
      assertNotNull(searchParams0);
      assertEquals(16384.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(16384, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals((-2.9610236682916105), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(16384.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(16384, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      // Undeclared exception!
      try { 
        AtLeast.atLeastNew(solver0, lits0, vecInt0, 1084);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16384
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>((-2.9610236682916105));
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-2.9610236682916105), activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      VecInt vecInt0 = new VecInt(1652, 16384);
      assertNotNull(vecInt0);
      assertEquals(1652, vecInt0.size());
      assertEquals(16384, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, (SearchParams) null, pureOrder0, arminRestarts0, iLogAble0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-2.9610236682916105), activeLearning0.getActivityPercent(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 16384);
      assertNotNull(atLeast0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      assertEquals(1652, atLeast0.size());
      assertTrue(atLeast0.locked());
      assertEquals(16384, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      // Undeclared exception!
      try { 
        atLeast0.assertConstraint(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      VecInt vecInt0 = new VecInt(935, 1095);
      assertNotNull(vecInt0);
      assertEquals(935, vecInt0.size());
      assertEquals(1095, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>(4);
      assertNotNull(fixedLengthLearning0);
      assertEquals(4, fixedLengthLearning0.getMaxLength());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(4, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 935);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals(935, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(935, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      
      // Undeclared exception!
      try { 
        atLeast0.assertConstraint(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1095
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast(lits0, (IVecInt) null, 135);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      VecInt vecInt0 = new VecInt(2609);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotNull(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast(lits0, iVecInt0, (-1727));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(iLits0).valueToString(anyInt());
      VecInt vecInt0 = new VecInt(1630, 16384);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1630, vecInt0.size());
      assertEquals(16384, vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 1630);
      assertNotNull(atLeast0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1630, atLeast0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("");
      assertNotNull(dotSearchTracing0);
      
      String string0 = atLeast0.toString((VarMapper) dotSearchTracing0);
      assertNotNull(string0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1630, atLeast0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(472.1614225, 24);
      assertNotNull(searchParams0);
      assertEquals(472.1614225, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(24, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(472.1614225, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(24, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      Solver solver1 = (Solver)solver0.getSolvingEngine();
      assertNotNull(solver1);
      assertEquals(472.1614225, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(24, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver1);
      assertNotNull(minOneDecorator0);
      assertEquals(472.1614225, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(24, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      
      VecInt vecInt0 = new VecInt(1, 1);
      assertNotNull(vecInt0);
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      VecInt vecInt1 = (VecInt)minOneDecorator0.createBlockingClauseForCurrentModel();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(472.1614225, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(24, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt1, 24);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(atLeast0);
      assertEquals(472.1614225, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(24, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(24, atLeast0.requiredNumberOfSatisfiedLiterals());
      
      int int0 = atLeast0.getAssertionLevel(vecInt0, (-23));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(472.1614225, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(24, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(24, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(563, 16401);
      assertNotNull(vecInt0);
      assertEquals(16401, vecInt0.last());
      assertEquals(563, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 563);
      assertNotNull(atLeast0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(563, atLeast0.size());
      assertTrue(atLeast0.locked());
      assertEquals(563, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      
      atLeast0.calcReason(563, vecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(16400, vecInt0.last());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(563, atLeast0.size());
      assertTrue(atLeast0.locked());
      assertEquals(563, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      
      int int0 = atLeast0.getAssertionLevel(vecInt0, 563);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(16400, vecInt0.last());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals(563, atLeast0.size());
      assertTrue(atLeast0.locked());
      assertEquals(563, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.isSatisfied());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      Constr constr0 = cardinalityDataStructure0.createCardinalityConstraint(iVecInt0, (-2798));
      assertNotNull(constr0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(constr0.simplify());
      assertEquals(0, constr0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertTrue(constr0.locked());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.learnt());
      assertEquals((-2798), constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr0.isSatisfied());
      
      int int0 = constr0.getAssertionLevel(iVecInt0, 2081);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(constr0.simplify());
      assertEquals(0, constr0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertTrue(constr0.locked());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.learnt());
      assertEquals((-2798), constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr0.isSatisfied());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(iLits0).isSatisfied(anyInt());
      VecInt vecInt0 = new VecInt(1630, 16384);
      assertNotNull(vecInt0);
      assertEquals(16384, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1630, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 1630);
      assertNotNull(atLeast0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertEquals(1630, atLeast0.size());
      assertTrue(atLeast0.isSatisfied());
      
      boolean boolean0 = atLeast0.isSatisfied();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertEquals(1630, atLeast0.size());
      assertTrue(atLeast0.isSatisfied());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(iLits0).isSatisfied(anyInt());
      VecInt vecInt0 = new VecInt(563, 16401);
      assertNotNull(vecInt0);
      assertEquals(563, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(16401, vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 563);
      assertNotNull(atLeast0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertEquals(563, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.simplify());
      assertEquals(563, atLeast0.size());
      
      boolean boolean0 = atLeast0.isSatisfied();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertEquals(563, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.simplify());
      assertEquals(563, atLeast0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vec<Undoable> vec0 = new Vec<Undoable>(563);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(vec0).when(iLits0).undos(anyInt());
      VecInt vecInt0 = new VecInt(1630, 16384);
      assertNotNull(vecInt0);
      assertEquals(16384, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1630, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 1630);
      assertNotNull(atLeast0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1630, atLeast0.size());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy((Comparator<Integer>) null);
      assertNotNull(watcherBasedPrimeImplicantStrategy0);
      
      boolean boolean0 = atLeast0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1630);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(atLeast0.locked());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1630, atLeast0.size());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      VecInt vecInt0 = new VecInt(1628, 16384);
      assertNotNull(vecInt0);
      assertEquals(1628, vecInt0.size());
      assertEquals(16384, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 1630);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.isSatisfied());
      
      atLeast0.calcReasonOnTheFly(16384, vecInt0, iVecInt0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(1628, vecInt0.size());
      assertEquals(16384, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(1630, 16384);
      assertNotNull(vecInt0);
      assertEquals(1630, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(16384, vecInt0.last());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 1630);
      assertNotNull(atLeast0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1630, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      atLeast0.calcReason(3, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(16385, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1630, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      atLeast0.calcReasonOnTheFly(16384, vecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(16385, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1630, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, (-1));
      assertNotNull(atLeast0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      atLeast0.calcReasonOnTheFly((-1), iVecInt0, iVecInt0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertEquals((-1), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      VecInt vecInt0 = new VecInt(518, (-2914));
      assertNotNull(vecInt0);
      assertEquals((-2914), vecInt0.last());
      assertEquals(518, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, (-2914));
      assertNotNull(atLeast0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.locked());
      assertEquals((-2914), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(518, atLeast0.size());
      assertFalse(atLeast0.simplify());
      
      // Undeclared exception!
      try { 
        atLeast0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2914
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      AtLeast atLeast0 = (AtLeast)cardinalityDataStructure0.createCardinalityConstraint(iVecInt0, (-2798));
      assertNotNull(atLeast0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals((-2798), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      
      String string0 = atLeast0.toString();
      assertNotNull(string0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals((-2798), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.simplify());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals("Card (0) : >= -2798", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder(563);
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(563, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(iLits0).isUnassigned(anyInt());
      VecInt vecInt0 = new VecInt(1630, 16384);
      assertNotNull(vecInt0);
      assertEquals(16384, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1630, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 1630);
      assertNotNull(atLeast0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1630, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, pureOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(563, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      
      atLeast0.assertConstraint(solver0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(563, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(1630, atLeast0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      
      VecInt vecInt0 = new VecInt(4, 4);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.last());
      assertEquals(4, vecInt0.size());
      
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>(1);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, pureOrder0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 2);
      assertNotNull(atLeast0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(2, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(4, atLeast0.size());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      
      atLeast0.assertConstraint(solver0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(1, fixedLengthLearning0.getMaxLength());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(4, atLeast0.size());
      assertFalse(atLeast0.simplify());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(1630, 16384);
      assertNotNull(vecInt0);
      assertEquals(16384, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1630, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 1630);
      assertNotNull(atLeast0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(1630, atLeast0.size());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      
      atLeast0.calcReason(3, vecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(16385, vecInt0.last());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(1630, atLeast0.size());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      
      atLeast0.register();
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(16385, vecInt0.last());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertEquals(1630, atLeast0.size());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals(1630, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isFalsified(anyInt());
      doReturn((IVec) null).when(iLits0).undos(anyInt());
      VecInt vecInt0 = new VecInt(563, 16401);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(16401, vecInt0.last());
      assertEquals(563, vecInt0.size());
      
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 563);
      assertNotNull(atLeast0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.learnt());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals(563, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.simplify());
      assertEquals(563, atLeast0.size());
      
      // Undeclared exception!
      try { 
        atLeast0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, true).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(1630, 16384);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 1630);
      atLeast0.maxUnsatisfied = 1630;
      atLeast0.calcReason(3, vecInt0);
      atLeast0.calcReasonOnTheFly(16384, vecInt0, vecInt0);
      assertEquals(16385, vecInt0.last());
      assertEquals(3260, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(iLits0).isFalsified(anyInt());
      VecInt vecInt0 = new VecInt(563, 1625);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 1663);
      atLeast0.calcReason(563, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      IVecInt iVecInt0 = VecInt.EMPTY;
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, (-1449));
      atLeast0.calcReason((-1), iVecInt0);
      assertFalse(atLeast0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>(0.0);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder(563);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(563, 16384);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 563);
      assertEquals(563, atLeast0.requiredNumberOfSatisfiedLiterals());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, pureOrder0, arminRestarts0);
      boolean boolean0 = atLeast0.propagate(solver0, 563);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      VecInt vecInt0 = new VecInt(1, 1);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, (-43));
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, pureOrder0, noRestarts0);
      // Undeclared exception!
      try { 
        atLeast0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      IVecInt iVecInt0 = VecInt.EMPTY;
      Constr constr0 = cardinalityDataStructure0.createCardinalityConstraint(iVecInt0, (-2798));
      constr0.remove((UnitPropagationListener) null);
      assertEquals((-2798), constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder(563);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(iLits0).isSatisfied(anyInt());
      doReturn(false, false, false, false, false).when(iLits0).isUnassigned(anyInt());
      VecInt vecInt0 = new VecInt(1663, 16384);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
      SearchParams searchParams0 = new SearchParams(563);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, arminRestarts0, iLogAble0);
      try { 
        AtLeast.niceParameters(solver0, iLits0, vecInt0, 261);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = VecInt.EMPTY;
      PureOrder pureOrder0 = new PureOrder();
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams((-2938.203), (-2938.203), (-2938.203), (-2042));
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, fixedPeriodRestarts0);
      Constr constr0 = AtLeast.atLeastNew(solver0, lits0, iVecInt0, 0);
      assertFalse(constr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder(563);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iLits0).isSatisfied(anyInt());
      doReturn(false, true, true, true, true).when(iLits0).isUnassigned(anyInt());
      VecInt vecInt0 = new VecInt(1663, 16384);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
      SearchParams searchParams0 = new SearchParams(563);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, arminRestarts0, iLogAble0);
      // Undeclared exception!
      AtLeast.niceParameters(solver0, iLits0, vecInt0, 261);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder(563);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, true, true).when(iLits0).isSatisfied(anyInt());
      doReturn(false, false, false, false, false).when(iLits0).isUnassigned(anyInt());
      VecInt vecInt0 = new VecInt(1658, 16384);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
      SearchParams searchParams0 = new SearchParams(563);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, arminRestarts0, iLogAble0);
      int int0 = AtLeast.niceParameters(solver0, iLits0, vecInt0, 261);
      assertEquals(0, vecInt0.size());
      assertEquals((-1395), int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = VecInt.EMPTY;
      try { 
        AtLeast.atLeastNew((UnitPropagationListener) null, lits0, iVecInt0, 933);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = VecInt.EMPTY;
      AtLeast atLeast0 = null;
      try {
        atLeast0 = new AtLeast(lits0, iVecInt0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cards with degree 1 are clauses!!!!
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Lits lits0 = new Lits();
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 0);
      atLeast0.setActivity(0);
      assertEquals(0, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = VecInt.EMPTY;
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, (-941));
      int int0 = atLeast0.requiredNumberOfSatisfiedLiterals();
      assertEquals((-941), int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = VecInt.EMPTY;
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 1619);
      // Undeclared exception!
      try { 
        atLeast0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(563, 16401);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 563);
      boolean boolean0 = atLeast0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals(563, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = VecInt.EMPTY;
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, (-941));
      double double0 = atLeast0.getActivity();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-941), atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-1151));
      Constr constr0 = atLeast0.toConstraint();
      assertEquals((-1151), constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(1630, 16384);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 1630);
      // Undeclared exception!
      try { 
        atLeast0.rescaleBy(1755.39517998709);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = VecInt.EMPTY;
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 3852);
      atLeast0.forwardActivity(3852);
      assertEquals(3852, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      IVecInt iVecInt0 = VecInt.EMPTY;
      AtLeast atLeast0 = new AtLeast(iLits0, iVecInt0, 2081);
      boolean boolean0 = atLeast0.locked();
      assertTrue(boolean0);
      assertEquals(2081, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1176, 1299);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-1));
      // Undeclared exception!
      try { 
        atLeast0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = VecInt.EMPTY;
      AtLeast atLeast0 = new AtLeast(lits0, iVecInt0, 1621);
      boolean boolean0 = atLeast0.simplify();
      assertFalse(boolean0);
      assertEquals(1621, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(176, (-952));
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 1140);
      atLeast0.get(0);
      assertEquals(1140, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(176, (-952));
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 1140);
      atLeast0.incActivity(176);
      assertEquals(1140, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      VecInt vecInt0 = new VecInt(563, 16384);
      AtLeast atLeast0 = new AtLeast(iLits0, vecInt0, 563);
      boolean boolean0 = atLeast0.learnt();
      assertFalse(boolean0);
      assertEquals(563, atLeast0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      VecInt vecInt0 = new VecInt(333, 333);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 2081);
      boolean boolean0 = atLeast0.canBeSatisfiedByCountingLiterals();
      assertEquals(2081, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      IVecInt iVecInt0 = VecInt.EMPTY;
      Constr constr0 = cardinalityDataStructure0.createCardinalityConstraint(iVecInt0, (-2798));
      ((AtLeast) constr0).size();
      assertEquals((-2798), constr0.requiredNumberOfSatisfiedLiterals());
  }
}
