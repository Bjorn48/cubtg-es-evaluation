/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 17:17:14 GMT 2019
 */

package org.dom4j.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.dom4j.tree.ConcurrentReaderHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentReaderHashMap_ESTest extends ConcurrentReaderHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      concurrentReaderHashMap0.entrySet = (Set) linkedHashSet0;
      concurrentReaderHashMap0.values();
      concurrentReaderHashMap0.values();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(24);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      Collection collection0 = concurrentReaderHashMap1.values();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      concurrentReaderHashMap1.putIfAbsent((Object) null, "");
      BiFunction<Object, String, Integer> biFunction0 = (BiFunction<Object, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(32).when(biFunction0).apply(any() , anyString());
      concurrentReaderHashMap1.compute((Object) null, biFunction0);
      UnaryOperator.identity();
      concurrentReaderHashMap0.toString();
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("{}", "^%QJTO]veh~-~L.");
      Map.Entry.comparingByKey();
      concurrentReaderHashMap1.findAndRemoveEntry(abstractMap_SimpleEntry0);
      concurrentReaderHashMap1.sput(collection0, "^%QJTO]veh~-~L.", 32);
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      concurrentReaderHashMap_KeyIterator0.hasMoreElements();
      concurrentReaderHashMap_KeyIterator0.hasNext();
      concurrentReaderHashMap0.clear();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      concurrentReaderHashMap0.computeIfAbsent("oL)w*Kwuekus-Bwk", unaryOperator0);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.computeIfAbsent(concurrentReaderHashMap1, unaryOperator0);
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(concurrentReaderHashMap2, (String) null);
      Map.Entry.comparingByKey();
      concurrentReaderHashMap0.findAndRemoveEntry(abstractMap_SimpleEntry0);
      concurrentReaderHashMap1.getTableForReading();
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap1.new KeyIterator();
      concurrentReaderHashMap2.clone();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.clear();
      Object object0 = new Object();
      concurrentReaderHashMap0.replace(object0, (Object) "");
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.entry;
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry(32, concurrentReaderHashMap0, concurrentReaderHashMap0, (ConcurrentReaderHashMap.Entry) null);
      concurrentReaderHashMap_KeyIterator0.lastReturned = concurrentReaderHashMap_Entry1;
      concurrentReaderHashMap_KeyIterator0.remove();
      concurrentReaderHashMap0.clear();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5385, 3190.3042F);
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      concurrentReaderHashMap0.DEFAULT_INITIAL_CAPACITY = 5385;
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(enumeration0);
      
      concurrentReaderHashMap0.rehash();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(16384, concurrentReaderHashMap0.capacity());
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator1 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(16384, concurrentReaderHashMap0.capacity());
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator1);
      
      concurrentReaderHashMap0.loadFactor = 3190.3042F;
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(16384, concurrentReaderHashMap0.capacity());
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertFalse(concurrentReaderHashMap_KeyIterator0.equals((Object)enumeration0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(16384, concurrentReaderHashMap0.capacity());
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      
      // Undeclared exception!
      concurrentReaderHashMap0.clone();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap1);
      
      boolean boolean0 = concurrentReaderHashMap1.contains(concurrentReaderHashMap0);
      assertFalse(boolean0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      concurrentReaderHashMap1.loadFactor = (-349.4F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals((-349.4F), concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      Object[] objectArray0 = linkedList0.toArray();
      assertEquals(0, linkedList0.size());
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains((-349.4F)));
      assertNotNull(linkedHashSet0);
      
      boolean boolean1 = linkedList0.remove((Object) concurrentReaderHashMap1);
      assertFalse(boolean1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(boolean1 == boolean0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals((-349.4F), concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0, linkedList0.size());
      
      concurrentReaderHashMap0.entrySet = (Set) linkedHashSet0;
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.entrySet.size());
      assertTrue(concurrentReaderHashMap0.entrySet.isEmpty());
      
      concurrentReaderHashMap0.rehash();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap1.values = (Collection) linkedList0;
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals((-349.4F), concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0, linkedList0.size());
      
      boolean boolean2 = concurrentReaderHashMap1.isEmpty();
      assertTrue(boolean2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals((-349.4F), concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      Object object0 = concurrentReaderHashMap1.sremove(linkedList0, 32);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals((-349.4F), concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0, linkedList0.size());
      assertNull(object0);
      
      Enumeration enumeration0 = concurrentReaderHashMap1.keys();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals((-349.4F), concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNotNull(enumeration0);
      
      concurrentReaderHashMap0.clear();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      String string0 = ">";
      Object object1 = concurrentReaderHashMap1.sput(concurrentReaderHashMap0.entrySet, ">", 32);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals((-349.4F), concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.entrySet.size());
      assertTrue(concurrentReaderHashMap0.entrySet.isEmpty());
      assertFalse(linkedHashSet0.contains(">"));
      assertNull(object1);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_ValueIterator0.nextElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = null;
      try {
        concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load factor: 0.0
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap_HashIterator0);
      
      boolean boolean0 = concurrentReaderHashMap0.containsValue(concurrentReaderHashMap_HashIterator0);
      assertFalse(boolean0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      
      Object object0 = concurrentReaderHashMap_HashIterator0.returnValueOfNext();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNull(object0);
      
      concurrentReaderHashMap0.count = 2685;
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(2685, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("", "");
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      boolean boolean1 = concurrentReaderHashMap0.equals(concurrentReaderHashMap0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(2685, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray0 = concurrentReaderHashMap0.table;
      assertNotNull(concurrentReaderHashMap_EntryArray0);
      assertEquals(32, concurrentReaderHashMap_EntryArray0.length);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(2685, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(4096, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap1);
      
      Object object1 = concurrentReaderHashMap0.sput(concurrentReaderHashMap1, comparator0, 2685);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(2686, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(4096, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.entry;
      assertNull(concurrentReaderHashMap_Entry0);
      
      concurrentReaderHashMap_KeyIterator0.entry = null;
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(32, 0.75F);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap1);
      
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      
      BiFunction<Object, String, Integer> biFunction0 = (BiFunction<Object, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.replaceAll(biFunction0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      boolean boolean0 = concurrentReaderHashMap_KeyIterator0.hasNext();
      assertFalse(boolean0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      boolean boolean1 = concurrentReaderHashMap0.eq(concurrentReaderHashMap_KeyIterator0, concurrentReaderHashMap_KeyIterator0);
      assertTrue(boolean1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      boolean boolean2 = concurrentReaderHashMap0.isEmpty();
      assertTrue(boolean2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Object object0 = concurrentReaderHashMap1.get(concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNull(object0);
      
      concurrentReaderHashMap1.rehash();
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      
      boolean boolean3 = concurrentReaderHashMap0.containsValue(concurrentReaderHashMap_KeyIterator0);
      assertFalse(boolean3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Object object1 = concurrentReaderHashMap1.get((Object) null);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNull(object1);
      
      boolean boolean4 = concurrentReaderHashMap0.isEmpty();
      assertTrue(boolean4);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap1.putIfAbsent((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      boolean boolean0 = concurrentReaderHashMap0.containsValue(concurrentReaderHashMap_ValueIterator0);
      assertFalse(boolean0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      BiFunction<String, Integer, Object> biFunction0 = (BiFunction<String, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = concurrentReaderHashMap0.merge(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator0, biFunction0);
      assertSame(concurrentReaderHashMap_ValueIterator0, object0);
      assertSame(object0, concurrentReaderHashMap_ValueIterator0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNotNull(object0);
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = concurrentReaderHashMap0.sput(integer0, integer0, 32);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNull(object1);
      
      BiConsumer<String, ConcurrentReaderHashMap> biConsumer0 = (BiConsumer<String, ConcurrentReaderHashMap>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.forEach(biConsumer0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap0.rehash();
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator1 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)object0));
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator1);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator1.lastReturned;
      assertNull(concurrentReaderHashMap_Entry0);
      
      concurrentReaderHashMap_ValueIterator1.lastReturned = null;
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry((-2858), (Object) null, (Object) null, (ConcurrentReaderHashMap.Entry) null);
      assertNotNull(concurrentReaderHashMap_Entry1);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap1);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(32, 32);
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(32.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap2);
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = (ConcurrentReaderHashMap)concurrentReaderHashMap2.clone();
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(32.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(32.0F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap3.capacity());
      assertTrue(concurrentReaderHashMap3.isEmpty());
      assertNotNull(concurrentReaderHashMap3);
      
      Object object2 = concurrentReaderHashMap1.remove((Object) null);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap1.size());
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1, 1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      boolean boolean0 = concurrentReaderHashMap_ValueIterator0.hasNext();
      assertFalse(boolean0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.entry;
      assertNull(concurrentReaderHashMap_Entry0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry(1, concurrentReaderHashMap0, concurrentReaderHashMap0, (ConcurrentReaderHashMap.Entry) null);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_Entry1);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(1.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertNotNull(concurrentReaderHashMap1);
      
      boolean boolean1 = concurrentReaderHashMap_Entry1.equals(concurrentReaderHashMap1);
      assertFalse(boolean1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(boolean1 == boolean0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(1.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap1.eq((Object) null, ".z6yyc~{Qq@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap1);
      
      Collection collection0 = concurrentReaderHashMap1.values();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNotNull(collection0);
      
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap_HashIterator0);
      
      Object object0 = concurrentReaderHashMap1.putIfAbsent((Object) null, "");
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNull(object0);
      
      BiFunction<Object, String, Integer> biFunction0 = (BiFunction<Object, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(32).when(biFunction0).apply(any() , anyString());
      Object object1 = concurrentReaderHashMap1.compute((Object) null, biFunction0);
      assertEquals(32, object1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNotNull(object1);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Object object2 = concurrentReaderHashMap0.computeIfAbsent("oL)w*Kwuekus-Bwk", unaryOperator0);
      assertEquals("oL)w*Kwuekus-Bwk", object2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(object2);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("oL)w*Kwuekus-Bwk", "^%QJTO]veh~-~L.");
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      boolean boolean0 = concurrentReaderHashMap1.findAndRemoveEntry(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertEquals(1, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap2);
      
      Object object3 = concurrentReaderHashMap0.remove((Object) "oL)w*Kwuekus-Bwk");
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNull(object3);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_ValueIterator0.nextElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      boolean boolean0 = concurrentReaderHashMap0.containsValue(concurrentReaderHashMap_ValueIterator0);
      assertFalse(boolean0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      BiFunction<String, Integer, Object> biFunction0 = (BiFunction<String, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator1 = (ConcurrentReaderHashMap.ValueIterator)concurrentReaderHashMap0.merge(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator0, biFunction0);
      assertSame(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator1);
      assertSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator1);
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = concurrentReaderHashMap0.sput(integer0, integer0, (-1039));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertNull(object0);
      
      BiConsumer<String, ConcurrentReaderHashMap> biConsumer0 = (BiConsumer<String, ConcurrentReaderHashMap>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.forEach(biConsumer0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      
      boolean boolean1 = concurrentReaderHashMap0.contains(concurrentReaderHashMap_ValueIterator1);
      assertTrue(boolean1);
      assertSame(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator1);
      assertSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator0);
      assertFalse(boolean1 == boolean0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator2 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap_ValueIterator2.equals((Object)concurrentReaderHashMap_ValueIterator1));
      assertFalse(concurrentReaderHashMap_ValueIterator2.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator2);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      assertNull(concurrentReaderHashMap_Entry0);
      
      concurrentReaderHashMap_ValueIterator2.lastReturned = null;
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry((-2864), (Object) null, (Object) null, (ConcurrentReaderHashMap.Entry) null);
      assertNotNull(concurrentReaderHashMap_Entry1);
      
      Object object1 = concurrentReaderHashMap_Entry1.setValue(concurrentReaderHashMap_ValueIterator2);
      assertNotSame(concurrentReaderHashMap_ValueIterator2, concurrentReaderHashMap_ValueIterator1);
      assertNotSame(concurrentReaderHashMap_ValueIterator2, concurrentReaderHashMap_ValueIterator0);
      assertFalse(concurrentReaderHashMap_ValueIterator2.equals((Object)concurrentReaderHashMap_ValueIterator1));
      assertFalse(concurrentReaderHashMap_ValueIterator2.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertNull(object1);
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap1);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertEquals(2, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap2);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator3 = (ConcurrentReaderHashMap.ValueIterator)concurrentReaderHashMap_ValueIterator1.nextElement();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertSame(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator3);
      assertNotSame(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator2);
      assertSame(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator1);
      assertSame(concurrentReaderHashMap_ValueIterator3, concurrentReaderHashMap_ValueIterator0);
      assertSame(concurrentReaderHashMap_ValueIterator3, concurrentReaderHashMap_ValueIterator1);
      assertNotSame(concurrentReaderHashMap_ValueIterator3, concurrentReaderHashMap_ValueIterator2);
      assertSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator0);
      assertSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator3);
      assertNotSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap_ValueIterator0.equals((Object)concurrentReaderHashMap_ValueIterator2));
      assertFalse(concurrentReaderHashMap_ValueIterator3.equals((Object)concurrentReaderHashMap_ValueIterator2));
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)concurrentReaderHashMap_ValueIterator2));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator3);
      
      BiFunction<Object, Object, Object> biFunction1 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      Object object2 = concurrentReaderHashMap0.computeIfPresent(concurrentReaderHashMap_ValueIterator3, biFunction1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertSame(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator3);
      assertNotSame(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator2);
      assertSame(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator1);
      assertSame(concurrentReaderHashMap_ValueIterator3, concurrentReaderHashMap_ValueIterator0);
      assertSame(concurrentReaderHashMap_ValueIterator3, concurrentReaderHashMap_ValueIterator1);
      assertNotSame(concurrentReaderHashMap_ValueIterator3, concurrentReaderHashMap_ValueIterator2);
      assertSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator0);
      assertSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator3);
      assertNotSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap_ValueIterator0.equals((Object)concurrentReaderHashMap_ValueIterator2));
      assertFalse(concurrentReaderHashMap_ValueIterator3.equals((Object)concurrentReaderHashMap_ValueIterator2));
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)concurrentReaderHashMap_ValueIterator2));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertNull(object2);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.put(concurrentReaderHashMap2, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      Enumeration enumeration0 = concurrentReaderHashMap0.elements();
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(24);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      Collection collection0 = concurrentReaderHashMap0.values();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(collection0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      Object object0 = concurrentReaderHashMap0.putIfAbsent((Object) null, "");
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNull(object0);
      
      BiFunction<Object, String, Integer> biFunction0 = (BiFunction<Object, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object1 = concurrentReaderHashMap_ValueIterator0.returnValueOfNext();
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNull(object1);
      
      Object object2 = concurrentReaderHashMap0.sput(collection0, (Object) null, 32);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNull(object2);
      
      Object object3 = concurrentReaderHashMap0.sput((Object) null, (Object) null, 0);
      assertEquals("", object3);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(object3);
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(32);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap1);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.entry;
      assertNull(concurrentReaderHashMap_Entry0);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.findAndRemoveEntry((Map.Entry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap1);
      
      Collection collection0 = concurrentReaderHashMap1.values();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNotNull(collection0);
      
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_HashIterator0);
      
      Object object0 = concurrentReaderHashMap1.putIfAbsent((Object) null, "");
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNull(object0);
      
      BiFunction<Object, String, Integer> biFunction0 = (BiFunction<Object, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(32).when(biFunction0).apply(any() , anyString());
      Object object1 = concurrentReaderHashMap1.compute((Object) null, biFunction0);
      assertEquals(32, object1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNotNull(object1);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Object object2 = concurrentReaderHashMap0.computeIfAbsent("oL)w*Kwuekus-Bwk", unaryOperator0);
      assertEquals("oL)w*Kwuekus-Bwk", object2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(object2);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("oL)w*Kwuekus-Bwk", "^%QJTO]veh~-~L.");
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      boolean boolean0 = concurrentReaderHashMap1.findAndRemoveEntry(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      Object object3 = concurrentReaderHashMap0.sput(object1, collection0, 1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNull(object3);
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap1.new KeyIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)object1));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(32);
      assertEquals(32, (int)integer1);
      assertTrue(integer1.equals((Object)object1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = new ConcurrentReaderHashMap.Entry(256, integer0, integer1, (ConcurrentReaderHashMap.Entry) null);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)object1));
      assertTrue(integer1.equals((Object)object1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(concurrentReaderHashMap_Entry0);
      
      concurrentReaderHashMap_KeyIterator0.lastReturned = concurrentReaderHashMap_Entry0;
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      boolean boolean1 = concurrentReaderHashMap_KeyIterator0.hasNext();
      assertTrue(boolean1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(boolean1 == boolean0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      concurrentReaderHashMap0.clear();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap1.rehash();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap1);
      
      Collection collection0 = concurrentReaderHashMap1.values();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNotNull(collection0);
      
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_HashIterator0);
      
      Object object0 = concurrentReaderHashMap1.putIfAbsent((Object) null, "");
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNull(object0);
      
      BiFunction<Object, String, Integer> biFunction0 = (BiFunction<Object, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(32).when(biFunction0).apply(any() , anyString());
      Object object1 = concurrentReaderHashMap1.compute((Object) null, biFunction0);
      assertEquals(32, object1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNotNull(object1);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Object object2 = concurrentReaderHashMap0.computeIfAbsent("oL)w*Kwuekus-Bwk", unaryOperator0);
      assertEquals("oL)w*Kwuekus-Bwk", object2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertNotNull(object2);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("oL)w*Kwuekus-Bwk", "^%QJTO]veh~-~L.");
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      boolean boolean0 = concurrentReaderHashMap1.findAndRemoveEntry(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      Integer integer0 = new Integer(343);
      assertEquals(343, (int)integer0);
      assertFalse(integer0.equals((Object)object1));
      assertNotNull(integer0);
      
      boolean boolean1 = concurrentReaderHashMap1.containsValue(concurrentReaderHashMap0);
      assertFalse(boolean1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(boolean1 == boolean0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1, 1);
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      boolean boolean0 = concurrentReaderHashMap_ValueIterator0.hasNext();
      assertFalse(boolean0);
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.entry;
      assertNull(concurrentReaderHashMap_Entry0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry(1, concurrentReaderHashMap0, concurrentReaderHashMap0, (ConcurrentReaderHashMap.Entry) null);
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_Entry1);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(1.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap1);
      
      boolean boolean1 = concurrentReaderHashMap_Entry1.equals(concurrentReaderHashMap1);
      assertFalse(boolean1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(boolean1 == boolean0);
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(1.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertNotNull(concurrentReaderHashMap2);
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap(concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertEquals(16, concurrentReaderHashMap3.capacity());
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap3.isEmpty());
      assertNotNull(concurrentReaderHashMap3);
      
      ConcurrentReaderHashMap concurrentReaderHashMap4 = (ConcurrentReaderHashMap)concurrentReaderHashMap1.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap2));
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(1.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap4.isEmpty());
      assertEquals(1.0F, concurrentReaderHashMap4.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap4.capacity());
      assertEquals(0, concurrentReaderHashMap4.size());
      assertNotNull(concurrentReaderHashMap4);
      
      ConcurrentReaderHashMap concurrentReaderHashMap5 = new ConcurrentReaderHashMap(8169);
      assertEquals(0, concurrentReaderHashMap5.size());
      assertEquals(0.75F, concurrentReaderHashMap5.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap5.isEmpty());
      assertEquals(8192, concurrentReaderHashMap5.capacity());
      assertNotNull(concurrentReaderHashMap5);
      
      boolean boolean2 = concurrentReaderHashMap1.eq(concurrentReaderHashMap4, concurrentReaderHashMap5);
      assertTrue(boolean2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap5);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap5);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap5);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap5, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap5, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap5, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap5, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap5, concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap5));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap4));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap5));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap4));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap5));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(1.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap4.isEmpty());
      assertEquals(1.0F, concurrentReaderHashMap4.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap4.capacity());
      assertEquals(0, concurrentReaderHashMap4.size());
      assertEquals(0, concurrentReaderHashMap5.size());
      assertEquals(0.75F, concurrentReaderHashMap5.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap5.isEmpty());
      assertEquals(8192, concurrentReaderHashMap5.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap6 = new ConcurrentReaderHashMap(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap5));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap4));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap5));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap4));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap6.equals((Object)concurrentReaderHashMap5));
      assertTrue(concurrentReaderHashMap6.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap6.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap6.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap6.equals((Object)concurrentReaderHashMap4));
      assertTrue(concurrentReaderHashMap6.equals((Object)concurrentReaderHashMap0));
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(1.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap6.isEmpty());
      assertEquals(0, concurrentReaderHashMap6.size());
      assertEquals(16, concurrentReaderHashMap6.capacity());
      assertEquals(0.75F, concurrentReaderHashMap6.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap6);
      
      Object object0 = concurrentReaderHashMap1.remove((Object) concurrentReaderHashMap6);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap5);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap6);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap5);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap6);
      assertNotSame(concurrentReaderHashMap6, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap6, concurrentReaderHashMap5);
      assertNotSame(concurrentReaderHashMap6, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap6, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap6, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap6, concurrentReaderHashMap3);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap5));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap4));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap6));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap5));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap4));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap6));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap6.equals((Object)concurrentReaderHashMap5));
      assertTrue(concurrentReaderHashMap6.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap6.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap6.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap6.equals((Object)concurrentReaderHashMap4));
      assertTrue(concurrentReaderHashMap6.equals((Object)concurrentReaderHashMap0));
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(1.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap6.isEmpty());
      assertEquals(0, concurrentReaderHashMap6.size());
      assertEquals(16, concurrentReaderHashMap6.capacity());
      assertEquals(0.75F, concurrentReaderHashMap6.loadFactor(), 0.01F);
      assertNull(object0);
      
      Set set0 = concurrentReaderHashMap1.entrySet();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap5);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap6);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap5);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap6);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap5));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap4));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap6));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap5));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap4));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap6));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(1.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap1);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = concurrentReaderHashMap1.sput(object1, "", 32);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(object1, object0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(object1.equals((Object)object0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertNull(object2);
      
      boolean boolean0 = concurrentReaderHashMap1.containsValue(object1);
      assertFalse(boolean0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(object1, object0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(object1.equals((Object)object0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(19);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap1);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(19, 32);
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(32.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertNotNull(concurrentReaderHashMap2);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap2.new ValueIterator();
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(32.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.entry;
      assertNull(concurrentReaderHashMap_Entry0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry(19, concurrentReaderHashMap2, concurrentReaderHashMap1, (ConcurrentReaderHashMap.Entry) null);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(32.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertNotNull(concurrentReaderHashMap_Entry1);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_Entry1.setValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$Entry", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1336, 1336);
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.DEFAULT_INITIAL_CAPACITY = (-4159);
      concurrentReaderHashMap0.count = 1253;
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertFalse(boolean0);
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Set set0 = concurrentReaderHashMap0.keySet();
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertFalse(set0.isEmpty());
      assertEquals(1253, set0.size());
      assertNotNull(set0);
      
      Set set1 = concurrentReaderHashMap0.keySet();
      assertSame(set1, set0);
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertFalse(set1.isEmpty());
      assertEquals(1253, set1.size());
      assertNotNull(set1);
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNotNull(enumeration0);
      
      concurrentReaderHashMap0.rehash();
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(enumeration0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      Object object0 = concurrentReaderHashMap0.sput(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator0, 32);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNull(object0);
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertFalse(concurrentReaderHashMap_KeyIterator0.equals((Object)enumeration0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_KeyIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(enumeration0);
      
      concurrentReaderHashMap0.rehash();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      Object object0 = concurrentReaderHashMap0.sput(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator0, 32);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertNull(object0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator1 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap_ValueIterator1);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap1);
      
      Object object1 = concurrentReaderHashMap0.sremove(concurrentReaderHashMap0, 32);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertNull(object1);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap1.sremove((Object) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      Object object0 = concurrentReaderHashMap_ValueIterator0.returnValueOfNext();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNull(object0);
      
      boolean boolean0 = concurrentReaderHashMap_ValueIterator0.hasNext();
      assertFalse(boolean0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      
      Object object1 = concurrentReaderHashMap0.sremove((Object) null, 4108);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNull(object1);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator1 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap_ValueIterator1);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_ValueIterator0.nextElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertNotNull(concurrentReaderHashMap1);
      
      Collection collection0 = concurrentReaderHashMap1.values();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertNotNull(collection0);
      
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_HashIterator0);
      
      Object object0 = concurrentReaderHashMap1.putIfAbsent((Object) null, "");
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertNull(object0);
      
      BiFunction<Object, String, Integer> biFunction0 = (BiFunction<Object, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      Object object1 = concurrentReaderHashMap1.compute((Object) null, biFunction0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertNull(object1);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Object object2 = concurrentReaderHashMap0.computeIfAbsent("oL)w*Kwuekus-Bwk", unaryOperator0);
      assertEquals("oL)w*Kwuekus-Bwk", object2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNotNull(object2);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("oL)w*Kwuekus-Bwk", "^%QJTO]veh~-~L.");
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      boolean boolean0 = concurrentReaderHashMap1.findAndRemoveEntry(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertNotNull(concurrentReaderHashMap2);
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray0 = concurrentReaderHashMap2.getTableForReading();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertNotNull(concurrentReaderHashMap_EntryArray0);
      assertEquals(16, concurrentReaderHashMap_EntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>> linkedList0 = new LinkedList<AbstractMap.SimpleImmutableEntry<Object, String>>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap1);
      
      Collection collection0 = concurrentReaderHashMap1.values();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(collection0);
      
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap_HashIterator0);
      
      Object object0 = concurrentReaderHashMap1.putIfAbsent((Object) null, "");
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertNull(object0);
      
      BiFunction<Object, String, Integer> biFunction0 = (BiFunction<Object, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(32).when(biFunction0).apply(any() , anyString());
      Object object1 = concurrentReaderHashMap1.compute((Object) null, biFunction0);
      assertEquals(32, object1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertNotNull(object1);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Object object2 = concurrentReaderHashMap0.computeIfAbsent("oL)w*Kwuekus-Bwk", unaryOperator0);
      assertEquals("oL)w*Kwuekus-Bwk", object2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertNotNull(object2);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("oL)w*Kwuekus-Bwk", "^%QJTO]veh~-~L.");
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Set set0 = concurrentReaderHashMap0.entrySet();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = concurrentReaderHashMap1.findAndRemoveEntry(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      
      Object object3 = concurrentReaderHashMap0.sput(object1, collection0, 1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertNull(object3);
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      
      boolean boolean1 = concurrentReaderHashMap0.equals(biFunction0);
      assertFalse(boolean1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(boolean1 == boolean0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(31);
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertNotNull(concurrentReaderHashMap2);
      
      Object object4 = concurrentReaderHashMap1.sremove(concurrentReaderHashMap2, 32);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertNull(object4);
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap3.size());
      assertEquals(8, concurrentReaderHashMap3.capacity());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap3.isEmpty());
      assertNotNull(concurrentReaderHashMap3);
      
      int int0 = concurrentReaderHashMap0.size();
      assertEquals(2, int0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      Collection collection0 = new LinkedList<ConcurrentReaderHashMap>();
      assertNotNull(collection0);
      
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap_HashIterator0);
      
      Integer integer0 = new Integer((-968));
      assertEquals((-968), (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = concurrentReaderHashMap0.putIfAbsent(integer0, concurrentReaderHashMap_HashIterator0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNull(object0);
      
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(anyInt() , any());
      Object object1 = concurrentReaderHashMap0.compute((Object) null, biFunction0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNull(object1);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      LinkedList linkedList0 = (LinkedList)concurrentReaderHashMap0.computeIfAbsent(collection0, unaryOperator0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap1);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(1, 2686.0F);
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(2686.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertNotNull(concurrentReaderHashMap2);
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = (ConcurrentReaderHashMap)concurrentReaderHashMap2.clone();
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(2686.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertEquals(2686.0F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap3.isEmpty());
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(4, concurrentReaderHashMap3.capacity());
      assertNotNull(concurrentReaderHashMap3);
      
      Object object2 = concurrentReaderHashMap0.remove((Object) concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(2686.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertEquals(2686.0F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap3.isEmpty());
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(4, concurrentReaderHashMap3.capacity());
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<String, ConcurrentReaderHashMap> hashMap0 = new HashMap<String, ConcurrentReaderHashMap>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.rehash();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      concurrentReaderHashMap0.rehash();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(44);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap1);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertNotNull(concurrentReaderHashMap2);
      
      Object object0 = concurrentReaderHashMap2.remove((Object) concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertNull(object0);
      
      Object object1 = concurrentReaderHashMap0.getOrDefault(concurrentReaderHashMap1, (Object) null);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNull(object1);
      
      boolean boolean0 = concurrentReaderHashMap0.eq(hashMap0, (Object) null);
      assertFalse(boolean0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap2.contains((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.forEach(biConsumer0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Set set0 = concurrentReaderHashMap0.entrySet();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5385, 3190.3042F);
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      concurrentReaderHashMap0.threshold = 5385;
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap0.rehash();
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(16384, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Object object0 = concurrentReaderHashMap0.computeIfAbsent(unaryOperator0, unaryOperator0);
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(16384, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNotNull(object0);
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>(object0, "oL)w*Kwuekus-Bwk");
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(16384, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      boolean boolean1 = concurrentReaderHashMap0.findAndRemoveEntry(abstractMap_SimpleEntry0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(16384, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Integer integer0 = new Integer(5385);
      assertEquals(5385, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(32);
      assertEquals(32, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      // Undeclared exception!
      concurrentReaderHashMap0.containsValue(integer1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 2341;
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(2341);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap0);
      
      int int1 = concurrentReaderHashMap0.capacity();
      assertEquals(4096, int1);
      assertFalse(int1 == int0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      assertNull(concurrentReaderHashMap_Entry0);
      
      AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = null;
      try {
        abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<Object, Integer>((Map.Entry<?, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractMap$SimpleImmutableEntry", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1336, 1336);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.DEFAULT_INITIAL_CAPACITY = (-4159);
      concurrentReaderHashMap0.count = 1253;
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertFalse(boolean0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      
      Set set0 = concurrentReaderHashMap0.keySet();
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertEquals(1253, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertNotNull(enumeration0);
      
      concurrentReaderHashMap0.rehash();
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      assertNull(concurrentReaderHashMap_Entry0);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.findAndRemoveEntry((Map.Entry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1336, 1336);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.DEFAULT_INITIAL_CAPACITY = (-4159);
      concurrentReaderHashMap0.count = 1253;
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertFalse(boolean0);
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      
      Set set0 = concurrentReaderHashMap0.keySet();
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertEquals(1253, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertNotNull(enumeration0);
      
      concurrentReaderHashMap0.rehash();
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(1253, concurrentReaderHashMap0.size());
      assertEquals(1336.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      assertNull(concurrentReaderHashMap_Entry0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(9, 9);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(9.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(9.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap1);
      
      Object object0 = concurrentReaderHashMap1.sremove(concurrentReaderHashMap0, 3600);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(9.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      Object object2 = concurrentReaderHashMap0.getOrDefault((Object) null, object1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertSame(object1, object2);
      assertSame(object2, object1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(9.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertNotNull(object2);
      
      Object object3 = concurrentReaderHashMap0.sput(concurrentReaderHashMap1, object2, (-2126));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertSame(object1, object2);
      assertSame(object2, object1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(9.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNull(object3);
      
      concurrentReaderHashMap1.putAll(concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(9.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(9.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(1, concurrentReaderHashMap2.size());
      assertNotNull(concurrentReaderHashMap2);
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap(9, 32);
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap3.isEmpty());
      assertEquals(16, concurrentReaderHashMap3.capacity());
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(32.0F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap3);
      
      Object object4 = concurrentReaderHashMap1.replace((Object) null, (Object) concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(9.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap3.isEmpty());
      assertEquals(16, concurrentReaderHashMap3.capacity());
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(32.0F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertNull(object4);
      
      ConcurrentReaderHashMap.DEFAULT_INITIAL_CAPACITY = 32;
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap2.new ValueIterator();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(9.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(1, concurrentReaderHashMap2.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      Consumer<String> consumer0 = null;
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_ValueIterator0.forEachRemaining((Consumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap1);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap1.clone();
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertNotNull(concurrentReaderHashMap2);
      
      BiFunction<Object, String, Object> biFunction0 = (BiFunction<Object, String, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = (String)concurrentReaderHashMap0.merge(concurrentReaderHashMap1, "=", biFunction0);
      assertEquals("=", string0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertNotNull(string0);
      
      int int0 = concurrentReaderHashMap0.size();
      assertEquals(1, int0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      Integer integer0 = new Integer(2001);
      assertEquals(2001, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Object object0 = concurrentReaderHashMap0.replace((Object) concurrentReaderHashMap2, (Object) integer0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertNull(object0);
      
      concurrentReaderHashMap1.clear();
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      
      Object object1 = concurrentReaderHashMap0.sput((Object) null, (Object) null, 1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNull(object1);
      
      boolean boolean0 = concurrentReaderHashMap1.contains("=");
      assertFalse(boolean0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.entry;
      assertNull(concurrentReaderHashMap_Entry0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry(0, concurrentReaderHashMap0, "", (ConcurrentReaderHashMap.Entry) null);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap_Entry1);
      
      boolean boolean1 = concurrentReaderHashMap1.findAndRemoveEntry(concurrentReaderHashMap_Entry1);
      assertFalse(boolean1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator1 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap_ValueIterator1);
      
      Object object2 = concurrentReaderHashMap_ValueIterator1.returnValueOfNext();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNull(object2);
      
      BiFunction<String, String, Integer> biFunction1 = (BiFunction<String, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.merge("=", (Object) null, biFunction1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Map<ConcurrentReaderHashMap, ConcurrentReaderHashMap> map0 = null;
      ConcurrentReaderHashMap concurrentReaderHashMap0 = null;
      try {
        concurrentReaderHashMap0 = new ConcurrentReaderHashMap((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(8165);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap1);
      
      concurrentReaderHashMap0.rehash();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(16384, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertNotNull(concurrentReaderHashMap2);
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap3.capacity());
      assertTrue(concurrentReaderHashMap3.isEmpty());
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = concurrentReaderHashMap2.remove(object0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap3);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertNull(object1);
      
      Object object2 = concurrentReaderHashMap1.remove((Object) "");
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertNull(object2);
      
      // Undeclared exception!
      concurrentReaderHashMap0.clear();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConcurrentReaderHashMap.BarrierLock concurrentReaderHashMap_BarrierLock0 = new ConcurrentReaderHashMap.BarrierLock();
      assertNotNull(concurrentReaderHashMap_BarrierLock0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(138, 138);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(138.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(256, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      BiFunction<Object, Integer, Object> biFunction0 = (BiFunction<Object, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = concurrentReaderHashMap0.computeIfPresent("[P\"[9LwB!Z4RJ.", biFunction0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(138.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(256, concurrentReaderHashMap0.capacity());
      assertNull(object0);
      
      float float0 = concurrentReaderHashMap0.loadFactor();
      assertEquals(138.0F, float0, 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(138.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(256, concurrentReaderHashMap0.capacity());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.contains((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>(1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int0 = (-1060);
      Integer integer0 = new Integer((-1060));
      assertEquals((-1060), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      String string0 = hashMap0.put(integer0, (String) null);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap0 = null;
      try {
        concurrentReaderHashMap0 = new ConcurrentReaderHashMap(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(8177);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.getOrDefault(unaryOperator0, concurrentReaderHashMap0);
      assertSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(8192, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap1);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.computeIfAbsent(concurrentReaderHashMap1, unaryOperator0);
      assertSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(8192, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(8192, concurrentReaderHashMap2.capacity());
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap2.size());
      assertNotNull(concurrentReaderHashMap2);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap3.isEmpty());
      assertEquals(16, concurrentReaderHashMap3.capacity());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap3.size());
      assertNotNull(concurrentReaderHashMap3);
      
      ConcurrentReaderHashMap concurrentReaderHashMap4 = (ConcurrentReaderHashMap)concurrentReaderHashMap3.putIfAbsent(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertSame(concurrentReaderHashMap0, concurrentReaderHashMap4);
      assertSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertSame(concurrentReaderHashMap1, concurrentReaderHashMap4);
      assertSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertSame(concurrentReaderHashMap2, concurrentReaderHashMap4);
      assertSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap3);
      assertSame(concurrentReaderHashMap4, concurrentReaderHashMap0);
      assertSame(concurrentReaderHashMap4, concurrentReaderHashMap2);
      assertSame(concurrentReaderHashMap4, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(8192, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(8192, concurrentReaderHashMap2.capacity());
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap2.size());
      assertFalse(concurrentReaderHashMap3.isEmpty());
      assertEquals(16, concurrentReaderHashMap3.capacity());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap3.size());
      assertFalse(concurrentReaderHashMap4.isEmpty());
      assertEquals(8192, concurrentReaderHashMap4.capacity());
      assertEquals(0.75F, concurrentReaderHashMap4.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap4.size());
      assertNotNull(concurrentReaderHashMap4);
      
      Object object0 = concurrentReaderHashMap3.remove((Object) "org.dom4j.tree.ConcurrentReaderHashMap$BarrierLock");
      assertSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertSame(concurrentReaderHashMap0, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap4));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap3.isEmpty());
      assertEquals(16, concurrentReaderHashMap3.capacity());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap3.size());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(499, 499);
      assertEquals(512, concurrentReaderHashMap0.capacity());
      assertEquals(499.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap0);
      
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.replaceAll(biFunction0);
      assertEquals(512, concurrentReaderHashMap0.capacity());
      assertEquals(499.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      int int0 = concurrentReaderHashMap0.capacity();
      assertEquals(512, int0);
      assertEquals(512, concurrentReaderHashMap0.capacity());
      assertEquals(499.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      Collection collection0 = concurrentReaderHashMap0.values();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(collection0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertNotNull(concurrentReaderHashMap1);
      
      Object object0 = concurrentReaderHashMap0.remove((Object) concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConcurrentReaderHashMap.BarrierLock concurrentReaderHashMap_BarrierLock0 = new ConcurrentReaderHashMap.BarrierLock();
      assertNotNull(concurrentReaderHashMap_BarrierLock0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap_HashIterator0);
      
      boolean boolean0 = concurrentReaderHashMap0.eq(concurrentReaderHashMap_BarrierLock0, concurrentReaderHashMap_HashIterator0);
      assertFalse(boolean0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      boolean boolean1 = concurrentReaderHashMap0.containsValue(concurrentReaderHashMap_HashIterator0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      Object object0 = concurrentReaderHashMap_HashIterator0.returnValueOfNext();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNull(object0);
      
      concurrentReaderHashMap0.count = 2685;
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(2685, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      AbstractMap.SimpleEntry<Object, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, String>("", "oL)w*Kwuekus-Bwk");
      assertNotNull(abstractMap_SimpleEntry0);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      boolean boolean2 = concurrentReaderHashMap0.findAndRemoveEntry(abstractMap_SimpleEntry0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(2685, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray0 = concurrentReaderHashMap0.getTableForReading();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(2685, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_EntryArray0);
      assertEquals(32, concurrentReaderHashMap_EntryArray0.length);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(2685, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(4096, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap1);
      
      Object object1 = concurrentReaderHashMap0.sput(concurrentReaderHashMap1, comparator0, 2685);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(2686, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(4096, concurrentReaderHashMap1.capacity());
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      boolean boolean0 = concurrentReaderHashMap0.containsValue(concurrentReaderHashMap_ValueIterator0);
      assertFalse(boolean0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      BiFunction<String, Integer, Object> biFunction0 = (BiFunction<String, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = concurrentReaderHashMap0.merge(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator0, biFunction0);
      assertSame(concurrentReaderHashMap_ValueIterator0, object0);
      assertSame(object0, concurrentReaderHashMap_ValueIterator0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(object0);
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = concurrentReaderHashMap0.sput(integer0, integer0, (-1039));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertNull(object1);
      
      BiConsumer<String, ConcurrentReaderHashMap> biConsumer0 = (BiConsumer<String, ConcurrentReaderHashMap>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.forEach(biConsumer0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      
      concurrentReaderHashMap0.rehash();
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator1 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)object0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator1);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator1.lastReturned;
      assertNull(concurrentReaderHashMap_Entry0);
      
      concurrentReaderHashMap_ValueIterator1.lastReturned = null;
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry((-2858), (Object) null, (Object) null, (ConcurrentReaderHashMap.Entry) null);
      assertNotNull(concurrentReaderHashMap_Entry1);
      
      Object object2 = concurrentReaderHashMap_Entry1.setValue(concurrentReaderHashMap_ValueIterator1);
      assertNotSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator0);
      assertNotSame(concurrentReaderHashMap_ValueIterator1, object0);
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)object0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertNull(object2);
      
      Collection collection0 = concurrentReaderHashMap0.values();
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertNotNull(collection0);
      
      Collection collection1 = concurrentReaderHashMap0.values();
      assertSame(collection1, collection0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertNotNull(collection1);
      
      int int0 = concurrentReaderHashMap0.size();
      assertEquals(2, int0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      
      Object object3 = concurrentReaderHashMap_Entry1.setValue(concurrentReaderHashMap0);
      assertNotSame(object3, object0);
      assertSame(object3, concurrentReaderHashMap_ValueIterator1);
      assertNotSame(object3, concurrentReaderHashMap_ValueIterator0);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertNotNull(object3);
      
      boolean boolean1 = concurrentReaderHashMap_Entry1.equals((Object) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(enumeration0);
      
      boolean boolean0 = concurrentReaderHashMap0.containsValue(concurrentReaderHashMap_ValueIterator0);
      assertFalse(boolean0);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap0.rehash();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Set set0 = concurrentReaderHashMap0.entrySet();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      assertNull(concurrentReaderHashMap_Entry0);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.findAndRemoveEntry((Map.Entry) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap0);
      
      LinkedList<ConcurrentReaderHashMap> linkedList0 = new LinkedList<ConcurrentReaderHashMap>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(concurrentReaderHashMap0));
      assertNotNull(linkedList0);
      
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_HashIterator0);
      
      Integer integer0 = new Integer((-968));
      assertEquals((-968), (int)integer0);
      assertNotNull(integer0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap1);
      
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(biFunction0).apply(anyInt() , any());
      Object object0 = concurrentReaderHashMap0.compute((Object) null, biFunction0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNull(object0);
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      LinkedList linkedList1 = (LinkedList)concurrentReaderHashMap0.computeIfAbsent(linkedList0, unaryOperator0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList0.contains(concurrentReaderHashMap0));
      assertNotNull(linkedList1);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertNotNull(concurrentReaderHashMap2);
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap(1, 2686.0F);
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(2686.0F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap3.capacity());
      assertTrue(concurrentReaderHashMap3.isEmpty());
      assertNotNull(concurrentReaderHashMap3);
      
      ConcurrentReaderHashMap concurrentReaderHashMap4 = (ConcurrentReaderHashMap)concurrentReaderHashMap3.clone();
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap2));
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(2686.0F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap3.capacity());
      assertTrue(concurrentReaderHashMap3.isEmpty());
      assertEquals(2686.0F, concurrentReaderHashMap4.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap4.size());
      assertEquals(4, concurrentReaderHashMap4.capacity());
      assertTrue(concurrentReaderHashMap4.isEmpty());
      assertNotNull(concurrentReaderHashMap4);
      
      Object object1 = concurrentReaderHashMap0.remove((Object) concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap4));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap4));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap2));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(2686.0F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap3.capacity());
      assertTrue(concurrentReaderHashMap3.isEmpty());
      assertEquals(2686.0F, concurrentReaderHashMap4.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap4.size());
      assertEquals(4, concurrentReaderHashMap4.capacity());
      assertTrue(concurrentReaderHashMap4.isEmpty());
      assertNull(object1);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap4));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      Object object2 = concurrentReaderHashMap_ValueIterator0.currentKey;
      assertNull(object2);
      
      Integer integer1 = new Integer((-870));
      assertEquals((-870), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object3 = concurrentReaderHashMap2.sput((Object) null, integer1, 9);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap4);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap4));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap4));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertEquals(2, concurrentReaderHashMap2.size());
      assertNull(object3);
      
      Set set0 = concurrentReaderHashMap0.entrySet();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap4));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      Object object0 = concurrentReaderHashMap_ValueIterator0.currentValue;
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.containsValue((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap1);
      
      Object object1 = concurrentReaderHashMap1.putIfAbsent(concurrentReaderHashMap0, object0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertNull(object1);
      
      Object object2 = concurrentReaderHashMap0.sput((Object) null, concurrentReaderHashMap1, 0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertNull(object2);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.forEach(biConsumer0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      concurrentReaderHashMap1.rehash();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(8, concurrentReaderHashMap1.capacity());
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      String string0 = (String)concurrentReaderHashMap1.computeIfAbsent("", unaryOperator0);
      assertEquals("", string0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(8, concurrentReaderHashMap1.capacity());
      assertNotNull(string0);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(8, concurrentReaderHashMap1.capacity());
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertEquals(2, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertNotNull(concurrentReaderHashMap2);
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertFalse(boolean0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      Collection collection0 = concurrentReaderHashMap0.values();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(collection0);
      
      concurrentReaderHashMap2.rehash();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(8, concurrentReaderHashMap1.capacity());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertEquals(2, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(8177);
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap1);
      
      concurrentReaderHashMap0.rehash();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertEquals(16384, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      concurrentReaderHashMap0.rehash();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      BiFunction<String, Integer, Object> biFunction0 = (BiFunction<String, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = concurrentReaderHashMap0.sput(integer0, integer0, 32);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertFalse(boolean0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      int int0 = 5406;
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(5406);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(8192, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap1);
      
      Object object0 = concurrentReaderHashMap0.get(concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(8192, concurrentReaderHashMap1.capacity());
      assertNull(object0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(8192, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_ValueIterator0.nextElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      BiFunction<String, Integer, Object> biFunction0 = (BiFunction<String, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator1 = (ConcurrentReaderHashMap.ValueIterator)concurrentReaderHashMap0.merge(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator0, biFunction0);
      assertSame(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator1);
      assertSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator1);
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = concurrentReaderHashMap0.sput(integer0, integer0, (-1039));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertNull(object0);
      
      BiConsumer<String, ConcurrentReaderHashMap> biConsumer0 = (BiConsumer<String, ConcurrentReaderHashMap>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.forEach(biConsumer0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      
      concurrentReaderHashMap0.rehash();
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Integer integer1 = new Integer(640);
      assertEquals(640, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object1 = concurrentReaderHashMap0.sput(integer1, unaryOperator0, (-1039));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(3, concurrentReaderHashMap0.size());
      assertNull(object1);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator2 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap_ValueIterator2.equals((Object)concurrentReaderHashMap_ValueIterator1));
      assertFalse(concurrentReaderHashMap_ValueIterator2.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(3, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator2);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator3 = (ConcurrentReaderHashMap.ValueIterator)concurrentReaderHashMap_ValueIterator1.nextElement();
      assertNotSame(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator2);
      assertSame(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator3);
      assertSame(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator1);
      assertNotSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator2);
      assertSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator0);
      assertSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator3);
      assertSame(concurrentReaderHashMap_ValueIterator3, concurrentReaderHashMap_ValueIterator1);
      assertSame(concurrentReaderHashMap_ValueIterator3, concurrentReaderHashMap_ValueIterator0);
      assertNotSame(concurrentReaderHashMap_ValueIterator3, concurrentReaderHashMap_ValueIterator2);
      assertFalse(concurrentReaderHashMap_ValueIterator0.equals((Object)concurrentReaderHashMap_ValueIterator2));
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)concurrentReaderHashMap_ValueIterator2));
      assertFalse(concurrentReaderHashMap_ValueIterator3.equals((Object)concurrentReaderHashMap_ValueIterator2));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(3, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator3);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(3, concurrentReaderHashMap0.size());
      assertEquals(3, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertNotNull(concurrentReaderHashMap1);
      
      Object object2 = concurrentReaderHashMap0.sremove(integer1, 640);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(3, concurrentReaderHashMap0.size());
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.clear();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      Object object0 = concurrentReaderHashMap0.lastWrite;
      assertNotNull(object0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap1);
      
      Object object1 = concurrentReaderHashMap1.putIfAbsent(concurrentReaderHashMap0, object0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertNull(object1);
      
      Object object2 = concurrentReaderHashMap1.sput((Object) null, "", 536870912);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertNull(object2);
      
      BiFunction<Integer, Integer, Object> biFunction0 = (BiFunction<Integer, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(concurrentReaderHashMap0).when(biFunction0).apply(anyInt() , anyInt());
      Object object3 = concurrentReaderHashMap0.compute((Object) null, biFunction0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertNull(object3);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      Object object4 = concurrentReaderHashMap0.sput((Object) null, (Object) null, 536870912);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertNull(object4);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator1 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap_ValueIterator1);
      
      Object object5 = concurrentReaderHashMap_ValueIterator0.nextElement();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator1);
      assertSame(object5, object0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap_ValueIterator0.equals((Object)concurrentReaderHashMap_ValueIterator1));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertNotNull(object5);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertEquals(1, concurrentReaderHashMap2.size());
      assertNotNull(concurrentReaderHashMap2);
      
      Object object6 = concurrentReaderHashMap0.sremove(concurrentReaderHashMap_ValueIterator1, 0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap_ValueIterator1, concurrentReaderHashMap_ValueIterator0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertNull(object6);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(933);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1024, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap1);
      
      Object object0 = concurrentReaderHashMap1.replace((Object) concurrentReaderHashMap0, (Object) integer0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1024, concurrentReaderHashMap1.capacity());
      assertNull(object0);
      
      Object object1 = concurrentReaderHashMap1.sput((Object) null, (Object) null, 1242);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1024, concurrentReaderHashMap1.capacity());
      assertNull(object1);
      
      Object object2 = concurrentReaderHashMap0.sput((Object) null, concurrentReaderHashMap1, 32);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1024, concurrentReaderHashMap1.capacity());
      assertNull(object2);
      
      concurrentReaderHashMap1.rehash();
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(2048, concurrentReaderHashMap1.capacity());
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Object object3 = concurrentReaderHashMap1.computeIfAbsent((Object) null, unaryOperator0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(2048, concurrentReaderHashMap1.capacity());
      assertNull(object3);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(2048, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertNotNull(concurrentReaderHashMap2);
      
      Integer integer1 = new Integer(933);
      assertEquals(933, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Object object4 = concurrentReaderHashMap0.putIfAbsent((Object) null, integer1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNull(object4);
      
      Object object5 = concurrentReaderHashMap2.remove((Object) integer0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(2048, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertNull(object5);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(3045, 3045);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(3045.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      Integer integer0 = new Integer((-2226));
      assertEquals((-2226), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = concurrentReaderHashMap0.eq(integer0, integer0);
      assertTrue(boolean0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(3045.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4096, concurrentReaderHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_HashIterator0);
      
      boolean boolean0 = concurrentReaderHashMap_HashIterator0.hasNext();
      assertFalse(boolean0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      
      Object object0 = concurrentReaderHashMap_KeyIterator0.returnValueOfNext();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNull(object0);
      
      Object object1 = concurrentReaderHashMap_KeyIterator0.returnValueOfNext();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap1);
      
      concurrentReaderHashMap0.clear();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(enumeration0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      Object object0 = concurrentReaderHashMap0.sput(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator0, 32);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNull(object0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertNotNull(concurrentReaderHashMap1);
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap_KeyIterator0.equals((Object)enumeration0));
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_KeyIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap0);
      
      BiFunction<String, Integer, Object> biFunction0 = (BiFunction<String, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = concurrentReaderHashMap0.sput(integer0, integer0, 32);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNull(object0);
      
      concurrentReaderHashMap0.rehash();
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Object object1 = concurrentReaderHashMap0.replace((Object) "", (Object) "");
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNull(object1);
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray0 = concurrentReaderHashMap0.table;
      assertNotNull(concurrentReaderHashMap_EntryArray0);
      assertEquals(64, concurrentReaderHashMap_EntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap1);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertNotNull(concurrentReaderHashMap2);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.entry;
      assertNull(concurrentReaderHashMap_Entry0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry(32, concurrentReaderHashMap1, "P,H", (ConcurrentReaderHashMap.Entry) null);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap_Entry1);
      
      String string0 = concurrentReaderHashMap_Entry1.toString();
      assertEquals("{}=P,H", string0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.rehash();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      concurrentReaderHashMap0.putAll(hashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.putIfAbsent((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      float float0 = concurrentReaderHashMap0.loadFactor();
      assertEquals(0.75F, float0, 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(32);
      assertEquals(32, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(24);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap1);
      
      Collection collection0 = concurrentReaderHashMap1.values();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(collection0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap1.new ValueIterator();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      Object object0 = concurrentReaderHashMap1.putIfAbsent((Object) null, "");
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertNull(object0);
      
      BiFunction<Object, String, Integer> biFunction0 = (BiFunction<Object, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(32).when(biFunction0).apply(any() , anyString());
      Object object1 = concurrentReaderHashMap1.compute((Object) null, biFunction0);
      assertEquals(32, object1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertNotNull(object1);
      
      Object object2 = concurrentReaderHashMap_ValueIterator0.returnValueOfNext();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertNull(object2);
      
      Object object3 = concurrentReaderHashMap1.sput(collection0, (Object) null, 1073741824);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertNull(object3);
      
      Object object4 = concurrentReaderHashMap1.sput((Object) null, (Object) null, 0);
      assertEquals(32, object4);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertNotNull(object4);
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(1, 0.75F);
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertEquals(4, concurrentReaderHashMap2.capacity());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertNotNull(concurrentReaderHashMap2);
      
      Object object5 = concurrentReaderHashMap_ValueIterator0.returnValueOfNext();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertNull(object5);
      
      boolean boolean0 = concurrentReaderHashMap0.equals((Object) null);
      assertFalse(boolean0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap3.capacity());
      assertTrue(concurrentReaderHashMap3.isEmpty());
      assertEquals(0, concurrentReaderHashMap3.size());
      assertNotNull(concurrentReaderHashMap3);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      Set set0 = concurrentReaderHashMap0.entrySet();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      concurrentReaderHashMap0.clear();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.DEFAULT_INITIAL_CAPACITY = 0;
      Object object0 = concurrentReaderHashMap0.remove((Object) "9e^K_~avio_h");
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertNotNull(concurrentReaderHashMap0);
      
      BiFunction<String, Integer, Object> biFunction0 = (BiFunction<String, Integer, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = concurrentReaderHashMap0.sput(integer0, integer0, 32);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertNull(object0);
      
      concurrentReaderHashMap0.rehash();
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Object object1 = concurrentReaderHashMap0.computeIfAbsent(unaryOperator0, unaryOperator0);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertNotNull(object1);
      
      Comparator<Map.Entry<String, AbstractMap.SimpleImmutableEntry<Object, AbstractMap.SimpleImmutableEntry<String, AbstractMap.SimpleImmutableEntry>>>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap1);
      
      concurrentReaderHashMap1.count = 8191;
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(8191, concurrentReaderHashMap1.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      Object object2 = concurrentReaderHashMap1.putIfAbsent((Object) null, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(8192, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      int int0 = 5385;
      Object object0 = null;
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5385, 3190.3042F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      concurrentReaderHashMap0.entrySet = (Set) linkedHashSet0;
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.entrySet.size());
      assertTrue(concurrentReaderHashMap0.entrySet.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      concurrentReaderHashMap0.threshold = 0;
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(3190.3042F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8192, concurrentReaderHashMap0.capacity());
      
      Set<String> set0 = null;
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_ValueIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.entry;
      assertNull(concurrentReaderHashMap_Entry0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry(32, (Object) null, concurrentReaderHashMap_ValueIterator0, (ConcurrentReaderHashMap.Entry) null);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap_Entry1);
      
      boolean boolean0 = concurrentReaderHashMap_Entry1.equals(concurrentReaderHashMap0);
      assertFalse(boolean0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(304, 304);
      assertEquals(512, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.rehash();
      assertEquals(1024, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      String string0 = "k.^P\\Oc_";
      AbstractMap.SimpleEntry<String, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, String>("k.^POc_", "Y");
      assertNotNull(abstractMap_SimpleEntry0);
      
      concurrentReaderHashMap0.rehash();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      Comparator<Map.Entry<String, Object>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      String string1 = abstractMap_SimpleEntry0.setValue("-X");
      assertEquals("Y", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Comparator<Map.Entry<String, String>> comparator1 = Map.Entry.comparingByValue();
      assertNotNull(comparator1);
      
      boolean boolean0 = concurrentReaderHashMap0.findAndRemoveEntry(abstractMap_SimpleEntry0);
      assertFalse(boolean0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      int int0 = concurrentReaderHashMap0.size();
      assertEquals(0, int0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      boolean boolean1 = concurrentReaderHashMap0.isEmpty();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap_HashIterator0);
      
      Object object0 = concurrentReaderHashMap0.sput(abstractMap_SimpleEntry0, concurrentReaderHashMap_HashIterator0, 12);
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertNull(object0);
      
      Object object1 = concurrentReaderHashMap0.sremove((Object) null, 0);
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertNull(object1);
      
      Object object2 = concurrentReaderHashMap0.putIfAbsent(concurrentReaderHashMap_HashIterator0, "-X");
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNull(object2);
      
      Object object3 = concurrentReaderHashMap0.replace((Object) null, (Object) null);
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNull(object3);
      
      concurrentReaderHashMap_HashIterator0.currentValue = null;
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      Object object4 = concurrentReaderHashMap_HashIterator0.returnValueOfNext();
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNull(object4);
      
      Object object5 = concurrentReaderHashMap0.get((Object) null);
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNull(object5);
      
      float float0 = concurrentReaderHashMap0.loadFactor();
      assertEquals(304.0F, float0, 0.01F);
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      int int1 = concurrentReaderHashMap0.capacity();
      assertEquals(2048, int1);
      assertFalse(int1 == int0);
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(304.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.putAll((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(1);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(32);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      concurrentReaderHashMap1.keySet = (Set) linkedHashSet0;
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(concurrentReaderHashMap1.keySet.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.keySet.size());
      
      concurrentReaderHashMap0.lastWrite = (Object) concurrentReaderHashMap1;
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      
      concurrentReaderHashMap0.clear();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertNotNull(enumeration0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(32, 32);
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(32.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertNotNull(concurrentReaderHashMap2);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap2.new ValueIterator();
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(32.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      boolean boolean0 = concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      assertFalse(boolean0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(32.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      
      Enumeration enumeration1 = concurrentReaderHashMap2.keys();
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNotSame(enumeration1, enumeration0);
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(enumeration1.equals((Object)enumeration0));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(32.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertNotNull(enumeration1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap1);
      
      Collection collection0 = concurrentReaderHashMap1.values();
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertNotNull(collection0);
      
      Object object0 = concurrentReaderHashMap1.putIfAbsent((Object) null, "");
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertNull(object0);
      
      Object object1 = concurrentReaderHashMap1.sput("", (Object) null, 32);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertNull(object1);
      
      Integer integer0 = new Integer(1707);
      assertEquals(1707, (int)integer0);
      assertNotNull(integer0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(2876, 2876);
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(2876.0F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(4096, concurrentReaderHashMap2.capacity());
      assertNotNull(concurrentReaderHashMap2);
      
      concurrentReaderHashMap0.rehash();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(64, concurrentReaderHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(32);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap0);
      
      Set set0 = concurrentReaderHashMap0.keySet();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = concurrentReaderHashMap0.contains(set0);
      assertFalse(boolean0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Object object0 = concurrentReaderHashMap0.remove((Object) "..n^<*6x*dQN Pq/o");
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNull(object0);
      
      Enumeration enumeration0 = concurrentReaderHashMap0.elements();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertNotNull(enumeration0);
      
      boolean boolean1 = concurrentReaderHashMap0.containsValue("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(24);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap0);
      
      Collection collection0 = concurrentReaderHashMap0.values();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(collection0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      Object object0 = concurrentReaderHashMap0.putIfAbsent((Object) null, "");
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNull(object0);
      
      BiFunction<Object, String, Integer> biFunction0 = (BiFunction<Object, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(32).when(biFunction0).apply(any() , anyString());
      Object object1 = concurrentReaderHashMap0.compute((Object) null, biFunction0);
      assertEquals(32, object1);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNotNull(object1);
      
      Object object2 = concurrentReaderHashMap_ValueIterator0.returnValueOfNext();
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNull(object2);
      
      Object object3 = concurrentReaderHashMap0.sput(collection0, (Object) null, 32);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNull(object3);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap1);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap2.size());
      assertNotNull(concurrentReaderHashMap2);
      
      Integer integer0 = (Integer)concurrentReaderHashMap0.remove((Object) null);
      assertEquals(32, (int)integer0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNotNull(integer0);
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray0 = concurrentReaderHashMap0.getTableForReading();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_EntryArray0);
      assertEquals(32, concurrentReaderHashMap_EntryArray0.length);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      Collection collection0 = concurrentReaderHashMap0.values();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(collection0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertNotNull(concurrentReaderHashMap1);
      
      Object object0 = concurrentReaderHashMap0.remove((Object) collection0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNull(object0);
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Object object1 = concurrentReaderHashMap1.putIfAbsent((Object) null, integer0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap1.size());
      assertNull(object1);
      
      Object object2 = concurrentReaderHashMap1.sput((Object) null, (Object) null, 32);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap1.size());
      assertNull(object2);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap();
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertNotNull(concurrentReaderHashMap2);
      
      boolean boolean0 = concurrentReaderHashMap1.containsKey(concurrentReaderHashMap2);
      assertFalse(boolean0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0, concurrentReaderHashMap2.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap(concurrentReaderHashMap1);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap3.capacity());
      assertFalse(concurrentReaderHashMap3.isEmpty());
      assertEquals(1, concurrentReaderHashMap3.size());
      assertNotNull(concurrentReaderHashMap3);
      
      boolean boolean1 = concurrentReaderHashMap0.containsKey(concurrentReaderHashMap3);
      assertFalse(boolean1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap3.capacity());
      assertFalse(concurrentReaderHashMap3.isEmpty());
      assertEquals(1, concurrentReaderHashMap3.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap4 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap4);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap4, concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap3));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap4.equals((Object)concurrentReaderHashMap2));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap4.capacity());
      assertEquals(0, concurrentReaderHashMap4.size());
      assertEquals(0.75F, concurrentReaderHashMap4.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap4.isEmpty());
      assertNotNull(concurrentReaderHashMap4);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(enumeration0);
      
      concurrentReaderHashMap0.rehash();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      Object object0 = concurrentReaderHashMap0.sput(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap_ValueIterator0, 32);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertNull(object0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator1 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap_ValueIterator1.equals((Object)concurrentReaderHashMap_ValueIterator0));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertNotNull(concurrentReaderHashMap_ValueIterator1);
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray0 = new ConcurrentReaderHashMap.Entry[0];
      concurrentReaderHashMap0.table = concurrentReaderHashMap_EntryArray0;
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.capacity());
      assertNotNull(concurrentReaderHashMap1);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.sremove(concurrentReaderHashMap0, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.rehash();
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add("9&eVB");
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("9&eVB"));
      
      boolean boolean1 = linkedHashSet0.add("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(""));
      
      boolean boolean2 = linkedHashSet0.add("]/+FvUu}hAHY3}");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(""));
      
      concurrentReaderHashMap0.entrySet = (Set) linkedHashSet0;
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, concurrentReaderHashMap0.entrySet.size());
      assertFalse(concurrentReaderHashMap0.entrySet.isEmpty());
      
      concurrentReaderHashMap0.clear();
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean3 = concurrentReaderHashMap0.containsValue(integer0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      boolean boolean4 = linkedHashSet0.add("9&eVB");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("9&eVB"));
      
      boolean boolean5 = linkedHashSet0.add("");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertEquals(3, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("9&eVB"));
      
      int int0 = 17;
      Object object0 = concurrentReaderHashMap0.sremove(integer0, 17);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNull(object0);
      
      Set set0 = concurrentReaderHashMap0.entrySet();
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(3, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Object object1 = concurrentReaderHashMap0.sremove("0B`a=K_:(@+I=", 0);
      assertEquals(64, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNull(object1);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.put("9&eVB", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNotNull(concurrentReaderHashMap0);
      
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = concurrentReaderHashMap0.sremove((Object) null, (-2760));
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertNull(object0);
  }
}
