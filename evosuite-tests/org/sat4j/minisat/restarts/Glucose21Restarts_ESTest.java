/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:32:05 GMT 2019
 */

package org.sat4j.minisat.restarts;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.constraints.xor.Xor;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.specs.ILogAble;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Glucose21Restarts_ESTest extends Glucose21Restarts_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      UnitClause unitClause0 = new UnitClause((-2029));
      unitClause0.setActivity((-2029));
      // Undeclared exception!
      try { 
        glucose21Restarts0.newLearnedClause(unitClause0, (-2029));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.restarts.Glucose21Restarts", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      VecInt vecInt0 = new VecInt(0);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = new Xor(vecInt0, false, iLits0);
      // Undeclared exception!
      try { 
        glucose21Restarts0.newLearnedClause(xor0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      glucose21Restarts0.reset();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      boolean boolean0 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      String string0 = glucose21Restarts0.toString();
      assertEquals("Glucose 2.1 dynamic restart strategy", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      long long0 = glucose21Restarts0.nextRestartNumberOfConflict();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      SearchParams searchParams0 = new SearchParams((-2029));
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMin0).getVocabulary();
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, (ILogAble) null);
      SolverStats solverStats0 = solver0.getStats();
      glucose21Restarts0.init(searchParams0, solverStats0);
      UnitClause unitClause0 = new UnitClause((-2029));
      glucose21Restarts0.newLearnedClause(unitClause0, (-2029));
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      glucose21Restarts0.newConflict();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      glucose21Restarts0.onRestart();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
  }
}
