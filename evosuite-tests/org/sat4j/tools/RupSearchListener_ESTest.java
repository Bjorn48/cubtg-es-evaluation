/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:24:50 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy;
import org.sat4j.minisat.orders.RandomLiteralSelectionStrategy;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.FakeConstr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Lbool;
import org.sat4j.tools.RupSearchListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RupSearchListener_ESTest extends RupSearchListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("(1l{$e:;F1bBW5B");
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseCachingAutoEraseStrategy0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      rupSearchListener0.init(solver0);
      rupSearchListener0.learnUnit(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("");
      rupSearchListener0.init((Solver<ClausalDataStructureWL>) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("s=?lBr$H.J,m9>}T");
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((-1012), 1000).when(iVecInt0).get(anyInt());
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseCachingAutoEraseStrategy0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      rupSearchListener0.init(solver0);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      rupSearchListener0.delete(originalBinaryClause0);
      assertEquals(2, originalBinaryClause0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>(")q7?:d!CG\"vCpZ ELi");
      IConstr iConstr0 = FakeConstr.instance();
      // Undeclared exception!
      try { 
        rupSearchListener0.learn(iConstr0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Fake IConstr
         //
         verifyException("org.sat4j.specs.FakeConstr", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, arminRestarts0);
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("!t(:b+V'${m~*");
      rupSearchListener0.init(solver0);
      VecInt vecInt0 = new VecInt();
      UnitClauses unitClauses0 = new UnitClauses(vecInt0);
      // Undeclared exception!
      try { 
        rupSearchListener0.delete(unitClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = null;
      try {
        rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("s=?lBr$H.J,m9>}T");
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((-1012), 1000).when(iVecInt0).get(anyInt());
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseCachingAutoEraseStrategy0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      rupSearchListener0.init(solver0);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      rupSearchListener0.learn(originalBinaryClause0);
      assertTrue(originalBinaryClause0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("MAnUO27Auh");
      Lbool lbool0 = Lbool.UNDEFINED;
      rupSearchListener0.init((Solver<ClausalDataStructureWL>) null);
      rupSearchListener0.end(lbool0);
      rupSearchListener0.end(lbool0);
      assertEquals("U", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>(")q7?:d!CG\"vCpZ ELi");
      Lbool lbool0 = Lbool.FALSE;
      // Undeclared exception!
      try { 
        rupSearchListener0.end(lbool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("(1l{$e:;F1bBW5B");
      // Undeclared exception!
      try { 
        rupSearchListener0.learnUnit(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, arminRestarts0);
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>(")q7?:d!CG\"vCpZ ELi");
      rupSearchListener0.init(solver0);
      Lbool lbool0 = Lbool.FALSE;
      rupSearchListener0.end(lbool0);
      assertEquals("F", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>(")q7?:d!CG\"vCpZ ELi");
      VecInt vecInt0 = new VecInt();
      Constr constr0 = clausalDataStructureWL0.createUnregisteredClause(vecInt0);
      // Undeclared exception!
      try { 
        rupSearchListener0.delete(constr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("s=?lBr$H.J,m9>}T");
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((-1012), 1000).when(iVecInt0).get(anyInt());
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, iLits0);
      // Undeclared exception!
      try { 
        rupSearchListener0.learn(originalBinaryClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }
}
