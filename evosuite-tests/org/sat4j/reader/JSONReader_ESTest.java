/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:59:59 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.core.Solver;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.reader.JSONReader;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReader_ESTest extends JSONReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[7];
      JSONReader<AbstractMinimalModel> jSONReader0 = new JSONReader<AbstractMinimalModel>((AbstractMinimalModel) null);
      StringWriter stringWriter0 = new StringWriter();
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      jSONReader0.decode(intArray0, printWriter0);
      assertEquals("[0,0,0,0,0,0,0]", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      GroupClauseSelectorSolver<ModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIterator>(modelIterator0);
      JSONReader<GroupClauseSelectorSolver<ModelIterator>> jSONReader0 = new JSONReader<GroupClauseSelectorSolver<ModelIterator>>(groupClauseSelectorSolver0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("=3eG,");
      // Undeclared exception!
      try { 
        jSONReader0.decode((int[]) null, (PrintWriter) mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>((OptToSatAdapter) null);
      JSONReader<LexicoDecorator<OptToSatAdapter>> jSONReader0 = new JSONReader<LexicoDecorator<OptToSatAdapter>>(lexicoDecorator0);
      IVecInt iVecInt0 = jSONReader0.getLiterals("[]");
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      JSONReader<StatisticsSolver> jSONReader0 = new JSONReader<StatisticsSolver>(statisticsSolver0);
      String string0 = jSONReader0.constraintRegexp();
      assertEquals("((\\[(-?(\\d+)(,-?(\\d+))*)?\\])|(\\[(\\[(-?(\\d+)(,-?(\\d+))*)?\\]),'[=<>]=?',-?\\d+\\]))", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        jSONReader0.parseString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ManyCore<MaxSatDecorator> manyCore0 = (ManyCore<MaxSatDecorator>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      JSONReader<ManyCore<MaxSatDecorator>> jSONReader0 = new JSONReader<ManyCore<MaxSatDecorator>>(manyCore0);
      // Undeclared exception!
      try { 
        jSONReader0.parseInstance((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = (LexicoDecorator<OptToSatAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      JSONReader<LexicoDecorator<OptToSatAdapter>> jSONReader0 = new JSONReader<LexicoDecorator<OptToSatAdapter>>(lexicoDecorator0);
      byte[] byteArray0 = new byte[24];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-143), 233);
      // Undeclared exception!
      try { 
        jSONReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      ClausalCardinalitiesDecorator<ModelIterator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIterator>(modelIterator0);
      JSONReader<ClausalCardinalitiesDecorator<ModelIterator>> jSONReader0 = new JSONReader<ClausalCardinalitiesDecorator<ModelIterator>>(clausalCardinalitiesDecorator0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        jSONReader0.parseInstance((InputStream) mockFileInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Solver<CardinalityDataStructureYanMin> solver0 = (Solver<CardinalityDataStructureYanMin>) mock(Solver.class, new ViolatedAssumptionAnswer());
      JSONReader<Solver<CardinalityDataStructureYanMin>> jSONReader0 = new JSONReader<Solver<CardinalityDataStructureYanMin>>(solver0);
      // Undeclared exception!
      try { 
        jSONReader0.handleCard("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter((ISolver) null, (-4054L), (SolutionFoundListener) null);
      JSONReader<ModelIteratorToSATAdapter> jSONReader0 = new JSONReader<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      // Undeclared exception!
      try { 
        jSONReader0.handleCard((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>((OptToSatAdapter) null);
      JSONReader<LexicoDecorator<OptToSatAdapter>> jSONReader0 = new JSONReader<LexicoDecorator<OptToSatAdapter>>(lexicoDecorator0);
      // Undeclared exception!
      try { 
        jSONReader0.getLiterals("e");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>((OptToSatAdapter) null);
      JSONReader<LexicoDecorator<OptToSatAdapter>> jSONReader0 = new JSONReader<LexicoDecorator<OptToSatAdapter>>(lexicoDecorator0);
      // Undeclared exception!
      try { 
        jSONReader0.getLiterals((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      JSONReader<ModelIterator> jSONReader0 = new JSONReader<ModelIterator>(modelIterator0);
      // Undeclared exception!
      try { 
        jSONReader0.decode((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LexicoDecorator<ModelIteratorToSATAdapter> lexicoDecorator0 = (LexicoDecorator<ModelIteratorToSATAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      JSONReader<LexicoDecorator<ModelIteratorToSATAdapter>> jSONReader0 = new JSONReader<LexicoDecorator<ModelIteratorToSATAdapter>>(lexicoDecorator0);
      try { 
        jSONReader0.parseString("([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+])");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorWrong input ([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+])
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = (LexicoDecorator<OptToSatAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      JSONReader<LexicoDecorator<OptToSatAdapter>> jSONReader0 = new JSONReader<LexicoDecorator<OptToSatAdapter>>(lexicoDecorator0);
      byte[] byteArray0 = new byte[24];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 112);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      try { 
        jSONReader0.parseInstance((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorWrong input \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      jSONReader0.handleCard("[[],'<',0]");
      assertEquals(0, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      jSONReader0.handleCard("[[],'',0]");
      assertEquals(0, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONReader<LexicoDecorator<OptToSatAdapter>> jSONReader0 = new JSONReader<LexicoDecorator<OptToSatAdapter>>((LexicoDecorator<OptToSatAdapter>) null);
      jSONReader0.handleCard("Call the primeImplicant method first!!!");
      assertFalse(jSONReader0.hasAMapping());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONReader<ModelIteratorToSATAdapter> jSONReader0 = new JSONReader<ModelIteratorToSATAdapter>((ModelIteratorToSATAdapter) null);
      // Undeclared exception!
      try { 
        jSONReader0.getLiterals("^[((([(-?(d+)(,-?(d+))*)?])|([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+]))(,(([(-?(d+)(,-?(d+))*)?])|([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+])))*)?]$");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[((([(-?(d+)(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = (LexicoDecorator<OptToSatAdapter>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((String) null).when(lexicoDecorator0).toString();
      JSONReader<LexicoDecorator<OptToSatAdapter>> jSONReader0 = new JSONReader<LexicoDecorator<OptToSatAdapter>>(lexicoDecorator0);
      ISolver iSolver0 = jSONReader0.parseString("[]");
      assertNotNull(iSolver0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ManyCore<MaxSatDecorator> manyCore0 = (ManyCore<MaxSatDecorator>) mock(ManyCore.class, new ViolatedAssumptionAnswer());
      JSONReader<ManyCore<MaxSatDecorator>> jSONReader0 = new JSONReader<ManyCore<MaxSatDecorator>>(manyCore0);
      int[] intArray0 = new int[2];
      String string0 = jSONReader0.decode(intArray0);
      assertEquals("[0,0]", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONReader<AbstractMinimalModel> jSONReader0 = new JSONReader<AbstractMinimalModel>((AbstractMinimalModel) null);
      try { 
        jSONReader0.handleNotHandled("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorUnknown constraint: 
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }
}
