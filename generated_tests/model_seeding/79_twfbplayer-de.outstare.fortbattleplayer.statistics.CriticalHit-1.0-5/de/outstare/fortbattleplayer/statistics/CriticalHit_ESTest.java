/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 20:16:25 GMT 2019
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import de.outstare.fortbattleplayer.statistics.CriticalHit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CriticalHit_ESTest extends CriticalHit_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(combatant0).getName();
      doReturn((Weapon) null).when(combatant0).getWeapon();
      CriticalHit criticalHit0 = null;
      try {
        criticalHit0 = new CriticalHit(combatant0, combatant0, 1, 1307);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.CriticalHit", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-1), "ow;)^*g", 0, 12);
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn("ow;)^*g", "").when(combatant0).getName();
      doReturn(simpleWeapon0).when(combatant0).getWeapon();
      CriticalHit criticalHit0 = new CriticalHit(combatant0, combatant0, 1, 1307);
      assertEquals((-5), criticalHit0.critOnlyDamage);
      assertEquals(1307, criticalHit0.round);
      assertEquals(1, criticalHit0.damage);
  }
}
