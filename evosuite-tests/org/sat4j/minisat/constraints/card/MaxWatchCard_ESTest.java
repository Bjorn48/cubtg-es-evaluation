/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:33:01 GMT 2019
 */

package org.sat4j.minisat.constraints.card;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.MaxWatchCard;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MaxWatchCard_ESTest extends MaxWatchCard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Lits lits0 = new Lits();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(2178, (-2141)).when(statisticsSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(statisticsSolver0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, true, (-1423));
      iVecInt0.insertFirst((-769));
      int int0 = maxWatchCard0.getAssertionLevel(iVecInt0, (-2141));
      assertEquals((-1423), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 2);
      vecInt0.shrink(30);
      int int0 = maxWatchCard0.getAssertionLevel(vecInt0, 30);
      assertEquals(2, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Lits lits0 = new Lits();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(2178, (-2141)).when(statisticsSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(statisticsSolver0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, true, (-1423));
      maxWatchCard0.undo((-769));
      boolean boolean0 = maxWatchCard0.simplify();
      assertEquals((-1423), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(1);
      MaxWatchCard maxWatchCard0 = null;
      try {
        maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, true, 1673);
      int int0 = maxWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals(1673, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Lits lits0 = new Lits();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>(100);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, (RestartStrategy) null);
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      Constr constr0 = MaxWatchCard.maxWatchCardNew(solver0, lits0, iVecInt0, false, 0);
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(constr0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      lits0.ensurePool(1240);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 2394);
      maxWatchCard0.getVocabulary();
      assertEquals(2394, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Lits lits0 = new Lits();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(2178, (-2141)).when(statisticsSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(statisticsSolver0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, true, (-1423));
      BigInteger bigInteger0 = maxWatchCard0.getDegree();
      assertEquals((byte)113, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 0);
      BigInteger bigInteger0 = maxWatchCard0.getDegree();
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-1501));
      BigInteger bigInteger0 = maxWatchCard0.getDegree();
      assertEquals((byte) (-35), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 6);
      // Undeclared exception!
      try { 
        maxWatchCard0.propagate((UnitPropagationListener) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-3481));
      // Undeclared exception!
      try { 
        maxWatchCard0.propagate((UnitPropagationListener) null, (-3481));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3481
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, (ILits) null, vecInt0, false, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-1));
      // Undeclared exception!
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 0);
      // Undeclared exception!
      try { 
        maxWatchCard0.getAssertionLevel((IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 9982);
      vecInt0.shrinkTo(89);
      // Undeclared exception!
      try { 
        maxWatchCard0.getAssertionLevel(vecInt0, 9982);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      lits0.getFromPool(9972);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 3500);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      MaxWatchCard maxWatchCard0 = null;
      try {
        maxWatchCard0 = new MaxWatchCard(lits0, readOnlyVecInt0, false, 281);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink(16);
      MaxWatchCard maxWatchCard0 = null;
      try {
        maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 16);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink((-455));
      MaxWatchCard maxWatchCard0 = null;
      try {
        maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, (-455));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 0);
      maxWatchCard0.normalize();
      assertEquals(0, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 65535);
      maxWatchCard0.toString((VarMapper) null);
      assertEquals(65535, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-1));
      maxWatchCard0.assertConstraint((UnitPropagationListener) null);
      assertEquals(1, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 477);
      maxWatchCard0.toString();
      assertEquals(477, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-6));
      maxWatchCard0.remove((UnitPropagationListener) null);
      assertEquals(6, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      // Undeclared exception!
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, 13);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating trivially inconsistent constraint
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      Constr constr0 = MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, true, (-1));
      assertNull(constr0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 2);
      maxWatchCard0.calcReason(2, vecInt0);
      assertEquals(2, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 1301);
      double double0 = maxWatchCard0.getActivity();
      assertEquals(1301, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Lits lits0 = new Lits();
      StatisticsSolver statisticsSolver0 = mock(StatisticsSolver.class, new ViolatedAssumptionAnswer());
      doReturn(2178, (-2130)).when(statisticsSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(statisticsSolver0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, true, (-1423));
      maxWatchCard0.rescaleBy((-1951.154966309));
      assertEquals((-1423), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-956));
      boolean boolean0 = maxWatchCard0.canBeSatisfiedByCountingLiterals();
      assertEquals(956, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 4);
      // Undeclared exception!
      try { 
        maxWatchCard0.register();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 4);
      maxWatchCard0.getCoef(4);
      assertEquals(4, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-1501));
      maxWatchCard0.forwardActivity((-1501));
      assertEquals(1501, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 47);
      maxWatchCard0.getVocabulary();
      assertEquals(47, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 110);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        maxWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, 34);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 0);
      boolean boolean0 = maxWatchCard0.learnt();
      assertEquals(0, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(iLits0, iVecInt0, true, 0);
      maxWatchCard0.setActivity((-3666.872));
      assertEquals(0, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, (-888));
      // Undeclared exception!
      try { 
        maxWatchCard0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-956));
      boolean boolean0 = maxWatchCard0.locked();
      assertTrue(boolean0);
      assertEquals(956, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, (-956));
      int int0 = maxWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals((-956), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 110);
      // Undeclared exception!
      try { 
        maxWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 99);
      boolean boolean0 = maxWatchCard0.canBePropagatedMultipleTimes();
      assertEquals((-99), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-956));
      maxWatchCard0.size();
      assertEquals(956, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 2394);
      // Undeclared exception!
      try { 
        maxWatchCard0.get(2394);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2394
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 2682);
      // Undeclared exception!
      try { 
        maxWatchCard0.calcReasonOnTheFly(2682, vecInt0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-956));
      Constr constr0 = maxWatchCard0.toConstraint();
      assertEquals(956, constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Lits lits0 = new Lits();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, true, (byte) (-126));
      maxWatchCard0.incActivity((byte)112);
      assertEquals((-126), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 97);
      // Undeclared exception!
      try { 
        maxWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }
}
