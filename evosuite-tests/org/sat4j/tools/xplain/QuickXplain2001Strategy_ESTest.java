/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:55:56 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.xplain.QuickXplain2001Strategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuickXplain2001Strategy_ESTest extends QuickXplain2001Strategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, naturalStaticOrder0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      NegationDecorator<SubModelIterator> negationDecorator0 = (NegationDecorator<SubModelIterator>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(negationDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("t0").when(negationDecorator0).getLogPrefix();
      doReturn(true).when(negationDecorator0).isVerbose();
      doReturn(iVecInt0).when(negationDecorator0).unsatExplanation();
      iVecInt0.insertFirst(18);
      NegationDecorator<NegationDecorator<SubModelIterator>> negationDecorator1 = new NegationDecorator<NegationDecorator<SubModelIterator>>(negationDecorator0);
      HashMap<Integer, SubModelIterator> hashMap0 = new HashMap<Integer, SubModelIterator>();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(negationDecorator1);
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(solver0);
      IVecInt iVecInt1 = minOneDecorator1.createBlockingClauseForCurrentModel();
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(minOneDecorator0, hashMap0, iVecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, naturalStaticOrder0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      NegationDecorator<SubModelIterator> negationDecorator0 = (NegationDecorator<SubModelIterator>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(negationDecorator0).getLogPrefix();
      doReturn(true).when(negationDecorator0).isVerbose();
      doReturn((IVecInt) null).when(negationDecorator0).unsatExplanation();
      NegationDecorator<NegationDecorator<SubModelIterator>> negationDecorator1 = new NegationDecorator<NegationDecorator<SubModelIterator>>(negationDecorator0);
      HashMap<Integer, SubModelIterator> hashMap0 = new HashMap<Integer, SubModelIterator>();
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(negationDecorator1, hashMap0, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.QuickXplain2001Strategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(statisticsSolver0);
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(statisticsSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      FullClauseSelectorSolver<ManyCore<SubModelIterator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ManyCore<SubModelIterator>>((ManyCore<SubModelIterator>) null, true);
      HashMap<Integer, MixedDataStructureSingleWL> hashMap0 = new HashMap<Integer, MixedDataStructureSingleWL>();
      VecInt vecInt0 = new VecInt(45);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(fullClauseSelectorSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      ASolverFactory<Solver<MixedDataStructureSingleWL>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureSingleWL>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<MixedDataStructureSingleWL>> manyCore0 = new ManyCore<Solver<MixedDataStructureSingleWL>>(aSolverFactory0, stringArray0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      VecInt vecInt0 = new VecInt(0);
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(manyCore0, hashMap0, vecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, naturalStaticOrder0, miniSATRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      NegationDecorator<SubModelIterator> negationDecorator0 = (NegationDecorator<SubModelIterator>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(negationDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("t0").when(negationDecorator0).getLogPrefix();
      doReturn(true).when(negationDecorator0).isVerbose();
      doReturn(iVecInt0).when(negationDecorator0).unsatExplanation();
      NegationDecorator<NegationDecorator<SubModelIterator>> negationDecorator1 = new NegationDecorator<NegationDecorator<SubModelIterator>>(negationDecorator0);
      HashMap<Integer, SubModelIterator> hashMap0 = new HashMap<Integer, SubModelIterator>();
      hashMap0.put((Integer) null, (SubModelIterator) null);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(negationDecorator1);
      // Undeclared exception!
      try { 
        quickXplain2001Strategy0.explain(minOneDecorator0, hashMap0, iVecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      VecInt vecInt0 = new VecInt();
      NegationDecorator<SubModelIterator> negationDecorator0 = (NegationDecorator<SubModelIterator>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(negationDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(negationDecorator0).isVerbose();
      doReturn(vecInt0).when(negationDecorator0).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      IVecInt iVecInt0 = quickXplain2001Strategy0.explain(negationDecorator0, hashMap0, vecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      String string0 = quickXplain2001Strategy0.toString();
      assertEquals("QuickXplain (IJCAI WS 2001 version) minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      QuickXplain2001Strategy quickXplain2001Strategy0 = new QuickXplain2001Strategy();
      quickXplain2001Strategy0.cancelExplanationComputation();
      assertEquals("QuickXplain (IJCAI WS 2001 version) minimization strategy", quickXplain2001Strategy0.toString());
  }
}
