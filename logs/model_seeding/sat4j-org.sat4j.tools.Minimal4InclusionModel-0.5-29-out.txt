* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.tools.Minimal4InclusionModel
* Starting Client-0
* Connecting to master process on port 4512
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.tools.Minimal4InclusionModel
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 128
* Using seed 1550589889381
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 30 / 128
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3783783783783784
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2631578947368421
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.0
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.125
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8333333333333334
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6666666666666666
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2631578947368421
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[MASTER] 16:25:41.977 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.IVecInt
[MASTER] 16:25:42.732 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.constraints.cnf.LearntBinaryClause due to org.evosuite.ga.ConstructionFailedException: Have no generator for class org.sat4j.minisat.orders.LevelBasedVarOrderHeap canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 16:25:45.354 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.sat4j.tools.ManyCore<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.CardinalityDataStructureYanMax>> canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 16:25:45.470 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.GroupClauseSelectorSolver due to org.evosuite.ga.ConstructionFailedException: Found no variables of type class org.sat4j.opt.MinOneDecorator
[MASTER] 16:25:51.431 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class org.sat4j.tools.encoding.Binomial canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 16:25:54.684 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.RestartStrategy
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 277
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.6486486486486487
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7894736842105263
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.6060606060606061
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7894736842105263
[MASTER] 16:25:57.897 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.IConstr
[MASTER] 16:25:59.463 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.constraints.cnf.LearntHTClause due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.ILits
[MASTER] 16:25:59.595 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type class org.sat4j.minisat.constraints.card.AtLeast
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 346
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8648648648648649
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7272727272727273
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7894736842105263
[MASTER] 16:26:09.509 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.NegationDecorator due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.orders.VarOrderHeap due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.IPhaseSelectionStrategy
[MASTER] 16:26:09.582 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.ILits
[MASTER] 16:26:16.047 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class org.sat4j.minisat.constraints.ClausalDataStructureWL canUseFunctionalMocks=false, canBeMocked: true
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 428
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8648648648648649
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7272727272727273
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7894736842105263
[MASTER] 16:26:21.442 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.sat4j.tools.LexicoDecorator<org.sat4j.opt.MinOneDecorator> canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 16:26:30.510 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type class org.sat4j.tools.GateTranslator
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 509
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8648648648648649
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7272727272727273
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.5
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8947368421052632
[MASTER] 16:26:35.402 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.ClausalCardinalitiesDecorator due to org.evosuite.ga.ConstructionFailedException: Found no variables of type class org.sat4j.opt.MinOneDecorator
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 582
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[MASTER] 16:26:41.747 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class org.sat4j.tools.encoding.Policy canUseFunctionalMocks=false, canBeMocked: true
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 652
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8648648648648649
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7272727272727273
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.625
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8947368421052632
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 734
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.918918918918919
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7272727272727273
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.625
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8947368421052632
[MASTER] 16:26:59.897 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.tools.Minimal4InclusionModel due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.tools.SolutionFoundListener
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 803
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 837
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.918918918918919
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7272727272727273
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.918918918918919
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7272727272727273
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8947368421052632
* Search finished after 122s and 9 generations, 14292 statements, best individual has fitness: 18.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.918918918918919
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7272727272727273
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8947368421052632
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
[MASTER] 16:28:08.331 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Coverage of criterion LINE: 92%
* Total number of goals: 37
* Number of covered goals: 34
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 19
* Number of covered goals: 17
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 73%
* Total number of goals: 33
* Number of covered goals: 24
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 75%
* Total number of goals: 8
* Number of covered goals: 6
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 19
* Number of covered goals: 17
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.918918918918919
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7272727272727273
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8947368421052632
* Generated 35 tests with total length 562
* Resulting test suite's coverage: 90% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 16:28:48.787 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6673833333333333% of time used, but only 8/35 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.918918918918919
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.7272727272727273
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.75
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8947368421052632
* Compiling and checking tests
[MASTER] 16:29:27.822 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 16:29:27.852 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int[] intArray0 = new int[2];
intArray0[0] = 272;
intArray0[1] = 0;
UnitClause unitClause0 = new UnitClause(272);
assertNotNull(unitClause0);
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());

MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) null, (Object) null).when(minOneDecorator0).modelWithInternalVariables();
doReturn(unitClause0, unitClause0).when(minOneDecorator0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
doReturn(unitClause0).when(minOneDecorator0).addParity(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
doReturn(unitClause0).when(minOneDecorator0).discardCurrentModel();
doReturn(false, true).when(minOneDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
doReturn(0, 519, 1788, 272, 5000).when(minOneDecorator0).nVars();
FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MinOneDecorator>(minOneDecorator0, false);
assertEquals(2, intArray0.length);
assertNotNull(fullClauseSelectorSolver0);
assertArrayEquals(new int[] {272, 0}, intArray0);
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(fullClauseSelectorSolver0.isSatisfiable());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());

ModelIterator modelIterator0 = new ModelIterator(fullClauseSelectorSolver0, (-656L));
assertEquals(2, intArray0.length);
assertNotNull(modelIterator0);
assertArrayEquals(new int[] {272, 0}, intArray0);
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(fullClauseSelectorSolver0.isSatisfiable());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());

IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
assertEquals(2, intArray0.length);
assertNotNull(iVecInt0);
assertArrayEquals(new int[] {272, 0}, intArray0);
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(fullClauseSelectorSolver0.isSatisfiable());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

UnitClause unitClause1 = (UnitClause)modelIterator0.addParity(iVecInt0, false);
assertSame(unitClause0, unitClause1);
assertSame(unitClause1, unitClause0);
assertEquals(2, intArray0.length);
assertNotNull(unitClause1);
assertArrayEquals(new int[] {272, 0}, intArray0);
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(fullClauseSelectorSolver0.isSatisfiable());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertFalse(unitClause1.canBePropagatedMultipleTimes());
assertEquals(1, unitClause1.size());
assertFalse(unitClause1.simplify());
assertTrue(unitClause1.isSatisfied());
assertFalse(unitClause1.learnt());
assertEquals(1, unitClause1.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause1.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, unitClause1.getActivity(), 0.01);

boolean boolean0 = fullClauseSelectorSolver0.isSatisfiable();
assertSame(unitClause0, unitClause1);
assertEquals(2, intArray0.length);
assertArrayEquals(new int[] {272, 0}, intArray0);
assertTrue(boolean0);
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(fullClauseSelectorSolver0.isSatisfiable());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());

int[] intArray1 = modelIterator0.model();
assertNotSame(intArray0, intArray1);
assertSame(unitClause0, unitClause1);
assertNotSame(intArray1, intArray0);
assertEquals(2, intArray0.length);
assertEquals(2, intArray1.length);
assertNotNull(intArray1);
assertArrayEquals(new int[] {272, 0}, intArray0);
assertArrayEquals(new int[] {272, 0}, intArray1);
assertFalse(intArray1.equals((Object)intArray0));
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(fullClauseSelectorSolver0.isSatisfiable());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertEquals(1L, modelIterator0.numberOfModelsFoundSoFar());

UnitClause unitClause2 = (UnitClause)modelIterator0.addBlockingClause(iVecInt0);
assertNotSame(intArray0, intArray1);
assertSame(unitClause0, unitClause2);
assertSame(unitClause0, unitClause1);
assertSame(unitClause2, unitClause0);
assertSame(unitClause2, unitClause1);
assertEquals(2, intArray0.length);
assertNotNull(unitClause2);
assertArrayEquals(new int[] {272, 0}, intArray0);
assertFalse(intArray0.equals((Object)intArray1));
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(fullClauseSelectorSolver0.isSatisfiable());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertEquals(1L, modelIterator0.numberOfModelsFoundSoFar());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals(1, unitClause2.requiredNumberOfSatisfiedLiterals());
assertEquals(1, unitClause2.size());
assertFalse(unitClause2.learnt());
assertTrue(unitClause2.canBeSatisfiedByCountingLiterals());
assertEquals(0.0, unitClause2.getActivity(), 0.01);
assertTrue(unitClause2.isSatisfied());
assertFalse(unitClause2.simplify());
assertFalse(unitClause2.canBePropagatedMultipleTimes());

VecInt vecInt0 = (VecInt)iVecInt0.pop();
assertNotSame(intArray0, intArray1);
assertSame(unitClause0, unitClause2);
assertSame(unitClause0, unitClause1);
assertSame(iVecInt0, vecInt0);
assertSame(vecInt0, iVecInt0);
assertEquals(2, intArray0.length);
assertNotNull(vecInt0);
assertArrayEquals(new int[] {272, 0}, intArray0);
assertFalse(intArray0.equals((Object)intArray1));
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(fullClauseSelectorSolver0.isSatisfiable());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertFalse(iVecInt0.isEmpty());
assertEquals((-1), iVecInt0.size());
assertEquals((-1), vecInt0.size());
assertFalse(vecInt0.isEmpty());

Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(fullClauseSelectorSolver0, iVecInt0);
assertEquals(2, intArray0.length);
assertNotNull(minimal4InclusionModel0);
assertArrayEquals(new int[] {272, 0}, intArray0);
assertFalse(intArray0.equals((Object)intArray1));
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(fullClauseSelectorSolver0.isSatisfiable());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertFalse(iVecInt0.isEmpty());
assertEquals((-1), iVecInt0.size());

minimal4InclusionModel0.registerLiteral(272);
assertNotSame(intArray0, intArray1);
assertSame(unitClause0, unitClause2);
assertSame(unitClause0, unitClause1);
assertSame(iVecInt0, vecInt0);
assertEquals(2, intArray0.length);
assertArrayEquals(new int[] {272, 0}, intArray0);
assertFalse(intArray0.equals((Object)intArray1));
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(fullClauseSelectorSolver0.isSatisfiable());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertFalse(iVecInt0.isEmpty());
assertEquals((-1), iVecInt0.size());

Minimal4InclusionModel minimal4InclusionModel1 = new Minimal4InclusionModel(minimal4InclusionModel0);
assertEquals(2, intArray0.length);
assertNotNull(minimal4InclusionModel1);
assertArrayEquals(new int[] {272, 0}, intArray0);
assertFalse(intArray0.equals((Object)intArray1));
assertFalse(minimal4InclusionModel1.equals((Object)minimal4InclusionModel0));
assertEquals(1, unitClause0.size());
assertFalse(unitClause0.simplify());
assertFalse(unitClause0.learnt());
assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(unitClause0.isSatisfied());
assertEquals(0.0, unitClause0.getActivity(), 0.01);
assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
assertFalse(unitClause0.canBePropagatedMultipleTimes());
assertTrue(fullClauseSelectorSolver0.isSatisfiable());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
assertFalse(iVecInt0.isEmpty());
assertEquals((-1), iVecInt0.size());

minimal4InclusionModel0.model();

* Writing tests to file
* Writing JUnit test case 'Minimal4InclusionModel_ESTest' to evosuite-tests
* Done!

* Computation finished
