/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:22:28 GMT 2019
 */

package org.ow2.proactive.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.MissingFormatWidthException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.ow2.proactive.utils.ObjectArrayFormatter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectArrayFormatter_ESTest extends ObjectArrayFormatter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      objectArrayFormatter0.setTitle(linkedList0);
      linkedList0.add("bBV=3;]j0'YkD0mJs/z");
      String string0 = objectArrayFormatter0.getAsString();
      assertEquals("\t bBV=3;]j0'YkD0mJs/z\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      objectArrayFormatter0.setTitle(linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("");
      objectArrayFormatter0.addLine(linkedList1);
      linkedList0.add((String) null);
      // Undeclared exception!
      try { 
        objectArrayFormatter0.getAsString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // One of the line is not as long as the other or the title array !
         //
         verifyException("org.ow2.proactive.utils.ObjectArrayFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      objectArrayFormatter0.setMaxColumnLength(1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("bBV=3;]j0'YkD0mJs/z");
      objectArrayFormatter0.setTitle(linkedList0);
      // Undeclared exception!
      try { 
        objectArrayFormatter0.getAsString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      objectArrayFormatter0.setTitle(linkedList0);
      // Undeclared exception!
      try { 
        objectArrayFormatter0.getAsString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.utils.ObjectArrayFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      objectArrayFormatter0.setMaxColumnLength(7);
      linkedList0.add("dR$>MsH?-J/0k</ ");
      objectArrayFormatter0.setTitle(linkedList0);
      String string0 = objectArrayFormatter0.getAsString();
      assertEquals("\t dR$... \n", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("dR$>MsH?-J/0k</ ");
      objectArrayFormatter0.setTitle(linkedList0);
      linkedList0.add("");
      objectArrayFormatter0.addLine(linkedList1);
      String string0 = objectArrayFormatter0.getAsString();
      assertEquals("\t                  \n\t dR$>MsH?-J/0k</ \n", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("dR$>MsH?-J/0k</ ");
      objectArrayFormatter0.setTitle(linkedList0);
      linkedList0.add("");
      objectArrayFormatter0.addLine(linkedList1);
      linkedList1.add("dR$>MsH?-J/0k</ ");
      // Undeclared exception!
      try { 
        objectArrayFormatter0.getAsString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // One of the line is not as long as the other or the title array !
         //
         verifyException("org.ow2.proactive.utils.ObjectArrayFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      objectArrayFormatter0.setTitle(linkedList0);
      objectArrayFormatter0.addEmptyLine();
      linkedList0.add("qfi<P\",");
      String string0 = objectArrayFormatter0.getAsString();
      assertEquals("\t qfi<P\",\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("dR$>MsH?-J/0k</ ");
      objectArrayFormatter0.setTitle(linkedList0);
      objectArrayFormatter0.addLine(linkedList0);
      String string0 = objectArrayFormatter0.getAsString();
      assertEquals("\t dR$>MsH?-J/0k</ \n\t dR$>MsH?-J/0k</ \n", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      objectArrayFormatter0.setTitle(linkedList0);
      linkedList0.add("");
      // Undeclared exception!
      try { 
        objectArrayFormatter0.getAsString();
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %-01$s
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      // Undeclared exception!
      try { 
        objectArrayFormatter0.getAsString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Title array does not contain anything !
         //
         verifyException("org.ow2.proactive.utils.ObjectArrayFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      // Undeclared exception!
      try { 
        objectArrayFormatter0.setMaxColumnLength((-185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxColumnLength must be a positive
         //
         verifyException("org.ow2.proactive.utils.ObjectArrayFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      // Undeclared exception!
      try { 
        objectArrayFormatter0.setSpace((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // spaces must be a positive value.
         //
         verifyException("org.ow2.proactive.utils.ObjectArrayFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      objectArrayFormatter0.setSpace(6);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        objectArrayFormatter0.addLine(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lines must be a non-empty list.
         //
         verifyException("org.ow2.proactive.utils.ObjectArrayFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      // Undeclared exception!
      try { 
        objectArrayFormatter0.addLine((List<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Lines must be a non-empty list.
         //
         verifyException("org.ow2.proactive.utils.ObjectArrayFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ObjectArrayFormatter objectArrayFormatter0 = new ObjectArrayFormatter();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      objectArrayFormatter0.setTitle(linkedList0);
      // Undeclared exception!
      try { 
        objectArrayFormatter0.getAsString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Title array does not contain anything !
         //
         verifyException("org.ow2.proactive.utils.ObjectArrayFormatter", e);
      }
  }
}
