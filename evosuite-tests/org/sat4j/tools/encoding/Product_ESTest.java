/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:56:26 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Product;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Product_ESTest extends Product_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(168, 168);
      // Undeclared exception!
      product0.addAtMostNonOpt(dimacsOutputSolver0, vecInt0, 7);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(189, 189);
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(dimacsOutputSolver0, vecInt0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Product product0 = new Product();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(4531, 4531);
      // Undeclared exception!
      product0.addAtMostOne(iSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Product product0 = new Product();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        product0.addAtMostOne(solver0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Product product0 = new Product();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      product0.addExactlyOne(maxSatDecorator0, iVecInt0);
      product0.addAtMostNonOpt(dimacsStringSolver0, iVecInt0, 0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Product product0 = new Product();
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(1565, 0.0, 0.0, 1565);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1));
      ASolverFactory<GroupClauseSelectorSolver<MaxSatDecorator>> aSolverFactory0 = (ASolverFactory<GroupClauseSelectorSolver<MaxSatDecorator>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GroupClauseSelectorSolver<MaxSatDecorator>> basicLauncher0 = new BasicLauncher<GroupClauseSelectorSolver<MaxSatDecorator>>(aSolverFactory0);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, lubyRestarts0, basicLauncher0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      product0.addExactly(solver0, readOnlyVecInt0, 0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Product product0 = new Product();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(iSolver0, solutionFoundListener0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(abstractMinimalModel0);
      IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
      try { 
        product0.addExactlyOne(abstractMinimalModel0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Product product0 = new Product();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt(159, (-834));
      SearchParams searchParams0 = new SearchParams(27, 27, 1967.2, 1990);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0, mUSLauncher0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      product0.addExactlyOne(lexicoDecorator0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Product product0 = new Product();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(statisticsSolver0);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      PureOrder pureOrder0 = new PureOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, eMARestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      // Undeclared exception!
      try { 
        product0.addExactlyOne(maxSatDecorator0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Product product0 = new Product();
      // Undeclared exception!
      try { 
        product0.addExactlyOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt();
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<MaxSatDecorator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(854, 8).when(fullClauseSelectorSolver0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<FullClauseSelectorSolver<MaxSatDecorator>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<MaxSatDecorator>>(fullClauseSelectorSolver0, true);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(fullClauseSelectorSolver1);
      // Undeclared exception!
      try { 
        product0.addExactlyOne(maxSatDecorator0, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0, true);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, false);
      FullClauseSelectorSolver<FullClauseSelectorSolver<MaxSatDecorator>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<MaxSatDecorator>>(fullClauseSelectorSolver0, false);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      PureOrder pureOrder0 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, fixedPeriodRestarts0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      // Undeclared exception!
      try { 
        product0.addExactlyOne(fullClauseSelectorSolver1, iVecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Product product0 = new Product();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(iSolver0);
      try { 
        product0.addExactly(modelIterator0, iVecInt0, 490);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Product product0 = new Product();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        product0.addExactly(statisticsSolver0, vecInt0, 532);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        product0.addExactly((ISolver) null, vecInt0, 30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Product product0 = new Product();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      // Undeclared exception!
      try { 
        product0.addExactly(statisticsSolver0, vecInt0, 532);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Product product0 = new Product();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(1070, 0);
      // Undeclared exception!
      try { 
        product0.addExactly(iSolver0, vecInt0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt(1075, 0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      product0.addAtMostOne(dimacsStringSolver0, vecInt0);
      // Undeclared exception!
      product0.addAtMostOne(dimacsStringSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Product product0 = new Product();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt(415, 379);
      // Undeclared exception!
      try { 
        product0.addAtMostOne(statisticsSolver0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt(178, 2241);
      // Undeclared exception!
      try { 
        product0.addAtMostOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Product", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt(32, 2233);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(32);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, true);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0);
      FullClauseSelectorSolver<GroupClauseSelectorSolver<MaxSatDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<GroupClauseSelectorSolver<MaxSatDecorator>>(groupClauseSelectorSolver0, true);
      // Undeclared exception!
      try { 
        product0.addAtMostOne(fullClauseSelectorSolver0, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Product product0 = new Product();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-1020.943366), 0.0, (-1020.943366), 0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts((-782));
      ASolverFactory<GroupClauseSelectorSolver<MaxSatDecorator>> aSolverFactory0 = (ASolverFactory<GroupClauseSelectorSolver<MaxSatDecorator>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GroupClauseSelectorSolver<MaxSatDecorator>> basicLauncher0 = new BasicLauncher<GroupClauseSelectorSolver<MaxSatDecorator>>(aSolverFactory0);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, lubyRestarts0, basicLauncher0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      try { 
        product0.addAtMostNonOpt(solver0, readOnlyVecInt0, (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(168, 168);
      // Undeclared exception!
      product0.addAtMostNonOpt(dimacsOutputSolver0, vecInt0, 168);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt(14, 0);
      vecInt0.push((-1909));
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt((ISolver) null, vecInt0, 14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Product", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Product product0 = new Product();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(0, (-355));
      product0.addAtMostOne(iSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt(1070, 0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(169);
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(dimacsStringSolver0, vecInt0, 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 2
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Product product0 = new Product();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(0, (-355));
      IConstr iConstr0 = product0.addAtMostNonOpt(iSolver0, vecInt0, (-355));
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Product product0 = new Product();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(0, (-355));
      vecInt0.push(0);
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(iSolver0, vecInt0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt(32, 2233);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(32);
      IConstr iConstr0 = product0.addAtMostNonOpt(dimacsStringSolver0, vecInt0, 4790);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Product product0 = new Product();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(1070, 0);
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(iSolver0, vecInt0, (-355));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Product", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(181, 181);
      Product product0 = new Product();
      // Undeclared exception!
      product0.addExactly(dimacsOutputSolver0, vecInt0, 181);
  }
}
