/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:53:14 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubModelIterator_ESTest extends SubModelIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[5];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(iSolver0).model();
      doReturn(1661, 1661, 1661, 1661, 58).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(iSolver0).discardCurrentModel();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, iVecInt0, 58);
      iVecInt0.push((-1110));
      iVecInt0.moveTo(58, intArray0);
      subModelIterator0.model();
      assertEquals(2L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[] intArray0 = new int[5];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(iSolver0).model();
      doReturn(1661, 1661, 1661, 1661, 0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(iSolver0).discardCurrentModel();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      iVecInt0.moveTo(iVecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, iVecInt0, (-1));
      subModelIterator0.model();
      assertEquals(2L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsStringSolver0, iVecInt0, (-1));
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(minOneDecorator0).discardCurrentModel();
      LexicoDecorator<MinOneDecorator> lexicoDecorator0 = new LexicoDecorator<MinOneDecorator>(minOneDecorator0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(lexicoDecorator0, iVecInt0);
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(abstractMinimalModel0);
      NegationDecorator<MinOneDecorator> negationDecorator0 = new NegationDecorator<MinOneDecorator>(minOneDecorator1);
      SubModelIterator subModelIterator0 = new SubModelIterator(negationDecorator0, iVecInt0);
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0);
      SubModelIterator subModelIterator0 = null;
      try {
        subModelIterator0 = new SubModelIterator(clausalCardinalitiesDecorator0, (IVecInt) null, (-633));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      iVecInt0.shrinkTo(873);
      SubModelIterator subModelIterator0 = null;
      try {
        subModelIterator0 = new SubModelIterator(dimacsStringSolver0, iVecInt0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SubModelIterator subModelIterator0 = null;
      try {
        subModelIterator0 = new SubModelIterator((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 58;
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(iSolver0).model();
      doReturn(1661, 1661, 1661, 1661, 58).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(iSolver0).discardCurrentModel();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, iVecInt0, 58);
      subModelIterator0.model();
      assertEquals(2L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(1661, 1661, 1661, 1661, 58).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, iVecInt0, 58);
      // Undeclared exception!
      try { 
        subModelIterator0.primeImplicant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }
}
