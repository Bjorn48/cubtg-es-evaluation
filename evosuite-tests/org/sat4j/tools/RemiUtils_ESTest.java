/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:56:46 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.RemiUtils;
import org.sat4j.tools.SingleSolutionDetector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RemiUtils_ESTest extends RemiUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      dimacsStringSolver0.newVar(2353);
      try { 
        RemiUtils.backbone(dimacsStringSolver0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NegationDecorator<SingleSolutionDetector> negationDecorator0 = (NegationDecorator<SingleSolutionDetector>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, true).when(negationDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(1943, 1943, 1943).when(negationDecorator0).nVars();
      NegationDecorator<NegationDecorator<SingleSolutionDetector>> negationDecorator1 = new NegationDecorator<NegationDecorator<SingleSolutionDetector>>(negationDecorator0);
      RemiUtils.backbone(negationDecorator1);
      RemiUtils.backbone(negationDecorator1);
      // Undeclared exception!
      RemiUtils.backbone(negationDecorator1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[6];
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(65535).when(singleSolutionDetector0).nVars();
      singleSolutionDetectorArray0[0] = singleSolutionDetector0;
      singleSolutionDetectorArray0[1] = singleSolutionDetector0;
      singleSolutionDetectorArray0[2] = singleSolutionDetector0;
      singleSolutionDetectorArray0[3] = singleSolutionDetector0;
      singleSolutionDetectorArray0[4] = singleSolutionDetector0;
      singleSolutionDetectorArray0[5] = singleSolutionDetector0;
      ManyCore<SingleSolutionDetector> manyCore0 = new ManyCore<SingleSolutionDetector>(true, singleSolutionDetectorArray0);
      SingleSolutionDetector singleSolutionDetector1 = new SingleSolutionDetector(manyCore0);
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector1, true);
      // Undeclared exception!
      try { 
        RemiUtils.backbone(fullClauseSelectorSolver0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        RemiUtils.backbone((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RemiUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NegationDecorator<SingleSolutionDetector>[] negationDecoratorArray0 = (NegationDecorator<SingleSolutionDetector>[]) Array.newInstance(NegationDecorator.class, 0);
      ManyCore<NegationDecorator<SingleSolutionDetector>> manyCore0 = new ManyCore<NegationDecorator<SingleSolutionDetector>>(negationDecoratorArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0, true);
      // Undeclared exception!
      try { 
        RemiUtils.backbone(maxSatDecorator0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SingleSolutionDetector[] singleSolutionDetectorArray0 = new SingleSolutionDetector[6];
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, true, true, false).when(singleSolutionDetector0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((-1), (-1), 20).when(singleSolutionDetector0).nVars();
      singleSolutionDetectorArray0[1] = singleSolutionDetector0;
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetectorArray0[1], true);
      RemiUtils.backbone(fullClauseSelectorSolver0);
      //  // Unstable assertion: assertFalse(fullClauseSelectorSolver0.isSatisfiable());
      
      RemiUtils.backbone(singleSolutionDetector0);
      IVecInt iVecInt0 = RemiUtils.backbone(singleSolutionDetector0);
      //  // Unstable assertion: assertFalse(iVecInt0.isEmpty());
  }
}
