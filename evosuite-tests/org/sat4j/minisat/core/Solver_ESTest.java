/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:37:28 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.ExitCode;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.constraints.cnf.BinaryClauses;
import org.sat4j.minisat.constraints.cnf.CBClause;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.constraints.xor.Xor;
import org.sat4j.minisat.core.ActivityLCDS;
import org.sat4j.minisat.core.AgeLCDS;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IOrder;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.ISimplifier;
import org.sat4j.minisat.core.LBDConflictTimer;
import org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy;
import org.sat4j.minisat.core.LearnedConstraintsEvaluationType;
import org.sat4j.minisat.core.LearningStrategy;
import org.sat4j.minisat.core.Pair;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.SimplificationType;
import org.sat4j.minisat.core.SizeLCDS;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.core.VarActivityListener;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Lbool;
import org.sat4j.specs.UnitClauseProvider;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Solver_ESTest extends Solver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(463, 463);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(463, searchParams0.getInitConflictBound());
      assertEquals(463.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertNotNull(searchParams1);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(463);
      assertEquals(463.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VecInt vecInt0 = new VecInt(463, 463);
      assertFalse(vecInt0.isEmpty());
      assertEquals(463, vecInt0.size());
      assertEquals(463, vecInt0.last());
      assertNotNull(vecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      Xor xor0 = new Xor(vecInt0, true, lits0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(463, vecInt0.size());
      assertEquals(463, vecInt0.last());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(463, xor0.size());
      assertTrue(xor0.canBeSatisfiedByCountingLiterals());
      assertFalse(xor0.learnt());
      assertFalse(xor0.simplify());
      assertFalse(xor0.canBePropagatedMultipleTimes());
      assertNotNull(xor0);
      
      Constr constr0 = xor0.toConstraint();
      assertSame(xor0, constr0);
      assertSame(constr0, xor0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(463, vecInt0.size());
      assertEquals(463, vecInt0.last());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(463, xor0.size());
      assertTrue(xor0.canBeSatisfiedByCountingLiterals());
      assertFalse(xor0.learnt());
      assertFalse(xor0.simplify());
      assertFalse(xor0.canBePropagatedMultipleTimes());
      assertFalse(constr0.learnt());
      assertFalse(constr0.simplify());
      assertEquals(463, constr0.size());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertNotNull(constr0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>(463);
      assertEquals(463, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertNotNull(basicLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, basicLauncher0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(463, searchParams0.getInitConflictBound());
      assertEquals(463.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(463, percentLengthLearning1.getLimit());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        solver0.removeSubsumedConstr(xor0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      SearchParams searchParams0 = new SearchParams((-1));
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertNotNull(negativeLiteralSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertNotNull(miniSATRestarts0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = (LevelBasedVarOrderHeap)solver0.getOrder();
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap1, miniSATRestarts0);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals(7, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      int int0 = solver1.getTimeout();
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotSame(solver0, solver1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(solver1, solver0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(11, solver0.nVars());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(10, solver1.realNumberOfVariables());
      assertEquals(11, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(10, solver1.nVars());
      assertEquals(2147483, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      String string0 = activeLearning0.toString();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("Limit learning to clauses containing active literals (95.0%)", string0);
      assertNotNull(string0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertNotNull(lubyRestarts0);
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      LubyRestarts lubyRestarts1 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts1.shouldRestart());
      assertNotNull(lubyRestarts1);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure1, subsetVarOrder0, lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts1.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      assertEquals(0, intArray0.length);
      
      VecInt vecInt0 = new VecInt(32, 64);
      assertEquals(64, vecInt0.last());
      assertEquals(32, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int[] intArray1 = solver0.findModel((IVecInt) vecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {64}, intArray1);
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts1.luby());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(66, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(65, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(65, solver0.realNumberOfVariables());
      assertEquals(64, vecInt0.last());
      assertEquals(32, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>(64);
      assertEquals(64.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-2253), 64, 10.85387286659, 64);
      assertEquals((-2253.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(64.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(10.85387286659, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(64, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax1, searchParams0, subsetVarOrder0, lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals((-2253.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(64.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(10.85387286659, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(64, searchParams0.getInitConflictBound());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts1.luby());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(64.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertNotNull(solver1);
      assertEquals(0, intArray0.length);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(eMARestarts0);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning1 = new FixedLengthLearning<ClausalDataStructureWL>(0);
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      assertNotNull(fixedLengthLearning1);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertNotNull(basicLauncher0);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(fixedLengthLearning1, clausalDataStructureWL0, searchParams0, subsetVarOrder0, lubyRestarts0, basicLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertEquals((-2253.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(64.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(10.85387286659, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(64, searchParams0.getInitConflictBound());
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertNotNull(solver2);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        solver2.enqueue(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1001
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder(27);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(27, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, pureOrder0, eMARestarts0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(27, pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      int[] intArray0 = solver0.findModel();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(27, pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(eMARestarts0.shouldRestart());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        solver0.cancel();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-0.2524058670783), 0, (-0.2524058670783), 0);
      assertEquals((-0.2524058670783), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-0.2524058670783), searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder(4422);
      assertEquals(4422, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertNotNull(arminRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, arminRestarts0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals((-0.2524058670783), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-0.2524058670783), searchParams0.getVarDecay(), 0.01);
      assertEquals(4422, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      solver0.cancelUntilTrailLevel(4422);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals((-0.2524058670783), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-0.2524058670783), searchParams0.getVarDecay(), 0.01);
      assertEquals(4422, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
      assertEquals(4422, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(4422, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertNotNull(searchParams1);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams1, pureOrder0, arminRestarts0, mUSLauncher0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(4422, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.nVars());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(6, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(6, solver2.realNumberOfVariables());
      assertEquals(7, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertNotNull(solver2);
      
      // Undeclared exception!
      try { 
        solver2.reduceDB();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(30);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(miniSATRestarts0);
      
      levelBasedVarOrderHeap0.setVarDecay(30);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-2523));
      assertEquals((-2523), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      cardinalityDataStructure0.conflictDetectedInWatchesFor(30, 2356);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals((-2523), fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        solver0.undoOne();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      String string0 = activeLearning0.toString();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("Limit learning to clauses containing active literals (95.0%)", string0);
      assertNotNull(string0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertNotNull(lubyRestarts0);
      
      LubyRestarts lubyRestarts1 = new LubyRestarts(5);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(5, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertNotNull(lubyRestarts1);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(5, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      assertEquals(0, intArray0.length);
      
      VecInt vecInt0 = new VecInt(5, 5);
      assertEquals(5, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertNotNull(vecInt0);
      
      int[] intArray1 = solver0.findModel((IVecInt) vecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {5}, intArray1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(5L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(5, lubyRestarts1.getFactor());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(6, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(6, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.newVar());
      assertEquals(5, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>(32);
      assertEquals(32.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      CardinalityDataStructure cardinalityDataStructure2 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure2.equals((Object)cardinalityDataStructure0));
      assertFalse(cardinalityDataStructure2.equals((Object)cardinalityDataStructure1));
      assertNotNull(cardinalityDataStructure2);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure2));
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(8, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(9, solver1.newVar());
      assertEquals(8, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(5, lubyRestarts1.getFactor());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertNotNull(solver1);
      
      VecInt vecInt1 = new VecInt();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertNotNull(vecInt1);
      
      IVecInt iVecInt0 = vecInt0.push(6);
      assertSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertEquals(6, iVecInt0.last());
      assertEquals(6, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(6, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.size());
      assertNotNull(iVecInt0);
      
      SearchParams searchParams0 = new SearchParams(32);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure2));
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertEquals(10, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(10, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(11, solver2.newVar());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertNotNull(solver2);
      assertEquals(0, intArray0.length);
      
      int[] intArray2 = solver1.findModel((IVecInt) vecInt1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(solver1, solver2);
      assertNotSame(solver1, solver0);
      assertNotSame(cardinalityDataStructure0, cardinalityDataStructure2);
      assertNotSame(cardinalityDataStructure0, cardinalityDataStructure1);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertArrayEquals(new int[] {(-5)}, intArray2);
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure2));
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(13, solver1.newVar());
      assertEquals(12, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(12, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(5L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(5, lubyRestarts1.getFactor());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertNotNull(intArray2);
      assertEquals(1, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      solver0.clearLearntClauses();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, (SearchParams) null, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      solver1.setDBSimplificationAllowed(false);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals("c ", solver1.getLogPrefix());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(30);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(miniSATRestarts0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>(30);
      assertEquals(30, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap1, miniSATRestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(30, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      int int0 = 1349;
      UnitClause unitClause0 = new UnitClause(1349);
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertFalse(unitClause0.simplify());
      assertFalse(unitClause0.learnt());
      assertEquals(1, unitClause0.size());
      assertTrue(unitClause0.isSatisfied());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(unitClause0);
      
      // Undeclared exception!
      try { 
        solver0.record(unitClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1348
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1498.2106871860374));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[1];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(1, intArray0.length);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      assertEquals(1, intArray0.length);
      
      LubyRestarts lubyRestarts1 = new LubyRestarts(946);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(946, lubyRestarts1.getFactor());
      assertNotNull(lubyRestarts1);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      LubyRestarts lubyRestarts2 = (LubyRestarts)solver1.getRestartStrategy();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(lubyRestarts0, lubyRestarts2);
      assertNotSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts2, lubyRestarts0);
      assertNotSame(lubyRestarts2, lubyRestarts1);
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertFalse(lubyRestarts2.equals((Object)lubyRestarts1));
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertTrue(lubyRestarts2.shouldRestart());
      assertEquals(32, lubyRestarts2.getFactor());
      assertEquals(0L, lubyRestarts2.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts2.luby());
      assertNotNull(lubyRestarts2);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-2134));
      assertEquals((-2134), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, lubyRestarts1, mUSLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts2));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(946, lubyRestarts1.getFactor());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals((-2134), fixedLengthLearning0.getMaxLength());
      assertNotNull(solver2);
      
      IConstr iConstr0 = solver2.addConstr((Constr) null);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(lubyRestarts1, lubyRestarts2);
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts2));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(946, lubyRestarts1.getFactor());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals((-2134), fixedLengthLearning0.getMaxLength());
      assertNull(iConstr0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      assertNotNull(mockPrintStream0);
      
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.append('.');
      assertSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream1, mockPrintStream0);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals(".", byteArrayOutputStream0.toString());
      assertNotNull(mockPrintStream1);
      
      solver0.printStat((PrintStream) mockPrintStream1, "c ");
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(mockPrintStream0, mockPrintStream1);
      assertSame(mockPrintStream1, mockPrintStream0);
      assertSame(lubyRestarts0, lubyRestarts2);
      assertNotSame(lubyRestarts0, lubyRestarts1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(".c starts\t\t: 0\nc conflicts\t\t: 0\nc decisions\t\t: 0\nc propagations\t\t: 0\nc inspects\t\t: 0\nc shortcuts\t\t: 0\nc learnt literals\t: 0\nc learnt binary clauses\t: 0\nc learnt ternary clauses\t: 0\nc learnt constraints\t: 0\nc ignored constraints\t: 0\nc root simplifications\t: 0\nc removed literals (reason simplification)\t: 0\nc reason swapping (by a shorter reason)\t: 0\nc Calls to reduceDB\t: 0\nc Number of update (reduction) of LBD\t: 0\nc Imported unit clauses\t: 0\nc speed (assignments/second)\t: 0.0\nc non guided choices\t: 0\n", byteArrayOutputStream0.toString());
      assertEquals(504, byteArrayOutputStream0.size());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>((-819));
      assertEquals((-819), percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-819), 1.0E100, 1.0E100, (-819));
      assertEquals(1.0E100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-819.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E100, searchParams0.getClaDecay(), 0.01);
      assertEquals((-819), searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertNotNull(basicLauncher0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, basicLauncher0);
      assertEquals((-819), percentLengthLearning0.getLimit());
      assertEquals(1.0E100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-819.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E100, searchParams0.getClaDecay(), 0.01);
      assertEquals((-819), searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      solver0.expireTimeout();
      assertEquals((-819), percentLengthLearning0.getLimit());
      assertEquals(1.0E100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-819.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E100, searchParams0.getClaDecay(), 0.01);
      assertEquals((-819), searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      
      int int0 = solver0.getTimeout();
      assertEquals(2147483, int0);
      assertEquals((-819), percentLengthLearning0.getLimit());
      assertEquals(1.0E100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-819.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E100, searchParams0.getClaDecay(), 0.01);
      assertEquals((-819), searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(1.0E100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-819.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E100, searchParams0.getClaDecay(), 0.01);
      assertEquals((-819), searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(solver1);
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver1.setLearnedConstraintsDeletionStrategy((ConflictTimer) null, learnedConstraintsEvaluationType0);
      assertEquals(1.0E100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-819.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E100, searchParams0.getClaDecay(), 0.01);
      assertEquals((-819), searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      solver2.getPropagationLevel();
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(1069);
      assertEquals(1069, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWL>(1069);
      assertEquals(1069, fixedLengthLearning1.getMaxLength());
      assertNotNull(fixedLengthLearning1);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      PureOrder pureOrder0 = new PureOrder((-1185));
      assertEquals((-1185), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      assertEquals((-1185), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(tabuListDecorator0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(miniSATRestarts0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning1, mixedDataStructureDanielWL0, tabuListDecorator0, miniSATRestarts0);
      assertEquals(1069, fixedLengthLearning1.getMaxLength());
      assertEquals((-1185), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      LBDConflictTimer lBDConflictTimer0 = new LBDConflictTimer(solver0, 1069);
      assertEquals(1069, fixedLengthLearning1.getMaxLength());
      assertEquals((-1185), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1069, lBDConflictTimer0.bound());
      assertNotNull(lBDConflictTimer0);
      
      Solver<? extends DataStructureFactory> solver1 = lBDConflictTimer0.getSolver();
      assertEquals(1069, fixedLengthLearning1.getMaxLength());
      assertEquals((-1185), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1069, lBDConflictTimer0.bound());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(7, solver1.newVar());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.nVars());
      assertNotNull(solver1);
      
      cardinalityDataStructureYanMax0.setUnitPropagationListener(solver1);
      assertEquals(1069, fixedLengthLearning1.getMaxLength());
      assertEquals((-1185), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(11, solver0.nVars());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1069, lBDConflictTimer0.bound());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(10, solver1.nVars());
      assertEquals(11, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(10, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(6371.26953623, 1012);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1012, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(6371.26953623, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(arminRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1012, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(6371.26953623, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(solver2);
      
      arminRestarts0.reset();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = (LevelBasedVarOrderHeap)solver2.getOrder();
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1012, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(6371.26953623, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(levelBasedVarOrderHeap1);
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap1, arminRestarts0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(1069, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertEquals(5, solver2.nVars());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1012, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(6371.26953623, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(solver3);
      
      solver3.setNeedToReduceDB(true);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(1069, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(7, solver2.nVars());
      assertEquals(7, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(8, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(3, solver3.realNumberOfVariables());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.nVars());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1012, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(6371.26953623, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver4 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap1, arminRestarts0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(9, solver2.realNumberOfVariables());
      assertEquals(10, solver2.newVar());
      assertEquals(9, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1, solver4.nVars());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(2, solver4.newVar());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(0, solver4.nConstraints());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1012, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(6371.26953623, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(solver4);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning2 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertEquals(3, fixedLengthLearning2.getMaxLength());
      assertNotNull(fixedLengthLearning2);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver5 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning2, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, arminRestarts0);
      assertEquals(3, fixedLengthLearning2.getMaxLength());
      assertEquals(1, solver5.nVars());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertFalse(solver5.isVerbose());
      assertEquals(0, solver5.getPropagationLevel());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(0, solver5.nConstraints());
      assertEquals(2147483, solver5.getTimeout());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(1, solver5.realNumberOfVariables());
      assertEquals(2, solver5.newVar());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(solver5);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver2, true);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(11, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(11, solver2.realNumberOfVariables());
      assertEquals(12, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1012, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(6371.26953623, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(maxSatDecorator0);
      
      IVecInt iVecInt0 = maxSatDecorator0.unsatExplanation();
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(13, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(14, solver2.newVar());
      assertEquals(13, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1012, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(6371.26953623, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        solver5.dimacs2internal((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      SearchParams searchParams0 = new SearchParams((-550));
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-550), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder((-550));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-550), pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-550), pureOrder0.getPeriod());
      assertNotNull(tabuListDecorator0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertNotNull(fixedPeriodRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, (CardinalityDataStructureYanMin) null, searchParams0, tabuListDecorator0, fixedPeriodRestarts0, mUSLauncher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-3958.9466686), 0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      RestartStrategy restartStrategy0 = null;
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      RestartStrategy restartStrategy1 = solver0.getRestartStrategy();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNull(restartStrategy1);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>((-3958.9466686));
      assertEquals((-3958.9466686), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-3958.9466686), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      boolean boolean0 = solver1.isNeedToReduceDB();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-3958.9466686), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(boolean0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertNotNull(solver2);
      
      Constr constr0 = solver2.propagate();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertNull(constr0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.nConstraints());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(solver3);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        solver3.backtrack(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      int int0 = 0;
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertEquals(0, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0, (-984));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-984), searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertNotNull(fixedPeriodRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, mUSLauncher0);
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-984), searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "c ";
      // Undeclared exception!
      try { 
        mUSLauncher0.run(stringArray0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int int0 = (-1199);
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>((-1199));
      assertEquals((-1199), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 7;
      intArray0[1] = 8;
      intArray0[2] = 6;
      intArray0[3] = (-1199);
      intArray0[4] = (-1199);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {7, 8, 6, (-1199), (-1199)}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(5, intArray0.length);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, (-2479));
      assertArrayEquals(new int[] {7, 8, 6, (-1199), (-1199)}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      assertEquals(5, intArray0.length);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertNotNull(fixedPeriodRestarts0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, fixedPeriodRestarts0);
      assertArrayEquals(new int[] {7, 8, 6, (-1199), (-1199)}, intArray0);
      assertEquals((-1199), fixedLengthLearning0.getMaxLength());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      assertEquals(5, intArray0.length);
      
      UnitClause unitClause0 = new UnitClause((-1267));
      assertTrue(unitClause0.isSatisfied());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, unitClause0.size());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.simplify());
      assertFalse(unitClause0.learnt());
      assertNotNull(unitClause0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, subsetVarOrder0, fixedPeriodRestarts0);
      assertArrayEquals(new int[] {7, 8, 6, (-1199), (-1199)}, intArray0);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals((-1199), fixedLengthLearning0.getMaxLength());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertNotNull(solver1);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        solver1.record(unitClause0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      int int0 = 7;
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 7);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      varOrderHeap0.init();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      boolean boolean0 = solver0.isSatisfiable(false);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(boolean0);
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(43);
      assertEquals(43, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertNotNull(basicLauncher0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, lubyRestarts0, basicLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(43, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      // Undeclared exception!
      try { 
        solver1.printInfos((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(0.0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = null;
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertNotNull(positiveLiteralSelectionStrategy0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(positiveLiteralSelectionStrategy0);
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertNotNull(miniSATRestarts0);
      
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning1 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertNotNull(activeLearning1);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning1, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, varOrderHeap0, miniSATRestarts0);
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, (SearchParams) null, varOrderHeap0, miniSATRestarts0, iLogAble0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertNotNull(solver1);
      
      VecInt vecInt0 = new VecInt(0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        solver1.addParity(vecInt0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int int0 = 47;
      SearchParams searchParams0 = new SearchParams(0.0, (-1.0), 100.0, 47);
      assertEquals((-1.0), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      RestartStrategy restartStrategy0 = null;
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      assertEquals((-1.0), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      VecInt vecInt0 = (VecInt)solver0.learnedLiterals;
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(varOrderHeap0, (-1.0));
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-1.0), randomWalkDecorator1.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator1);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertNotNull(clauseOnlyLearning1);
      
      clauseOnlyLearning1.init();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning1, cardinalityDataStructureYanMin0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertNotNull(solver1);
      
      IVecInt iVecInt0 = solver1.createBlockingClauseForCurrentModel();
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        solver1.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(646.69440114677);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(646.69440114677, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(646.69440114677, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      IVecInt iVecInt0 = solver0.unsatExplanation();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(646.69440114677, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNull(iVecInt0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      tabuListDecorator0.setPhaseSelectionStrategy(userFixedPhaseSelectionStrategy0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      
      boolean boolean0 = solver0.isSatisfiable(true);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertTrue(boolean0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertNotNull(glucose21Restarts0);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertNotNull(iLogAble0);
      
      LubyRestarts lubyRestarts1 = new LubyRestarts((-4));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(1, lubyRestarts1.luby());
      assertEquals((-4), lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts1.shouldRestart());
      assertNotNull(lubyRestarts1);
      
      SearchParams searchParams0 = new SearchParams(1.0E20, 1554.168449817697, 1.0, 2);
      assertEquals(1554.168449817697, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2, searchParams0.getInitConflictBound());
      assertEquals(1.0E20, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertNotNull(mUSLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, glucose21Restarts0, mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1554.168449817697, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2, searchParams0.getInitConflictBound());
      assertEquals(1.0E20, searchParams0.getVarDecay(), 0.01);
      assertNotNull(solver1);
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertSame(searchParams1, searchParams0);
      assertSame(searchParams0, searchParams1);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(2, searchParams1.getInitConflictBound());
      assertEquals(1.0E20, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1554.168449817697, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1554.168449817697, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2, searchParams0.getInitConflictBound());
      assertEquals(1.0E20, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams1);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams1, tabuListDecorator0, glucose21Restarts0);
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(8, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, searchParams1.getInitConflictBound());
      assertEquals(1.0E20, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1554.168449817697, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(6, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(6, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(7, solver2.newVar());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1554.168449817697, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2, searchParams0.getInitConflictBound());
      assertEquals(1.0E20, searchParams0.getVarDecay(), 0.01);
      assertNotNull(solver2);
      
      VecInt vecInt0 = (VecInt)solver2.decisions;
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      boolean boolean1 = solver0.isSatisfiable((IVecInt) vecInt0, true);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(lubyRestarts0, lubyRestarts1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(solver1, solver2);
      assertSame(searchParams1, searchParams0);
      assertNotSame(solver2, solver1);
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(solver2.equals((Object)solver1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1554.168449817697, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2, searchParams0.getInitConflictBound());
      assertEquals(1.0E20, searchParams0.getVarDecay(), 0.01);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(11, solver1.nVars());
      assertEquals(12, solver1.newVar());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, searchParams1.getInitConflictBound());
      assertEquals(1.0E20, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1554.168449817697, searchParams1.getClaDecay(), 0.01);
      assertEquals(10, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(10, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(11, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mixedDataStructureDanielHT0;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertEquals(2, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(iVecInt0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertFalse(constr0.simplify());
      assertFalse(constr0.locked());
      assertFalse(constr0.isSatisfied());
      assertEquals(2, constr0.size());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.learnt());
      assertNotNull(constr0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(8, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(7, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertNotNull(solver1);
      
      long long0 = solver0.getTimeoutMs();
      assertNotSame(solver0, solver1);
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483647L, long0);
      
      solver0.claBumpActivity(constr0);
      assertNotSame(solver0, solver1);
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals(1.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertFalse(constr0.simplify());
      assertFalse(constr0.locked());
      assertFalse(constr0.isSatisfied());
      assertEquals(2, constr0.size());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.learnt());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMin>(1851.32689632);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(1851.32689632, activeLearning1.getActivityPercent(), 0.01);
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertNotNull(solver2);
      
      Set<Integer> set0 = solver2.fromLastDecisionLevel(iVecInt0);
      assertNotSame(solver0, solver1);
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(13, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(14, solver0.newVar());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals(4, solver2.newVar());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertFalse(set0.contains(7));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 500);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = (LevelBasedVarOrderHeap)solver0.getOrder();
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap1, (RestartStrategy) null);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(solver1);
      
      // Undeclared exception!
      try { 
        solver1.varBumpActivity(3331);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1665
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(0.0, (-1.0), 100.0, 47);
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals((-1.0), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertNotNull(basicLauncher0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, basicLauncher0);
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals((-1.0), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      RandomWalkDecorator randomWalkDecorator1 = (RandomWalkDecorator)solver0.getOrder();
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals((-1.0), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator1);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator1, (RestartStrategy) null);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals((-1.0), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      solver1.stop();
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals((-1.0), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(463, 463);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(463.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(463, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams1);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(646.69440114677);
      assertEquals(646.69440114677, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VecInt vecInt0 = new VecInt(99, 463);
      assertFalse(vecInt0.isEmpty());
      assertEquals(99, vecInt0.size());
      assertEquals(463, vecInt0.last());
      assertNotNull(vecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(463);
      assertEquals(463, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertNotNull(basicLauncher0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(646.69440114677, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        solver0.addAtMost(vecInt0, 2953);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder(Integer.MAX_VALUE);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertNotNull(noRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, noRestarts0, mUSLauncher0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertNotNull(solver0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertNotNull(searchParams1);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(pureOrder0, 1.1);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1.1, randomWalkDecorator1.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator1);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator1, noRestarts0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.1, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(solver1);
      
      NoRestarts noRestarts1 = (NoRestarts)solver1.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertNotSame(randomWalkDecorator1, randomWalkDecorator0);
      assertSame(noRestarts1, noRestarts0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.1, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      assertNotNull(noRestarts1);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructure>> manyCore0 = new ManyCore<Solver<CardinalityDataStructure>>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(361);
      assertEquals(361, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, randomWalkDecorator1, noRestarts0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(361, percentLengthLearning1.getLimit());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1.1, randomWalkDecorator1.getProbability(), 0.01);
      assertNotNull(solver2);
      
      solver2.setUnitClauseProvider(manyCore0);
      assertSame(noRestarts0, noRestarts1);
      assertNotSame(randomWalkDecorator1, randomWalkDecorator0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(361, percentLengthLearning1.getLimit());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(1.1, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(1.5, (-286.54), 0.01, 37);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertNotNull(rSATPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(12);
      assertEquals(12, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(12, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertNotNull(solver0);
      
      fixedLengthLearning0.setSolver(solver0);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(12, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax1, searchParams0, naturalStaticOrder0, (RestartStrategy) null);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertEquals(12, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      ILogAble iLogAble0 = solver1.out;
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, iLogAble0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(12, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertNotNull(solver2);
      
      int int0 = solver2.currentDecisionLevel();
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver1, solver0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(12, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(5, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, int0);
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      VecInt vecInt0 = new VecInt(0, 12);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Constr constr0 = cardinalityDataStructureYanMin0.createUnregisteredClause(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, constr0.size());
      assertTrue(constr0.learnt());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.simplify());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(constr0);
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertFalse(solver3.isVerbose());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(solver3);
      
      VecInt vecInt1 = (VecInt)solver3.trailLim;
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertNotNull(vecInt1);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      ILits iLits0 = levelBasedVarOrderHeap1.getVocabulary();
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNull(iLits0);
      
      levelBasedVarOrderHeap1.varDecayActivity();
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      CBClause cBClause0 = new CBClause(vecInt1, (ILits) null, true);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(3, solver3.nVars());
      assertEquals(4, solver3.newVar());
      assertFalse(solver3.isVerbose());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(cBClause0.learnt());
      assertEquals(0.0, cBClause0.getActivity(), 0.01);
      assertEquals(0, cBClause0.size());
      assertFalse(cBClause0.simplify());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(cBClause0);
      
      solver2.claBumpActivity(cBClause0);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver1, solver0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(12, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(5, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(6, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(5, solver3.nVars());
      assertEquals(5, solver3.realNumberOfVariables());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(cBClause0.learnt());
      assertEquals(1.0, cBClause0.getActivity(), 0.01);
      assertEquals(0, cBClause0.size());
      assertFalse(cBClause0.simplify());
      
      solver3.setLogger(mUSLauncher0);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(7, solver3.realNumberOfVariables());
      assertEquals(7, solver3.nVars());
      assertEquals(8, solver3.newVar());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      int int1 = solver1.newVar(37);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver1, solver0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(int1 == int0);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertEquals(12, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(39, solver1.newVar());
      assertEquals(38, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(37, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(37, int1);
      
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningButHeuristics0);
      
      Solver<MixedDataStructureDanielHT> solver4 = null;
      try {
        solver4 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, (MixedDataStructureDanielHT) null, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1445.87637);
      assertEquals(1445.87637, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1927));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertNotNull(iLogAble0);
      
      Solver<ClausalDataStructureWL>[] solverArray0 = (Solver<ClausalDataStructureWL>[]) Array.newInstance(Solver.class, 5);
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(solver1);
      
      solverArray0[0] = solver1;
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, (SearchParams) null, randomWalkDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver2.equals((Object)solver1));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(solver2);
      
      solverArray0[1] = solver2;
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, (SearchParams) null, tabuListDecorator0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver3.equals((Object)solver1));
      assertFalse(solver3.equals((Object)solver2));
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.nConstraints());
      assertEquals(5, solver3.realNumberOfVariables());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(6, solver3.newVar());
      assertEquals(5, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isVerbose());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertNotNull(solver3);
      
      solverArray0[2] = solver3;
      Solver<ClausalDataStructureWL> solver4 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, tabuListDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver4.equals((Object)solver3));
      assertFalse(solver4.equals((Object)solver2));
      assertFalse(solver4.equals((Object)solver1));
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, solver4.nVars());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(8, solver4.newVar());
      assertFalse(solver4.isVerbose());
      assertEquals(7, solver4.realNumberOfVariables());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.nConstraints());
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertNotNull(solver4);
      
      randomWalkDecorator0.init();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      solverArray0[3] = solver4;
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertNotNull(clausalDataStructureWL1);
      
      SearchParams searchParams0 = new SearchParams(2277.544, 0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2277.544, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<ClausalDataStructureWL> solver5 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL1, searchParams0, randomWalkDecorator0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver5.equals((Object)solver4));
      assertFalse(solver5.equals((Object)solver2));
      assertFalse(solver5.equals((Object)solver1));
      assertFalse(solver5.equals((Object)solver3));
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2277.544, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver5.currentDecisionLevel());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(1, solver5.nVars());
      assertEquals(0, solver5.nConstraints());
      assertEquals(2, solver5.newVar());
      assertEquals(1, solver5.realNumberOfVariables());
      assertFalse(solver5.isSolverKeptHot());
      assertFalse(solver5.isVerbose());
      assertEquals(2147483, solver5.getTimeout());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertNotNull(solver5);
      
      solverArray0[4] = solver5;
      ManyCore<Solver<ClausalDataStructureWL>> manyCore0 = new ManyCore<Solver<ClausalDataStructureWL>>(solverArray0);
      assertNotNull(manyCore0);
      assertEquals(5, solverArray0.length);
      
      IVecInt iVecInt0 = manyCore0.unsatExplanation();
      assertNull(iVecInt0);
      assertEquals(5, solverArray0.length);
      
      int int0 = solver3.nextFreeVarId(true);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(solver3, solver1);
      assertNotSame(solver3, solver4);
      assertNotSame(solver3, solver5);
      assertNotSame(solver3, solver2);
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver3.equals((Object)solver1));
      assertFalse(solver3.equals((Object)solver4));
      assertFalse(solver3.equals((Object)solver5));
      assertFalse(solver3.equals((Object)solver2));
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(11, solver3.newVar());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(10, solver3.nVars());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isVerbose());
      assertEquals(10, solver3.realNumberOfVariables());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertEquals(9, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(10, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(9, int0);
      
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createUnregisteredCardinalityConstraint((IVecInt) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(0.0, (-1.0), 100.0, 47);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals((-1.0), searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertNotNull(basicLauncher0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-29);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)48;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-72), (byte) (-93), (byte) (-24), (byte) (-16), (byte) (-29), (byte)84, (byte)5, (byte)1, (byte)48}, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, (RestartStrategy) null, basicLauncher0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals((-1.0), searchParams0.getClaDecay(), 0.01);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        solver0.removeSubsumedConstr((IConstr) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Reference to the constraint to remove needed!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      varOrderHeap0.varDecayActivity();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      solver0.setTimeout(0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      activeLearning0.init();
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      solver1.unset(0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      ILits iLits0 = solver1.getVocabulary();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(5, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, iLits0.realnVars());
      assertEquals(5, iLits0.nVars());
      assertNotNull(iLits0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      assertEquals(0, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertNotNull(solver2);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "/MMX?~);![BL n_ ";
      stringArray0[3] = ".gz";
      stringArray0[4] = "NZ9qxF";
      stringArray0[5] = ",47fI$#nf;e]Ml9,n";
      stringArray0[6] = "org.sat4j.minisat.core.Solver$2";
      stringArray0[7] = "";
      stringArray0[8] = "Y0{";
      ManyCore<Solver<CardinalityDataStructure>> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<Solver<CardinalityDataStructure>>(aSolverFactory0, true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-3958.9466686), 0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertNotNull(solver1);
      
      int int0 = solver1.currentDecisionLevel();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, int0);
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertFalse(miniSATLearning1.equals((Object)miniSATLearning0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertNotNull(miniSATLearning1);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertNotNull(cardinalityDataStructureYanMin1);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(5, solver2.nVars());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(solver2);
      
      RestartStrategy restartStrategy0 = solver1.getRestartStrategy();
      assertNotSame(solver1, solver2);
      assertFalse(solver1.equals((Object)solver2));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.nVars());
      assertNull(restartStrategy0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(0);
      assertEquals(0, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertNotNull(clausalDataStructureWL1);
      
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL1, randomWalkDecorator0, (RestartStrategy) null);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.nVars());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(solver3);
      
      Solver<ClausalDataStructureWL> solver4 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, mUSLauncher0);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver4.equals((Object)solver3));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(1, solver4.nVars());
      assertEquals(2, solver4.newVar());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(0, solver4.nConstraints());
      assertEquals(1, solver4.realNumberOfVariables());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(solver4);
      
      Constr constr0 = solver4.propagate();
      assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
      assertNotSame(solver4, solver3);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver4.equals((Object)solver3));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(4, solver4.newVar());
      assertEquals(3, solver4.realNumberOfVariables());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(0, solver4.nConstraints());
      assertEquals(3, solver4.nVars());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNull(constr0);
      
      RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator1);
      
      Solver<CardinalityDataStructureYanMin> solver5 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning1, cardinalityDataStructureYanMin1, searchParams0, randomWalkDecorator1, (RestartStrategy) null);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertFalse(miniSATLearning1.equals((Object)miniSATLearning0));
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(2147483, solver5.getTimeout());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(1, solver5.realNumberOfVariables());
      assertFalse(solver5.isVerbose());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(2, solver5.newVar());
      assertEquals(1, solver5.nVars());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(0, solver5.nConstraints());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertNotNull(solver5);
      
      IVecInt iVecInt0 = solver5.createBlockingClauseForCurrentModel();
      assertNotSame(randomWalkDecorator1, randomWalkDecorator0);
      assertNotSame(miniSATLearning1, miniSATLearning0);
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertFalse(miniSATLearning1.equals((Object)miniSATLearning0));
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(2147483, solver5.getTimeout());
      assertEquals(0, solver5.currentDecisionLevel());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertEquals(0, solver5.decisionLevel());
      assertFalse(solver5.isVerbose());
      assertEquals(0, solver5.getPropagationLevel());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(0, solver5.nConstraints());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals(3, solver5.nVars());
      assertEquals(3, solver5.realNumberOfVariables());
      assertEquals(4, solver5.newVar());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        solver3.addAtMost(iVecInt0, 1838);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 1436.1340165);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1436.1340165, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-1.0), 1436.1340165, 1436.1340165, 0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1436.1340165, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1436.1340165, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertNotNull(glucose21Restarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, randomWalkDecorator0, glucose21Restarts0, (ILogAble) null);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1436.1340165, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1436.1340165, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1436.1340165, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      Glucose21Restarts glucose21Restarts1 = (Glucose21Restarts)solver0.getRestartStrategy();
      assertSame(glucose21Restarts0, glucose21Restarts1);
      assertSame(glucose21Restarts1, glucose21Restarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1436.1340165, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1436.1340165, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1436.1340165, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertNotNull(glucose21Restarts1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, randomWalkDecorator0, glucose21Restarts1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1436.1340165, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1436.1340165, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1436.1340165, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertNotNull(solver1);
      
      int[] intArray0 = solver1.findModel();
      assertSame(glucose21Restarts0, glucose21Restarts1);
      assertSame(glucose21Restarts1, glucose21Restarts0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1436.1340165, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1436.1340165, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1436.1340165, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" 8lEE$j");
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mixedDataStructureDanielHT0;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(printWriter0);
      assertEquals(4, objectArray0.length);
      
      solver0.printStat(printWriter0, "Call the primeImplicant method first!!!");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals(4, objectArray0.length);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(7);
      assertEquals(7, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      solver0.setExpectedNumberOfClauses(7);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      pipedOutputStream0.flush();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructure>((-1323));
      assertEquals((-1323), percentLengthLearning2.getLimit());
      assertNotNull(percentLengthLearning2);
      
      percentLengthLearning2.setVarActivityListener(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-1323), percentLengthLearning2.getLimit());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning2, cardinalityDataStructure0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-1323), percentLengthLearning2.getLimit());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertNotNull(solver1);
      
      solver1.printStat(printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-1323), percentLengthLearning2.getLimit());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(4, objectArray0.length);
      
      int int0 = solver1.nVars();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-1323), percentLengthLearning2.getLimit());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      varOrderHeap0.init();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      boolean boolean0 = solver0.isSatisfiable(true);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertTrue(boolean0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, lubyRestarts0, (ILogAble) null);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams1);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(solver2);
      
      int[] intArray0 = new int[0];
      MinWatchCard minWatchCard0 = (MinWatchCard)solver2.addAtMostOnTheFly(intArray0, 128);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(searchParams0, searchParams1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertEquals((-128), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, minWatchCard0.size());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(minWatchCard0);
      assertEquals(0, intArray0.length);
      
      solver1.modelFound();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(searchParams0, searchParams1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertNotNull(lubyRestarts1);
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, tabuListDecorator0, lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertNotNull(solver3);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertNotNull(cardinalityDataStructureYanMin1);
      
      Solver<CardinalityDataStructureYanMin> solver4 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin1, searchParams1, tabuListDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(solver4.equals((Object)solver2));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(0, solver4.nConstraints());
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(1, solver4.nVars());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(2, solver4.newVar());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(solver4);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 32;
      intArray1[1] = 128;
      intArray1[1] = 128;
      intArray1[3] = 32;
      intArray1[4] = 128;
      intArray1[5] = 128;
      VecInt vecInt0 = new VecInt(intArray1);
      assertArrayEquals(new int[] {32, 128, 0, 32, 128, 128}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt0.isEmpty());
      assertEquals(128, vecInt0.last());
      assertEquals(6, vecInt0.size());
      assertNotNull(vecInt0);
      assertEquals(6, intArray1.length);
      
      VecInt vecInt1 = (VecInt)vecInt0.pop();
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {32, 128, 0, 32, 128, 128}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(128, vecInt0.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(128, vecInt1.last());
      assertEquals(5, vecInt1.size());
      assertNotNull(vecInt1);
      assertEquals(6, intArray1.length);
      
      // Undeclared exception!
      try { 
        solver4.dimacs2internal(vecInt1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1445.87637);
      assertEquals(1445.87637, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1927));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(iLogAble0);
      
      Solver<ClausalDataStructureWL>[] solverArray0 = (Solver<ClausalDataStructureWL>[]) Array.newInstance(Solver.class, 5);
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      solverArray0[0] = solver1;
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, (SearchParams) null, randomWalkDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver2.equals((Object)solver1));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(solver2);
      
      solverArray0[1] = solver2;
      solver2.setLogPrefix("Expensive reason simplification specific for WL data structure");
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(solver2, solver1);
      assertFalse(solver2.equals((Object)solver1));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals("Expensive reason simplification specific for WL data structure", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, (SearchParams) null, tabuListDecorator0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver1));
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(8, solver3.newVar());
      assertEquals(7, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.nConstraints());
      assertEquals(7, solver3.nVars());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver3);
      
      solverArray0[2] = solver3;
      Solver<ClausalDataStructureWL> solver4 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, tabuListDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver4.equals((Object)solver3));
      assertFalse(solver4.equals((Object)solver2));
      assertFalse(solver4.equals((Object)solver1));
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(10, solver4.newVar());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(9, solver4.realNumberOfVariables());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isVerbose());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(9, solver4.nVars());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals("c ", solver4.getLogPrefix());
      assertNotNull(solver4);
      
      solverArray0[3] = solver4;
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertNotNull(clausalDataStructureWL1);
      
      SearchParams searchParams0 = new SearchParams(2277.544, 0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(2277.544, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<ClausalDataStructureWL> solver5 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL1, searchParams0, randomWalkDecorator0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver5.equals((Object)solver3));
      assertFalse(solver5.equals((Object)solver2));
      assertFalse(solver5.equals((Object)solver1));
      assertFalse(solver5.equals((Object)solver4));
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(2277.544, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(0, solver5.currentDecisionLevel());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(1, solver5.realNumberOfVariables());
      assertFalse(solver5.isVerbose());
      assertEquals(2, solver5.newVar());
      assertEquals(1, solver5.nVars());
      assertEquals(2147483, solver5.getTimeout());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(0, solver5.nConstraints());
      assertEquals("c ", solver5.getLogPrefix());
      assertNotNull(solver5);
      
      solverArray0[4] = solver5;
      ManyCore<Solver<ClausalDataStructureWL>> manyCore0 = new ManyCore<Solver<ClausalDataStructureWL>>(solverArray0);
      assertNotNull(manyCore0);
      assertEquals(5, solverArray0.length);
      
      IVecInt iVecInt0 = manyCore0.unsatExplanation();
      assertNull(iVecInt0);
      assertEquals(5, solverArray0.length);
      
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createUnregisteredCardinalityConstraint((IVecInt) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(409);
      assertEquals(409, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(409, (-737.923), 409, (-2067));
      assertEquals((-737.923), searchParams0.getClaDecay(), 0.01);
      assertEquals(409.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(409.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2067), searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, naturalStaticOrder0, lubyRestarts0, mUSLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-737.923), searchParams0.getClaDecay(), 0.01);
      assertEquals(409.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(409.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2067), searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      NaturalStaticOrder naturalStaticOrder1 = (NaturalStaticOrder)solver0.getOrder();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(naturalStaticOrder1, naturalStaticOrder0);
      assertEquals((-737.923), searchParams0.getClaDecay(), 0.01);
      assertEquals(409.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(409.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2067), searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertNotNull(naturalStaticOrder1);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder1, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(409, fixedLengthLearning0.getMaxLength());
      assertEquals((-737.923), searchParams0.getClaDecay(), 0.01);
      assertEquals(409.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(409.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2067), searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertNotNull(solver1);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertNotNull(solver2);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver2, false);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertNotNull(maxSatDecorator0);
      
      IVecInt iVecInt0 = maxSatDecorator0.unsatExplanation();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(naturalStaticOrder0, naturalStaticOrder1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertEquals(5, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        solver2.fromLastDecisionLevel((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      String string0 = activeLearning0.toString();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("Limit learning to clauses containing active literals (95.0%)", string0);
      assertNotNull(string0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[1];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(1, intArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      assertEquals(1, intArray0.length);
      
      VecInt vecInt0 = new VecInt(32, 32);
      assertEquals(32, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(32, vecInt0.size());
      assertNotNull(vecInt0);
      
      int[] intArray1 = solver0.findModel((IVecInt) vecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {32}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(34, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(33, solver0.nVars());
      assertEquals(33, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(32, vecInt0.size());
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>((-1498.2106871860374));
      assertEquals(0, activeLearning1.getLimit());
      assertEquals((-1498.2106871860374), activeLearning1.getActivityPercent(), 0.01);
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(32, (-1498.2106871860374), 32, (-2253));
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals((-1498.2106871860374), activeLearning1.getActivityPercent(), 0.01);
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertNotNull(solver1);
      assertEquals(1, intArray0.length);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertNotNull(solver2);
      assertEquals(1, intArray0.length);
      
      int[] intArray2 = solver2.findModel();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray0, intArray2);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        solver2.cancel();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" 8lEE$j");
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mixedDataStructureDanielHT0;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " 8lEE$j", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(printWriter0);
      assertEquals(4, objectArray0.length);
      
      solver0.printStat(printWriter0, "Call the primeImplicant method first!!!");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(4, objectArray0.length);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(7);
      assertEquals(7, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, varOrderHeap0, (RestartStrategy) null);
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, percentLengthLearning0.getLimit());
      assertNotNull(solver1);
      
      Constr constr0 = solver1.propagate();
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, percentLengthLearning0.getLimit());
      assertNull(constr0);
      
      solver1.setUnitClauseProvider((UnitClauseProvider) null);
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, percentLengthLearning0.getLimit());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertNotNull(solver2);
      
      boolean boolean0 = solver2.enqueue(7);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 500);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      levelBasedVarOrderHeap0.updateVarAtDecisionLevel(500);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertNotNull(solver1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 500;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {500}, intArray0);
      assertEquals(500, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt0 = vecInt0.push(500);
      assertSame(iVecInt0, vecInt0);
      assertSame(vecInt0, iVecInt0);
      assertArrayEquals(new int[] {500}, intArray0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertEquals(500, iVecInt0.last());
      assertEquals(500, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertNotNull(iVecInt0);
      assertEquals(1, intArray0.length);
      
      try { 
        solver1.addExactly(iVecInt0, 43);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0, (-1948));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertNotNull(varOrderHeap1);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertNotNull(miniSATRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, miniSATRestarts0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertNotNull(solver0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertNotNull(searchParams1);
      
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>((ASolverFactory<Solver<CardinalityDataStructure>>) null);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertNotNull(basicLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams1, varOrderHeap0, miniSATRestarts0, basicLauncher0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(7, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.nVars());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertNotNull(solver1);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      cardinalityDataStructure0.setUnitPropagationListener(solver0);
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver1);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      
      SearchParams searchParams2 = new SearchParams();
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertEquals(100, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams2);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1948));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-1948), lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-1948));
      assertEquals((-1948), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams1, pureOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(searchParams1.equals((Object)searchParams2));
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-1948), lubyRestarts0.getFactor());
      assertEquals((-1948), fixedLengthLearning0.getMaxLength());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(11, solver0.nVars());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(solver2);
      
      // Undeclared exception!
      try { 
        solver2.reduceDB();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      // Undeclared exception!
      try { 
        solver1.dimacs2internal((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder((-301));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(eMARestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, pureOrder0, eMARestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1.1);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(1.1, 0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.1, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 2126);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(tabuListDecorator0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, eMARestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.1, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertNotNull(solver1);
      
      VecInt vecInt0 = (VecInt)solver1.decisions;
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      CBClause cBClause0 = CBClause.brandNewClause(solver0, lits0, vecInt0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.1, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0.0, cBClause0.getActivity(), 0.01);
      assertFalse(cBClause0.learnt());
      assertFalse(cBClause0.simplify());
      assertEquals(0, cBClause0.size());
      assertNotNull(cBClause0);
      
      Pair pair0 = new Pair();
      assertEquals(0, pair0.getBacktrackLevel());
      assertNotNull(pair0);
      
      // Undeclared exception!
      try { 
        solver0.analyze(cBClause0, pair0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(398);
      assertEquals(398, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(398, 398, 1.5, 671);
      assertEquals(398.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(398.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(671, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(eMARestarts0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, eMARestarts0);
      assertEquals(398, percentLengthLearning0.getLimit());
      assertEquals(398.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(398.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(671, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 398;
      // Undeclared exception!
      try { 
        solver0.addAtMostOnTheFly(intArray0, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 796
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      solver0.sortOnActivity();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(32);
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(<xD");
      assertFalse(boolean0);
      
      VecInt vecInt0 = new VecInt(6, 48);
      assertFalse(vecInt0.isEmpty());
      assertEquals(48, vecInt0.last());
      assertEquals(6, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push((-1371));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.size());
      assertEquals((-1371), vecInt0.last());
      assertEquals(7, iVecInt0.size());
      assertEquals((-1371), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      MinWatchCard minWatchCard0 = (MinWatchCard)solver1.addBlockingClause(iVecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(1372, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1372, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1373, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.size());
      assertEquals((-1371), vecInt0.last());
      assertEquals(7, iVecInt0.size());
      assertEquals((-1371), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(7, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertNotNull(minWatchCard0);
      
      int int0 = solver1.newVar();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1375, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(1375, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1376, solver1.newVar());
      assertEquals(1, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1374, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 500);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = (LevelBasedVarOrderHeap)solver0.getOrder();
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, (SearchParams) null, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertNotNull(solver1);
      
      solver1.setUnitClauseProvider((UnitClauseProvider) null);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertNotNull(clauseOnlyLearning1);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(clauseOnlyLearning1, cardinalityDataStructure0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(solver2);
      
      boolean boolean0 = solver2.enqueue(50);
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>((-1000.940498));
      assertEquals((-1000.940498), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      PureOrder pureOrder0 = new PureOrder(2193);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(2193, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(2193, pureOrder0.getPeriod());
      assertNotNull(tabuListDecorator0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertNotNull(noRestarts0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertNotNull(basicLauncher0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, tabuListDecorator0, noRestarts0, basicLauncher0);
      assertEquals((-1000.940498), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(2193, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, (SearchParams) null, naturalStaticOrder0, noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertNotNull(solver1);
      
      ISimplifier iSimplifier0 = solver1.EXPENSIVE_SIMPLIFICATION_WLONLY;
      assertNotNull(iSimplifier0);
      
      solver0.setSimplifier(iSimplifier0);
      assertEquals((-1000.940498), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(2193, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(947);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(947, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertNotNull(lubyRestarts0);
      
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap1, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(947, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(947, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertNotNull(iLogAble0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(947, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(solver1);
      
      boolean boolean0 = solver1.isNeedToReduceDB();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(947, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      int int0 = (-1242);
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((-1242));
      assertEquals((-1242), percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics1 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics1);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics1, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, noRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        solver0.assume(4864);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4865
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder((-301));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-301), pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, pureOrder0, eMARestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      double double0 = 1.1;
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1.1);
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(1.1, 0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.1, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      VecInt vecInt0 = new VecInt(4046, (-2461));
      assertEquals((-2461), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4046, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals((-2461), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4046, vecInt0.size());
      assertEquals(4046, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-2461), iVecInt0.last());
      assertNotNull(iVecInt0);
      
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(iVecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertEquals((-2461), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4046, vecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.learnt());
      assertEquals(4046, constr0.size());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertNotNull(constr0);
      
      searchParams0.setInitConflictBound((-2461));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2461), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.1, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, eMARestarts0);
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2461), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.1, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(solver1);
      
      long long0 = solver1.getTimeoutMs();
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2461), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.1, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2147483647L, long0);
      
      solver1.claBumpActivity(constr0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(5, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2461), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.1, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2461), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4046, vecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.learnt());
      assertEquals(4046, constr0.size());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals(1.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMin>((-2461));
      assertEquals(0, activeLearning1.getLimit());
      assertEquals((-2461.0), activeLearning1.getActivityPercent(), 0.01);
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      // Undeclared exception!
      try { 
        solver0.fromLastDecisionLevel(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1231
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertNotNull(glucose21Restarts0);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(miniSATRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      solver0.setTimeoutOnConflicts(5);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(5, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      
      SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
      solver0.setSimplifier(simplificationType0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(5, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) miniSATRestarts0, learnedConstraintsEvaluationType0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(5, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      
      solver0.setLearningStrategy(clauseOnlyLearning0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(5, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      
      boolean boolean0 = solver0.isNeedToReduceDB();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(11, solver0.nVars());
      assertEquals(5, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(boolean0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = null;
      try {
        solver1 = new Solver<CardinalityDataStructureYanMax>((LearningStrategy<CardinalityDataStructureYanMax>) null, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, miniSATRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" 8lEE$j");
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mixedDataStructureDanielHT0;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, " 8lEE$j", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(printWriter0);
      assertEquals(4, objectArray0.length);
      
      solver0.printStat(printWriter0, "Call the primeImplicant method first!!!");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(4, objectArray0.length);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(7);
      assertEquals(7, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, percentLengthLearning0.getLimit());
      assertNotNull(solver1);
      
      Constr constr0 = solver1.propagate();
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, percentLengthLearning0.getLimit());
      assertNull(constr0);
      
      // Undeclared exception!
      try { 
        solver1.addAtMost((IVecInt) null, 1114);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(30);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(miniSATRestarts0);
      
      levelBasedVarOrderHeap0.setVarDecay(30);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning1, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning1, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      // Undeclared exception!
      try { 
        solver1.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1445.87637);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1445.87637, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = null;
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1927));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(iLogAble0);
      
      Solver<ClausalDataStructureWL>[] solverArray0 = (Solver<ClausalDataStructureWL>[]) Array.newInstance(Solver.class, 5);
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertNotNull(solver1);
      
      solverArray0[0] = solver1;
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, (SearchParams) null, randomWalkDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver2.equals((Object)solver1));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(solver2);
      
      solverArray0[1] = solver2;
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, (SearchParams) null, tabuListDecorator0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(solver3.equals((Object)solver1));
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(5, solver3.nVars());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(6, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver3);
      
      solverArray0[2] = solver3;
      Solver<ClausalDataStructureWL> solver4 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, tabuListDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver4.equals((Object)solver2));
      assertFalse(solver4.equals((Object)solver1));
      assertFalse(solver4.equals((Object)solver3));
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver4.nConstraints());
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isSolverKeptHot());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.decisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(7, solver4.nVars());
      assertEquals(7, solver4.realNumberOfVariables());
      assertEquals(8, solver4.newVar());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertNotNull(solver4);
      
      solverArray0[3] = solver4;
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertNotNull(clausalDataStructureWL1);
      
      SearchParams searchParams1 = new SearchParams(2277.544, 0);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(2277.544, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertNotNull(searchParams1);
      
      Solver<ClausalDataStructureWL> solver5 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL1, searchParams1, randomWalkDecorator0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver5.equals((Object)solver3));
      assertFalse(solver5.equals((Object)solver1));
      assertFalse(solver5.equals((Object)solver2));
      assertFalse(solver5.equals((Object)solver4));
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-1927), lubyRestarts0.getFactor());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(2277.544, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, solver5.realNumberOfVariables());
      assertEquals(0, solver5.currentDecisionLevel());
      assertEquals(0, solver5.nConstraints());
      assertFalse(solver5.isVerbose());
      assertEquals(0, solver5.getPropagationLevel());
      assertEquals(2, solver5.newVar());
      assertEquals(1, solver5.nVars());
      assertFalse(solver5.isSolverKeptHot());
      assertEquals(0, solver5.decisionLevel());
      assertEquals(2147483, solver5.getTimeout());
      assertFalse(solver5.isDBSimplificationAllowed());
      assertEquals("c ", solver5.getLogPrefix());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver5);
      
      solverArray0[4] = solver5;
      ManyCore<Solver<ClausalDataStructureWL>> manyCore0 = new ManyCore<Solver<ClausalDataStructureWL>>(solverArray0);
      assertNotNull(manyCore0);
      assertEquals(5, solverArray0.length);
      
      IVecInt iVecInt0 = manyCore0.unsatExplanation();
      assertNull(iVecInt0);
      assertEquals(5, solverArray0.length);
      
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.createUnregisteredCardinalityConstraint((IVecInt) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL1 = new MixedDataStructureSingleWL();
      assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
      assertNotNull(mixedDataStructureSingleWL1);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>((ASolverFactory<Solver<CardinalityDataStructure>>) null);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertNotNull(basicLauncher0);
      
      SearchParams searchParams0 = new SearchParams((-3002), 7);
      assertEquals((-3002.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-3002.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals((-3002.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, iLogAble0);
      assertFalse(mixedDataStructureSingleWL0.equals((Object)mixedDataStructureSingleWL1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals((-3002.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertNotNull(solver1);
      
      RandomWalkDecorator randomWalkDecorator1 = (RandomWalkDecorator)solver1.getOrder();
      assertNotSame(mixedDataStructureSingleWL0, mixedDataStructureSingleWL1);
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertFalse(mixedDataStructureSingleWL0.equals((Object)mixedDataStructureSingleWL1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals((-3002.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator1);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator1, (RestartStrategy) null);
      assertFalse(mixedDataStructureSingleWL0.equals((Object)mixedDataStructureSingleWL1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals((-3002.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.nVars());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertNotNull(solver2);
      
      solver2.stop();
      assertNotSame(mixedDataStructureSingleWL0, mixedDataStructureSingleWL1);
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertFalse(mixedDataStructureSingleWL0.equals((Object)mixedDataStructureSingleWL1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals((-3002.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(11, solver0.nVars());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(8, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      
      solver2.setTimeoutOnConflicts((-1));
      assertNotSame(mixedDataStructureSingleWL0, mixedDataStructureSingleWL1);
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertFalse(mixedDataStructureSingleWL0.equals((Object)mixedDataStructureSingleWL1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals((-3002.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(14, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(9, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(10, solver1.newVar());
      assertEquals(9, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals((-1), solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" 8lEE$j");
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) mixedDataStructureDanielHT0;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(printWriter0);
      assertEquals(4, objectArray0.length);
      
      solver0.printStat(printWriter0, "Call the primeImplicant method first!!!");
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals(4, objectArray0.length);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(7);
      assertEquals(7, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, percentLengthLearning0.getLimit());
      assertNotNull(solver1);
      
      Constr constr0 = solver1.propagate();
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, percentLengthLearning0.getLimit());
      assertNull(constr0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      RestartStrategy restartStrategy0 = null;
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertFalse(miniSATLearning1.equals((Object)miniSATLearning0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertNotNull(miniSATLearning1);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertNotNull(cardinalityDataStructureYanMin1);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      // Undeclared exception!
      try { 
        solver0.forget((-28));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -56
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      varOrderHeap0.init();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      boolean boolean0 = solver0.isSatisfiable(true);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertTrue(boolean0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning1, mixedDataStructureSingleWL0, tabuListDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertNotNull(solver1);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning2 = new PercentLengthLearning<MixedDataStructureSingleWL>(68);
      assertFalse(percentLengthLearning2.equals((Object)percentLengthLearning1));
      assertEquals(68, percentLengthLearning2.getLimit());
      assertNotNull(percentLengthLearning2);
      
      Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning2, mixedDataStructureSingleWL0, tabuListDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(percentLengthLearning2.equals((Object)percentLengthLearning1));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(68, percentLengthLearning2.getLimit());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertNotNull(solver2);
      
      // Undeclared exception!
      try { 
        solver1.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap1, eMARestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver0.fixedSize(3383);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(learnedConstraintsDeletionStrategy0);
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap1, eMARestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertNotNull(solver1);
      
      boolean boolean0 = solver1.isSatisfiable(iVecInt0, false);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(eMARestarts0.shouldRestart());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>((-819));
      assertEquals((-819), percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-819), 1.0E100, 1.0E100, (-819));
      assertEquals(1.0E100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E100, searchParams0.getClaDecay(), 0.01);
      assertEquals((-819), searchParams0.getInitConflictBound());
      assertEquals((-819.0), searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(1.0E100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E100, searchParams0.getClaDecay(), 0.01);
      assertEquals((-819), searchParams0.getInitConflictBound());
      assertEquals((-819.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) null, learnedConstraintsEvaluationType0);
      assertEquals(1.0E100, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E100, searchParams0.getClaDecay(), 0.01);
      assertEquals((-819), searchParams0.getInitConflictBound());
      assertEquals((-819.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(32, 7);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder(137);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, noRestarts0, mUSLauncher0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      solver0.setTimeout(32);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      PureOrder pureOrder1 = new PureOrder();
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(20, pureOrder1.getPeriod());
      assertNotNull(pureOrder1);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(eMARestarts0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      String string0 = percentLengthLearning0.toString();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Limit learning to clauses of size smaller or equal to 10% of the number of variables", string0);
      assertNotNull(string0);
      
      SearchParams searchParams1 = new SearchParams(137, 32, 32, 47);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(47, searchParams1.getInitConflictBound());
      assertEquals(137.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams1);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams1, pureOrder0, noRestarts0);
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(47, searchParams1.getInitConflictBound());
      assertEquals(137.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertNotNull(solver1);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(maxSatDecorator0);
      
      IVecInt iVecInt0 = maxSatDecorator0.unsatExplanation();
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(pureOrder0, pureOrder1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals(32, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        solver1.addExactly((IVecInt) null, 1878);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-562));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-562), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator((VarOrderHeap) null, 328.18664871624);
      assertEquals(328.18664871624, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertNotNull(glucose21Restarts0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.RandomWalkDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 500);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 318;
      intArray0[1] = 500;
      intArray0[2] = 500;
      intArray0[3] = 128;
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertNotNull(fixedLengthLearning1);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning1, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertNotNull(solver0);
      
      solver0.setKeepSolverHot(true);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertTrue(solver0.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder(1375);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1375, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1375, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertNotNull(noRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, noRestarts0, mUSLauncher0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1375, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1375, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertNotNull(searchParams1);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning2 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(10, percentLengthLearning2.getLimit());
      assertNotNull(percentLengthLearning2);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(pureOrder0, 558.839454841734);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1375, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(558.839454841734, randomWalkDecorator1.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator1);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning2, mixedDataStructureDanielWLConciseBinary0, pureOrder0, noRestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1375, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning2.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertNotNull(solver1);
      
      NoRestarts noRestarts1 = (NoRestarts)solver1.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1375, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning2.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertNotNull(noRestarts1);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(0.0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, noRestarts1);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1375, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning2.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertNotNull(solver2);
      
      boolean boolean0 = solver2.isSolverKeptHot();
      assertSame(searchParams0, searchParams1);
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1375, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning2.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertFalse(boolean0);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning1 = new ActiveLearning<ClausalDataStructureWL>(0.0);
      assertEquals(0.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertNotNull(activeLearning1);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(activeLearning1, clausalDataStructureWL0, searchParams0, pureOrder0, noRestarts1);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1375, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(10, percentLengthLearning2.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(9, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(10, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(9, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertNotNull(solver3);
      
      // Undeclared exception!
      try { 
        solver0.truthValue(1375);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2750
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1498.2106871860374));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[1];
      int int0 = 65535;
      intArray0[0] = 65535;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {65535}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(1, intArray0.length);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(65535);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(65535, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {65535}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(65535, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {65535}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(65535, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertNotNull(iVecInt0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        solver0.findModel(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65535
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertNotNull(noRestarts0);
      
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, pureOrder0, noRestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(1);
      assertEquals(1, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, pureOrder0, noRestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertNotNull(solver1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        solver1.backtrack(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder((-301));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, pureOrder0, eMARestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1.1);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>((-301));
      assertEquals((-301), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, pureOrder0, eMARestarts0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      SearchParams searchParams0 = solver1.getSearchParams();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, eMARestarts0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-301), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertNotNull(solver2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver2);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-301), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.nVars());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, iVecInt0.size());
      assertEquals(2, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(iVecInt0);
      assertTrue(constr0.learnt());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr0.simplify());
      assertEquals(2, constr0.size());
      assertFalse(constr0.locked());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.isSatisfied());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-301), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(10, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(9, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(5, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertNotNull(constr0);
      
      Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, eMARestarts0);
      assertFalse(solver3.equals((Object)solver2));
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(7, solver3.nVars());
      assertEquals(7, solver3.realNumberOfVariables());
      assertEquals(8, solver3.newVar());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-301), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(11, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(11, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(12, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(solver3);
      
      long long0 = solver3.getTimeoutMs();
      assertNotSame(solver3, solver2);
      assertFalse(solver3.equals((Object)solver2));
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(9, solver3.realNumberOfVariables());
      assertEquals(10, solver3.newVar());
      assertEquals(9, solver3.nVars());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-301), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(13, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(13, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(14, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2147483647L, long0);
      
      solver3.claBumpActivity(constr0);
      assertNotSame(solver2, solver3);
      assertNotSame(solver3, solver2);
      assertFalse(solver2.equals((Object)solver3));
      assertFalse(solver3.equals((Object)solver2));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-301), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(15, solver1.nVars());
      assertEquals(15, solver1.realNumberOfVariables());
      assertEquals(16, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(13, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(13, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(14, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(constr0.learnt());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr0.simplify());
      assertEquals(2, constr0.size());
      assertFalse(constr0.locked());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.isSatisfied());
      assertEquals(1.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(12, solver3.nVars());
      assertEquals(12, solver3.realNumberOfVariables());
      assertEquals(13, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isSolverKeptHot());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
      assertEquals(1.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Set<Integer> set0 = solver0.fromLastDecisionLevel(iVecInt0);
      assertNotSame(solver2, solver3);
      assertFalse(solver2.equals((Object)solver3));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-301), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(17, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(18, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(17, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(15, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(15, solver2.realNumberOfVariables());
      assertEquals(16, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains((-301)));
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertNotNull(fixedPeriodRestarts0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertNotNull(basicLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, basicLauncher0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      miniSATLearning0.setSolver(solver0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertNotNull(solver1);
      
      boolean boolean0 = solver1.simplifyDB();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(solver1, solver0);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(8, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertTrue(boolean0);
      
      Solver solver2 = (Solver)solver1.getSolvingEngine();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(solver1, solver0);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(11, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(12, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(10, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(11, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(10, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertNotNull(solver2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-3958.9466686), 0);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertNull(restartStrategy0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      // Undeclared exception!
      try { 
        solver1.findModel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(0.0, (-1.0), 100.0, 47);
      assertEquals((-1.0), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertNotNull(dataOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      pipedOutputStream0.flush();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(500);
      assertEquals(500, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(500, fixedLengthLearning0.getMaxLength());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      solver0.printStat((PrintWriter) mockPrintWriter0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(500, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      // Undeclared exception!
      try { 
        solver0.forget(27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      solver0.sortOnActivity();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      VecInt vecInt0 = new VecInt(6, 48);
      assertEquals(48, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.size());
      assertNotNull(vecInt0);
      
      SearchParams searchParams0 = new SearchParams(4130);
      assertEquals(4130, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(32);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4130, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertNotNull(solver2);
      
      int[] intArray0 = solver2.findModel((IVecInt) vecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {48}, intArray0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(48, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.size());
      assertEquals(4130, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(32.0, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(49, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(50, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(49, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(3887);
      assertEquals(3887, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = null;
      try {
        solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, (MixedDataStructureDanielWLConciseBinary) null, levelBasedVarOrderHeap0, (RestartStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertNotNull(phaseCachingAutoEraseStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseCachingAutoEraseStrategy0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(eMARestarts0);
      
      int int0 = 7;
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>(7);
      assertEquals(7, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertNotNull(mixedDataStructureDanielWLConciseBinary1);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap1, eMARestarts0);
      assertFalse(mixedDataStructureDanielWLConciseBinary0.equals((Object)mixedDataStructureDanielWLConciseBinary1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        solver0.forget(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>((-3737));
      assertEquals((-3737), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 245;
      intArray0[1] = (-3737);
      intArray0[2] = (-3737);
      intArray0[3] = (-3737);
      intArray0[4] = 102;
      intArray0[5] = (-3737);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {245, (-3737), (-3737), (-3737), 102, (-3737)}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(6, intArray0.length);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertNotNull(noRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, subsetVarOrder0, noRestarts0);
      assertArrayEquals(new int[] {245, (-3737), (-3737), (-3737), 102, (-3737)}, intArray0);
      assertEquals((-3737), fixedLengthLearning0.getMaxLength());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      assertEquals(6, intArray0.length);
      
      // Undeclared exception!
      try { 
        solver0.cancel();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      System.setCurrentTimeMillis(1452L);
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      int int0 = (-6079);
      SearchParams searchParams0 = new SearchParams(1452L, 1.0E-20, 237.993537, (-6079));
      assertEquals(1452.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals((-6079), searchParams0.getInitConflictBound());
      assertEquals(237.993537, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, eMARestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1452.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals((-6079), searchParams0.getInitConflictBound());
      assertEquals(237.993537, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      eMARestarts0.reset();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      // Undeclared exception!
      try { 
        solver0.printStat((PrintWriter) null, "\"KzT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.SolverStats", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(2034.4, 2034.4, 2034.4, 5);
      assertEquals(2034.4, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(2034.4, searchParams0.getClaDecay(), 0.01);
      assertEquals(2034.4, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(5);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(5, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(5, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(5, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertNotNull(lubyRestarts1);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, lubyRestarts1, mUSLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(2034.4, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(2034.4, searchParams0.getClaDecay(), 0.01);
      assertEquals(2034.4, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(5, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      IConstr iConstr0 = solver1.addConstr((Constr) null);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertEquals(2034.4, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(2034.4, searchParams0.getClaDecay(), 0.01);
      assertEquals(2034.4, searchParams0.getVarDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(5, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, lubyRestarts1.getFactor());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.1);
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-2651);
      intArray0[1] = 2401;
      intArray0[2] = 232;
      intArray0[3] = 16;
      intArray0[4] = (-2404);
      intArray0[5] = 1000;
      intArray0[6] = 6;
      intArray0[7] = (-290);
      intArray0[8] = 2278;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {(-2651), 2401, 232, 16, (-2404), 1000, 6, (-290), 2278}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(9, intArray0.length);
      
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>((-1153));
      assertEquals((-1153), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(eMARestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, eMARestarts0, mUSLauncher0);
      assertArrayEquals(new int[] {(-2651), 2401, 232, 16, (-2404), 1000, 6, (-290), 2278}, intArray0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-1153), fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(solver0);
      assertEquals(9, intArray0.length);
      
      EMARestarts eMARestarts1 = (EMARestarts)solver0.getRestartStrategy();
      assertSame(eMARestarts0, eMARestarts1);
      assertSame(eMARestarts1, eMARestarts0);
      assertArrayEquals(new int[] {(-2651), 2401, 232, 16, (-2404), 1000, 6, (-290), 2278}, intArray0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-1153), fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(eMARestarts1);
      assertEquals(9, intArray0.length);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, subsetVarOrder0, eMARestarts1);
      assertArrayEquals(new int[] {(-2651), 2401, 232, 16, (-2404), 1000, 6, (-290), 2278}, intArray0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-1153), fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(solver1);
      assertEquals(9, intArray0.length);
      
      SolverStats solverStats0 = solver1.getStats();
      assertSame(eMARestarts0, eMARestarts1);
      assertSame(eMARestarts1, eMARestarts0);
      assertArrayEquals(new int[] {(-2651), 2401, 232, 16, (-2404), 1000, 6, (-290), 2278}, intArray0);
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-1153), fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertNotNull(solverStats0);
      assertEquals(9, intArray0.length);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, subsetVarOrder0, eMARestarts1);
      assertArrayEquals(new int[] {(-2651), 2401, 232, 16, (-2404), 1000, 6, (-290), 2278}, intArray0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-1153), fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(solver2);
      assertEquals(9, intArray0.length);
      
      SearchParams searchParams1 = solver2.getSearchParams();
      assertNotSame(searchParams0, searchParams1);
      assertSame(eMARestarts0, eMARestarts1);
      assertSame(eMARestarts1, eMARestarts0);
      assertNotSame(searchParams1, searchParams0);
      assertArrayEquals(new int[] {(-2651), 2401, 232, 16, (-2404), 1000, 6, (-290), 2278}, intArray0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-1153), fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertNotNull(searchParams1);
      assertEquals(9, intArray0.length);
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams1, subsetVarOrder0, eMARestarts0, mUSLauncher0);
      assertArrayEquals(new int[] {(-2651), 2401, 232, 16, (-2404), 1000, 6, (-290), 2278}, intArray0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-1153), fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(13, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(14, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(2, solver3.newVar());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertNotNull(solver3);
      assertEquals(9, intArray0.length);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      VecInt vecInt0 = (VecInt)solver2.trail;
      assertArrayEquals(new int[] {(-2651), 2401, 232, 16, (-2404), 1000, 6, (-290), 2278}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      assertEquals(9, intArray0.length);
      
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, (-290));
      assertArrayEquals(new int[] {(-2651), 2401, 232, 16, (-2404), 1000, 6, (-290), 2278}, intArray0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-1153), fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(16, solver0.newVar());
      assertEquals(15, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(7, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(8, solver2.newVar());
      assertEquals(7, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals((-290), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, atLeast0.size());
      assertNotNull(atLeast0);
      assertEquals(9, intArray0.length);
      
      AtLeast atLeast1 = (AtLeast)atLeast0.toConstraint();
      assertSame(atLeast1, atLeast0);
      assertNotSame(searchParams0, searchParams1);
      assertSame(eMARestarts0, eMARestarts1);
      assertSame(eMARestarts1, eMARestarts0);
      assertSame(atLeast0, atLeast1);
      assertArrayEquals(new int[] {(-2651), 2401, 232, 16, (-2404), 1000, 6, (-290), 2278}, intArray0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(atLeast1.simplify());
      assertTrue(atLeast1.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast1.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast1.getActivity(), 0.01);
      assertEquals(0, atLeast1.size());
      assertFalse(atLeast1.isSatisfied());
      assertFalse(atLeast1.learnt());
      assertTrue(atLeast1.locked());
      assertEquals((-290), atLeast1.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-1153), fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(17, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(18, solver0.newVar());
      assertEquals(17, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(9, solver2.nVars());
      assertEquals(10, solver2.newVar());
      assertEquals(9, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertEquals((-290), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, atLeast0.size());
      assertNotNull(atLeast1);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        solver3.record(atLeast1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1498.2106871860374));
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[1];
      int int0 = 65535;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals((-2), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertNotNull(iVecInt0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = solver0.findModel(iVecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-1), (-2)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals((-2), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>((-1498.2106871860374));
      assertEquals(0, activeLearning1.getLimit());
      assertEquals((-1498.2106871860374), activeLearning1.getActivityPercent(), 0.01);
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(32, (-1498.2106871860374), 32, (-2253));
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals((-1498.2106871860374), activeLearning1.getActivityPercent(), 0.01);
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertNotNull(solver1);
      assertEquals(1, intArray0.length);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      PureOrder pureOrder0 = new PureOrder(65535);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(65535, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      ILogAble iLogAble0 = solver1.out;
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(iLogAble0);
      assertEquals(1, intArray0.length);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams1 = new SearchParams(3056.33333792, 3);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(3, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(3056.33333792, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams1);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams1, pureOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(3, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(3056.33333792, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(65535, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(solver2);
      
      double[] doubleArray0 = solver2.getVariableHeuristics();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(searchParams1, searchParams0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(3, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(3056.33333792, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(65535, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      
      solver1.reset();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(searchParams0, searchParams1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals((-1498.2106871860374), activeLearning1.getActivityPercent(), 0.01);
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, intArray0.length);
      
      solver0.setSearchParams(searchParams1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(intArray0, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(3, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(3056.33333792, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, intArray0.length);
      
      Solver<CardinalityDataStructureYanMin> solver3 = null;
      try {
        solver3 = new Solver<CardinalityDataStructureYanMin>((LearningStrategy<CardinalityDataStructureYanMin>) null, cardinalityDataStructureYanMin0, searchParams1, subsetVarOrder0, lubyRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertNotNull(noRestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, pureOrder0, noRestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      int int0 = 0;
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertEquals(0, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, pureOrder0, noRestarts0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertNotNull(solver1);
      
      AgeLCDS ageLCDS0 = (AgeLCDS)solver1.age_based;
      assertNotNull(ageLCDS0);
      
      // Undeclared exception!
      try { 
        solver0.setLearnedConstraintsDeletionStrategy((LearnedConstraintsDeletionStrategy) ageLCDS0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, (-2370.1162819));
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2370.1162819), randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      RestartStrategy restartStrategy0 = null;
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2370.1162819), randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        solver0.unset((-972));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -972
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1498.2106871860374));
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[1];
      int int0 = 65535;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(1, intArray0.length);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-2), iVecInt0.last());
      assertNotNull(iVecInt0);
      assertEquals(1, intArray0.length);
      
      solver0.setExpectedNumberOfClauses(65535);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = solver0.findModel();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        solver0.primeImplicant(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-112));
      assertEquals((-112), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-112), (-1948));
      assertEquals((-112.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(miniSATRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, miniSATRestarts0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-112.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) miniSATRestarts0, learnedConstraintsEvaluationType0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-112.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      searchParams0.setConflictBoundIncFactor((-1948));
      assertEquals((-1948.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructure>();
      assertFalse(fixedLengthLearning1.equals((Object)fixedLengthLearning0));
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertNotNull(fixedLengthLearning1);
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertNotNull(varOrderHeap1);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure1, searchParams0, varOrderHeap1, miniSATRestarts0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(fixedLengthLearning0.equals((Object)fixedLengthLearning1));
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals((-112), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals((-1948.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(solver1);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver1);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertNotSame(fixedLengthLearning0, fixedLengthLearning1);
      assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(fixedLengthLearning0.equals((Object)fixedLengthLearning1));
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals((-112), fixedLengthLearning0.getMaxLength());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.last());
      assertEquals((-1948.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(iVecInt0);
      
      LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver1.fixedSize(1);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertNotSame(fixedLengthLearning0, fixedLengthLearning1);
      assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(fixedLengthLearning0.equals((Object)fixedLengthLearning1));
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals((-112), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals((-1948.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(learnedConstraintsDeletionStrategy0);
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, varOrderHeap0, miniSATRestarts0);
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(solver2);
      
      boolean boolean0 = solver2.isSatisfiable(iVecInt0, true);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertNotSame(fixedLengthLearning0, fixedLengthLearning1);
      assertNotSame(varOrderHeap0, varOrderHeap1);
      assertNotSame(cardinalityDataStructure1, cardinalityDataStructure0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(fixedLengthLearning0.equals((Object)fixedLengthLearning1));
      assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals((-112), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(8, solver1.newVar());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.last());
      assertEquals((-1948.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(100L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, pureOrder0, noRestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, pureOrder0, noRestarts0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertNotNull(solver1);
      
      AgeLCDS ageLCDS0 = (AgeLCDS)solver1.age_based;
      assertNotNull(ageLCDS0);
      
      solver0.reset();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      VecInt vecInt0 = new VecInt(0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      PureOrder pureOrder1 = new PureOrder();
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals(20, pureOrder1.getPeriod());
      assertNotNull(pureOrder1);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = solver1.getSearchParams();
      assertNotSame(pureOrder0, pureOrder1);
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, pureOrder1, noRestarts0);
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.nVars());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals(20, pureOrder1.getPeriod());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(solver2);
      
      solver2.setSearchParams(searchParams0);
      assertNotSame(pureOrder0, pureOrder1);
      assertNotSame(pureOrder1, pureOrder0);
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.nVars());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals(20, pureOrder1.getPeriod());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 128;
      intArray0[1] = 128;
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructure>(2975);
      assertEquals(2975, percentLengthLearning2.getLimit());
      assertNotNull(percentLengthLearning2);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(percentLengthLearning2, cardinalityDataStructure0, pureOrder0, noRestarts0);
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(2975, percentLengthLearning2.getLimit());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertNotNull(solver3);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver3.setLearnedConstraintsDeletionStrategy((ConflictTimer) noRestarts0, learnedConstraintsEvaluationType0);
      assertNotSame(pureOrder0, pureOrder1);
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(2975, percentLengthLearning2.getLimit());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals(3, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(3, solver3.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-951.723383));
      assertEquals((-951.723383), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(0, intArray0.length);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertNotNull(fixedPeriodRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, fixedPeriodRestarts0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-951.723383), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      assertEquals(0, intArray0.length);
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      // Undeclared exception!
      try { 
        solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-2417.74156398));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-2417.74156398), activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, randomWalkDecorator0, (RestartStrategy) null);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(366);
      assertEquals(366, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams1 = new SearchParams(366, 0.0, 366, 6);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(366.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(366.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(6, searchParams1.getInitConflictBound());
      assertNotNull(searchParams1);
      
      PureOrder pureOrder1 = new PureOrder(3854);
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertEquals(3854, pureOrder1.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertNotNull(pureOrder1);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams1, pureOrder1, (RestartStrategy) null);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertEquals(366, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(366.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(366.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(6, searchParams1.getInitConflictBound());
      assertEquals(3854, pureOrder1.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(solver1);
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(pureOrder1, pureOrder0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertEquals(366, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(366.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(366.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(6, searchParams1.getInitConflictBound());
      assertEquals(3854, pureOrder1.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, iLogAble0);
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-2417.74156398), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(366, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(366.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(366.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(6, searchParams1.getInitConflictBound());
      assertEquals(3854, pureOrder1.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertNotNull(solver2);
      
      int int0 = solver2.currentDecisionLevel();
      assertNotSame(pureOrder0, pureOrder1);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(pureOrder1, pureOrder0);
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-2417.74156398), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(8, solver0.newVar());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(366, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(366.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(366.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(6, searchParams1.getInitConflictBound());
      assertEquals(3854, pureOrder1.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.nVars());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-951.723383));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-951.723383), activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(0, intArray0.length);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertNotNull(fixedPeriodRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, fixedPeriodRestarts0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-951.723383), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      assertEquals(0, intArray0.length);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push((-317));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-317), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals((-317), iVecInt0.last());
      assertNotNull(iVecInt0);
      
      SearchParams searchParams1 = new SearchParams((-317));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-317), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertNotNull(searchParams1);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, fixedPeriodRestarts0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-951.723383), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = solver1.findModel((IVecInt) vecInt0);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(intArray0, intArray1);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(solver1, solver0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {(-317)}, intArray1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-951.723383), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals((-317), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(318, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(319, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(318, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      solver1.clearLearntClauses();
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(solver1, solver0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-951.723383), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(320, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(321, solver1.newVar());
      assertEquals(320, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(589);
      assertEquals(589, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, eMARestarts0);
      assertEquals(589, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = (LevelBasedVarOrderHeap)solver0.getOrder();
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertEquals(589, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(arminRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0, mUSLauncher0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(589, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      try { 
        solver1.discardCurrentModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, pureOrder0, noRestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>(1);
      assertEquals(1, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, pureOrder0, noRestarts0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(1, percentLengthLearning1.getLimit());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-2), iVecInt0.last());
      assertNotNull(iVecInt0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning2.getLimit());
      assertNotNull(percentLengthLearning2);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, pureOrder0, noRestarts0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertNotNull(solver2);
      
      int[] intArray0 = new int[0];
      solver2.backtrack(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, intArray0.length);
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(1322);
      assertEquals(1322, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = solver2.getSearchParams();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertEquals(5, solver2.nVars());
      assertNotNull(searchParams0);
      
      Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, noRestarts0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.nVars());
      assertEquals(1, solver3.realNumberOfVariables());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(8, solver2.newVar());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals(7, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1322, fixedLengthLearning0.getMaxLength());
      assertNotNull(solver3);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      IVecInt iVecInt1 = AbstractMinimalModel.positiveLiterals(solver0);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(4, iVecInt1.last());
      assertEquals(4, iVecInt1.size());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertNotNull(iVecInt1);
      
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertFalse(constr0.simplify());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.learnt());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(4, constr0.size());
      assertFalse(constr0.locked());
      assertFalse(constr0.isSatisfied());
      assertNotNull(constr0);
      
      solver3.claBumpActivity(constr0);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(9, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(9, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(9, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(10, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1322, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(3, solver3.nVars());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(4, solver3.newVar());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertFalse(constr0.simplify());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.learnt());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(4, constr0.size());
      assertFalse(constr0.locked());
      assertFalse(constr0.isSatisfied());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(2037);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(2037.0, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      Solver<CardinalityDataStructureYanMin> solver4 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, noRestarts0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isVerbose());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(2, solver4.newVar());
      assertEquals(1, solver4.nVars());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(11, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(12, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(11, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertNotNull(solver4);
      
      IVecInt iVecInt2 = solver4.createBlockingClauseForCurrentModel();
      assertNotSame(iVecInt2, iVecInt0);
      assertNotSame(iVecInt2, iVecInt1);
      assertTrue(iVecInt2.equals((Object)iVecInt1));
      assertFalse(iVecInt2.equals((Object)iVecInt0));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(3, solver4.nVars());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(3, solver4.realNumberOfVariables());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.nConstraints());
      assertFalse(solver4.isVerbose());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(4, solver4.newVar());
      assertEquals(0, solver4.decisionLevel());
      assertFalse(solver4.isSolverKeptHot());
      assertTrue(iVecInt2.isEmpty());
      assertEquals(0, iVecInt2.size());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(13, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(14, solver2.newVar());
      assertEquals(13, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertNotNull(iVecInt2);
      
      Lbool lbool0 = solver2.truthValue(0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("U", lbool0.toString());
      assertEquals(0, solver2.nConstraints());
      assertEquals(16, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(15, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(15, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertNotNull(lbool0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-3958.9466686), 0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertNull(restartStrategy0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertNotNull(solver1);
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      solver1.addAllClauses(vec0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder((-301));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(eMARestarts0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>((-301));
      assertEquals((-301), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, pureOrder0, eMARestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, eMARestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-301), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver1);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-301), fixedLengthLearning0.getMaxLength());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(2, iVecInt0.size());
      assertEquals(2, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(iVecInt0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-301), fixedLengthLearning0.getMaxLength());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(2, constr0.size());
      assertTrue(constr0.learnt());
      assertFalse(constr0.simplify());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.locked());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertNotNull(constr0);
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, eMARestarts0);
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-301), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(8, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(7, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertNotNull(solver2);
      
      solver2.claBumpActivity(constr0);
      assertNotSame(solver1, solver2);
      assertNotSame(solver2, solver1);
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-301), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-301), fixedLengthLearning0.getMaxLength());
      assertEquals(14, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(12, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(11, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(2, constr0.size());
      assertTrue(constr0.learnt());
      assertFalse(constr0.simplify());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.locked());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(1.0, constr0.getActivity(), 0.01);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertEquals(10, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(10, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(11, solver2.newVar());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
      assertEquals(1.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(0.0, (-1.0), 100.0, 47);
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertNotNull(clauseOnlyLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(47);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(47, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning1, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getClaDecay(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(47, lubyRestarts0.getFactor());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getClaDecay(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(47, lubyRestarts0.getFactor());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(100.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams1.getInitConflictBound());
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertNotNull(searchParams1);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertNotNull(mUSLauncher0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning1, cardinalityDataStructureYanMax1, searchParams1, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(100.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getClaDecay(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(47, lubyRestarts0.getFactor());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(100.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams1.getInitConflictBound());
      assertEquals((-1.0), searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      // Undeclared exception!
      try { 
        solver0.reduceDB();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((-1242));
      assertEquals((-1242), percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertNotNull(noRestarts0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics1 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics1);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ge;\"5pLku-v&XyW7bh");
      assertFalse(boolean0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, naturalStaticOrder0, noRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      Lits lits0 = (Lits)solver0.voc;
      assertEquals(0, lits0.realnVars());
      assertEquals(2, lits0.nVars());
      assertNotNull(lits0);
      
      naturalStaticOrder0.setLits(lits0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, lits0.realnVars());
      assertEquals(3, lits0.nVars());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics1, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, noRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      NoRestarts noRestarts1 = new NoRestarts();
      assertFalse(noRestarts1.equals((Object)noRestarts0));
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      assertNotNull(noRestarts1);
      
      NaturalStaticOrder naturalStaticOrder1 = new NaturalStaticOrder();
      assertFalse(naturalStaticOrder1.equals((Object)naturalStaticOrder0));
      assertEquals("Natural static ordering", naturalStaticOrder1.toString());
      assertNotNull(naturalStaticOrder1);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertNotNull(searchParams1);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, noRestarts0);
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(solver2);
      
      IVecInt iVecInt0 = solver2.createBlockingClauseForCurrentModel();
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      assertNotSame(noRestarts0, noRestarts1);
      assertNotSame(searchParams0, searchParams1);
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(iVecInt0);
      
      SearchParams searchParams2 = new SearchParams();
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertNotNull(searchParams2);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1242);
      intArray0[1] = (-1242);
      intArray0[2] = (-41);
      intArray0[3] = (-1242);
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {(-1242), (-1242), (-41), (-1242)}, intArray0);
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1242), vecInt0.last());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      solver2.setOrder(naturalStaticOrder0);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      assertNotSame(noRestarts0, noRestarts1);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(searchParams0, searchParams2);
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(10, percentLengthLearning1.getLimit());
      
      boolean boolean1 = solver2.isDBSimplificationAllowed();
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      assertNotSame(noRestarts0, noRestarts1);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(searchParams0, searchParams2);
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertTrue(boolean1 == boolean0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(8, solver2.newVar());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(7, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(boolean1);
      
      IVecInt iVecInt1 = iVecInt0.push(2135);
      assertNotSame(naturalStaticOrder0, naturalStaticOrder1);
      assertSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(noRestarts0, noRestarts1);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(searchParams0, searchParams2);
      assertNotSame(iVecInt1, vecInt0);
      assertSame(iVecInt1, iVecInt0);
      assertFalse(naturalStaticOrder0.equals((Object)naturalStaticOrder1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(noRestarts0.equals((Object)noRestarts1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(10, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(9, solver2.realNumberOfVariables());
      assertEquals(9, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, iVecInt0.size());
      assertEquals(2135, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(1, iVecInt1.size());
      assertEquals(2135, iVecInt1.last());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(iVecInt1);
      
      try { 
        solver2.addExactly(vecInt0, 43);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = (-112);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-112));
      assertEquals((-112), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-112), (-1948));
      assertEquals((-112.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertNotNull(miniSATRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, miniSATRestarts0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-112.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-112.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals((-1948), searchParams1.getInitConflictBound());
      assertEquals((-112.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertNotNull(searchParams1);
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) miniSATRestarts0, learnedConstraintsEvaluationType0);
      assertSame(searchParams0, searchParams1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-112.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      searchParams1.setConflictBoundIncFactor((-1948));
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1948.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals((-1948), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-1948.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>((ASolverFactory<Solver<CardinalityDataStructure>>) null);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertNotNull(basicLauncher0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertNotNull(clauseOnlyLearning1);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = null;
      Solver<CardinalityDataStructureYanMin> solver1 = null;
      try {
        solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning1, (CardinalityDataStructureYanMin) null, searchParams1, varOrderHeap0, miniSATRestarts0, basicLauncher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      PureOrder pureOrder0 = new PureOrder(48);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(48, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, (CardinalityDataStructure) null, pureOrder0, lubyRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams((-3002));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertNotNull(glucose21Restarts0);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      solver0.setTimeoutOnConflicts((-3002));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals((-3002), solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) glucose21Restarts0, learnedConstraintsEvaluationType0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals((-3002), solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      solver0.sortOnActivity();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(solver1);
      
      VecInt vecInt0 = new VecInt(6, 48);
      assertEquals(48, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push((-1371));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-1371), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.size());
      assertEquals(7, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1371), iVecInt0.last());
      assertNotNull(iVecInt0);
      
      MinWatchCard minWatchCard0 = (MinWatchCard)solver1.addBlockingClause(iVecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(MinWatchCard.ATLEAST);
      assertFalse(MinWatchCard.ATMOST);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1372, solver1.nVars());
      assertEquals(1373, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1372, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals((-1371), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.size());
      assertEquals(7, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1371), iVecInt0.last());
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals(7, minWatchCard0.size());
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertNotNull(minWatchCard0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder(27);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(27, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning1 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertNotNull(miniSATLearning1);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning1, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, pureOrder0, eMARestarts0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(27, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(27, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, pureOrder0, eMARestarts0, iLogAble0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(27, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertNotNull(solver1);
      
      IVecInt iVecInt0 = solver1.unsatExplanation();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(27, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertNull(iVecInt0);
      
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause((IVecInt) null, (ILits) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-112));
      assertEquals((-112), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-112), (-1948));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-112.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(miniSATRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, miniSATRestarts0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-112.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-112.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams1.getInitConflictBound());
      assertEquals((-112.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams1);
      
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>((ASolverFactory<Solver<CardinalityDataStructure>>) null);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertNotNull(basicLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams1, varOrderHeap0, miniSATRestarts0, basicLauncher0);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-112.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams1.getInitConflictBound());
      assertEquals((-112.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals(7, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(solver1);
      
      cardinalityDataStructure0.setUnitPropagationListener(solver1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(solver1, solver0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-112.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1948), searchParams1.getInitConflictBound());
      assertEquals((-112.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(10, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(11, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(10, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      
      SearchParams searchParams2 = new SearchParams();
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(100, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams2);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-112));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-112), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams2, pureOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertEquals((-112), fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(100, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-112), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertNotNull(solver2);
      
      // Undeclared exception!
      try { 
        solver2.reduceDB();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams((-3002));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, (-3002));
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, (RestartStrategy) null);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      IOrder iOrder0 = solver0.getOrder();
      assertSame(tabuListDecorator0, iOrder0);
      assertSame(iOrder0, tabuListDecorator0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(iOrder0);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-3002));
      assertEquals((-3002.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, tabuListDecorator0, (RestartStrategy) null);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-3002.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      // Undeclared exception!
      try { 
        solver1.varBumpActivity((-3002));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1501
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(32);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(32);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertNotNull(iLogAble0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Constr constr0 = cardinalityDataStructureYanMax0.createUnregisteredClause(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0, constr0.size());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertTrue(constr0.learnt());
      assertFalse(constr0.simplify());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr0.isSatisfied());
      assertNotNull(constr0);
      
      LearntWLClause learntWLClause0 = (LearntWLClause)solver1.addConstr(constr0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(constr0, learntWLClause0);
      assertSame(learntWLClause0, constr0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0, constr0.size());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertTrue(constr0.learnt());
      assertFalse(constr0.simplify());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr0.isSatisfied());
      assertEquals(0, learntWLClause0.size());
      assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
      assertTrue(learntWLClause0.learnt());
      assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(learntWLClause0.simplify());
      assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
      assertFalse(learntWLClause0.isSatisfied());
      assertNotNull(learntWLClause0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      int int0 = (-1106);
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((-1106));
      assertEquals((-1106), percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertNotNull(noRestarts0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, noRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        solver0.assume(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams((-3002));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertNotNull(glucose21Restarts0);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      solver0.setTimeoutOnConflicts((-3002));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals((-3002), solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
      solver0.setSimplifier(simplificationType0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals((-3002), solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) glucose21Restarts0, learnedConstraintsEvaluationType0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals((-3002), solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      solver0.getStat();
      assertEquals((-3002), solver0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      int int0 = (-1562);
      SearchParams searchParams0 = new SearchParams(91.00323372908, (-1562));
      assertEquals((-1562), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(91.00323372908, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder((-1562));
      assertEquals((-1562), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, lubyRestarts0, mUSLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1562), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(91.00323372908, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1562), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      boolean boolean0 = solver0.isVerbose();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1562), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(91.00323372908, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1562), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(boolean0);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertNotNull(clauseOnlyLearning1);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      clauseOnlyLearning1.init();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning1, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-1562), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(91.00323372908, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1562), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      // Undeclared exception!
      try { 
        mixedDataStructureDanielHT0.createUnregisteredCardinalityConstraint((IVecInt) null, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder(1106);
      assertEquals(1106, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertEquals(1106, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertNotNull(noRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 1179.9475880213777);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1179.9475880213777, randomWalkDecorator1.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator1);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning1, mixedDataStructureDanielWLConciseBinary0, pureOrder0, noRestarts0);
      assertEquals(1106, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[sT\\_9/");
      assertFalse(boolean0);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(1375);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1375.0, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning1 = new ActiveLearning<ClausalDataStructureWL>(1375);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(1375.0, activeLearning1.getActivityPercent(), 0.01);
      assertNotNull(activeLearning1);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertNotNull(clausalDataStructureWL1);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(2253);
      assertEquals(2253, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1106, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(2253, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertNotNull(solver1);
      
      IVecInt iVecInt0 = solver1.getOutLearnt();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1106, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(2253, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertNotNull(basicLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, varOrderHeap0, eMARestarts0, basicLauncher0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertNull(searchParams0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, varOrderHeap0, eMARestarts0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertNotNull(solver1);
      
      // Undeclared exception!
      try { 
        solver1.record((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(409);
      assertEquals(409, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(409, (-737.923), 409, 409);
      assertEquals(409.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(409.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-737.923), searchParams0.getClaDecay(), 0.01);
      assertEquals(409, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, pureOrder0, (RestartStrategy) null);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 539;
      intArray0[1] = 409;
      intArray0[2] = 409;
      // Undeclared exception!
      try { 
        solver0.addClauseOnTheFly(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 409
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(1883);
      assertEquals(1883, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertNotNull(noRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, noRestarts0);
      assertEquals(1883, fixedLengthLearning0.getMaxLength());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, naturalStaticOrder0, noRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertNotNull(solver1);
      
      solver1.setRestartStrategy(noRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertNotNull(miniSATRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      int int0 = (-1812);
      // Undeclared exception!
      try { 
        solver0.suggestNextLiteralToBranchOn((-1812));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, pureOrder0, noRestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      int int0 = 0;
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertEquals(0, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, pureOrder0, noRestarts0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertNotNull(solver1);
      
      AgeLCDS ageLCDS0 = (AgeLCDS)solver1.age_based;
      assertNotNull(ageLCDS0);
      
      solver0.reset();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      VecInt vecInt0 = new VecInt(0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.insertFirst(769);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(769, vecInt0.last());
      
      // Undeclared exception!
      try { 
        clausalDataStructureWL0.createClause(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 769
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1498.2106871860374));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[1];
      int int0 = 65535;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(1, intArray0.length);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertNotNull(iVecInt0);
      assertEquals(1, intArray0.length);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      assertEquals(1, intArray0.length);
      
      ILogAble iLogAble0 = solver1.out;
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(iLogAble0);
      assertEquals(1, intArray0.length);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver2);
      assertEquals(1, intArray0.length);
      
      try { 
        solver2.addBlockingClause(iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      varOrderHeap0.init();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      boolean boolean0 = solver0.isSatisfiable(true);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertTrue(boolean0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, lubyRestarts0, (ILogAble) null);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertNotNull(solver1);
      
      SearchParams searchParams1 = solver1.getSearchParams();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertNotNull(searchParams1);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(solver2);
      
      int[] intArray0 = new int[0];
      MinWatchCard minWatchCard0 = (MinWatchCard)solver2.addAtMostOnTheFly(intArray0, 128);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(searchParams0, searchParams1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.nConstraints());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.nVars());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals((-128), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.simplify());
      assertEquals(0, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(minWatchCard0);
      assertEquals(0, intArray0.length);
      
      solver1.modelFound();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(searchParams0, searchParams1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertNotNull(lubyRestarts1);
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, tabuListDecorator0, lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(8, solver0.newVar());
      assertEquals(32, lubyRestarts1.getFactor());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertNotNull(solver3);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertNotNull(cardinalityDataStructureYanMin1);
      
      Solver<CardinalityDataStructureYanMin> solver4 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin1, searchParams1, tabuListDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(solver4.equals((Object)solver2));
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver4.nConstraints());
      assertEquals(1, solver4.nVars());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(2, solver4.newVar());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertFalse(solver4.isVerbose());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(solver4);
      
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 32;
      intArray1[1] = 128;
      intArray1[2] = 128;
      intArray1[3] = 32;
      intArray1[4] = 128;
      intArray1[5] = 128;
      VecInt vecInt0 = new VecInt(intArray1);
      assertArrayEquals(new int[] {32, 128, 128, 32, 128, 128}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.size());
      assertEquals(128, vecInt0.last());
      assertNotNull(vecInt0);
      assertEquals(6, intArray1.length);
      
      VecInt vecInt1 = (VecInt)vecInt0.pop();
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {32, 128, 128, 32, 128, 128}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(128, vecInt0.last());
      assertEquals(128, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(5, vecInt1.size());
      assertNotNull(vecInt1);
      assertEquals(6, intArray1.length);
      
      VecInt vecInt2 = (VecInt)solver4.dimacs2internal(vecInt1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertNotSame(solver4, solver2);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {32, 128, 128, 32, 128, 128}, intArray1);
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(solver4.equals((Object)solver2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(128, vecInt0.last());
      assertEquals(128, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(5, vecInt1.size());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(vecInt2.isEmpty());
      assertEquals(256, vecInt2.last());
      assertEquals(5, vecInt2.size());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(10, solver1.newVar());
      assertEquals(9, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(9, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver4.nConstraints());
      assertEquals(129, solver4.nVars());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(130, solver4.newVar());
      assertEquals(129, solver4.realNumberOfVariables());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(2147483, solver4.getTimeout());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertFalse(solver4.isVerbose());
      assertNotNull(vecInt2);
      assertEquals(6, intArray1.length);
      
      // Undeclared exception!
      try { 
        solver3.isSatisfiable((IVecInt) vecInt2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(30);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertNotNull(miniSATRestarts0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      solver0.setDataStructureFactory(cardinalityDataStructureYanMin0);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      levelBasedVarOrderHeap0.setVarDecay(30);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      SolverStats solverStats0 = solver1.getStats();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertNotNull(solverStats0);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      try { 
        solver0.addExactly(iVecInt0, (-1631));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = null;
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertNotNull(basicLauncher0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, (SearchParams) null, levelBasedVarOrderHeap0, noRestarts0, basicLauncher0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      long long0 = solver0.getTimeoutMs();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483647L, long0);
      
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(0.0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      activeLearning0.init();
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, levelBasedVarOrderHeap1, noRestarts0, mUSLauncher0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertNotNull(solver1);
      
      Constr constr0 = solver0.sharedConflict;
      assertNull(constr0);
      
      // Undeclared exception!
      try { 
        mixedDataStructureDanielWLConciseBinary0.learnConstraint((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder(Integer.MAX_VALUE);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertNotNull(mUSLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, noRestarts0, mUSLauncher0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertNotNull(searchParams1);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(pureOrder0, 1.1);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals(1.1, randomWalkDecorator1.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator1);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator1, noRestarts0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.1, randomWalkDecorator1.getProbability(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertNotNull(solver1);
      
      NoRestarts noRestarts1 = (NoRestarts)solver1.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertNotSame(randomWalkDecorator1, randomWalkDecorator0);
      assertSame(noRestarts1, noRestarts0);
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.1, randomWalkDecorator1.getProbability(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertNotNull(noRestarts1);
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams1, randomWalkDecorator0, noRestarts1);
      assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator1));
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.1, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(6, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertNotNull(solver2);
      
      boolean boolean0 = solver2.isSolverKeptHot();
      assertSame(searchParams0, searchParams1);
      assertNotSame(randomWalkDecorator0, randomWalkDecorator1);
      assertSame(noRestarts0, noRestarts1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(randomWalkDecorator1, randomWalkDecorator0);
      assertSame(noRestarts1, noRestarts0);
      assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator1));
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.1, randomWalkDecorator1.getProbability(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(7, solver1.nVars());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertFalse(boolean0);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning1 = new ActiveLearning<ClausalDataStructureWL>(2891.0590396852476);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(2891.0590396852476, activeLearning1.getActivityPercent(), 0.01);
      assertNotNull(activeLearning1);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(activeLearning1, clausalDataStructureWL0, searchParams1, randomWalkDecorator1, noRestarts0);
      assertFalse(randomWalkDecorator0.equals((Object)randomWalkDecorator1));
      assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(Integer.MAX_VALUE, pureOrder0.getPeriod());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.1, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(2891.0590396852476, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.nVars());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertNotNull(solver3);
      
      // Undeclared exception!
      try { 
        solver3.model(6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(30);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertNotNull(miniSATRestarts0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      solver0.setDataStructureFactory(cardinalityDataStructureYanMin0);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      
      levelBasedVarOrderHeap0.setVarDecay(30);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>((-102.607));
      assertEquals((-102.607), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertNotNull(clausalDataStructureWL1);
      
      ClausalDataStructureWL clausalDataStructureWL2 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
      assertNotNull(clausalDataStructureWL2);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL2, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
      assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals((-102.607), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertNotNull(solver1);
      
      // Undeclared exception!
      try { 
        solver1.model(2881);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-3958.9466686), 0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertNull(restartStrategy0);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertNotNull(arminRestarts0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertEquals(4, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      try { 
        solver1.addClause(iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(5);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(5, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(5, lubyRestarts0.getFactor());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(5, lubyRestarts0.getFactor());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(5, lubyRestarts1.getFactor());
      assertNotNull(lubyRestarts1);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertNotNull(mUSLauncher0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(2253);
      assertEquals(2253, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(2253, 2253);
      assertEquals(2253, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2253.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      searchParams0.setInitConflictBound(3);
      assertEquals(3, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2253.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 2253);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(2253.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      assertNotNull(iLits0);
      
      randomWalkDecorator0.setLits(iLits0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(2253.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertNotNull(fixedPeriodRestarts0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, fixedPeriodRestarts0);
      assertEquals(2253, fixedLengthLearning0.getMaxLength());
      assertEquals(3, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2253.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(2253.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      boolean boolean1 = solver0.isSolverKeptHot();
      assertTrue(boolean1 == boolean0);
      assertEquals(2253, fixedLengthLearning0.getMaxLength());
      assertEquals(3, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2253.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(2253.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertNotNull(noRestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, pureOrder0, noRestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, pureOrder0, noRestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      AgeLCDS ageLCDS0 = (AgeLCDS)solver1.age_based;
      assertNotNull(ageLCDS0);
      
      solver0.reset();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      VecInt vecInt0 = new VecInt(0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning2 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertEquals(10, percentLengthLearning2.getLimit());
      assertNotNull(percentLengthLearning2);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning2, mixedDataStructureSingleWL0, pureOrder0, noRestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning2.getLimit());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertNotNull(solver2);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning3 = new PercentLengthLearning<MixedDataStructureSingleWL>(68);
      assertFalse(percentLengthLearning3.equals((Object)percentLengthLearning2));
      assertEquals(68, percentLengthLearning3.getLimit());
      assertNotNull(percentLengthLearning3);
      
      MockFile mockFile0 = new MockFile("v!_:e", "v!_:e");
      assertNotNull(mockFile0);
      
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      ILogAble iLogAble0 = solver1.out;
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureDanielWL> solver3 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, noRestarts0, iLogAble0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(2, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertNotNull(solver3);
      
      boolean boolean0 = solver3.isSatisfiable((IVecInt) vecInt0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(4, solver3.newVar());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(3, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(boolean0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      solver2.cancelUntil(0);
      assertNotSame(percentLengthLearning2, percentLengthLearning3);
      assertFalse(percentLengthLearning2.equals((Object)percentLengthLearning3));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning2.getLimit());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      
      solver2.printStat((PrintWriter) mockPrintWriter0);
      assertNotSame(percentLengthLearning2, percentLengthLearning3);
      assertFalse(percentLengthLearning2.equals((Object)percentLengthLearning3));
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/v!_:e/v!_:e", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("v!_:e", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/v!_:e", mockFile0.getParent());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning2.getLimit());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      
      Solver<MixedDataStructureSingleWL> solver4 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning2, mixedDataStructureSingleWL0, pureOrder0, noRestarts0);
      assertFalse(solver4.equals((Object)solver2));
      assertFalse(percentLengthLearning2.equals((Object)percentLengthLearning3));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver4.isVerbose());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(0, solver4.currentDecisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertEquals(7, solver4.realNumberOfVariables());
      assertEquals(8, solver4.newVar());
      assertEquals(7, solver4.nVars());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.nConstraints());
      assertEquals(10, percentLengthLearning2.getLimit());
      assertNotNull(solver4);
      
      // Undeclared exception!
      try { 
        solver2.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 482);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(482, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL1 = new MixedDataStructureSingleWL();
      assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
      assertNotNull(mixedDataStructureSingleWL1);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(miniSATRestarts0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL1, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = (LevelBasedVarOrderHeap)solver0.getOrder();
      assertNotSame(mixedDataStructureSingleWL1, mixedDataStructureSingleWL0);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, miniSATRestarts0);
      assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(482, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertNotNull(solver1);
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver1.setLearnedConstraintsDeletionStrategy((ConflictTimer) miniSATRestarts0, learnedConstraintsEvaluationType0);
      assertNotSame(mixedDataStructureSingleWL1, mixedDataStructureSingleWL0);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(482, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructure>();
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertNotNull(fixedLengthLearning1);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      miniSATRestarts0.newConflict();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning1, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(482, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertNotNull(solver2);
      
      VecInt vecInt0 = (VecInt)AbstractMinimalModel.positiveLiterals(solver1);
      assertNotSame(mixedDataStructureSingleWL1, mixedDataStructureSingleWL0);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(482, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(4, vecInt0.size());
      assertEquals(4, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(9, solver0.nVars());
      assertEquals(10, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.nVars());
      assertNotNull(vecInt0);
      
      LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver2.fixedSize(2867);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(482, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertNotNull(learnedConstraintsDeletionStrategy0);
      
      int int0 = solver2.realNumberOfVariables();
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertEquals(5, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(482, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(4, int0);
      
      boolean boolean0 = solver2.simplifyDB();
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(7, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(7, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(8, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(482, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 500;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      intArray0[1] = 7;
      intArray0[2] = 0;
      intArray0[3] = 1;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {500, 7, 0, 1}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(4, intArray0.length);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertNotNull(glucose21Restarts0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, subsetVarOrder0, glucose21Restarts0);
      assertArrayEquals(new int[] {500, 7, 0, 1}, intArray0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      assertEquals(4, intArray0.length);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      solver0.setLogger(mUSLauncher0);
      assertArrayEquals(new int[] {500, 7, 0, 1}, intArray0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(4, intArray0.length);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, (SearchParams) null, subsetVarOrder0, glucose21Restarts0, mUSLauncher0);
      assertArrayEquals(new int[] {500, 7, 0, 1}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertNotNull(solver1);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        solver1.isSatisfiable(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 500
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(1.5, (-286.54), 0.01, 37);
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      searchParams0.setClaDecay((-286.54));
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(37, searchParams0.getInitConflictBound());
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertNotNull(rSATPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(12);
      assertEquals(12, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(12, fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      fixedLengthLearning0.setSolver(solver0);
      assertEquals((-286.54), searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(12, fixedLengthLearning0.getMaxLength());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(3474.418420359464);
      assertEquals(3474.418420359464, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, naturalStaticOrder0, (RestartStrategy) null);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(3474.418420359464, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertNotNull(solver1);
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(3474.418420359464, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        solver1.findModel(iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(eMARestarts0);
      
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureSingleWL>(7);
      assertEquals(7, fixedLengthLearning1.getMaxLength());
      assertNotNull(fixedLengthLearning1);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      int int0 = (-1453);
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, randomWalkDecorator0, eMARestarts0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams((-1453));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1453), searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, arminRestarts0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1453), searchParams0.getInitConflictBound());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(solver1);
      
      ILogAble iLogAble0 = solver1.out;
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning1, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, iLogAble0);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1453), searchParams0.getInitConflictBound());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(7, fixedLengthLearning1.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(solver2);
      
      Set<Integer> set0 = solver2.fromLastDecisionLevel(vecInt0);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, fixedLengthLearning1.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1453), searchParams0.getInitConflictBound());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.nVars());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(int0));
      assertNotNull(set0);
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertNotNull(searchParams1);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver3 = null;
      try {
        solver3 = new Solver<MixedDataStructureDanielWLConciseBinary>((LearningStrategy<MixedDataStructureDanielWLConciseBinary>) null, mixedDataStructureDanielWLConciseBinary0, searchParams1, varOrderHeap0, arminRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-2181));
      assertEquals((-2181), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-2181), (-2181), 1.0E-20, (-2181));
      assertEquals((-2181.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2181), searchParams0.getInitConflictBound());
      assertEquals((-2181.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-2181), fixedLengthLearning0.getMaxLength());
      assertEquals((-2181.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2181), searchParams0.getInitConflictBound());
      assertEquals((-2181.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      solver0.setLearner(fixedLengthLearning0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-2181), fixedLengthLearning0.getMaxLength());
      assertEquals((-2181.0), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2181), searchParams0.getInitConflictBound());
      assertEquals((-2181.0), searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = null;
      int int0 = 6;
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertNotNull(rSATPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertNotNull(mUSLauncher0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, eMARestarts0, mUSLauncher0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      VecInt vecInt0 = (VecInt)solver0.implied;
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      try { 
        mixedDataStructureDanielWL0.createClause(vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" 8lEE$j");
      assertNotNull(mockPrintWriter0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      varOrderHeap0.init();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(7);
      assertEquals(7, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, percentLengthLearning0.getLimit());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertNotNull(solver1);
      
      // Undeclared exception!
      try { 
        solver1.isSatisfiable(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(Integer.MIN_VALUE);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(miniSATRestarts0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertNotNull(cardinalityDataStructureYanMin1);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap1);
      
      levelBasedVarOrderHeap1.setVarDecay(1.0E20);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      miniSATRestarts0.reset();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureSingleWL>(Integer.MIN_VALUE);
      assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
      assertEquals(Integer.MIN_VALUE, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning1, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(Integer.MIN_VALUE, percentLengthLearning1.getLimit());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      int int0 = solver0.getTimeout();
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotSame(percentLengthLearning1, percentLengthLearning0);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(Integer.MIN_VALUE, percentLengthLearning1.getLimit());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, int0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(solver1);
      
      solver1.expireTimeout();
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 7);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      varOrderHeap0.init();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      boolean boolean0 = solver0.isSatisfiable(false);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertTrue(boolean0);
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(43);
      assertEquals(43, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(2034.4, 2034.4, 2034.4, 5);
      assertEquals(2034.4, searchParams0.getClaDecay(), 0.01);
      assertEquals(2034.4, searchParams0.getVarDecay(), 0.01);
      assertEquals(2034.4, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(5);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(5, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(5, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(5, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(5, lubyRestarts1.getFactor());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertNotNull(lubyRestarts1);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, lubyRestarts1, mUSLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(2034.4, searchParams0.getClaDecay(), 0.01);
      assertEquals(2034.4, searchParams0.getVarDecay(), 0.01);
      assertEquals(2034.4, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(5, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(5, lubyRestarts1.getFactor());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertNotNull(solver1);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertNotNull(lits0);
      
      naturalStaticOrder0.setLits(lits0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      VecInt vecInt0 = (VecInt)solver1.decisions;
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        solver0.addParity(vecInt0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 500);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(eMARestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, eMARestarts0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      boolean boolean0 = solver0.simplifyDB();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertTrue(boolean0);
      
      Solver solver1 = (Solver)solver0.getSolvingEngine();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals(7, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(solver1);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructure>(0);
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      assertNotNull(fixedLengthLearning1);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning1, cardinalityDataStructure0, searchParams0, tabuListDecorator0, eMARestarts0, iLogAble0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(10, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertNotNull(solver2);
      
      solver2.unset(18);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-3958.9466686), 0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNull(restartStrategy0);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      VecInt vecInt0 = (VecInt)solver1.learnedLiterals;
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertNotNull(solver2);
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(solver3.equals((Object)solver2));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(4, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(3, solver3.nVars());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertNotNull(solver3);
      
      // Undeclared exception!
      try { 
        solver2.isSatisfiable((IVecInt) vecInt0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 216);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(216, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1615));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-1615), lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, lubyRestarts0, mUSLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(216, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-1615), lubyRestarts0.getFactor());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(216, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-1615), lubyRestarts0.getFactor());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals((-1615), lubyRestarts1.getFactor());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertNotNull(lubyRestarts1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(216, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-1615), lubyRestarts0.getFactor());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals((-1615), lubyRestarts1.getFactor());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertNotNull(solver1);
      
      int int0 = solver1.nConstraints();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(216, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-1615), lubyRestarts0.getFactor());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals((-1615), lubyRestarts1.getFactor());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertNotNull(rSATPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      solver0.setTimeout(16384);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(16384, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PureOrder pureOrder0 = new PureOrder(1107);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1107, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(eMARestarts0);
      
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(1107, 1107);
      assertEquals(1107.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1107, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, eMARestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1107, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1107.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1107, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1107, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1107.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1107, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, eMARestarts0, iLogAble0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1107, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1107.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1107, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertNotNull(solver1);
      
      PrintWriter printWriter0 = null;
      Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, eMARestarts0, iLogAble0);
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1107, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1107.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1107, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertNotNull(solver2);
      
      // Undeclared exception!
      try { 
        solver2.getLiteralsPropagatedAt(1107);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = null;
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      int int0 = 0;
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertNotNull(noRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning1, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, naturalStaticOrder0, noRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      NoRestarts noRestarts1 = (NoRestarts)solver0.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertNotNull(noRestarts1);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, noRestarts1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertNotNull(solver1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, naturalStaticOrder0, noRestarts1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertNotNull(solver2);
      
      VecInt vecInt0 = new VecInt(0, 0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = (VecInt)solver2.dimacs2internal(vecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(10, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(9, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertNotNull(vecInt1);
      
      try { 
        mixedDataStructureDanielWLConciseBinary0.createClause(vecInt1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1498.2106871860374));
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      String string0 = activeLearning0.toString();
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("Limit learning to clauses containing active literals (-149821.06871860372%)", string0);
      assertNotNull(string0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[1];
      int int0 = 65535;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = solver0.findModel(iVecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-1), (-2)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>((-1498.2106871860374));
      assertEquals(0, activeLearning1.getLimit());
      assertEquals((-1498.2106871860374), activeLearning1.getActivityPercent(), 0.01);
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(32, (-1498.2106871860374), 32, (-2253));
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals((-1498.2106871860374), activeLearning1.getActivityPercent(), 0.01);
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertNotNull(solver1);
      assertEquals(1, intArray0.length);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder(65535);
      assertEquals(65535, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      ILogAble iLogAble0 = solver1.out;
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(iLogAble0);
      assertEquals(1, intArray0.length);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(65535, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(1, solver2.nVars());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals((-1498.2106871860374), activeLearning1.getActivityPercent(), 0.01);
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertNotNull(solver2);
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt1 = solver2.dimacs2internal(iVecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals((-1498.2106871860374), activeLearning1.getActivityPercent(), 0.01);
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.nVars());
      assertEquals(65535, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(2, iVecInt1.size());
      assertNotNull(iVecInt1);
      assertEquals(1, intArray0.length);
      
      try { 
        solver1.addBlockingClause(iVecInt1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating trivially inconsistent constraint
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams((-3002));
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertNotNull(glucose21Restarts0);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      solver0.setTimeoutOnConflicts((-3002));
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-3002), solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      
      SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
      solver0.setSimplifier(simplificationType0);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-3002), solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      
      VecInt vecInt0 = new VecInt(436);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(436);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(436, vecInt0.last());
      assertEquals(436, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      SearchParams searchParams1 = new SearchParams(6);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(6, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertNotNull(searchParams1);
      
      SearchParams searchParams2 = new SearchParams();
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(100, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertNotNull(searchParams2);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams2, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.nVars());
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(100, searchParams2.getInitConflictBound());
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertNotNull(solver1);
      
      int[] intArray0 = solver0.findModel(iVecInt0);
      assertNotSame(searchParams0, searchParams2);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(solver0, solver1);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertArrayEquals(new int[] {436}, intArray0);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-3002), solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(437, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(437, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(438, solver0.newVar());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(436, vecInt0.last());
      assertEquals(436, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>((ASolverFactory<Solver<CardinalityDataStructure>>) null);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertNotNull(basicLauncher0);
      
      Solver<MixedDataStructureDanielHT> solver2 = null;
      try {
        solver2 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning1, (MixedDataStructureDanielHT) null, searchParams2, levelBasedVarOrderHeap0, glucose21Restarts0, basicLauncher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(398);
      assertEquals(398, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(398, 398, 1.5, 671);
      assertEquals(671, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(398.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(398.0, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, eMARestarts0);
      assertEquals(398, percentLengthLearning0.getLimit());
      assertEquals(671, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(398.0, searchParams0.getClaDecay(), 0.01);
      assertEquals(398.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 398;
      // Undeclared exception!
      try { 
        solver0.record((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-951.723383));
      assertEquals((-951.723383), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      activeLearning0.init();
      assertEquals((-951.723383), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(0, intArray0.length);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertNotNull(fixedPeriodRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, fixedPeriodRestarts0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-951.723383), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      assertEquals(0, intArray0.length);
      
      solver0.setTimeoutMs(0L);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals((-951.723383), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, intArray0.length);
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      // Undeclared exception!
      try { 
        solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-3958.9466686), 0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNull(restartStrategy0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertNotNull(vec0);
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning1 = new MiniSATLearning<ClausalDataStructureWL>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertNotNull(miniSATLearning1);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(miniSATRestarts0);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(miniSATLearning1, clausalDataStructureWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertNotNull(solver2);
      
      String string0 = solver2.getLogPrefix();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", string0);
      assertNotNull(string0);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertFalse(solver3.isVerbose());
      assertEquals(2, solver3.newVar());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(solver3);
      
      solver3.setVerbose(false);
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(3, solver3.nVars());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1498.2106871860374));
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[1];
      int int0 = 65535;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(1, intArray0.length);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertNotNull(iVecInt0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = solver0.findModel(iVecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-1), (-2)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      // Undeclared exception!
      try { 
        solver0.primeImplicant(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertNotNull(noRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning1, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, naturalStaticOrder0, noRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      NoRestarts noRestarts1 = (NoRestarts)solver0.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertNotNull(noRestarts1);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertSame(noRestarts0, noRestarts1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertNotNull(iLogAble0);
      
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, (SearchParams) null, naturalStaticOrder0, noRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      // Undeclared exception!
      try { 
        solver1.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((-1018));
      assertEquals((-1018), percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, (-1018), 0.0, (-1018));
      assertEquals((-1018), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1018.0), searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1018);
      intArray0[1] = (-1018);
      intArray0[2] = (-1018);
      intArray0[3] = (-1018);
      intArray0[4] = (-1018);
      intArray0[5] = (-1018);
      intArray0[6] = (-1018);
      intArray0[7] = (-1018);
      intArray0[8] = (-1018);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {(-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018)}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(9, intArray0.length);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
      assertArrayEquals(new int[] {(-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018)}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      assertEquals(9, intArray0.length);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertNotNull(glucose21Restarts0);
      
      SolverStats solverStats0 = new SolverStats();
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertNotNull(solverStats0);
      
      glucose21Restarts0.init(searchParams0, solverStats0);
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals((-1018), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1018.0), searchParams0.getClaDecay(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, tabuListDecorator0, glucose21Restarts0);
      assertArrayEquals(new int[] {(-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018)}, intArray0);
      assertEquals((-1018), percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals((-1018), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1018.0), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertNotNull(solver0);
      assertEquals(9, intArray0.length);
      
      solver0.setLearner(percentLengthLearning0);
      assertArrayEquals(new int[] {(-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018)}, intArray0);
      assertEquals((-1018), percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals((-1018), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1018.0), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(9, intArray0.length);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      TabuListDecorator tabuListDecorator1 = new TabuListDecorator(subsetVarOrder0, (-1018));
      assertArrayEquals(new int[] {(-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018)}, intArray0);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator1);
      assertEquals(9, intArray0.length);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertNotNull(basicLauncher0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, tabuListDecorator1, glucose21Restarts0, basicLauncher0);
      assertArrayEquals(new int[] {(-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018)}, intArray0);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals((-1018), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1018.0), searchParams0.getClaDecay(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertNotNull(solver1);
      assertEquals(9, intArray0.length);
      
      int int0 = solver1.currentDecisionLevel();
      assertNotSame(tabuListDecorator1, tabuListDecorator0);
      assertArrayEquals(new int[] {(-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018)}, intArray0);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals((-1018), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1018.0), searchParams0.getClaDecay(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, int0);
      assertEquals(9, intArray0.length);
      
      try { 
        solver1.discardCurrentModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertNotNull(noRestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, pureOrder0, noRestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      assertEquals(0, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0, (-2072));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2072), searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams1 = new SearchParams(0, 1.0E20, 0.0, 1607);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1.0E20, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1607, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertNotNull(searchParams1);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams1, pureOrder0, noRestarts0, mUSLauncher0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E20, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1607, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      NoRestarts noRestarts1 = (NoRestarts)solver1.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertNotSame(searchParams1, searchParams0);
      assertSame(noRestarts1, noRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E20, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1607, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertFalse(noRestarts1.shouldRestart());
      assertNotNull(noRestarts1);
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMin>(0.0);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.0, activeLearning1.getActivityPercent(), 0.01);
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2072));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-2072), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(activeLearning1, cardinalityDataStructureYanMin0, pureOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-2072), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.0, activeLearning1.getActivityPercent(), 0.01);
      assertNotNull(solver2);
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertNotNull(vec0);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver1, true);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E20, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1607, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.nVars());
      assertNotNull(maxSatDecorator0);
      
      IVecInt iVecInt0 = maxSatDecorator0.createBlockingClauseForCurrentModel();
      assertSame(noRestarts0, noRestarts1);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E20, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1607, searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(7, solver1.nVars());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(8, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertNull(iVecInt0);
      
      Vec<IVecInt> vec1 = new Vec<IVecInt>(500, (IVecInt) null);
      assertFalse(vec1.equals((Object)vec0));
      assertFalse(vec1.isEmpty());
      assertEquals(500, vec1.size());
      assertNotNull(vec1);
      
      // Undeclared exception!
      try { 
        solver2.addAllClauses(vec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(30);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertNotNull(miniSATRestarts0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      solver0.setDataStructureFactory(cardinalityDataStructureYanMin0);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      levelBasedVarOrderHeap0.setVarDecay(30);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning1, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      int int0 = solver1.getTimeout();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(2147483, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(1622.28761307596, (-1059));
      assertEquals((-1059), searchParams0.getInitConflictBound());
      assertEquals(1622.28761307596, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertNotNull(phaseCachingAutoEraseStrategy0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(arminRestarts0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(1242);
      assertEquals(1242, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, arminRestarts0);
      assertEquals((-1059), searchParams0.getInitConflictBound());
      assertEquals(1622.28761307596, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(1242, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, randomWalkDecorator0, arminRestarts0, iLogAble0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1059), searchParams0.getInitConflictBound());
      assertEquals(1622.28761307596, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(1242, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertNotNull(solver1);
      
      ISimplifier iSimplifier0 = solver1.getSimplifier();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1059), searchParams0.getInitConflictBound());
      assertEquals(1622.28761307596, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Phase caching with auto forget feature", phaseCachingAutoEraseStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(1242, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertNotNull(iSimplifier0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 0;
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder(500);
      assertEquals(500, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      cardinalityDataStructureYanMin0.conflictDetectedInWatchesFor(500, 0);
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, pureOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(500, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      Map<String, Number> map0 = solver0.getStat();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(500, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(17, map0.size());
      assertFalse(map0.isEmpty());
      assertNotNull(map0);
      
      solver0.cancelUntilTrailLevel((-2660));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(500, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      Solver<ClausalDataStructureWL> solver1 = null;
      try {
        solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, (ClausalDataStructureWL) null, pureOrder0, lubyRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      String string0 = activeLearning0.toString();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("Limit learning to clauses containing active literals (95.0%)", string0);
      assertNotNull(string0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertNotNull(lubyRestarts0);
      
      LubyRestarts lubyRestarts1 = new LubyRestarts(5);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(5, lubyRestarts1.getFactor());
      assertNotNull(lubyRestarts1);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(5, lubyRestarts1.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      assertEquals(0, intArray0.length);
      
      VecInt vecInt0 = new VecInt(5, 5);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(5, vecInt0.last());
      assertNotNull(vecInt0);
      
      int[] intArray1 = solver0.findModel((IVecInt) vecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {5}, intArray1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts1.luby());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(5, lubyRestarts1.getFactor());
      assertEquals(5L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(6, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(6, solver0.realNumberOfVariables());
      assertEquals(7, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(5, vecInt0.last());
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>(32);
      assertEquals(32.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      CardinalityDataStructure cardinalityDataStructure2 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure2.equals((Object)cardinalityDataStructure0));
      assertFalse(cardinalityDataStructure2.equals((Object)cardinalityDataStructure1));
      assertNotNull(cardinalityDataStructure2);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(1000);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1000, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1000, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertNotNull(solver1);
      assertEquals(0, intArray0.length);
      
      VecInt vecInt1 = new VecInt(intArray1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {5}, intArray1);
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure2));
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertEquals(5, vecInt1.last());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts1.luby());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(5, lubyRestarts1.getFactor());
      assertEquals(5L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(8, solver0.nVars());
      assertEquals(8, solver0.realNumberOfVariables());
      assertEquals(9, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(5, vecInt0.last());
      assertNotNull(vecInt1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertNotSame(iVecInt0, vecInt1);
      assertSame(iVecInt0, vecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt0);
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertEquals(5, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(5, vecInt0.last());
      assertNotNull(iVecInt0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertNotNull(solver2);
      assertEquals(0, intArray0.length);
      
      ILogAble iLogAble0 = solver2.out;
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(iLogAble0);
      assertEquals(0, intArray0.length);
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertFalse(solver3.equals((Object)solver2));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1000, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(4, solver3.realNumberOfVariables());
      assertEquals(5, solver3.newVar());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(4, solver3.nVars());
      assertEquals(0, solver3.nConstraints());
      assertEquals(32.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertNotNull(solver3);
      assertEquals(0, intArray0.length);
      
      VecInt vecInt2 = (VecInt)solver3.trail;
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, iVecInt0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertNotNull(vecInt2);
      assertEquals(0, intArray0.length);
      
      IVecInt iVecInt1 = solver1.dimacs2internal(vecInt2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(lubyRestarts0, lubyRestarts1);
      assertNotSame(solver2, solver3);
      assertNotSame(solver3, solver2);
      assertNotSame(vecInt2, iVecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, vecInt1);
      assertNotSame(iVecInt1, vecInt2);
      assertNotSame(iVecInt1, iVecInt0);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertFalse(solver2.equals((Object)solver3));
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt1));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertTrue(iVecInt1.equals((Object)vecInt2));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1000, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(9, solver2.realNumberOfVariables());
      assertEquals(10, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(9, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(8, solver3.realNumberOfVariables());
      assertEquals(9, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(8, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertNotNull(iVecInt1);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        solver0.isSatisfiable(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertNotNull(basicLauncher0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts0, basicLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>((-2724));
      assertEquals((-2724), percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals((-2724), percentLengthLearning0.getLimit());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertNotNull(solver1);
      
      ActivityLCDS activityLCDS0 = (ActivityLCDS)solver1.activity_based;
      assertNotNull(activityLCDS0);
      
      // Undeclared exception!
      try { 
        solver0.setLearnedConstraintsDeletionStrategy((LearnedConstraintsDeletionStrategy) activityLCDS0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 500;
      intArray0[1] = 7;
      intArray0[2] = 0;
      intArray0[3] = 1;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {500, 7, 0, 1}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(4, intArray0.length);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertNotNull(glucose21Restarts0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, subsetVarOrder0, glucose21Restarts0);
      assertArrayEquals(new int[] {500, 7, 0, 1}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      assertEquals(4, intArray0.length);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      solver0.setLogger(mUSLauncher0);
      assertArrayEquals(new int[] {500, 7, 0, 1}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1498.2106871860374));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      String string0 = activeLearning0.toString();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals("Limit learning to clauses containing active literals (-149821.06871860372%)", string0);
      assertNotNull(string0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[1];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      assertEquals(1, intArray0.length);
      
      int[] intArray1 = solver0.findModel(iVecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-1), (-2)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>((-1498.2106871860374));
      assertEquals((-1498.2106871860374), activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(32, (-1498.2106871860374), 32, (-2253));
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals((-1498.2106871860374), activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(solver1);
      assertEquals(1, intArray0.length);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertNotNull(searchParams1);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(1000);
      assertEquals(1000, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(1000, percentLengthLearning0.getLimit());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertNotNull(solver2);
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt1 = solver2.createBlockingClauseForCurrentModel();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(searchParams0, searchParams1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(1000, percentLengthLearning0.getLimit());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertNotNull(iVecInt1);
      assertEquals(1, intArray0.length);
      
      SearchParams searchParams2 = new SearchParams();
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(100, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams2);
      
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt2 = vecInt0.push((-2253));
      assertNotSame(intArray0, intArray1);
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt1);
      assertSame(iVecInt2, vecInt0);
      assertNotSame(iVecInt2, iVecInt1);
      assertNotSame(iVecInt2, iVecInt0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt2.equals((Object)iVecInt1));
      assertFalse(iVecInt2.equals((Object)iVecInt0));
      assertEquals((-2253), vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, iVecInt2.size());
      assertFalse(iVecInt2.isEmpty());
      assertEquals((-2253), iVecInt2.last());
      assertNotNull(iVecInt2);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        solver2.addExactly(vecInt0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 672);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(672, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder((-1368));
      assertEquals((-1368), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 0.0);
      assertEquals((-1368), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertNotNull(noRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, noRestarts0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(672, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1368), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      long long0 = solver0.getTimeoutMs();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(672, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1368), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483647L, long0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(0.0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder(1249);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1249, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, pureOrder0, noRestarts0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1249, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      SolverStats solverStats0 = solver0.stats;
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertNotNull(solverStats0);
      
      solver0.initStats(solverStats0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1249, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      String string0 = activeLearning0.toString();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("Limit learning to clauses containing active literals (95.0%)", string0);
      assertNotNull(string0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      LubyRestarts lubyRestarts1 = new LubyRestarts(5);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(5, lubyRestarts1.getFactor());
      assertNotNull(lubyRestarts1);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(5, lubyRestarts1.getFactor());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      assertEquals(0, intArray0.length);
      
      VecInt vecInt0 = new VecInt(5, 5);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(5, vecInt0.last());
      assertNotNull(vecInt0);
      
      int[] intArray1 = solver0.findModel((IVecInt) vecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {5}, intArray1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts1.luby());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(5, lubyRestarts1.getFactor());
      assertEquals(5L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(7, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(6, solver0.nVars());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(5, vecInt0.last());
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>(32);
      assertEquals(32.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      CardinalityDataStructure cardinalityDataStructure2 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure2.equals((Object)cardinalityDataStructure1));
      assertFalse(cardinalityDataStructure2.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure2);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure2));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(8, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(8, solver1.nVars());
      assertEquals(1, lubyRestarts1.luby());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(5, lubyRestarts1.getFactor());
      assertEquals(5L, lubyRestarts1.nextRestartNumberOfConflict());
      assertNotNull(solver1);
      
      solver0.setTimeoutOnConflicts(5);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(cardinalityDataStructure0, cardinalityDataStructure1);
      assertNotSame(cardinalityDataStructure0, cardinalityDataStructure2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(solver0, solver1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts1.luby());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(5, lubyRestarts1.getFactor());
      assertEquals(5L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(11, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(10, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(10, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.getTimeout());
      assertEquals(0, intArray0.length);
      
      SimplificationType simplificationType0 = SimplificationType.EXPENSIVE_SIMPLIFICATION;
      UnitClauses unitClauses0 = (UnitClauses)solver0.addBlockingClause(vecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(cardinalityDataStructure0, cardinalityDataStructure1);
      assertNotSame(cardinalityDataStructure0, cardinalityDataStructure2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(solver0, solver1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(unitClauses0.isSatisfied());
      assertFalse(unitClauses0.simplify());
      assertFalse(unitClauses0.canBePropagatedMultipleTimes());
      assertEquals(1, lubyRestarts1.luby());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(5, lubyRestarts1.getFactor());
      assertEquals(5L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(12, solver0.nVars());
      assertEquals(13, solver0.newVar());
      assertEquals(12, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.getTimeout());
      assertEquals(1, solver0.nConstraints());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(5, vecInt0.last());
      assertNotNull(unitClauses0);
      assertEquals(0, intArray0.length);
      
      solver0.setSimplifier(simplificationType0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(cardinalityDataStructure0, cardinalityDataStructure1);
      assertNotSame(cardinalityDataStructure0, cardinalityDataStructure2);
      assertNotSame(intArray0, intArray1);
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(solver0, solver1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure2));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts1.luby());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(5, lubyRestarts1.getFactor());
      assertEquals(5L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(14, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(15, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.getTimeout());
      assertEquals(14, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nConstraints());
      assertEquals(0, intArray0.length);
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      // Undeclared exception!
      try { 
        solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts1, learnedConstraintsEvaluationType0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>((-1866));
      assertEquals((-1866), percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(1.0, (-1866), (-1866), (-1866));
      assertEquals((-1866), searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1866.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1866.0), searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2238));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-2238), lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, randomWalkDecorator0, lubyRestarts0, mUSLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-1866), percentLengthLearning0.getLimit());
      assertEquals((-1866), searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1866.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1866.0), searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-2238), lubyRestarts0.getFactor());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      solver0.modelFound();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-1866), percentLengthLearning0.getLimit());
      assertEquals((-1866), searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1866.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1866.0), searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-2238), lubyRestarts0.getFactor());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((-1018));
      assertEquals((-1018), percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, (-1018), 0.0, (-1018));
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1018.0), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1018), searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1018);
      intArray0[1] = (-1018);
      intArray0[2] = (-1018);
      intArray0[3] = (-1018);
      intArray0[4] = (-1018);
      intArray0[5] = (-1018);
      intArray0[6] = (-1018);
      intArray0[7] = (-1018);
      intArray0[8] = (-1018);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {(-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018)}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(9, intArray0.length);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
      assertArrayEquals(new int[] {(-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018)}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      assertEquals(9, intArray0.length);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(eMARestarts0);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>((-1018));
      assertEquals((-1018), fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, eMARestarts0);
      assertArrayEquals(new int[] {(-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018), (-1018)}, intArray0);
      assertEquals((-1018), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(solver0);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        solver0.findModel();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1018
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams((-3002));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      PureOrder pureOrder0 = new PureOrder(3);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(3, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, eMARestarts0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(3, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(3, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, eMARestarts0, iLogAble0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(3, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertNotNull(solver1);
      
      // Undeclared exception!
      try { 
        solver1.printInfos((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(32);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(32);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      SearchParams searchParams1 = new SearchParams(32);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(32, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertNotNull(searchParams1);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningButHeuristics0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      int int0 = solver0.newVar(1458);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1460, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1459, solver0.realNumberOfVariables());
      assertEquals(1458, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1458, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertNotNull(mUSLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(6, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(7, solver1.newVar());
      assertEquals(6, solver1.realNumberOfVariables());
      assertNotNull(solver1);
      
      // Undeclared exception!
      try { 
        solver1.reduceDB();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>(1);
      assertEquals(1, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, pureOrder0, noRestarts0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(1, percentLengthLearning1.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning2.getLimit());
      assertNotNull(percentLengthLearning2);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, pureOrder0, noRestarts0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      int[] intArray0 = new int[0];
      solver1.backtrack(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, intArray0.length);
      
      SearchParams searchParams0 = new SearchParams(476.8253587, 500);
      assertEquals(476.8253587, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-1964));
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(tabuListDecorator0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, noRestarts0);
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(476.8253587, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(500, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertNotNull(solver2);
      
      VecInt vecInt0 = (VecInt)solver2.decisions;
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      Pair pair0 = new Pair();
      assertEquals(0, pair0.getBacktrackLevel());
      assertNotNull(pair0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(32, 7);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder(137);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertNotNull(noRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      ActiveLearning<CardinalityDataStructure> activeLearning1 = new ActiveLearning<CardinalityDataStructure>(7);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(7.0, activeLearning1.getActivityPercent(), 0.01);
      assertNotNull(activeLearning1);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      activeLearning1.init();
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(7.0, activeLearning1.getActivityPercent(), 0.01);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning1, cardinalityDataStructure0, searchParams0, pureOrder0, noRestarts0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(7.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      solver0.unset(7);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(7.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      ILits iLits0 = solver0.getVocabulary();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(7.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, iLits0.realnVars());
      assertEquals(5, iLits0.nVars());
      assertNotNull(iLits0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(7);
      assertEquals(7, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertNotNull(clausalDataStructureWL1);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, pureOrder0, noRestarts0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructure>> manyCore0 = new ManyCore<Solver<CardinalityDataStructure>>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, searchParams0, pureOrder0, noRestarts0, mUSLauncher0);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(solver2);
      
      solver2.setUnitClauseProvider(manyCore0);
      assertNotSame(solver2, solver1);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(5, solver2.nVars());
      assertEquals(5, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, stringArray0.length);
      
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(2877);
      assertEquals(2877, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver3 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning1, mixedDataStructureDanielWLConciseBinary0, pureOrder0, noRestarts0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2877, percentLengthLearning1.getLimit());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(2, solver3.newVar());
      assertNotNull(solver3);
      
      NoRestarts noRestarts1 = (NoRestarts)solver3.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2877, percentLengthLearning1.getLimit());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(3, solver3.nVars());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(4, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertFalse(noRestarts1.shouldRestart());
      assertNotNull(noRestarts1);
      
      Solver<MixedDataStructureDanielWL> solver4 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, noRestarts1, mUSLauncher0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(2877, percentLengthLearning1.getLimit());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals(6, solver3.newVar());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(5, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertFalse(noRestarts1.shouldRestart());
      assertFalse(solver4.isSolverKeptHot());
      assertEquals(0, solver4.nConstraints());
      assertEquals("c ", solver4.getLogPrefix());
      assertEquals(0, solver4.decisionLevel());
      assertEquals(0, solver4.getPropagationLevel());
      assertEquals(1, solver4.realNumberOfVariables());
      assertEquals(0, solver4.currentDecisionLevel());
      assertFalse(solver4.isVerbose());
      assertEquals(2, solver4.newVar());
      assertEquals(1, solver4.nVars());
      assertEquals(2147483, solver4.getTimeout());
      assertFalse(solver4.isDBSimplificationAllowed());
      assertNotNull(solver4);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver3);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2877, percentLengthLearning1.getLimit());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(7, solver3.nVars());
      assertEquals(7, solver3.realNumberOfVariables());
      assertEquals(8, solver3.newVar());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertNotNull(maxSatDecorator0);
      
      IVecInt iVecInt0 = maxSatDecorator0.createBlockingClauseForCurrentModel();
      assertSame(noRestarts0, noRestarts1);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2877, percentLengthLearning1.getLimit());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(9, solver3.realNumberOfVariables());
      assertEquals(10, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.nConstraints());
      assertEquals(9, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        solver4.addBlockingClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams((-3002));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertNotNull(glucose21Restarts0);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3002), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        solver0.toString();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertNotNull(glucose21Restarts0);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      MockFile mockFile0 = new MockFile("org.sat4j.minisat.core.Solver$5");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
      assertNotNull(mockPrintWriter1);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      solver0.printInfos((PrintWriter) mockPrintWriter0, "speed (assignments/second)\t: ");
      assertNotSame(mockPrintWriter0, mockPrintWriter1);
      assertFalse(mockPrintWriter0.equals((Object)mockPrintWriter1));
      assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("org.sat4j.minisat.core.Solver$5", mockFile0.getName());
      assertEquals("org.sat4j.minisat.core.Solver$5", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      int int0 = Integer.MIN_VALUE;
      SearchParams searchParams0 = new SearchParams(Integer.MIN_VALUE);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder(2);
      assertEquals(2, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      assertEquals(2, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, tabuListDecorator0, lubyRestarts0, (ILogAble) null);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams0.getInitConflictBound());
      assertEquals(2, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams0.getInitConflictBound());
      assertEquals(2, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(2, lubyRestarts1.getFactor());
      assertNotNull(lubyRestarts1);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams0.getInitConflictBound());
      assertEquals(2, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(2, lubyRestarts1.getFactor());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(7, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(6, solver1.nVars());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertNotNull(solver1);
      
      SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
      solver1.setSimplifier(simplificationType0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertNotSame(solver0, solver1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(solver1, solver0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams0.getInitConflictBound());
      assertEquals(2, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(11, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(12, solver0.newVar());
      assertEquals(11, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, lubyRestarts1.luby());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(2, lubyRestarts1.getFactor());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(10, solver1.realNumberOfVariables());
      assertEquals(10, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(11, solver1.newVar());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver2 = null;
      try {
        solver2 = new Solver<CardinalityDataStructure>((LearningStrategy<CardinalityDataStructure>) null, cardinalityDataStructure0, searchParams0, tabuListDecorator0, lubyRestarts1, (ILogAble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(30);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(miniSATRestarts0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      solver0.setDataStructureFactory(cardinalityDataStructureYanMin0);
      assertEquals(30, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      levelBasedVarOrderHeap0.setVarDecay(30);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(solver1);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertNotNull(solver2);
      
      SolverStats solverStats0 = solver2.getStats();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertNotNull(solverStats0);
      
      solver1.initStats(solverStats0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      Lbool lbool0 = solver1.truthValue(30);
      assertEquals("U", lbool0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(lbool0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams((-3958.9466686), 0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      RestartStrategy restartStrategy0 = null;
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      RestartStrategy restartStrategy1 = solver0.getRestartStrategy();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNull(restartStrategy1);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertNotNull(arminRestarts0);
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertEquals(4, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertNotNull(solver1);
      
      IConstr iConstr0 = solver1.addAtLeast(iVecInt0, (-1149));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3958.9466686), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertEquals(4, iVecInt0.last());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertNull(iConstr0);
      
      Solver<MixedDataStructureDanielWL> solver2 = null;
      try {
        solver2 = new Solver<MixedDataStructureDanielWL>((LearningStrategy<MixedDataStructureDanielWL>) null, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertNotNull(noRestarts0);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(1);
      assertEquals(1, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, pureOrder0, noRestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax1, pureOrder0, noRestarts0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertNotNull(solver1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      assertNotNull(dataOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      pipedOutputStream0.flush();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning2 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      assertEquals(10, percentLengthLearning2.getLimit());
      assertNotNull(percentLengthLearning2);
      
      solver0.printStat((PrintWriter) mockPrintWriter0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertNotNull(noRestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, pureOrder0, noRestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertNotNull(solver0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, pureOrder0, noRestarts0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      AgeLCDS ageLCDS0 = (AgeLCDS)solver1.age_based;
      assertNotNull(ageLCDS0);
      
      solver0.reset();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      VecInt vecInt0 = new VecInt(0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning2 = new PercentLengthLearning<MixedDataStructureSingleWL>(68);
      assertEquals(68, percentLengthLearning2.getLimit());
      assertNotNull(percentLengthLearning2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int int0 = 65535;
      int[] intArray0 = new int[9];
      intArray0[0] = 65535;
      intArray0[1] = 65535;
      intArray0[2] = 65535;
      intArray0[3] = 65535;
      intArray0[4] = 65535;
      intArray0[5] = (-1438);
      intArray0[6] = 65535;
      intArray0[7] = 65535;
      intArray0[8] = 65535;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {65535, 65535, 65535, 65535, 65535, (-1438), 65535, 65535, 65535}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(9, intArray0.length);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {65535, 65535, 65535, 65535, 65535, (-1438), 65535, 65535, 65535}, intArray0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(solver0);
      assertEquals(9, intArray0.length);
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {65535, 65535, 65535, 65535, 65535, (-1438), 65535, 65535, 65535}, intArray0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(9, intArray0.length);
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {65535, 65535, 65535, 65535, 65535, (-1438), 65535, 65535, 65535}, intArray0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-4), iVecInt0.last());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(iVecInt0);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        solver0.findModel(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65535
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(0.0, (-1972.0802), 0.0, 0);
      assertEquals((-1972.0802), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertNotNull(positiveLiteralSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertNotNull(arminRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, arminRestarts0);
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      ArminRestarts arminRestarts1 = (ArminRestarts)solver0.getRestartStrategy();
      assertSame(arminRestarts0, arminRestarts1);
      assertSame(arminRestarts1, arminRestarts0);
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertNotNull(arminRestarts1);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, arminRestarts1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1972.0802), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      boolean boolean0 = solver1.isVerbose();
      assertSame(arminRestarts0, arminRestarts1);
      assertSame(arminRestarts1, arminRestarts0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals((-1972.0802), searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      int[] intArray0 = new int[9];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(9, intArray0.length);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertNotNull(fixedPeriodRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, fixedPeriodRestarts0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1191.0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1191.0, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertNotNull(fixedPeriodRestarts0);
      
      activeLearning0.setVarActivityListener((VarActivityListener) null);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1191.0, activeLearning0.getActivityPercent(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1191.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      solver0.clearLearntClauses();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1191.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(1191.0, Integer.MIN_VALUE);
      assertEquals(1191.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      FixedPeriodRestarts fixedPeriodRestarts1 = new FixedPeriodRestarts();
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertNotNull(fixedPeriodRestarts1);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts1);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1191.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      solver1.setLogPrefix("");
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1191.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(Integer.MIN_VALUE, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("", solver1.getLogPrefix());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(eMARestarts0);
      
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureSingleWL>(7);
      assertEquals(7, fixedLengthLearning1.getMaxLength());
      assertNotNull(fixedLengthLearning1);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning1, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, eMARestarts0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(7, fixedLengthLearning1.getMaxLength());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      UnitClause unitClause0 = new UnitClause(7);
      assertTrue(unitClause0.isSatisfied());
      assertEquals(1, unitClause0.size());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertFalse(unitClause0.learnt());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertFalse(unitClause0.simplify());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertNotNull(unitClause0);
      
      solver0.record(unitClause0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(7, fixedLengthLearning1.getMaxLength());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertTrue(unitClause0.isSatisfied());
      assertEquals(1, unitClause0.size());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertFalse(unitClause0.learnt());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertFalse(unitClause0.simplify());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertNotNull(cardinalityDataStructureYanMax1);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      SearchParams searchParams0 = new SearchParams(7);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL1 = new MixedDataStructureSingleWL();
      assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
      assertNotNull(mixedDataStructureSingleWL1);
      
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(miniSATLearning0, mixedDataStructureSingleWL0, varOrderHeap0, eMARestarts0);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(mixedDataStructureSingleWL0.equals((Object)mixedDataStructureSingleWL1));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(solver1);
      
      int int0 = solver1.newVar(500);
      assertNotSame(solver1, solver0);
      assertNotSame(mixedDataStructureSingleWL0, mixedDataStructureSingleWL1);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(mixedDataStructureSingleWL0.equals((Object)mixedDataStructureSingleWL1));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(502, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(500, solver1.nVars());
      assertEquals(501, solver1.realNumberOfVariables());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(500, int0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(5);
      assertEquals(5, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertNotNull(glucose21Restarts0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertEquals(5, percentLengthLearning0.getLimit());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      SolverStats solverStats0 = new SolverStats();
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertNotNull(solverStats0);
      
      solver0.initStats(solverStats0);
      assertEquals(5, percentLengthLearning0.getLimit());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      cardinalityDataStructureYanMax0.setUnitPropagationListener(solver0);
      assertEquals(5, percentLengthLearning0.getLimit());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertNotNull(solver1);
      
      solver1.setOrder(levelBasedVarOrderHeap0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      
      int int0 = solver1.decisionLevel();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, int0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(5);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(5, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<ClausalDataStructureWL> solver2 = null;
      try {
        solver2 = new Solver<ClausalDataStructureWL>((LearningStrategy<ClausalDataStructureWL>) null, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      int int0 = 7;
      NoRestarts noRestarts0 = new NoRestarts();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertNotNull(noRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, noRestarts0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      percentLengthLearning0.setSolver(solver0);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 7);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(tabuListDecorator0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(5, solver1.nVars());
      assertNotNull(solver1);
      
      varOrderHeap0.init();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      boolean boolean0 = solver1.isSatisfiable(false);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(solver1, solver0);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertTrue(boolean0);
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams0 = new SearchParams(43);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(43, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertNotNull(basicLauncher0);
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, noRestarts0, basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(43, searchParams0.getInitConflictBound());
      assertNotNull(solver2);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, tabuListDecorator0, noRestarts0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(2, solver3.newVar());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertNotNull(solver3);
      
      IVecInt iVecInt0 = solver3.getOutLearnt();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(3, solver3.nVars());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(4, solver3.newVar());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      try { 
        cardinalityDataStructure0.createClause(iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = null;
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      int int0 = 0;
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertNotNull(noRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning1, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, naturalStaticOrder0, noRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        solver0.assume(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertNotNull(eMARestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, pureOrder0, eMARestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertNotNull(solver0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1.1);
      assertEquals(1.1, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertNotNull(mUSLauncher0);
      
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, eMARestarts0, mUSLauncher0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertNotNull(solver1);
      
      EMARestarts eMARestarts1 = (EMARestarts)solver1.getRestartStrategy();
      assertSame(eMARestarts0, eMARestarts1);
      assertSame(eMARestarts1, eMARestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      assertNotNull(eMARestarts1);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertNotNull(arminRestarts0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, eMARestarts1);
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(solver2);
      
      VecInt vecInt0 = (VecInt)AbstractMinimalModel.positiveLiterals(solver0);
      assertSame(eMARestarts0, eMARestarts1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertNotNull(vecInt0);
      
      AtLeast atLeast0 = (AtLeast)solver2.addAtLeast(vecInt0, (-301));
      assertSame(eMARestarts0, eMARestarts1);
      assertSame(eMARestarts1, eMARestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.nVars());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0L, eMARestarts1.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts1.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertFalse(atLeast0.isSatisfied());
      assertFalse(atLeast0.learnt());
      assertEquals(2, atLeast0.size());
      assertTrue(atLeast0.locked());
      assertFalse(atLeast0.simplify());
      assertEquals((-301), atLeast0.requiredNumberOfSatisfiedLiterals());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertNotNull(atLeast0);
      
      SizeLCDS sizeLCDS0 = (SizeLCDS)solver1.size_based;
      assertNotNull(sizeLCDS0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1498.2106871860374));
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      String string0 = activeLearning0.toString();
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("Limit learning to clauses containing active literals (-149821.06871860372%)", string0);
      assertNotNull(string0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[1];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(1, intArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      assertEquals(1, intArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$}Cov;jv[LL|)");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray1 = solver0.findModel(iVecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {(-1), (-2)}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>((-1498.2106871860374));
      assertEquals(0, activeLearning1.getLimit());
      assertEquals((-1498.2106871860374), activeLearning1.getActivityPercent(), 0.01);
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(32, (-1498.2106871860374), 32, (-2253));
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals((-1498.2106871860374), activeLearning1.getActivityPercent(), 0.01);
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertNotNull(solver1);
      assertEquals(1, intArray0.length);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder(65535);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(65535, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertNotNull(pureOrder0);
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertNotNull(clauseOnlyLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, lubyRestarts0, mUSLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(65535, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(solver2);
      
      boolean boolean2 = solver2.assume(14);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(65535, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.getPropagationLevel());
      assertEquals(1, solver2.currentDecisionLevel());
      assertEquals(1, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertTrue(boolean2);
      
      LubyRestarts lubyRestarts1 = (LubyRestarts)solver2.getRestartStrategy();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(lubyRestarts0, lubyRestarts1);
      assertSame(lubyRestarts1, lubyRestarts0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(65535, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(5, solver2.nVars());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.getPropagationLevel());
      assertEquals(1, solver2.currentDecisionLevel());
      assertEquals(1, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals((-1498.2106871860374), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2253), searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(lubyRestarts1);
      
      MUSLauncher mUSLauncher1 = new MUSLauncher();
      assertFalse(mUSLauncher1.equals((Object)mUSLauncher0));
      assertEquals(0L, mUSLauncher1.getBeginTime());
      assertFalse(mUSLauncher1.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher1.getExitCode());
      assertNotNull(mUSLauncher1);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(4864);
      assertEquals(4864, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertNotNull(rSATPhaseSelectionStrategy0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, varOrderHeap0, eMARestarts0);
      assertFalse(solver3.equals((Object)solver0));
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(8, solver3.newVar());
      assertEquals(7, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(7, solver3.nVars());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.nConstraints());
      assertEquals(0, solver3.getPropagationLevel());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertNotNull(solver3);
      
      // Undeclared exception!
      try { 
        solver0.undoOne();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      PureOrder pureOrder0 = new PureOrder(0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertNotNull(miniSATRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, miniSATRestarts0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      solver0.clearLearntClauses();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, 1193);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(binaryClauses0.canBePropagatedMultipleTimes());
      assertFalse(binaryClauses0.learnt());
      assertEquals(0.0, binaryClauses0.getActivity(), 0.01);
      assertFalse(binaryClauses0.simplify());
      assertEquals(0, binaryClauses0.size());
      assertFalse(binaryClauses0.locked());
      assertNotNull(binaryClauses0);
      
      Pair pair0 = new Pair();
      assertEquals(0, pair0.getBacktrackLevel());
      assertNotNull(pair0);
      
      // Undeclared exception!
      try { 
        solver0.analyze(binaryClauses0, pair0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      PureOrder pureOrder0 = new PureOrder(5);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(5, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(miniSATRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, miniSATRestarts0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(5, pureOrder0.getPeriod());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertNotNull(solver0);
      
      solver0.clearLearntClauses();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(5, pureOrder0.getPeriod());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder((-137));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-137), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertNotNull(pureOrder0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertNotNull(arminRestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, pureOrder0, arminRestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals((-137), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        solver0.primeImplicant((-137));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(32, 7);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder(137);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, pureOrder0, noRestarts0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        solver0.primeImplicant(47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(32, 32);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertNotNull(searchParams0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1.1);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.1, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertNotNull(mUSLauncher0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)3;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte)12, (byte)0, (byte)3}, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, randomWalkDecorator0, lubyRestarts0, mUSLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.1, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      RandomWalkDecorator randomWalkDecorator1 = (RandomWalkDecorator)solver0.getOrder();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertEquals(1.1, randomWalkDecorator1.getProbability(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.1, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(randomWalkDecorator1);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, randomWalkDecorator1, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1.1, randomWalkDecorator1.getProbability(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.1, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver1);
      
      solver1.sortOnActivity();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertSame(randomWalkDecorator1, randomWalkDecorator0);
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertEquals(1.1, randomWalkDecorator1.getProbability(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.1, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, randomWalkDecorator0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1.1, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(solver2);
      
      VecInt vecInt0 = new VecInt(6, 6);
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.last());
      assertEquals(6, vecInt0.size());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = (VecInt)vecInt0.push(308);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(308, vecInt0.last());
      assertEquals(7, vecInt0.size());
      assertEquals(7, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(308, vecInt1.last());
      assertNotNull(vecInt1);
      
      MinWatchCard minWatchCard0 = (MinWatchCard)solver2.addBlockingClause(vecInt1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt1, vecInt0);
      assertSame(randomWalkDecorator0, randomWalkDecorator1);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver2.isVerbose());
      assertEquals(1, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(309, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(310, solver2.newVar());
      assertEquals(309, solver2.realNumberOfVariables());
      assertFalse(vecInt0.isEmpty());
      assertEquals(308, vecInt0.last());
      assertEquals(7, vecInt0.size());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(7, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(308, vecInt1.last());
      assertEquals(1.1, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.simplify());
      assertEquals(7, minWatchCard0.size());
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard0.learnt());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertNotNull(minWatchCard0);
      
      // Undeclared exception!
      try { 
        solver1.addClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      String string0 = activeLearning0.toString();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("Limit learning to clauses containing active literals (95.0%)", string0);
      assertNotNull(string0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertNotNull(lubyRestarts0);
      
      int int0 = 5;
      LubyRestarts lubyRestarts1 = new LubyRestarts(5);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(5, lubyRestarts1.getFactor());
      assertNotNull(lubyRestarts1);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(5, lubyRestarts1.getFactor());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      assertEquals(0, intArray0.length);
      
      VecInt vecInt0 = new VecInt(5, 5);
      assertEquals(5, vecInt0.size());
      assertEquals(5, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int[] intArray1 = solver0.findModel((IVecInt) vecInt0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertNotSame(intArray0, intArray1);
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new int[] {5}, intArray1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(5L, lubyRestarts1.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(5, lubyRestarts1.getFactor());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.nVars());
      assertEquals(7, solver0.newVar());
      assertEquals(6, solver0.realNumberOfVariables());
      assertEquals(5, vecInt0.size());
      assertEquals(5, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(intArray1);
      assertEquals(0, intArray0.length);
      assertEquals(1, intArray1.length);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>(32);
      assertEquals(32.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure1);
      
      CardinalityDataStructure cardinalityDataStructure2 = new CardinalityDataStructure();
      assertFalse(cardinalityDataStructure2.equals((Object)cardinalityDataStructure1));
      assertFalse(cardinalityDataStructure2.equals((Object)cardinalityDataStructure0));
      assertNotNull(cardinalityDataStructure2);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure2));
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(8, solver1.realNumberOfVariables());
      assertEquals(9, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(8, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5L, lubyRestarts1.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts1.shouldRestart());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(5, lubyRestarts1.getFactor());
      assertNotNull(solver1);
      
      VecInt vecInt1 = new VecInt();
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertNotNull(vecInt1);
      
      vecInt1.unsafePush(0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
      
      IVecInt iVecInt0 = vecInt0.push(6);
      assertNotSame(iVecInt0, vecInt1);
      assertSame(iVecInt0, vecInt0);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertEquals(6, iVecInt0.last());
      assertEquals(6, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(6, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.last());
      assertNotNull(iVecInt0);
      
      SearchParams searchParams0 = new SearchParams(32);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure2));
      assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(10, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(11, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(10, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertNotNull(solver2);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        solver1.findModel((IVecInt) vecInt1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertNotNull(solver0);
      
      solver0.clearLearntClauses();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, (SearchParams) null, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertNotNull(solver1);
      
      solver1.undertimeout = true;
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      
      solver1.setDBSimplificationAllowed(false);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(5, solver1.nVars());
      
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = new SearchParams(32, 395);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(395, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertNotNull(basicLauncher0);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, lubyRestarts0, basicLauncher0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(395, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(solver2);
      
      solver2.registerLiteral(32);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(33, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(34, solver2.newVar());
      assertEquals(33, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(395, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, naturalStaticOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      solver0.sortOnActivity();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(32);
      assertEquals(32, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams((-1983.2), (-1876.3414), 742.0, (-1469));
      assertEquals((-1983.2), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1469), searchParams0.getInitConflictBound());
      assertEquals(742.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1876.3414), searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertNotNull(fixedLengthLearning1);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams1);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertNotNull(miniSATRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning1, mixedDataStructureDanielWLConciseBinary0, searchParams1, naturalStaticOrder0, miniSATRestarts0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertNotNull(solver1);
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, lubyRestarts0, iLogAble0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, percentLengthLearning0.getLimit());
      assertEquals((-1983.2), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1469), searchParams0.getInitConflictBound());
      assertEquals(742.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1876.3414), searchParams0.getClaDecay(), 0.01);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(5, solver1.nVars());
      assertNotNull(solver2);
      
      Solver<MixedDataStructureDanielWL> solver3 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, miniSATRestarts0, iLogAble0);
      assertFalse(solver3.equals((Object)solver2));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(3, solver3.nVars());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(4, solver3.newVar());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(32, percentLengthLearning0.getLimit());
      assertEquals((-1983.2), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1469), searchParams0.getInitConflictBound());
      assertEquals(742.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1876.3414), searchParams0.getClaDecay(), 0.01);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(7, solver1.nVars());
      assertNotNull(solver3);
      
      // Undeclared exception!
      try { 
        solver3.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(32, 7);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder(137);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertNotNull(mUSLauncher0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, noRestarts0, mUSLauncher0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      solver0.setTimeout(32);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(32, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      ActiveLearning<CardinalityDataStructure> activeLearning1 = new ActiveLearning<CardinalityDataStructure>(7);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(7.0, activeLearning1.getActivityPercent(), 0.01);
      assertNotNull(activeLearning1);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      activeLearning1.init();
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(7.0, activeLearning1.getActivityPercent(), 0.01);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning1, cardinalityDataStructure0, searchParams0, pureOrder0, noRestarts0);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(7.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      solver1.unset(7);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(7.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      
      ILits iLits0 = solver1.getVocabulary();
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(7.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(5, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(iLits0);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>(7);
      assertEquals(7, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertNotNull(clausalDataStructureWL1);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, pureOrder0, noRestarts0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(solver2);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Solver<CardinalityDataStructure>> manyCore0 = new ManyCore<Solver<CardinalityDataStructure>>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL1, searchParams0, pureOrder0, noRestarts0, mUSLauncher0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver3.equals((Object)solver2));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(3, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertNotNull(solver3);
      
      solver3.setUnitClauseProvider(manyCore0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotSame(solver3, solver2);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver3.equals((Object)solver2));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(5, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(6, solver3.newVar());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, stringArray0.length);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      Xor xor0 = new Xor(vecInt0, true, iLits0);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, xor0.size());
      assertTrue(xor0.canBeSatisfiedByCountingLiterals());
      assertFalse(xor0.learnt());
      assertFalse(xor0.simplify());
      assertFalse(xor0.canBePropagatedMultipleTimes());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(7.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(7, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(xor0);
      
      Constr constr0 = xor0.toConstraint();
      assertSame(xor0, constr0);
      assertSame(constr0, xor0);
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(137, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, xor0.size());
      assertTrue(xor0.canBeSatisfiedByCountingLiterals());
      assertFalse(xor0.learnt());
      assertFalse(xor0.simplify());
      assertFalse(xor0.canBePropagatedMultipleTimes());
      assertFalse(constr0.learnt());
      assertFalse(constr0.simplify());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0, constr0.size());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(7.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(10, solver1.newVar());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(9, solver1.nVars());
      assertEquals(9, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      assertNotNull(constr0);
      
      // Undeclared exception!
      try { 
        solver0.removeSubsumedConstr(constr0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-500.40228), (-500.40228), (-500.40228), 0);
      assertEquals((-500.40228), searchParams0.getClaDecay(), 0.01);
      assertEquals((-500.40228), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-500.40228), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertNotNull(miniSATRestarts0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertNotNull(basicLauncher0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, miniSATRestarts0, basicLauncher0);
      assertEquals((-500.40228), searchParams0.getClaDecay(), 0.01);
      assertEquals((-500.40228), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-500.40228), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      
      SolverStats solverStats0 = solver0.getStats();
      assertEquals((-500.40228), searchParams0.getClaDecay(), 0.01);
      assertEquals((-500.40228), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-500.40228), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertNotNull(solverStats0);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, miniSATRestarts0, basicLauncher0);
      assertEquals((-500.40228), searchParams0.getClaDecay(), 0.01);
      assertEquals((-500.40228), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-500.40228), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertNotNull(solver1);
      
      solver1.setTimeoutMs((-2740L));
      assertEquals((-500.40228), searchParams0.getClaDecay(), 0.01);
      assertEquals((-500.40228), searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals((-500.40228), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals((-2), solver1.getTimeout());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(463, 463);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(463, searchParams0.getInitConflictBound());
      assertEquals(463.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      RestartStrategy restartStrategy0 = null;
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertNotNull(searchParams1);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(646.69440114677);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(646.69440114677, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      int int0 = 44;
      VecInt vecInt0 = new VecInt(44);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(44);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.simplify());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.learnt());
      assertEquals(0, constr0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertNotNull(constr0);
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams2 = new SearchParams(463);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(463, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams2);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning1, mixedDataStructureDanielHT0, searchParams2, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(463, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertNotNull(solver0);
      
      solver0.claBumpActivity(constr0);
      assertNotSame(searchParams2, searchParams1);
      assertNotSame(searchParams2, searchParams0);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(463, searchParams2.getInitConflictBound());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.simplify());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.learnt());
      assertEquals(0, constr0.size());
      assertEquals(1.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(10, percentLengthLearning1.getLimit());
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMin>(100.0);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(100.0, activeLearning1.getActivityPercent(), 0.01);
      assertNotNull(activeLearning1);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(searchParams1.equals((Object)searchParams2));
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertNotNull(solver1);
      
      IVecInt iVecInt0 = solver1.createBlockingClauseForCurrentModel();
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(searchParams1, searchParams2);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(searchParams1.equals((Object)searchParams2));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertNotNull(basicLauncher0);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams1, levelBasedVarOrderHeap0, (RestartStrategy) null, basicLauncher0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(searchParams1.equals((Object)searchParams2));
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(646.69440114677, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertNotNull(solver2);
      
      activeLearning0.setSolver(solver2);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(searchParams1, searchParams2);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(searchParams1.equals((Object)searchParams2));
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(646.69440114677, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertNotNull(clausalDataStructureWL1);
      
      Solver<ClausalDataStructureWL> solver3 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
      assertFalse(solver3.equals((Object)solver2));
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(646.69440114677, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(6, solver3.newVar());
      assertEquals(5, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(5, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertNotNull(solver3);
      
      // Undeclared exception!
      try { 
        solver3.model((-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-951.723383));
      assertEquals((-951.723383), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      SearchParams searchParams0 = new SearchParams();
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(0, intArray0.length);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertNotNull(fixedPeriodRestarts0);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams0, subsetVarOrder0, fixedPeriodRestarts0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = solver0.isSatisfiable();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertTrue(boolean0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertNotNull(naturalStaticOrder0);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertEquals(0, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertNotNull(noRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning1, mixedDataStructureDanielWLConciseBinary0, (SearchParams) null, naturalStaticOrder0, noRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      NoRestarts noRestarts1 = (NoRestarts)solver0.getRestartStrategy();
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      assertNotNull(noRestarts1);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertSame(noRestarts0, noRestarts1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(iLogAble0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, (SearchParams) null, naturalStaticOrder0, noRestarts1, iLogAble0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, percentLengthLearning1.getLimit());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertFalse(noRestarts1.shouldRestart());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertNotNull(solver1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-3031);
      intArray0[2] = (-4650);
      // Undeclared exception!
      try { 
        solver1.addAtMostOnTheFly(intArray0, (-3031));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertNotNull(eMARestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, eMARestarts0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(iLogAble0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, iLogAble0);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(7, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(6, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.realNumberOfVariables());
      assertNotNull(solver1);
      
      Solver solver2 = (Solver)solver1.getSolvingEngine();
      assertNotSame(solver0, solver1);
      assertNotSame(solver1, solver0);
      assertFalse(solver0.equals((Object)solver1));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(13, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(13, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(14, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(12, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(13, solver1.newVar());
      assertEquals(12, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(11, solver2.nVars());
      assertEquals(12, solver2.newVar());
      assertEquals(11, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertNotNull(solver2);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(573.464869247592);
      assertEquals(573.464869247592, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertNotNull(glucose21Restarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, randomWalkDecorator0, glucose21Restarts0);
      assertEquals(573.464869247592, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(solver0);
      
      Constr constr0 = solver0.propagate();
      assertEquals(573.464869247592, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertNull(constr0);
      
      ISimplifier iSimplifier0 = solver0.getSimplifier();
      assertEquals(573.464869247592, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertNotNull(iSimplifier0);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(7);
      assertEquals(7, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = null;
      try {
        solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, (CardinalityDataStructureYanMax) null, levelBasedVarOrderHeap0, glucose21Restarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int int0 = 2191;
      SearchParams searchParams0 = new SearchParams(1.0, (-2610.972840277038), 3529.91105, 2191);
      assertEquals(2191, searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2610.972840277038), searchParams0.getClaDecay(), 0.01);
      assertEquals(3529.91105, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams0);
      
      PureOrder pureOrder0 = new PureOrder(2191);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(2191, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      PureOrder pureOrder1 = new PureOrder();
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(20, pureOrder1.getPeriod());
      assertNotNull(pureOrder1);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder1, noRestarts0);
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertEquals(2191, searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2610.972840277038), searchParams0.getClaDecay(), 0.01);
      assertEquals(3529.91105, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(20, pureOrder1.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertNotNull(solver0);
      
      NoRestarts noRestarts1 = (NoRestarts)solver0.getRestartStrategy();
      assertNotSame(pureOrder1, pureOrder0);
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertEquals(2191, searchParams0.getInitConflictBound());
      assertEquals(1.0, searchParams0.getVarDecay(), 0.01);
      assertEquals((-2610.972840277038), searchParams0.getClaDecay(), 0.01);
      assertEquals(3529.91105, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(20, pureOrder1.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertNotNull(noRestarts1);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      miniSATLearning0.setDataStructureFactory(mixedDataStructureDanielWL0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertNotNull(basicLauncher0);
      
      searchParams0.setVarDecay((-2610.972840277038));
      assertEquals((-2610.972840277038), searchParams0.getVarDecay(), 0.01);
      assertEquals(2191, searchParams0.getInitConflictBound());
      assertEquals((-2610.972840277038), searchParams0.getClaDecay(), 0.01);
      assertEquals(3529.91105, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, noRestarts1, basicLauncher0);
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-2610.972840277038), searchParams0.getVarDecay(), 0.01);
      assertEquals(2191, searchParams0.getInitConflictBound());
      assertEquals((-2610.972840277038), searchParams0.getClaDecay(), 0.01);
      assertEquals(3529.91105, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(2191, pureOrder0.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(20, pureOrder1.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertNotNull(solver1);
      
      int int1 = solver1.getPropagationLevel();
      assertNotSame(pureOrder0, pureOrder1);
      assertNotSame(pureOrder1, pureOrder0);
      assertSame(noRestarts0, noRestarts1);
      assertSame(noRestarts1, noRestarts0);
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertFalse(int1 == int0);
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-2610.972840277038), searchParams0.getVarDecay(), 0.01);
      assertEquals(2191, searchParams0.getInitConflictBound());
      assertEquals((-2610.972840277038), searchParams0.getClaDecay(), 0.01);
      assertEquals(3529.91105, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(2191, pureOrder0.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(20, pureOrder1.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(0, int1);
      
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>(0.95);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams1 = new SearchParams(1.0, 2191);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(2191, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams1);
      
      Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams1, pureOrder1, noRestarts0, basicLauncher0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(2191, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(20, pureOrder1.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertNotNull(solver2);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics1 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics1, cardinalityDataStructureYanMax0, pureOrder0, noRestarts1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(pureOrder0.equals((Object)pureOrder1));
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertEquals((-2610.972840277038), searchParams0.getVarDecay(), 0.01);
      assertEquals(2191, searchParams0.getInitConflictBound());
      assertEquals((-2610.972840277038), searchParams0.getClaDecay(), 0.01);
      assertEquals(3529.91105, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(2191, pureOrder0.getPeriod());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(20, pureOrder1.getPeriod());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.nConstraints());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(9, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(noRestarts1.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts1.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts1.toString());
      assertNotNull(solver3);
      
      VecInt vecInt0 = (VecInt)solver3.trail;
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      try { 
        solver2.addClause(vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(463, 463);
      assertEquals(463, searchParams0.getInitConflictBound());
      assertEquals(463.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertNotNull(searchParams0);
      
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertNotNull(userFixedPhaseSelectionStrategy0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertNotNull(levelBasedVarOrderHeap0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      SearchParams searchParams1 = new SearchParams();
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertNotNull(searchParams1);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(646.69440114677);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(646.69440114677, activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VecInt vecInt0 = new VecInt(99, 463);
      assertFalse(vecInt0.isEmpty());
      assertEquals(99, vecInt0.size());
      assertEquals(463, vecInt0.last());
      assertNotNull(vecInt0);
      
      Lits lits0 = new Lits();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertNotNull(lits0);
      
      Xor xor0 = new Xor(vecInt0, true, lits0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(99, vecInt0.size());
      assertEquals(463, vecInt0.last());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(xor0.canBeSatisfiedByCountingLiterals());
      assertEquals(99, xor0.size());
      assertFalse(xor0.learnt());
      assertFalse(xor0.canBePropagatedMultipleTimes());
      assertFalse(xor0.simplify());
      assertNotNull(xor0);
      
      Constr constr0 = xor0.toConstraint();
      assertSame(xor0, constr0);
      assertSame(constr0, xor0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(99, vecInt0.size());
      assertEquals(463, vecInt0.last());
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(xor0.canBeSatisfiedByCountingLiterals());
      assertEquals(99, xor0.size());
      assertFalse(xor0.learnt());
      assertFalse(xor0.canBePropagatedMultipleTimes());
      assertFalse(xor0.simplify());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals(99, constr0.size());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertFalse(constr0.simplify());
      assertFalse(constr0.learnt());
      assertNotNull(constr0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>(463);
      assertEquals(463, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertNotNull(basicLauncher0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams1, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertNotNull(solver0);
      
      solver0.stop();
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, searchParams1, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(463, percentLengthLearning1.getLimit());
      assertNotNull(solver1);
      
      int int0 = solver1.newVar();
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(4, solver1.nVars());
      assertEquals(5, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(463, percentLengthLearning1.getLimit());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1498.2106871860374));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertNotNull(activeLearning0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[1];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertNotNull(subsetVarOrder0);
      assertEquals(1, intArray0.length);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertNotNull(lubyRestarts0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertNotNull(solver0);
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1498.2106871860374), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      assertEquals(1, intArray0.length);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertNotNull(solver1);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        solver1.backtrack(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.LearntWLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(1567);
      assertEquals(1567, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertNotNull(varOrderHeap0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertNotNull(randomWalkDecorator0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertNotNull(noRestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, (SearchParams) null, randomWalkDecorator0, noRestarts0);
      assertEquals(1567, fixedLengthLearning0.getMaxLength());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        solver0.toString("Ki*9IuZi20=[$NM'w");
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertEquals(10, percentLengthLearning0.getLimit());
      assertNotNull(percentLengthLearning0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertNotNull(pureOrder0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertNotNull(noRestarts0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, pureOrder0, noRestarts0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertNotNull(solver0);
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>(1);
      assertEquals(1, percentLengthLearning1.getLimit());
      assertNotNull(percentLengthLearning1);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, pureOrder0, noRestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, percentLengthLearning1.getLimit());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertNotNull(solver1);
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertNotNull(iVecInt0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertEquals(10, percentLengthLearning2.getLimit());
      assertNotNull(percentLengthLearning2);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertNotNull(miniSATLearning0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, pureOrder0, noRestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertNotNull(solver2);
      
      int[] intArray0 = new int[0];
      solver2.backtrack(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, intArray0.length);
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(1322);
      assertEquals(1322, fixedLengthLearning0.getMaxLength());
      assertNotNull(fixedLengthLearning0);
      
      SearchParams searchParams0 = solver2.getSearchParams();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(6, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertNotNull(searchParams0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      IVecInt iVecInt1 = AbstractMinimalModel.positiveLiterals(solver0);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(4, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(4, iVecInt1.size());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(5, solver0.nVars());
      assertNotNull(iVecInt1);
      
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.learnt());
      assertFalse(constr0.simplify());
      assertEquals(4, constr0.size());
      assertFalse(constr0.isSatisfied());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.locked());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertNotNull(constr0);
      
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningButHeuristics0);
      
      Solver<MixedDataStructureSingleWL> solver3 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, pureOrder0, noRestarts0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(2, solver3.newVar());
      assertNotNull(solver3);
      
      int int0 = solver3.newVar(1);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(4, solver3.newVar());
      assertEquals(1, int0);
      
      solver0.analyzeAtRootLevel(constr0);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.learnt());
      assertFalse(constr0.simplify());
      assertEquals(4, constr0.size());
      assertFalse(constr0.isSatisfied());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.locked());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(10, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(9, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      
      // Undeclared exception!
      try { 
        solver1.toString("");
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(1.5, (-286.54), 0.01, 37);
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(12);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      fixedLengthLearning0.setSolver(solver0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax1, searchParams0, naturalStaticOrder0, (RestartStrategy) null);
      ILogAble iLogAble0 = solver1.out;
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, iLogAble0);
      solver2.currentDecisionLevel();
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 12);
      Solver<MixedDataStructureDanielWLConciseBinary> solver3 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, (RestartStrategy) null);
      solver3.getRestartStrategy();
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      Solver<MixedDataStructureDanielWL> solver4 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, (RestartStrategy) null);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      Solver<MixedDataStructureDanielWL> solver5 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap1, (RestartStrategy) null, iLogAble0);
      solver5.isSolverKeptHot();
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(2891.0590396852476);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver6 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      // Undeclared exception!
      try { 
        solver6.model(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams((-3002));
      RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, false);
      solver0.printInfos((PrintWriter) mockPrintWriter0, "]<N6I4Y+nd");
      solver0.setTimeoutOnConflicts((-3002));
      SimplificationType simplificationType0 = SimplificationType.NO_SIMPLIFICATION;
      solver0.setSimplifier(simplificationType0);
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) glucose21Restarts0, learnedConstraintsEvaluationType0);
      assertEquals((-3002), solver0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>((-217));
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = randomWalkDecorator0.getPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(iPhaseSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, eMARestarts0);
      varOrderHeap0.toString();
      int[] intArray0 = new int[7];
      intArray0[0] = (-217);
      intArray0[1] = (-217);
      intArray0[2] = 539;
      intArray0[3] = (-217);
      intArray0[4] = (-217);
      intArray0[5] = (-217);
      intArray0[6] = (-217);
      // Undeclared exception!
      try { 
        solver0.addClauseOnTheFly(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 217
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams((-3958.9466686), 0);
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(47);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      VecInt vecInt0 = new VecInt(0, (-634));
      vecInt0.subset(47);
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(iVecInt0);
      solver0.claBumpActivity(constr0);
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-3958.9466686));
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin1, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      solver1.createBlockingClauseForCurrentModel();
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning1 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(miniSATLearning1, clausalDataStructureWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      // Undeclared exception!
      try { 
        solver2.model(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      int[] intArray0 = new int[6];
      intArray0[0] = 3048;
      intArray0[1] = 512;
      intArray0[2] = 0;
      intArray0[3] = 7;
      intArray0[4] = 48;
      intArray0[5] = (-694);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, subsetVarOrder0, glucose21Restarts0);
      // Undeclared exception!
      try { 
        solver0.isSatisfiable();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3048
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-4214.9));
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder();
      activeLearning0.toString();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, pureOrder0, lubyRestarts0);
      SearchParams searchParams0 = solver0.getSearchParams();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 32);
      pureOrder0.setVarDecay(32);
      ILogAble iLogAble0 = null;
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, lubyRestarts0, (ILogAble) null);
      solver1.getTimeoutMs();
      solver0.isSolverKeptHot();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt(4);
      Constr constr0 = cardinalityDataStructure0.createUnregisteredClause(vecInt0);
      solver0.analyzeFinalConflictInTermsOfAssumptions(constr0, vecInt0, (-402));
      // Undeclared exception!
      try { 
        solver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 3322.192129);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, randomWalkDecorator0, arminRestarts0);
      SearchParams searchParams0 = solver0.getSearchParams();
      Solver<MixedDataStructureDanielWL> solver1 = null;
      try {
        solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning0, (MixedDataStructureDanielWL) null, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(30);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, miniSATRestarts0);
      solver0.setDataStructureFactory(cardinalityDataStructureYanMin0);
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      levelBasedVarOrderHeap0.setVarDecay(30);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, miniSATRestarts0);
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      SolverStats solverStats0 = solver2.getStats();
      solver1.initStats(solverStats0);
      // Undeclared exception!
      try { 
        solver1.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(3103);
      PureOrder pureOrder0 = new PureOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.out;
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, glucose21Restarts0, iLogAble0);
      solver1.nAssigns();
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureSingleWL>(7);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning1, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, eMARestarts0);
      UnitClause unitClause0 = new UnitClause(7);
      solver0.record(unitClause0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      VecInt vecInt0 = new VecInt();
      SearchParams searchParams0 = new SearchParams((-774));
      MixedDataStructureSingleWL mixedDataStructureSingleWL1 = new MixedDataStructureSingleWL();
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      int int0 = solver0.newVar(7);
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams(1.0E-4, 1.0E-4, 0.0, 47);
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL1 = new MixedDataStructureSingleWL();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL1, searchParams0, varOrderHeap0, (RestartStrategy) null, basicLauncher0);
      solver0.getOrder();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-2147483645));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(varOrderHeap0);
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator1, (RestartStrategy) null);
      solver1.stop();
      solver0.isSolverKeptHot();
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, varOrderHeap0, (RestartStrategy) null);
      Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, randomWalkDecorator1, (RestartStrategy) null);
      VecInt vecInt0 = (VecInt)solver3.trail;
      // Undeclared exception!
      try { 
        solver2.isSatisfiable((IVecInt) vecInt0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      PureOrder pureOrder0 = new PureOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      Lits lits0 = new Lits();
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, pureOrder0, fixedPeriodRestarts0);
      // Undeclared exception!
      try { 
        solver0.setLearningStrategy(activeLearning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(0.0, (-1.0), 100.0, 47);
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      ASolverFactory<Solver<CardinalityDataStructure>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructure>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructure>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructure>>(aSolverFactory0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, basicLauncher0);
      IOrder iOrder0 = solver0.getOrder();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, iOrder0, (RestartStrategy) null);
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, iOrder0, (RestartStrategy) null);
      // Undeclared exception!
      try { 
        solver1.enqueue((-137));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams(2034.4, 2034.4, 2034.4, 5);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LubyRestarts lubyRestarts0 = new LubyRestarts(5);
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, lubyRestarts0);
      VecInt vecInt0 = new VecInt();
      vecInt0.push(541);
      SearchParams searchParams1 = new SearchParams(32);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams1, naturalStaticOrder0, lubyRestarts0);
      solver1.findModel((IVecInt) vecInt0);
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
      // Undeclared exception!
      try { 
        solver1.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureSingleWL>(7);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, arminRestarts0);
      // Undeclared exception!
      try { 
        solver0.forget((-1453));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2906
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureSingleWL>(7);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning1, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, eMARestarts0);
      levelBasedVarOrderHeap0.toString();
      int[] intArray0 = new int[4];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 7;
      intArray0[3] = 7;
      // Undeclared exception!
      try { 
        solver0.addClauseOnTheFly(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = 30;
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(30);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, miniSATRestarts0);
      solver0.setDataStructureFactory(cardinalityDataStructureYanMin0);
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      levelBasedVarOrderHeap0.setVarDecay(30);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, miniSATRestarts0);
      // Undeclared exception!
      try { 
        solver1.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      activeLearning0.toString();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      LubyRestarts lubyRestarts1 = new LubyRestarts(5);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, subsetVarOrder0, lubyRestarts1);
      VecInt vecInt0 = new VecInt(5, 5);
      solver0.findModel((IVecInt) vecInt0);
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>(32);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams(32, 0.0, 977.04347, 5);
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, lubyRestarts1);
      solver1.getSearchParams();
      ILogAble iLogAble0 = solver1.out;
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, subsetVarOrder0, lubyRestarts1);
      ActivityLCDS activityLCDS0 = (ActivityLCDS)solver2.activity_based;
      assertNotNull(activityLCDS0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1792.6));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-1792.6), 102);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning1 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 102);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning1, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, miniSATRestarts0);
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, restartStrategy0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver1);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        maxSatDecorator0.addClause(iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      PureOrder pureOrder0 = new PureOrder((-1452));
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, randomWalkDecorator0, lubyRestarts0);
      SearchParams searchParams0 = solver0.getSearchParams();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, (RestartStrategy) null, mUSLauncher0);
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
      solver1.setLearnedConstraintsDeletionStrategy((ConflictTimer) null, learnedConstraintsEvaluationType0);
      // Undeclared exception!
      try { 
        solver1.reduceDB();
       //  fail("Expecting exception: NoSuchFieldError");
       // Unstable assertion
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      int int0 = 0;
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams((-0.2524058670783), 0, (-0.2524058670783), 0);
      PureOrder pureOrder0 = new PureOrder(4422);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, arminRestarts0);
      solver0.cancelUntilTrailLevel(4422);
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0);
      ILogAble iLogAble0 = solver1.out;
      Solver<CardinalityDataStructureYanMin> solver2 = null;
      try {
        solver2 = new Solver<CardinalityDataStructureYanMin>((LearningStrategy<CardinalityDataStructureYanMin>) null, (CardinalityDataStructureYanMin) null, searchParams0, pureOrder0, arminRestarts0, iLogAble0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, eMARestarts0);
      // Undeclared exception!
      try { 
        solver0.undoOne();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, eMARestarts0);
      solver0.getLogger();
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
  }
}
