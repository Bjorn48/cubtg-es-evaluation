/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 13:59:39 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserConstants;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader(">*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 30, 30, 61);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(30, token0.beginColumn);
      assertEquals(30, token0.endColumn);
      assertEquals(30, token0.endLine);
      assertEquals(30, token0.beginLine);
      assertEquals(124, token0.kind);
      assertEquals(30, javaCharStream0.getEndLine());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'c';
      javaCharStream0.buffer = charArray0;
      assertEquals(30, javaCharStream0.getEndLine());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(30, token1.beginLine);
      assertEquals(31, token1.endColumn);
      assertEquals(30, token1.endLine);
      assertEquals(31, token1.beginColumn);
      assertEquals(30, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals("c", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(31, token2.endColumn);
      assertEquals(31, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(30, token2.beginLine);
      assertEquals(30, token2.endLine);
      assertEquals(30, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("ey/-Ho;");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      int int0 = JavaParserConstants.COMMA;
      assertEquals(84, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-241), (-241), 84);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      int int1 = JavaParserConstants.DECIMAL_LITERAL;
      assertFalse(int1 == int0);
      assertEquals(67, int1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1321, (-241));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.input_stream = javaCharStream0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginLine());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-240), token0.endColumn);
      assertEquals((-241), token0.beginColumn);
      assertEquals((-241), token0.endLine);
      assertEquals((-241), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-241), javaCharStream0.getEndLine());
      assertEquals((-240), javaCharStream0.getColumn());
      assertEquals((-241), javaCharStream0.getLine());
      assertEquals((-240), javaCharStream0.getEndColumn());
      assertEquals((-241), javaCharStream0.getBeginColumn());
      assertEquals((-241), javaCharStream0.getBeginLine());
      assertEquals("ey", token0.toString());
      assertNotNull(token0);
      
      javaCharStream0.column = 15;
      assertEquals((-241), javaCharStream0.getEndLine());
      assertEquals((-240), javaCharStream0.getColumn());
      assertEquals((-241), javaCharStream0.getLine());
      assertEquals((-240), javaCharStream0.getEndColumn());
      assertEquals((-241), javaCharStream0.getBeginColumn());
      assertEquals((-241), javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-239), token1.endColumn);
      assertEquals((-239), token1.beginColumn);
      assertEquals(104, token1.kind);
      assertEquals((-241), token1.endLine);
      assertEquals((-241), token1.beginLine);
      assertEquals((-241), javaCharStream0.getEndLine());
      assertEquals((-239), javaCharStream0.getColumn());
      assertEquals((-239), javaCharStream0.getBeginColumn());
      assertEquals((-241), javaCharStream0.getLine());
      assertEquals((-239), javaCharStream0.getEndColumn());
      assertEquals((-241), javaCharStream0.getBeginLine());
      assertEquals("/", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(16, token2.endColumn);
      assertEquals(102, token2.kind);
      assertEquals(16, token2.beginColumn);
      assertEquals((-241), token2.endLine);
      assertEquals((-241), token2.beginLine);
      assertEquals((-241), javaCharStream0.getEndLine());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals((-241), javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getBeginColumn());
      assertEquals((-241), javaCharStream0.getBeginLine());
      assertEquals("-", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(18, token3.endColumn);
      assertEquals(74, token3.kind);
      assertEquals((-241), token3.endLine);
      assertEquals((-241), token3.beginLine);
      assertEquals(17, token3.beginColumn);
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals((-241), javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals((-241), javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals((-241), javaCharStream0.getBeginLine());
      assertEquals("Ho", token3.toString());
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(19, token4.endColumn);
      assertEquals(19, token4.beginColumn);
      assertEquals((-241), token4.endLine);
      assertEquals(83, token4.kind);
      assertEquals((-241), token4.beginLine);
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals((-241), javaCharStream0.getEndLine());
      assertEquals((-241), javaCharStream0.getLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals((-241), javaCharStream0.getBeginLine());
      assertEquals(";", token4.toString());
      assertNotNull(token4);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F!tnO=>(e< RBz");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.DECIMAL_LITERAL;
      assertEquals(67, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3984, 105);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3984, token0.endLine);
      assertEquals(105, token0.endColumn);
      assertEquals(3984, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(105, token0.beginColumn);
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(3984, javaCharStream0.getBeginLine());
      assertEquals(3984, javaCharStream0.getLine());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(3984, javaCharStream0.getEndLine());
      assertEquals("F", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3984, token1.beginLine);
      assertEquals(3984, token1.endLine);
      assertEquals(106, token1.beginColumn);
      assertEquals(106, token1.endColumn);
      assertEquals(89, token1.kind);
      assertEquals(3984, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(3984, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(3984, javaCharStream0.getEndLine());
      assertEquals("!", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lexical error at line ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-908), (-908));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'L', 'e', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-908), token0.beginLine);
      assertEquals((-908), token0.beginColumn);
      assertEquals((-905), token0.endColumn);
      assertEquals((-908), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-908), javaCharStream0.getBeginColumn());
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-905), javaCharStream0.getEndColumn());
      assertEquals((-905), javaCharStream0.getColumn());
      assertEquals((-908), javaCharStream0.getEndLine());
      assertEquals("ical", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-908), token0.beginLine);
      assertEquals((-908), token0.beginColumn);
      assertEquals((-905), token0.endColumn);
      assertEquals((-908), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-908), javaCharStream0.getBeginColumn());
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-905), javaCharStream0.getEndColumn());
      assertEquals((-905), javaCharStream0.getColumn());
      assertEquals((-908), javaCharStream0.getEndLine());
      assertEquals("ical", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-908), javaCharStream0.getBeginColumn());
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-905), javaCharStream0.getEndColumn());
      assertEquals((-905), javaCharStream0.getColumn());
      assertEquals((-908), javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-899), token1.endColumn);
      assertEquals((-908), token1.endLine);
      assertEquals((-908), token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals((-903), token1.beginColumn);
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals((-899), javaCharStream0.getColumn());
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-903), javaCharStream0.getBeginColumn());
      assertEquals((-908), javaCharStream0.getEndLine());
      assertEquals((-899), javaCharStream0.getEndColumn());
      assertEquals("error", token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals((-899), javaCharStream0.getColumn());
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-903), javaCharStream0.getBeginColumn());
      assertEquals((-908), javaCharStream0.getEndLine());
      assertEquals((-899), javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lexical error at line ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-908), (-908));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      javaCharStream0.tokenBegin = (-908);
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'L', 'e', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-908), token0.beginLine);
      assertEquals((-908), token0.beginColumn);
      assertEquals((-908), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-905), token0.endColumn);
      assertEquals((-905), javaCharStream0.getEndColumn());
      assertEquals((-905), javaCharStream0.getColumn());
      assertEquals((-908), javaCharStream0.getEndLine());
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-908), javaCharStream0.getBeginColumn());
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals("ical", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-908), token0.beginLine);
      assertEquals((-908), token0.beginColumn);
      assertEquals((-908), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-905), token0.endColumn);
      assertEquals((-905), javaCharStream0.getEndColumn());
      assertEquals((-905), javaCharStream0.getColumn());
      assertEquals((-908), javaCharStream0.getEndLine());
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-908), javaCharStream0.getBeginColumn());
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals("ical", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-908), token1.beginLine);
      assertEquals((-899), token1.endColumn);
      assertEquals((-903), token1.beginColumn);
      assertEquals((-908), token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals((-903), javaCharStream0.getBeginColumn());
      assertEquals((-908), javaCharStream0.getEndLine());
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-899), javaCharStream0.getColumn());
      assertEquals((-899), javaCharStream0.getEndColumn());
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals("error", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals((-908), token2.endLine);
      assertEquals((-908), token2.beginLine);
      assertEquals((-896), token2.endColumn);
      assertEquals((-897), token2.beginColumn);
      assertEquals((-908), javaCharStream0.getEndLine());
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-896), javaCharStream0.getEndColumn());
      assertEquals((-896), javaCharStream0.getColumn());
      assertEquals((-897), javaCharStream0.getBeginColumn());
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals("at", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-894), token3.beginColumn);
      assertEquals((-908), token3.beginLine);
      assertEquals(74, token3.kind);
      assertEquals((-908), token3.endLine);
      assertEquals((-891), token3.endColumn);
      assertEquals((-908), javaCharStream0.getEndLine());
      assertEquals((-891), javaCharStream0.getEndColumn());
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-894), javaCharStream0.getBeginColumn());
      assertEquals((-891), javaCharStream0.getColumn());
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals("line", token3.toString());
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      token0.endColumn = (-1);
      assertNull(token0.toString());
      
      token0.kind = 0;
      assertNull(token0.toString());
      
      String string0 = token0.toString();
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals((-1), token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNull(string0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.SwitchTo(0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vV4lA*+9qnm,%FE");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 19, 19, 19);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(23, token0.endColumn);
      assertEquals(19, token0.endLine);
      assertEquals(19, token0.beginLine);
      assertEquals(19, token0.beginColumn);
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals("vV4lA", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(24, token1.endColumn);
      assertEquals(19, token1.endLine);
      assertEquals(24, token1.beginColumn);
      assertEquals(103, token1.kind);
      assertEquals(19, token1.beginLine);
      assertEquals(24, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(24, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals("*", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(25, token2.endColumn);
      assertEquals(25, token2.beginColumn);
      assertEquals(19, token2.endLine);
      assertEquals(101, token2.kind);
      assertEquals(19, token2.beginLine);
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getBeginColumn());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals("+", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7r:P+,GoMy?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.backup(0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1151), token0.endLine);
      assertEquals((-1151), token0.endColumn);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals("7", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1151), token1.beginLine);
      assertEquals((-1150), token1.beginColumn);
      assertEquals((-1151), token1.endLine);
      assertEquals((-1150), token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals("r", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1151), token2.beginLine);
      assertEquals((-1149), token2.beginColumn);
      assertEquals((-1149), token2.endColumn);
      assertEquals((-1151), token2.endLine);
      assertEquals(92, token2.kind);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1149), javaCharStream0.getEndColumn());
      assertEquals((-1149), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1149), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals(":", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1151), token3.beginLine);
      assertEquals((-1151), token3.endLine);
      assertEquals((-1148), token3.endColumn);
      assertEquals(74, token3.kind);
      assertEquals((-1148), token3.beginColumn);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1148), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1148), javaCharStream0.getBeginColumn());
      assertEquals((-1148), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals("P", token3.toString());
      assertNotNull(token3);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token3);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1151), token2.beginLine);
      assertEquals((-1149), token2.beginColumn);
      assertEquals((-1149), token2.endColumn);
      assertEquals((-1151), token2.endLine);
      assertEquals(92, token2.kind);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1148), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1148), javaCharStream0.getBeginColumn());
      assertEquals((-1148), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals(":", token2.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7r:P+,GoMy?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      int int0 = stringReader0.read(charArray0);
      assertEquals(8, int0);
      assertArrayEquals(new char[] {'7', 'r', ':', 'P', '+', ',', 'G', 'o'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1151), token0.endLine);
      assertEquals((-1150), token0.endColumn);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals("My", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1151), token1.beginLine);
      assertEquals(91, token1.kind);
      assertEquals((-1149), token1.endColumn);
      assertEquals((-1151), token1.endLine);
      assertEquals((-1149), token1.beginColumn);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1149), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1149), javaCharStream0.getBeginColumn());
      assertEquals((-1149), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals("?", token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1151), token1.beginLine);
      assertEquals(91, token1.kind);
      assertEquals((-1149), token1.endColumn);
      assertEquals((-1151), token1.endLine);
      assertEquals((-1149), token1.beginColumn);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1149), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1149), javaCharStream0.getBeginColumn());
      assertEquals((-1149), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals("?", token1.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\">=\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1684), (-1684), 15);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.curChar = 'm';
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1681), token0.endColumn);
      assertEquals((-1684), token0.endLine);
      assertEquals((-1684), token0.beginColumn);
      assertEquals((-1684), token0.beginLine);
      assertEquals(73, token0.kind);
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1681), javaCharStream0.getEndColumn());
      assertEquals((-1684), javaCharStream0.getBeginColumn());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals((-1681), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals("\">=\"", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("--");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 61, 45, 1187);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(45, token0.beginColumn);
      assertEquals(61, token0.beginLine);
      assertEquals(46, token0.endColumn);
      assertEquals(100, token0.kind);
      assertEquals(61, token0.endLine);
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals("--", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(45, token0.beginColumn);
      assertEquals(61, token0.beginLine);
      assertEquals(46, token0.endColumn);
      assertEquals(100, token0.kind);
      assertEquals(61, token0.endLine);
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals("--", token0.toString());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("LjhR");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 61, 61, 47);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(61, token0.endLine);
      assertEquals(61, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(64, token0.endColumn);
      assertEquals(61, token0.beginColumn);
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals("LjhR", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(61, token0.endLine);
      assertEquals(61, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(64, token0.endColumn);
      assertEquals(61, token0.beginColumn);
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals("LjhR", token0.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\">=\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1684), 60);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1684), token0.beginLine);
      assertEquals(95, token0.kind);
      assertEquals(60, token0.beginColumn);
      assertEquals(61, token0.endColumn);
      assertEquals((-1684), token0.endLine);
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(">=", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      
      Token token1 = Token.newToken(60);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertNull(token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F!tnO=>(e< RBz");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.DECIMAL_LITERAL;
      assertEquals(67, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 67, 105);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      int int1 = stringReader0.read();
      assertFalse(int1 == int0);
      assertEquals(70, int1);
      
      javaCharStream0.ReInit((Reader) stringReader0, 105, 67, 105);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.jjmatchedKind = 18;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token0.kind);
      assertEquals(105, token0.beginLine);
      assertEquals(105, token0.endLine);
      assertEquals(67, token0.endColumn);
      assertEquals(67, token0.beginColumn);
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals(67, javaCharStream0.getEndColumn());
      assertEquals(67, javaCharStream0.getBeginColumn());
      assertEquals(67, javaCharStream0.getColumn());
      assertEquals("!", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(105, token1.endLine);
      assertEquals(70, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(105, token1.beginLine);
      assertEquals(68, token1.beginColumn);
      assertEquals(105, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getLine());
      assertEquals(70, javaCharStream0.getColumn());
      assertEquals(68, javaCharStream0.getBeginColumn());
      assertEquals(70, javaCharStream0.getEndColumn());
      assertEquals("tnO", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lexical error at line ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-80), (-80));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-74), token0.endColumn);
      assertEquals((-80), token0.endLine);
      assertEquals((-80), token0.beginColumn);
      assertEquals((-80), token0.beginLine);
      assertEquals((-74), javaCharStream0.getColumn());
      assertEquals((-80), javaCharStream0.getBeginLine());
      assertEquals((-80), javaCharStream0.getEndLine());
      assertEquals((-80), javaCharStream0.getLine());
      assertEquals((-80), javaCharStream0.getBeginColumn());
      assertEquals((-74), javaCharStream0.getEndColumn());
      assertEquals("Lexical", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-74), token0.endColumn);
      assertEquals((-80), token0.endLine);
      assertEquals((-80), token0.beginColumn);
      assertEquals((-80), token0.beginLine);
      assertEquals((-74), javaCharStream0.getColumn());
      assertEquals((-80), javaCharStream0.getBeginLine());
      assertEquals((-80), javaCharStream0.getEndLine());
      assertEquals((-80), javaCharStream0.getLine());
      assertEquals((-80), javaCharStream0.getBeginColumn());
      assertEquals((-74), javaCharStream0.getEndColumn());
      assertEquals("Lexical", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-80), token1.beginLine);
      assertEquals((-68), token1.endColumn);
      assertEquals((-80), token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals((-72), token1.beginColumn);
      assertEquals((-72), javaCharStream0.getBeginColumn());
      assertEquals((-68), javaCharStream0.getColumn());
      assertEquals((-68), javaCharStream0.getEndColumn());
      assertEquals((-80), javaCharStream0.getBeginLine());
      assertEquals((-80), javaCharStream0.getEndLine());
      assertEquals((-80), javaCharStream0.getLine());
      assertEquals("error", token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-80), token1.beginLine);
      assertEquals((-68), token1.endColumn);
      assertEquals((-80), token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals((-72), token1.beginColumn);
      assertEquals((-72), javaCharStream0.getBeginColumn());
      assertEquals((-68), javaCharStream0.getColumn());
      assertEquals((-68), javaCharStream0.getEndColumn());
      assertEquals((-80), javaCharStream0.getBeginLine());
      assertEquals((-80), javaCharStream0.getEndLine());
      assertEquals((-80), javaCharStream0.getLine());
      assertEquals("error", token1.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("saWBX!CMUu}l");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.IN_FORMAL_COMMENT;
      assertEquals(2, int0);
      
      StringReader stringReader1 = new StringReader("saWBX!CMUu}l");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 20, 2, 20);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 20);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 20, column 14.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%5l4");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      String string0 = token0.toString();
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      assertNull(string0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("saWBX!CMUu}l");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.IN_FORMAL_COMMENT;
      assertEquals(2, int0);
      
      StringReader stringReader1 = new StringReader("saWBX!CMUu}l");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 20, 2, 20);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      int int1 = JavaParserConstants.DECIMAL_LITERAL;
      assertFalse(int1 == int0);
      assertEquals(67, int1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 67, 20);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.tokenBegin = 107;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 20, column 14.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7r:P+,GoMy?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.backup(0);
      assertEquals(4095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4095, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), token0.endLine);
      assertEquals((-1151), token0.endColumn);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals("7", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1151), token1.beginLine);
      assertEquals((-1151), token1.endLine);
      assertEquals((-1150), token1.endColumn);
      assertEquals((-1150), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals("r", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("LHR");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 61, 61, 47);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(63, token0.endColumn);
      assertEquals(61, token0.beginLine);
      assertEquals(61, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(61, token0.endLine);
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals("LHR", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(63, token0.endColumn);
      assertEquals(61, token0.beginLine);
      assertEquals(61, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(61, token0.endLine);
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals("LHR", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(2078);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2078. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1165), (-1165));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1166), token0.endColumn);
      assertEquals((-1165), token0.beginLine);
      assertEquals((-1166), token0.beginColumn);
      assertEquals((-1165), token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals((-1166), javaCharStream0.getColumn());
      assertEquals((-1166), javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1166), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1166), javaCharStream0.getColumn());
      assertEquals((-1166), javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1166), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      
      Token token1 = Token.newToken((-1165));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNull(token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader(">*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 30, 30);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(124, token0.kind);
      assertEquals(13, token0.endLine);
      assertEquals(30, token0.beginColumn);
      assertEquals(30, token0.endColumn);
      assertEquals(13, token0.beginLine);
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertFalse(token_GTToken0.equals((Object)token0));
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = token0.next;
      assertNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"\n\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 655, 15, 655);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 655, column 16.  Encountered: \"\\n\" (10), after : \"\\\"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("\">>\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1026), (-1026));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'\"', '>'}, charArray0);
      assertEquals(2, charArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1026), token0.beginLine);
      assertEquals(124, token0.kind);
      assertEquals((-1026), token0.endLine);
      assertEquals((-1026), token0.beginColumn);
      assertEquals((-1026), token0.endColumn);
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getColumn());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1026), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      
      Token token1 = Token.newToken((-1026));
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNull(token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getColumn());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1026), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertNull(token1.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getColumn());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1026), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getEndLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertFalse(token_GTToken0.equals((Object)token0));
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token2 = token_GTToken0.specialToken;
      assertNull(token2);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getColumn());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1026), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 343);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 24, 24, (-2868));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("native");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1026), (-1026));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = '/';
      charArray0[2] = 'O';
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'n', 'a', 't'}, charArray0);
      assertEquals(3, charArray0.length);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1024), token0.endColumn);
      assertEquals((-1026), token0.beginColumn);
      assertEquals((-1026), token0.endLine);
      assertEquals((-1026), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-1024), javaCharStream0.getColumn());
      assertEquals((-1026), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1024), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals("ive", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1026), token1.beginLine);
      assertEquals((-1026), token1.endLine);
      assertEquals((-1024), token1.endColumn);
      assertEquals((-1024), token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals((-1024), javaCharStream0.getColumn());
      assertEquals((-1024), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1024), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      token0.endColumn = (-2962);
      assertEquals((-1024), javaCharStream0.getColumn());
      assertEquals((-1024), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1024), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals("ive", token0.toString());
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token0.equals((Object)token1));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token0, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2962), token0.endColumn);
      assertEquals((-1026), token0.beginColumn);
      assertEquals((-1026), token0.endLine);
      assertEquals((-1026), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-1024), javaCharStream0.getColumn());
      assertEquals((-1024), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1024), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals("ive", token0.toString());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1024), token2.beginColumn);
      assertEquals((-1026), token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals((-1024), token2.endColumn);
      assertEquals((-1026), token2.endLine);
      assertEquals((-1024), javaCharStream0.getColumn());
      assertEquals((-1024), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1024), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals((-1024), token3.endColumn);
      assertEquals((-1026), token3.endLine);
      assertEquals((-1024), token3.beginColumn);
      assertEquals(0, token3.kind);
      assertEquals((-1026), token3.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("", token3.toString());
      assertEquals((-1024), javaCharStream0.getColumn());
      assertEquals((-1024), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1024), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals((-1026), token4.endLine);
      assertEquals((-1026), token4.beginLine);
      assertEquals(0, token4.kind);
      assertEquals((-1024), token4.endColumn);
      assertEquals((-1024), token4.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("", token4.toString());
      assertEquals((-1024), javaCharStream0.getColumn());
      assertEquals((-1024), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1024), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertNotNull(token4);
      
      Token token5 = javaParserTokenManager0.jjFillToken();
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals((-1024), token5.endColumn);
      assertEquals((-1024), token5.beginColumn);
      assertEquals((-1026), token5.endLine);
      assertEquals(0, token5.kind);
      assertEquals((-1026), token5.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("", token5.toString());
      assertEquals((-1024), javaCharStream0.getColumn());
      assertEquals((-1024), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1024), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertNotNull(token5);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("short");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.IN_FORMAL_COMMENT;
      assertEquals(2, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1684), (-1684), 35);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-1680), token0.endColumn);
      assertEquals(51, token0.kind);
      assertEquals((-1684), token0.beginColumn);
      assertEquals((-1684), token0.beginLine);
      assertEquals((-1684), token0.endLine);
      assertEquals((-1680), javaCharStream0.getEndColumn());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1680), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getBeginColumn());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals("short", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1684), token1.endLine);
      assertEquals((-1680), token1.beginColumn);
      assertEquals((-1680), token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals((-1684), token1.beginLine);
      assertEquals((-1680), javaCharStream0.getEndColumn());
      assertEquals((-1680), javaCharStream0.getBeginColumn());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1680), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1684), token2.endLine);
      assertEquals((-1684), token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals((-1680), token2.endColumn);
      assertEquals((-1680), token2.beginColumn);
      assertEquals((-1680), javaCharStream0.getEndColumn());
      assertEquals((-1680), javaCharStream0.getBeginColumn());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1680), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1680), token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals((-1680), token3.beginColumn);
      assertEquals((-1684), token3.endLine);
      assertEquals((-1684), token3.beginLine);
      assertEquals((-1680), javaCharStream0.getEndColumn());
      assertEquals((-1680), javaCharStream0.getBeginColumn());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1680), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals("", token3.toString());
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader(">*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 30, 61);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(30, token0.beginColumn);
      assertEquals(13, token0.endLine);
      assertEquals(30, token0.endColumn);
      assertEquals(13, token0.beginLine);
      assertEquals(124, token0.kind);
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(30, token0.beginColumn);
      assertEquals(13, token0.endLine);
      assertEquals(30, token0.endColumn);
      assertEquals(13, token0.beginLine);
      assertEquals(124, token0.kind);
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(">", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(31, token1.endColumn);
      assertEquals(103, token1.kind);
      assertEquals(13, token1.endLine);
      assertEquals(13, token1.beginLine);
      assertEquals(31, token1.beginColumn);
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals("*", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("vV4lA*+qnm,%FE");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-220), 19, 19);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-220), token0.endLine);
      assertEquals((-220), token0.beginLine);
      assertEquals(19, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(23, token0.endColumn);
      assertEquals((-220), javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals((-220), javaCharStream0.getEndLine());
      assertEquals((-220), javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals("vV4lA", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(103, token1.kind);
      assertEquals(24, token1.endColumn);
      assertEquals(24, token1.beginColumn);
      assertEquals((-220), token1.endLine);
      assertEquals((-220), token1.beginLine);
      assertEquals((-220), javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals((-220), javaCharStream0.getEndLine());
      assertEquals((-220), javaCharStream0.getLine());
      assertEquals(24, javaCharStream0.getEndColumn());
      assertEquals(24, javaCharStream0.getColumn());
      assertEquals("*", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals((-220), token2.endLine);
      assertEquals(25, token2.beginColumn);
      assertEquals(25, token2.endColumn);
      assertEquals(101, token2.kind);
      assertEquals((-220), token2.beginLine);
      assertEquals((-220), javaCharStream0.getBeginLine());
      assertEquals((-220), javaCharStream0.getEndLine());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals((-220), javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getBeginColumn());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals("+", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("golto");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1142), (-1123));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1123), token0.beginColumn);
      assertEquals((-1142), token0.beginLine);
      assertEquals((-1142), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1119), token0.endColumn);
      assertEquals((-1142), javaCharStream0.getEndLine());
      assertEquals((-1119), javaCharStream0.getEndColumn());
      assertEquals((-1119), javaCharStream0.getColumn());
      assertEquals((-1142), javaCharStream0.getLine());
      assertEquals((-1142), javaCharStream0.getBeginLine());
      assertEquals((-1123), javaCharStream0.getBeginColumn());
      assertEquals("golto", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1142), token1.endLine);
      assertEquals((-1142), token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals((-1119), token1.endColumn);
      assertEquals((-1119), token1.beginColumn);
      assertEquals((-1142), javaCharStream0.getEndLine());
      assertEquals((-1119), javaCharStream0.getBeginColumn());
      assertEquals((-1119), javaCharStream0.getEndColumn());
      assertEquals((-1119), javaCharStream0.getColumn());
      assertEquals((-1142), javaCharStream0.getLine());
      assertEquals((-1142), javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals((-1142), token2.beginLine);
      assertEquals((-1142), token2.endLine);
      assertEquals((-1119), token2.endColumn);
      assertEquals((-1119), token2.beginColumn);
      assertEquals((-1142), javaCharStream0.getEndLine());
      assertEquals((-1119), javaCharStream0.getBeginColumn());
      assertEquals((-1119), javaCharStream0.getEndColumn());
      assertEquals((-1119), javaCharStream0.getColumn());
      assertEquals((-1142), javaCharStream0.getLine());
      assertEquals((-1142), javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals((-1142), token2.beginLine);
      assertEquals((-1142), token2.endLine);
      assertEquals((-1119), token2.endColumn);
      assertEquals((-1119), token2.beginColumn);
      assertEquals((-1142), javaCharStream0.getEndLine());
      assertEquals((-1119), javaCharStream0.getBeginColumn());
      assertEquals((-1119), javaCharStream0.getEndColumn());
      assertEquals((-1119), javaCharStream0.getColumn());
      assertEquals((-1142), javaCharStream0.getLine());
      assertEquals((-1142), javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"switch\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1142), (-1026));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'm';
      charArray0[3] = '/';
      charArray0[4] = 'O';
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'\"', 's', 'w', 'i', 't'}, charArray0);
      assertEquals(5, charArray0.length);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1142), token0.endLine);
      assertEquals((-1142), token0.beginLine);
      assertEquals((-1026), token0.beginColumn);
      assertEquals((-1025), token0.endColumn);
      assertEquals((-1026), javaCharStream0.getBeginColumn());
      assertEquals((-1142), javaCharStream0.getLine());
      assertEquals((-1142), javaCharStream0.getBeginLine());
      assertEquals((-1025), javaCharStream0.getColumn());
      assertEquals((-1025), javaCharStream0.getEndColumn());
      assertEquals((-1142), javaCharStream0.getEndLine());
      assertEquals("ch", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1142, column -1023.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7r:P+,GoMy?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      int int0 = stringReader0.read();
      assertEquals(55, int0);
      
      charArray0[1] = 'a';
      charArray0[2] = 'V';
      int int1 = stringReader0.read(charArray0);
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      assertArrayEquals(new char[] {'r', ':', 'P', '+', ',', 'G', 'o', 'M'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.endColumn);
      assertEquals((-1151), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals("y", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.endColumn);
      assertEquals((-1151), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals("y", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1421);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1421. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<CHARACTER_LITERAL>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1026), (-1151));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1026), token0.beginLine);
      assertEquals((-1026), token0.endLine);
      assertEquals((-1151), token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(17, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1026), token1.endLine);
      assertEquals((-1026), token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals((-1150), token1.beginColumn);
      assertEquals((-1134), token1.endColumn);
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals((-1134), javaCharStream0.getColumn());
      assertEquals((-1134), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals("CHARACTER_LITERAL", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7r:P+,GoMy?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '.';
      charArray0[2] = 'M';
      charArray0[3] = 's';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'7', 'r', ':', 'P'}, charArray0);
      assertEquals(4, charArray0.length);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1151), token0.endLine);
      assertEquals(101, token0.kind);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), token0.endColumn);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals("+", token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      Token token2 = Token.newToken((-1151));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token0);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertNull(token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager1.SkipLexicalActions((Token) null);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1150), token3.beginColumn);
      assertEquals((-1151), token3.endLine);
      assertEquals((-1150), token3.endColumn);
      assertEquals((-1151), token3.beginLine);
      assertEquals(84, token3.kind);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertEquals(",", token3.toString());
      assertNotNull(token3);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager1.SkipLexicalActions(token3);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1150), token3.beginColumn);
      assertEquals((-1151), token3.endLine);
      assertEquals((-1150), token3.endColumn);
      assertEquals((-1151), token3.beginLine);
      assertEquals(84, token3.kind);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertEquals(",", token3.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7r:P+,GoMy?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.endColumn);
      assertEquals((-1151), token0.endLine);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals("7", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getEndLine());
      
      Token token1 = Token.newToken((-1151));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertNull(token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&17VTOBC");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("&17VTOBC");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 362, 362);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.backup((-830));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(829, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(362, token0.beginColumn);
      assertEquals(362, token0.endColumn);
      assertEquals(105, token0.kind);
      assertEquals(362, token0.beginLine);
      assertEquals(362, token0.endLine);
      assertEquals(362, javaCharStream0.getLine());
      assertEquals(362, javaCharStream0.getBeginLine());
      assertEquals(362, javaCharStream0.getEndColumn());
      assertEquals(362, javaCharStream0.getBeginColumn());
      assertEquals(362, javaCharStream0.getColumn());
      assertEquals(362, javaCharStream0.getEndLine());
      assertEquals("&", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token1.kind);
      assertEquals(364, token1.endColumn);
      assertEquals(362, token1.endLine);
      assertEquals(362, token1.beginLine);
      assertEquals(364, token1.beginColumn);
      assertEquals(364, javaCharStream0.getBeginColumn());
      assertEquals(362, javaCharStream0.getLine());
      assertEquals(364, javaCharStream0.getEndColumn());
      assertEquals(362, javaCharStream0.getBeginLine());
      assertEquals(362, javaCharStream0.getEndLine());
      assertEquals(364, javaCharStream0.getColumn());
      assertEquals("7", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(369, token2.endColumn);
      assertEquals(362, token2.endLine);
      assertEquals(366, token2.beginColumn);
      assertEquals(362, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(369, javaCharStream0.getColumn());
      assertEquals(362, javaCharStream0.getLine());
      assertEquals(366, javaCharStream0.getBeginColumn());
      assertEquals(362, javaCharStream0.getBeginLine());
      assertEquals(362, javaCharStream0.getEndLine());
      assertEquals(369, javaCharStream0.getEndColumn());
      assertEquals("TOBC", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token3.kind);
      assertEquals(362, token3.beginLine);
      assertEquals(362, token3.endLine);
      assertEquals(369, token3.endColumn);
      assertEquals(369, token3.beginColumn);
      assertEquals(369, javaCharStream0.getColumn());
      assertEquals(369, javaCharStream0.getBeginColumn());
      assertEquals(362, javaCharStream0.getLine());
      assertEquals(362, javaCharStream0.getBeginLine());
      assertEquals(362, javaCharStream0.getEndLine());
      assertEquals(369, javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token0, token3);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(362, token0.beginColumn);
      assertEquals(362, token0.endColumn);
      assertEquals(105, token0.kind);
      assertEquals(362, token0.beginLine);
      assertEquals(362, token0.endLine);
      assertEquals(369, javaCharStream0.getColumn());
      assertEquals(369, javaCharStream0.getBeginColumn());
      assertEquals(362, javaCharStream0.getLine());
      assertEquals(362, javaCharStream0.getBeginLine());
      assertEquals(362, javaCharStream0.getEndLine());
      assertEquals(369, javaCharStream0.getEndColumn());
      assertEquals("&", token0.toString());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("ey/-Ho;");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.COMMA;
      assertEquals(84, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-241), (-241), 84);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      int int1 = JavaParserConstants.DECIMAL_LITERAL;
      assertFalse(int1 == int0);
      assertEquals(67, int1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1321, (-241));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-241), token0.beginColumn);
      assertEquals((-241), token0.beginLine);
      assertEquals((-240), token0.endColumn);
      assertEquals((-241), token0.endLine);
      assertEquals((-241), javaCharStream0.getLine());
      assertEquals((-240), javaCharStream0.getEndColumn());
      assertEquals((-241), javaCharStream0.getBeginLine());
      assertEquals((-241), javaCharStream0.getBeginColumn());
      assertEquals((-241), javaCharStream0.getEndLine());
      assertEquals((-240), javaCharStream0.getColumn());
      assertEquals("ey", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-241), token1.beginLine);
      assertEquals((-241), token1.endLine);
      assertEquals((-239), token1.beginColumn);
      assertEquals(104, token1.kind);
      assertEquals((-239), token1.endColumn);
      assertEquals((-239), javaCharStream0.getEndColumn());
      assertEquals((-239), javaCharStream0.getBeginColumn());
      assertEquals((-241), javaCharStream0.getLine());
      assertEquals((-241), javaCharStream0.getBeginLine());
      assertEquals((-241), javaCharStream0.getEndLine());
      assertEquals((-239), javaCharStream0.getColumn());
      assertEquals("/", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)81;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4152), (byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-6), (byte) (-62), (byte)17, (byte)3, (byte)16, (byte)0, (byte)81}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-6), (byte) (-62), (byte)17, (byte)3, (byte)16, (byte)0, (byte)81}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-6), (byte) (-62), (byte)17, (byte)3, (byte)16, (byte)0, (byte)81}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token_GTToken0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-6), (byte) (-62), (byte)17, (byte)3, (byte)16, (byte)0, (byte)81}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=J>}o");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 15, 26, 15);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token0.beginLine);
      assertEquals(26, token0.endColumn);
      assertEquals(26, token0.beginColumn);
      assertEquals(87, token0.kind);
      assertEquals(15, token0.endLine);
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals("=", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7r:P+,GoMy?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'I';
      charArray0[1] = 'G';
      charArray0[2] = 'U';
      charArray0[3] = 'o';
      charArray0[4] = ' ';
      charArray0[5] = 'o';
      int int0 = stringReader0.read(charArray0);
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'7', 'r', ':', 'P', '+', ','}, charArray0);
      assertEquals(6, charArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1148), token0.endColumn);
      assertEquals((-1151), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1148), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1148), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals("GoMy", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(91, token1.kind);
      assertEquals((-1151), token1.beginLine);
      assertEquals((-1147), token1.endColumn);
      assertEquals((-1147), token1.beginColumn);
      assertEquals((-1151), token1.endLine);
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1147), javaCharStream0.getColumn());
      assertEquals((-1147), javaCharStream0.getEndColumn());
      assertEquals((-1147), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals("?", token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1147), javaCharStream0.getColumn());
      assertEquals((-1147), javaCharStream0.getEndColumn());
      assertEquals((-1147), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1147));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1147. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";9wd}25bF");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-908), (-908));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.adjustBeginLineColumn((-908), 88);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(88, javaCharStream0.getBeginColumn());
      assertEquals((-907), javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      int int0 = stringReader0.read(charArray0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {';'}, charArray0);
      assertEquals(1, charArray0.length);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals((-907), javaCharStream0.getBeginLine());
      assertEquals((-907), javaCharStream0.getLine());
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals((-907), javaCharStream0.getEndLine());
      assertEquals('9', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-907), token0.endLine);
      assertEquals(91, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(90, token0.beginColumn);
      assertEquals((-907), token0.beginLine);
      assertEquals((-907), javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals((-907), javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals((-907), javaCharStream0.getEndLine());
      assertEquals("wd", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-907), token0.endLine);
      assertEquals(91, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(90, token0.beginColumn);
      assertEquals((-907), token0.beginLine);
      assertEquals((-907), javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals((-907), javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals((-907), javaCharStream0.getEndLine());
      assertEquals("wd", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-907), javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals((-907), javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals((-907), javaCharStream0.getEndLine());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-907), token0.endLine);
      assertEquals(91, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(90, token0.beginColumn);
      assertEquals((-907), token0.beginLine);
      assertEquals((-907), javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals((-907), javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals((-907), javaCharStream0.getEndLine());
      assertEquals("wd", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-907), token0.endLine);
      assertEquals(91, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(90, token0.beginColumn);
      assertEquals((-907), token0.beginLine);
      assertEquals((-907), javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals((-907), javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals((-907), javaCharStream0.getEndLine());
      assertEquals("wd", token0.toString());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yshor");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.DECIMAL_LITERAL;
      assertEquals(67, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 67, 67);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(67, token0.endLine);
      assertEquals(71, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(67, token0.beginColumn);
      assertEquals(67, token0.beginLine);
      assertEquals(71, javaCharStream0.getColumn());
      assertEquals(67, javaCharStream0.getEndLine());
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals(67, javaCharStream0.getBeginColumn());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getEndColumn());
      assertEquals("Yshor", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(71, token1.endColumn);
      assertEquals(71, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(67, token1.endLine);
      assertEquals(67, token1.beginLine);
      assertEquals(71, javaCharStream0.getColumn());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(67, javaCharStream0.getEndLine());
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yshor");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.IN_FORMAL_COMMENT;
      assertEquals(2, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1684), 2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(2, token0.beginColumn);
      assertEquals(6, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1684), token0.endLine);
      assertEquals((-1684), token0.beginLine);
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals("Yshor", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals((-1684), token1.endLine);
      assertEquals(6, token1.beginColumn);
      assertEquals((-1684), token1.beginLine);
      assertEquals(6, token1.endColumn);
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = Token.newToken(74);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertNull(token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token3.kind);
      assertEquals((-1684), token3.beginLine);
      assertEquals(6, token3.beginColumn);
      assertEquals(6, token3.endColumn);
      assertEquals((-1684), token3.endLine);
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals("", token3.toString());
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(6, token4.endColumn);
      assertEquals(6, token4.beginColumn);
      assertEquals((-1684), token4.beginLine);
      assertEquals((-1684), token4.endLine);
      assertEquals(0, token4.kind);
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals("", token4.toString());
      assertNotNull(token4);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 3378, 3378);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 3378);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 3378. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vV4lA*+9qnm,%FE");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 19, 19, 19);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.nextCharInd = 18;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 19, column 20.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("native");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1026), (-1026));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(43, token0.kind);
      assertEquals((-1026), token0.endLine);
      assertEquals((-1021), token0.endColumn);
      assertEquals((-1026), token0.beginLine);
      assertEquals((-1026), token0.beginColumn);
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1026), javaCharStream0.getBeginColumn());
      assertEquals((-1021), javaCharStream0.getColumn());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals((-1021), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals("native", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1026), token1.endLine);
      assertEquals((-1026), token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals((-1021), token1.beginColumn);
      assertEquals((-1021), token1.endColumn);
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1021), javaCharStream0.getColumn());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals((-1021), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1021), javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals((-1021), token2.beginColumn);
      assertEquals((-1026), token2.beginLine);
      assertEquals((-1026), token2.endLine);
      assertEquals((-1021), token2.endColumn);
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1021), javaCharStream0.getColumn());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals((-1021), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1021), javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      javaParserTokenManager0.input_stream = null;
      javaParserTokenManager0.curLexState = (-119);
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit((JavaCharStream) null, (-939));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -939. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 103);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 103. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 2, 2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      String string0 = token0.toString();
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNull(string0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("saWBX!CMUu}l");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.IN_FORMAL_COMMENT;
      assertEquals(2, int0);
      
      StringReader stringReader1 = new StringReader("saWBX!CMUu}l");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 20, 2, 20);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(20, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(6, token0.endColumn);
      assertEquals(20, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals("saWBX", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token1.kind);
      assertEquals(20, token1.endLine);
      assertEquals(7, token1.beginColumn);
      assertEquals(7, token1.endColumn);
      assertEquals(20, token1.beginLine);
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals("!", token1.toString());
      assertNotNull(token1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-108);
      byteArray0[7] = (byte) (-38);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-477), (-875));
      assertEquals((-875), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)7, (byte)96, (byte)53, (byte) (-46), (byte) (-34), (byte)7, (byte) (-108), (byte) (-38)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 16, 35);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-875), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)7, (byte)96, (byte)53, (byte) (-46), (byte) (-34), (byte)7, (byte) (-108), (byte) (-38)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 420);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 420. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&17VTOBC");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 19, (-3686), 19);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(19, token0.beginLine);
      assertEquals((-3686), token0.endColumn);
      assertEquals(105, token0.kind);
      assertEquals((-3686), token0.beginColumn);
      assertEquals(19, token0.endLine);
      assertEquals((-3686), javaCharStream0.getBeginColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals((-3686), javaCharStream0.getColumn());
      assertEquals((-3686), javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals("&", token0.toString());
      assertNotNull(token0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 82, 82, 23);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 19);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 19. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("7vtT!|dk}M(4T,P");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1165), (-1165));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals((-1165), token0.endLine);
      assertEquals((-1165), token0.beginLine);
      assertEquals((-1165), token0.beginColumn);
      assertEquals((-1165), token0.endColumn);
      assertEquals((-1165), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1165), javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals((-1165), javaCharStream0.getColumn());
      assertEquals("7", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals((-1165), token1.beginLine);
      assertEquals((-1164), token1.beginColumn);
      assertEquals((-1165), token1.endLine);
      assertEquals((-1162), token1.endColumn);
      assertEquals((-1162), javaCharStream0.getEndColumn());
      assertEquals((-1162), javaCharStream0.getColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1164), javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals("vtT", token1.toString());
      assertNotNull(token1);
      
      Token token2 = Token.newToken((-1165));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertNull(token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals((-1165), token0.endLine);
      assertEquals((-1165), token0.beginLine);
      assertEquals((-1165), token0.beginColumn);
      assertEquals((-1165), token0.endColumn);
      assertEquals((-1162), javaCharStream0.getEndColumn());
      assertEquals((-1162), javaCharStream0.getColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1164), javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals("7", token0.toString());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Lexical error at line ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-908), (-908));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = '\'';
      charArray0[2] = 'M';
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'L', 'e', 'x'}, charArray0);
      assertEquals(3, charArray0.length);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-908), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-908), token0.endLine);
      assertEquals((-905), token0.endColumn);
      assertEquals((-908), token0.beginLine);
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-905), javaCharStream0.getColumn());
      assertEquals((-908), javaCharStream0.getEndLine());
      assertEquals((-908), javaCharStream0.getBeginColumn());
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals((-905), javaCharStream0.getEndColumn());
      assertEquals("ical", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-908), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-908), token0.endLine);
      assertEquals((-905), token0.endColumn);
      assertEquals((-908), token0.beginLine);
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-905), javaCharStream0.getColumn());
      assertEquals((-908), javaCharStream0.getEndLine());
      assertEquals((-908), javaCharStream0.getBeginColumn());
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals((-905), javaCharStream0.getEndColumn());
      assertEquals("ical", token0.toString());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals((-903), token1.beginColumn);
      assertEquals((-908), token1.endLine);
      assertEquals((-899), token1.endColumn);
      assertEquals((-908), token1.beginLine);
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-899), javaCharStream0.getColumn());
      assertEquals((-899), javaCharStream0.getEndColumn());
      assertEquals((-908), javaCharStream0.getEndLine());
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals((-903), javaCharStream0.getBeginColumn());
      assertEquals("error", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-897), token2.beginColumn);
      assertEquals((-896), token2.endColumn);
      assertEquals((-908), token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals((-908), token2.endLine);
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-897), javaCharStream0.getBeginColumn());
      assertEquals((-908), javaCharStream0.getEndLine());
      assertEquals((-896), javaCharStream0.getEndColumn());
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals((-896), javaCharStream0.getColumn());
      assertEquals("at", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-908), token3.beginLine);
      assertEquals((-894), token3.beginColumn);
      assertEquals((-908), token3.endLine);
      assertEquals((-891), token3.endColumn);
      assertEquals(74, token3.kind);
      assertEquals((-908), javaCharStream0.getBeginLine());
      assertEquals((-908), javaCharStream0.getEndLine());
      assertEquals((-894), javaCharStream0.getBeginColumn());
      assertEquals((-891), javaCharStream0.getColumn());
      assertEquals((-908), javaCharStream0.getLine());
      assertEquals((-891), javaCharStream0.getEndColumn());
      assertEquals("line", token3.toString());
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7r:P+,GoMy?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals((-1151), token0.endColumn);
      assertEquals((-1151), token0.endLine);
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals("7", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals((-1150), token1.endColumn);
      assertEquals((-1150), token1.beginColumn);
      assertEquals((-1151), token1.endLine);
      assertEquals((-1151), token1.beginLine);
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertEquals("r", token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("l@3[XnsrWFb");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2, 2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(2, token0.beginLine);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("l", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(2, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(86, token1.kind);
      assertEquals(2, token1.endLine);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals("@", token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7r:P+,GoMy?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.endLine);
      assertEquals((-1151), token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals("7", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.curLexState = (-1151);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1150), token1.beginColumn);
      assertEquals(66, token1.kind);
      assertEquals((-1150), token1.endColumn);
      assertEquals((-1151), token1.beginLine);
      assertEquals((-1151), token1.endLine);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertEquals("r", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1149), token2.endColumn);
      assertEquals((-1149), token2.beginColumn);
      assertEquals(66, token2.kind);
      assertEquals((-1151), token2.beginLine);
      assertEquals((-1151), token2.endLine);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1149), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1149), javaCharStream0.getEndColumn());
      assertEquals((-1149), javaCharStream0.getBeginColumn());
      assertEquals(":", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("vV4lA*+9qnm,%FE");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-220), 87, 19);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(87, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(91, token0.endColumn);
      assertEquals((-220), token0.endLine);
      assertEquals((-220), token0.beginLine);
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals((-220), javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals((-220), javaCharStream0.getEndLine());
      assertEquals((-220), javaCharStream0.getLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals("vV4lA", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals((-220), javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals((-220), javaCharStream0.getEndLine());
      assertEquals((-220), javaCharStream0.getLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(87, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(91, token0.endColumn);
      assertEquals((-220), token0.endLine);
      assertEquals((-220), token0.beginLine);
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals((-220), javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals((-220), javaCharStream0.getEndLine());
      assertEquals((-220), javaCharStream0.getLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals("vV4lA", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals((-220), javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals((-220), javaCharStream0.getEndLine());
      assertEquals((-220), javaCharStream0.getLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(92, token1.endColumn);
      assertEquals(92, token1.beginColumn);
      assertEquals((-220), token1.beginLine);
      assertEquals((-220), token1.endLine);
      assertEquals(103, token1.kind);
      assertEquals(92, javaCharStream0.getColumn());
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals(92, javaCharStream0.getBeginColumn());
      assertEquals((-220), javaCharStream0.getBeginLine());
      assertEquals((-220), javaCharStream0.getEndLine());
      assertEquals((-220), javaCharStream0.getLine());
      assertEquals("*", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, token2.kind);
      assertEquals((-220), token2.beginLine);
      assertEquals((-220), token2.endLine);
      assertEquals(93, token2.beginColumn);
      assertEquals(93, token2.endColumn);
      assertEquals(93, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getEndColumn());
      assertEquals((-220), javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getColumn());
      assertEquals((-220), javaCharStream0.getEndLine());
      assertEquals((-220), javaCharStream0.getLine());
      assertEquals("+", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(94, token3.endColumn);
      assertEquals(66, token3.kind);
      assertEquals((-220), token3.beginLine);
      assertEquals(94, token3.beginColumn);
      assertEquals((-220), token3.endLine);
      assertEquals((-220), javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals((-220), javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals((-220), javaCharStream0.getLine());
      assertEquals("9", token3.toString());
      assertNotNull(token3);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token3));
      assertFalse(token1.equals((Object)token2));
      assertNotSame(token1, token0);
      assertNotSame(token1, token3);
      assertNotSame(token1, token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(92, token1.endColumn);
      assertEquals(92, token1.beginColumn);
      assertEquals((-220), token1.beginLine);
      assertEquals((-220), token1.endLine);
      assertEquals(103, token1.kind);
      assertEquals((-220), javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals((-220), javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals((-220), javaCharStream0.getLine());
      assertEquals("*", token1.toString());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("||");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1165), 60);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(97, token0.kind);
      assertEquals(61, token0.endColumn);
      assertEquals((-1165), token0.endLine);
      assertEquals((-1165), token0.beginLine);
      assertEquals(60, token0.beginColumn);
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals("||", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      
      Token token1 = Token.newToken((-1165));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertNull(token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      String string0 = "8>H1gpS^!";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("#E-uwNEqbS", "8>H1gpS^!");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 8>H1gpS^!
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F!tnO=>(e< RBz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, Integer.MAX_VALUE, (-908));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'F', '!'}, charArray0);
      assertEquals(2, charArray0.length);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      assertEquals((-906), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-908), token0.beginColumn);
      assertEquals((-906), javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals((-908), javaCharStream0.getBeginColumn());
      assertEquals((-906), javaCharStream0.getEndColumn());
      assertEquals("tnO", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      assertEquals((-906), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-908), token0.beginColumn);
      assertEquals((-906), javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals((-908), javaCharStream0.getBeginColumn());
      assertEquals((-906), javaCharStream0.getEndColumn());
      assertEquals("tnO", token0.toString());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-905), token1.beginColumn);
      assertEquals(87, token1.kind);
      assertEquals(Integer.MAX_VALUE, token1.endLine);
      assertEquals((-905), token1.endColumn);
      assertEquals(Integer.MAX_VALUE, token1.beginLine);
      assertEquals((-905), javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals((-905), javaCharStream0.getBeginColumn());
      assertEquals((-905), javaCharStream0.getEndColumn());
      assertEquals("=", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(Integer.MAX_VALUE, token2.beginLine);
      assertEquals(Integer.MAX_VALUE, token2.endLine);
      assertEquals((-904), token2.beginColumn);
      assertEquals(124, token2.kind);
      assertEquals((-904), token2.endColumn);
      assertEquals((-904), javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals((-904), javaCharStream0.getBeginColumn());
      assertEquals((-904), javaCharStream0.getEndColumn());
      assertEquals(">", token2.toString());
      assertNotNull(token2);
      
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("U l5[<{-zCO");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 19, 13, 19);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(19, token0.endLine);
      assertEquals(13, token0.endColumn);
      assertEquals(13, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(19, token0.beginLine);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals("U", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getLine());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(19, token0.endLine);
      assertEquals(13, token0.endColumn);
      assertEquals(13, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(19, token0.beginLine);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals("U", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(19, token1.endLine);
      assertEquals(16, token1.endColumn);
      assertEquals(19, token1.beginLine);
      assertEquals(15, token1.beginColumn);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals("l5", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(19, token2.beginLine);
      assertEquals(81, token2.kind);
      assertEquals(17, token2.endColumn);
      assertEquals(17, token2.beginColumn);
      assertEquals(19, token2.endLine);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals("[", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(19, token3.beginLine);
      assertEquals(18, token3.beginColumn);
      assertEquals(19, token3.endLine);
      assertEquals(88, token3.kind);
      assertEquals(18, token3.endColumn);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals("<", token3.toString());
      assertNotNull(token3);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token3));
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      assertNotSame(token0, token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(19, token0.endLine);
      assertEquals(13, token0.endColumn);
      assertEquals(13, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(19, token0.beginLine);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals("U", token0.toString());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader("7vtT!|dk}M(4T,P");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1165), (-1165));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = 'X';
      charArray0[2] = '2';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      charArray0[5] = ',';
      javaCharStream0.buffer = charArray0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1165), token0.endColumn);
      assertEquals((-1165), token0.beginColumn);
      assertEquals((-1165), token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals((-1165), token0.endLine);
      assertEquals((-1165), javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1165), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals((-1165), javaCharStream0.getColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals("7", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals((-1162), token1.endColumn);
      assertEquals((-1164), token1.beginColumn);
      assertEquals((-1165), token1.endLine);
      assertEquals((-1165), token1.beginLine);
      assertEquals((-1164), javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals((-1162), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals((-1162), javaCharStream0.getColumn());
      assertEquals("vtT", token1.toString());
      assertNotNull(token1);
      
      Token token2 = Token.newToken((-1165));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endColumn);
      assertNull(token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertEquals(89, token3.kind);
      assertEquals((-1161), token3.beginColumn);
      assertEquals((-1165), token3.beginLine);
      assertEquals((-1165), token3.endLine);
      assertEquals((-1161), token3.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals("!", token3.toString());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1161), javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals((-1161), javaCharStream0.getColumn());
      assertEquals((-1161), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertNotNull(token3);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7b:P+,oy");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[7];
      int int0 = stringReader0.read(charArray0);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'7', 'b', ':', 'P', '+', ',', 'o'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Token token0 = new Token();
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1151), token1.endLine);
      assertEquals((-1151), token1.beginLine);
      assertEquals((-1151), token1.endColumn);
      assertEquals((-1151), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals("y", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("saWBX!CMUu}l");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.IN_FORMAL_COMMENT;
      assertEquals(2, int0);
      
      StringReader stringReader1 = new StringReader("saWBX!CMUu}l");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 20, 2, 20);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 20, column 14.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k|");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 121, (-1151), 121);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(121, token0.endLine);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(121, token0.beginLine);
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals(121, javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals("k", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(106, token1.kind);
      assertEquals(121, token1.beginLine);
      assertEquals(121, token1.endLine);
      assertEquals((-1150), token1.endColumn);
      assertEquals((-1150), token1.beginColumn);
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals(121, javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertEquals("|", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1150), token2.endColumn);
      assertEquals(121, token2.beginLine);
      assertEquals((-1150), token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(121, token2.endLine);
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals(121, javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1150), token3.endColumn);
      assertEquals(121, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(121, token3.beginLine);
      assertEquals((-1150), token3.beginColumn);
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals(121, javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertEquals("", token3.toString());
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7b:P+,oy");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[7];
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.endColumn);
      assertEquals((-1151), token0.endLine);
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals("7", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.endColumn);
      assertEquals((-1151), token0.endLine);
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals("7", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1151), token1.beginLine);
      assertEquals((-1151), token1.endLine);
      assertEquals((-1150), token1.endColumn);
      assertEquals((-1150), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals("b", token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1151), token1.beginLine);
      assertEquals((-1151), token1.endLine);
      assertEquals((-1150), token1.endColumn);
      assertEquals((-1150), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals("b", token1.toString());
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token0.equals((Object)token1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token0, token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.endColumn);
      assertEquals((-1151), token0.endLine);
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals("7", token0.toString());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("LHR");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 61, 61, 47);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      int int0 = stringReader0.read(charArray0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'L'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(62, token0.endColumn);
      assertEquals(61, token0.endLine);
      assertEquals(61, token0.beginColumn);
      assertEquals(61, token0.beginLine);
      assertEquals(62, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals("HR", token0.toString());
      assertNotNull(token0);
      
      javaCharStream0.backup(62);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-14), javaCharStream0.bufpos);
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -13
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F!tnO=>(e< RBz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 27, (-1165), 27);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1165), token0.endColumn);
      assertEquals((-1165), token0.beginColumn);
      assertEquals(27, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(27, token0.beginLine);
      assertEquals(27, javaCharStream0.getEndLine());
      assertEquals(27, javaCharStream0.getLine());
      assertEquals(27, javaCharStream0.getBeginLine());
      assertEquals((-1165), javaCharStream0.getColumn());
      assertEquals((-1165), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getBeginColumn());
      assertEquals("F", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(27, javaCharStream0.getEndLine());
      assertEquals(27, javaCharStream0.getLine());
      assertEquals(27, javaCharStream0.getBeginLine());
      assertEquals((-1165), javaCharStream0.getColumn());
      assertEquals((-1165), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"switch\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1142), (-1026));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'O';
      charArray0[1] = 'O';
      charArray0[2] = 'm';
      charArray0[3] = '/';
      charArray0[4] = 'O';
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'\"', 's', 'w', 'i', 't'}, charArray0);
      assertEquals(5, charArray0.length);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1142), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1142), token0.beginLine);
      assertEquals((-1026), token0.beginColumn);
      assertEquals((-1025), token0.endColumn);
      assertEquals((-1025), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginColumn());
      assertEquals((-1142), javaCharStream0.getBeginLine());
      assertEquals((-1142), javaCharStream0.getLine());
      assertEquals((-1142), javaCharStream0.getEndLine());
      assertEquals((-1025), javaCharStream0.getColumn());
      assertEquals("ch", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1142, column -1023.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("eDy-/-Ho;");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 9, 9);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.backup((-1182));
      assertEquals(1181, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(9, token0.endLine);
      assertEquals(11, token0.endColumn);
      assertEquals(9, token0.beginColumn);
      assertEquals(9, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getBeginLine());
      assertEquals("eDy", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, token1.beginColumn);
      assertEquals(13, token1.endColumn);
      assertEquals(104, token1.kind);
      assertEquals(9, token1.endLine);
      assertEquals(9, token1.beginLine);
      assertEquals(9, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getBeginLine());
      assertEquals("/", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(16, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(9, token2.beginLine);
      assertEquals(15, token2.beginColumn);
      assertEquals(9, token2.endLine);
      assertEquals(9, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getBeginLine());
      assertEquals("Ho", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 50, 50);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[5];
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'I', 'n', 'v', 'a', 'l'}, charArray0);
      assertEquals(5, charArray0.length);
      
      StringReader stringReader1 = new StringReader("K&o\" |");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int1 = stringReader1.read();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(int1 == int0);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(75, int1);
      
      stringReader1.close();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 5, 802);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(51, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(50, token0.beginColumn);
      assertEquals(50, token0.endLine);
      assertEquals(50, token0.beginLine);
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals("id", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(58, token1.endColumn);
      assertEquals(50, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(53, token1.beginColumn);
      assertEquals(50, token1.endLine);
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(58, javaCharStream0.getColumn());
      assertEquals(58, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals("escape", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, token2.endLine);
      assertEquals(60, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(68, token2.endColumn);
      assertEquals(50, token2.beginLine);
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals("character", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("ey/-Ho;");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.COMMA;
      assertEquals(84, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-241), (-241), 84);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      int int1 = JavaParserConstants.DECIMAL_LITERAL;
      assertFalse(int1 == int0);
      assertEquals(67, int1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1321, (-241));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-240), token0.endColumn);
      assertEquals((-241), token0.beginColumn);
      assertEquals((-241), token0.beginLine);
      assertEquals((-241), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-240), javaCharStream0.getColumn());
      assertEquals((-241), javaCharStream0.getBeginColumn());
      assertEquals((-241), javaCharStream0.getEndLine());
      assertEquals((-241), javaCharStream0.getLine());
      assertEquals((-240), javaCharStream0.getEndColumn());
      assertEquals((-241), javaCharStream0.getBeginLine());
      assertEquals("ey", token0.toString());
      assertNotNull(token0);
      
      javaCharStream0.column = 15;
      assertEquals((-240), javaCharStream0.getColumn());
      assertEquals((-241), javaCharStream0.getBeginColumn());
      assertEquals((-241), javaCharStream0.getEndLine());
      assertEquals((-241), javaCharStream0.getLine());
      assertEquals((-240), javaCharStream0.getEndColumn());
      assertEquals((-241), javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-239), token1.endColumn);
      assertEquals((-239), token1.beginColumn);
      assertEquals(104, token1.kind);
      assertEquals((-241), token1.endLine);
      assertEquals((-241), token1.beginLine);
      assertEquals((-239), javaCharStream0.getColumn());
      assertEquals((-241), javaCharStream0.getEndLine());
      assertEquals((-239), javaCharStream0.getBeginColumn());
      assertEquals((-241), javaCharStream0.getLine());
      assertEquals((-241), javaCharStream0.getBeginLine());
      assertEquals((-239), javaCharStream0.getEndColumn());
      assertEquals("/", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(102, token2.kind);
      assertEquals((-241), token2.endLine);
      assertEquals((-241), token2.beginLine);
      assertEquals(16, token2.beginColumn);
      assertEquals(16, token2.endColumn);
      assertEquals(16, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals((-241), javaCharStream0.getEndLine());
      assertEquals((-241), javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals((-241), javaCharStream0.getBeginLine());
      assertEquals("-", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("eDy-/-Ho;");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.DECIMAL_LITERAL;
      assertEquals(67, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3970, 85);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(87, token0.endColumn);
      assertEquals(85, token0.beginColumn);
      assertEquals(3970, token0.beginLine);
      assertEquals(3970, token0.endLine);
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(87, javaCharStream0.getEndColumn());
      assertEquals(3970, javaCharStream0.getEndLine());
      assertEquals(3970, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(3970, javaCharStream0.getLine());
      assertEquals("eDy", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(88, token1.endColumn);
      assertEquals(88, token1.beginColumn);
      assertEquals(102, token1.kind);
      assertEquals(3970, token1.endLine);
      assertEquals(3970, token1.beginLine);
      assertEquals(88, javaCharStream0.getBeginColumn());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals(3970, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(3970, javaCharStream0.getBeginLine());
      assertEquals(3970, javaCharStream0.getLine());
      assertEquals("-", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("short");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.IN_FORMAL_COMMENT;
      assertEquals(2, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1684), (-1684), 15);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-1680), token0.endColumn);
      assertEquals((-1684), token0.endLine);
      assertEquals((-1684), token0.beginLine);
      assertEquals(51, token0.kind);
      assertEquals((-1684), token0.beginColumn);
      assertEquals((-1680), javaCharStream0.getEndColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1680), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals((-1684), javaCharStream0.getBeginColumn());
      assertEquals("short", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1684), token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals((-1684), token1.beginLine);
      assertEquals((-1680), token1.beginColumn);
      assertEquals((-1680), token1.endColumn);
      assertEquals((-1680), javaCharStream0.getEndColumn());
      assertEquals((-1680), javaCharStream0.getBeginColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1680), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals((-1684), token2.beginLine);
      assertEquals((-1684), token2.endLine);
      assertEquals((-1680), token2.beginColumn);
      assertEquals((-1680), token2.endColumn);
      assertEquals((-1680), javaCharStream0.getEndColumn());
      assertEquals((-1680), javaCharStream0.getBeginColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1680), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1684), token3.beginLine);
      assertEquals((-1684), token3.endLine);
      assertEquals((-1680), token3.endColumn);
      assertEquals((-1680), token3.beginColumn);
      assertEquals(0, token3.kind);
      assertEquals((-1680), javaCharStream0.getEndColumn());
      assertEquals((-1680), javaCharStream0.getBeginColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1680), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals("", token3.toString());
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",V'-?4h5{}");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1165), (-1165));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(84, token0.kind);
      assertEquals((-1165), token0.beginColumn);
      assertEquals((-1165), token0.beginLine);
      assertEquals((-1165), token0.endLine);
      assertEquals((-1165), token0.endColumn);
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1165), javaCharStream0.getColumn());
      assertEquals((-1165), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals(",", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals((-1164), token1.endColumn);
      assertEquals((-1165), token1.endLine);
      assertEquals((-1164), token1.beginColumn);
      assertEquals((-1165), token1.beginLine);
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals((-1164), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1164), javaCharStream0.getBeginColumn());
      assertEquals((-1164), javaCharStream0.getColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals("V", token1.toString());
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1165, column -1161.  Encountered: \"?\" (63), after : \"\\'-\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\">=\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1684), (-1684), 15);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1684), token0.endLine);
      assertEquals((-1683), token0.endColumn);
      assertEquals((-1684), token0.beginColumn);
      assertEquals((-1684), token0.beginLine);
      assertEquals(95, token0.kind);
      assertEquals((-1684), javaCharStream0.getBeginColumn());
      assertEquals((-1683), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1683), javaCharStream0.getEndColumn());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals(">=", token0.toString());
      assertNotNull(token0);
      
      Token token1 = Token.newToken(5301);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertNull(token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(token0.equals((Object)token1));
      assertNotSame(token0, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1684), token0.endLine);
      assertEquals((-1683), token0.endColumn);
      assertEquals((-1684), token0.beginColumn);
      assertEquals((-1684), token0.beginLine);
      assertEquals(95, token0.kind);
      assertEquals((-1684), javaCharStream0.getBeginColumn());
      assertEquals((-1683), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1683), javaCharStream0.getEndColumn());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals(">=", token0.toString());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"int\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.backup((-2411));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2410, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2410, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1147), token0.endColumn);
      assertEquals(73, token0.kind);
      assertEquals((-1151), token0.endLine);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1147), javaCharStream0.getColumn());
      assertEquals((-1147), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals("\"int\"", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1147), token1.endColumn);
      assertEquals((-1147), token1.beginColumn);
      assertEquals((-1151), token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals((-1151), token1.endLine);
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1147), javaCharStream0.getColumn());
      assertEquals((-1147), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1147), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\">=\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1684), (-1684), 15);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1684), token0.beginColumn);
      assertEquals((-1684), token0.beginLine);
      assertEquals(73, token0.kind);
      assertEquals((-1684), token0.endLine);
      assertEquals((-1681), token0.endColumn);
      assertEquals((-1681), javaCharStream0.getEndColumn());
      assertEquals((-1681), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1684), javaCharStream0.getBeginColumn());
      assertEquals("\">=\"", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1681), javaCharStream0.getEndColumn());
      assertEquals((-1681), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getLine());
      assertEquals((-1684), javaCharStream0.getBeginLine());
      assertEquals((-1684), javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 38, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = sequenceInputStream0.available();
      assertEquals(0, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaCharStream0.backup(106);
      assertEquals(3989, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      String string0 = token0.toString();
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      assertNull(string0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3989, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertNotNull(mockPrintStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockPrintStream0);
      assertNotNull(filterOutputStream0);
      
      mockPrintStream0.println(0L);
      filterOutputStream0.close();
      MockPrintStream mockPrintStream1 = new MockPrintStream(filterOutputStream0, false);
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      mockPrintStream1.print('n');
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream1);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream1);
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      
      Token token0 = Token.newToken(92);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      
      InputStream inputStream0 = null;
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a_H'Ciuhj}dE");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 852, (-2793));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.backup((-218));
      assertEquals(217, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-2793), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-2791), token0.endColumn);
      assertEquals(852, token0.endLine);
      assertEquals(852, token0.beginLine);
      assertEquals((-2793), javaCharStream0.getBeginColumn());
      assertEquals(852, javaCharStream0.getEndLine());
      assertEquals(852, javaCharStream0.getLine());
      assertEquals((-2791), javaCharStream0.getEndColumn());
      assertEquals(852, javaCharStream0.getBeginLine());
      assertEquals((-2791), javaCharStream0.getColumn());
      assertEquals("a_H", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-2793), javaCharStream0.getBeginColumn());
      assertEquals(852, javaCharStream0.getEndLine());
      assertEquals(852, javaCharStream0.getLine());
      assertEquals((-2791), javaCharStream0.getEndColumn());
      assertEquals(852, javaCharStream0.getBeginLine());
      assertEquals((-2791), javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<<=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1165), (-1165));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1165), token0.beginLine);
      assertEquals((-1165), token0.endLine);
      assertEquals((-1163), token0.endColumn);
      assertEquals(118, token0.kind);
      assertEquals((-1165), token0.beginColumn);
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals((-1163), javaCharStream0.getColumn());
      assertEquals((-1163), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1165), javaCharStream0.getBeginColumn());
      assertEquals("<<=", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1165), token1.beginLine);
      assertEquals((-1165), token1.endLine);
      assertEquals((-1163), token1.beginColumn);
      assertEquals((-1163), token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals((-1163), javaCharStream0.getBeginColumn());
      assertEquals((-1163), javaCharStream0.getColumn());
      assertEquals((-1163), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = Token.newToken(0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertNull(token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1165), token1.beginLine);
      assertEquals((-1165), token1.endLine);
      assertEquals((-1163), token1.beginColumn);
      assertEquals((-1163), token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals((-1163), javaCharStream0.getBeginColumn());
      assertEquals((-1163), javaCharStream0.getColumn());
      assertEquals((-1163), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals("", token1.toString());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(158);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 158. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      File file0 = MockFile.createTempFile("65n/wh%-", "");
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/65n", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("wh%-0", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/65n/wh%-0", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(file0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "65n/wh%-");
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/65n", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("wh%-0", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/65n/wh%-0", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(8L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertNotNull(printStream0);
      
      printStream0.println();
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/65n", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("wh%-0", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/65n/wh%-0", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(9L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      
      printStream0.println();
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/65n", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("wh%-0", file0.getName());
      assertEquals(10L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/65n/wh%-0", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      
      mockPrintStream0.println();
      assertSame(mockPrintStream0, printStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/65n", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("wh%-0", file0.getName());
      assertEquals(11L, file0.length());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/65n/wh%-0", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      
      printStream0.println();
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/65n", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(12L, file0.length());
      assertEquals("wh%-0", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/65n/wh%-0", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      
      printStream0.println();
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/65n", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals(13L, file0.length());
      assertEquals("wh%-0", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/65n/wh%-0", file0.toString());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      
      mockPrintStream0.println();
      assertSame(mockPrintStream0, printStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/65n", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("wh%-0", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/65n/wh%-0", file0.toString());
      assertEquals(14L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      
      printStream0.println();
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/65n", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("wh%-0", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/65n/wh%-0", file0.toString());
      assertEquals(15L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isDirectory());
      assertEquals("/tmp/65n", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("wh%-0", file0.getName());
      assertTrue(file0.canWrite());
      assertEquals("/tmp/65n/wh%-0", file0.toString());
      assertEquals(15L, file0.length());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getTotalSpace());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("U l5[<{-zCO");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 19, 13, 19);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, token0.endColumn);
      assertEquals(19, token0.beginLine);
      assertEquals(13, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(19, token0.endLine);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals("U", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, token0.endColumn);
      assertEquals(19, token0.beginLine);
      assertEquals(13, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(19, token0.endLine);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals("U", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(19, token1.beginLine);
      assertEquals(16, token1.endColumn);
      assertEquals(15, token1.beginColumn);
      assertEquals(19, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals("l5", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(19, token2.endLine);
      assertEquals(81, token2.kind);
      assertEquals(19, token2.beginLine);
      assertEquals(17, token2.endColumn);
      assertEquals(17, token2.beginColumn);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getBeginColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals("[", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(19, token3.endLine);
      assertEquals(19, token3.beginLine);
      assertEquals(18, token3.beginColumn);
      assertEquals(18, token3.endColumn);
      assertEquals(88, token3.kind);
      assertEquals(19, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals("<", token3.toString());
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("l@3[XnsrWFb");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2, 2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(2, token0.endLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(2, token0.beginLine);
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals("l", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token1.beginLine);
      assertEquals(2, token1.endLine);
      assertEquals(3, token1.endColumn);
      assertEquals(86, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("@", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(4, token2.beginColumn);
      assertEquals(2, token2.beginLine);
      assertEquals(66, token2.kind);
      assertEquals(4, token2.endColumn);
      assertEquals(2, token2.endLine);
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("3", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 125, 125);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      int int0 = stringReader0.read(charArray0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'I'}, charArray0);
      assertEquals(1, charArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(130, token0.endColumn);
      assertEquals(125, token0.endLine);
      assertEquals(125, token0.beginColumn);
      assertEquals(125, token0.beginLine);
      assertEquals(125, javaCharStream0.getEndLine());
      assertEquals(125, javaCharStream0.getBeginColumn());
      assertEquals(130, javaCharStream0.getColumn());
      assertEquals(130, javaCharStream0.getEndColumn());
      assertEquals(125, javaCharStream0.getBeginLine());
      assertEquals(125, javaCharStream0.getLine());
      assertEquals("nvalid", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(125, token1.endLine);
      assertEquals(125, token1.beginLine);
      assertEquals(137, token1.endColumn);
      assertEquals(132, token1.beginColumn);
      assertEquals(125, javaCharStream0.getEndLine());
      assertEquals(137, javaCharStream0.getEndColumn());
      assertEquals(125, javaCharStream0.getBeginLine());
      assertEquals(125, javaCharStream0.getLine());
      assertEquals(137, javaCharStream0.getColumn());
      assertEquals(132, javaCharStream0.getBeginColumn());
      assertEquals("escape", token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(125, token1.endLine);
      assertEquals(125, token1.beginLine);
      assertEquals(137, token1.endColumn);
      assertEquals(132, token1.beginColumn);
      assertEquals(125, javaCharStream0.getEndLine());
      assertEquals(137, javaCharStream0.getEndColumn());
      assertEquals(125, javaCharStream0.getBeginLine());
      assertEquals(125, javaCharStream0.getLine());
      assertEquals(137, javaCharStream0.getColumn());
      assertEquals(132, javaCharStream0.getBeginColumn());
      assertEquals("escape", token1.toString());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      StringReader stringReader0 = new StringReader("&d");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.IN_FORMAL_COMMENT;
      assertEquals(2, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 14, 14, 35);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream1.ReInit((Reader) stringReader0, 128, 1871, 1871);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(128, token0.beginLine);
      assertEquals(1871, token0.beginColumn);
      assertEquals(1871, token0.endColumn);
      assertEquals(128, token0.endLine);
      assertEquals(105, token0.kind);
      assertEquals(128, javaCharStream1.getBeginLine());
      assertEquals(1871, javaCharStream1.getColumn());
      assertEquals(1871, javaCharStream1.getBeginColumn());
      assertEquals(1871, javaCharStream1.getEndColumn());
      assertEquals(128, javaCharStream1.getLine());
      assertEquals(128, javaCharStream1.getEndLine());
      assertEquals("&", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(128, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1872, token1.endColumn);
      assertEquals(1872, token1.beginColumn);
      assertEquals(128, token1.beginLine);
      assertEquals(128, javaCharStream1.getBeginLine());
      assertEquals(1872, javaCharStream1.getColumn());
      assertEquals(128, javaCharStream1.getLine());
      assertEquals(1872, javaCharStream1.getEndColumn());
      assertEquals(128, javaCharStream1.getEndLine());
      assertEquals(1872, javaCharStream1.getBeginColumn());
      assertEquals("d", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(128, token2.beginLine);
      assertEquals(1872, token2.beginColumn);
      assertEquals(1872, token2.endColumn);
      assertEquals(128, token2.endLine);
      assertEquals(128, javaCharStream1.getBeginLine());
      assertEquals(1872, javaCharStream1.getColumn());
      assertEquals(128, javaCharStream1.getLine());
      assertEquals(1872, javaCharStream1.getEndColumn());
      assertEquals(128, javaCharStream1.getEndLine());
      assertEquals(1872, javaCharStream1.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(128, token3.beginLine);
      assertEquals(1872, token3.beginColumn);
      assertEquals(128, token3.endLine);
      assertEquals(1872, token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals(128, javaCharStream1.getBeginLine());
      assertEquals(1872, javaCharStream1.getColumn());
      assertEquals(128, javaCharStream1.getLine());
      assertEquals(1872, javaCharStream1.getEndColumn());
      assertEquals(128, javaCharStream1.getEndLine());
      assertEquals(1872, javaCharStream1.getBeginColumn());
      assertEquals("", token3.toString());
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 1674, (-1165), 1674);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken((-2738));
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader(">*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 30, 61);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(30, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(13, token0.endLine);
      assertEquals(13, token0.beginLine);
      assertEquals(30, token0.beginColumn);
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(30, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(13, token0.endLine);
      assertEquals(13, token0.beginLine);
      assertEquals(30, token0.beginColumn);
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(">", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-2613));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2613. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1165), (-1165));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1166), token0.endColumn);
      assertEquals((-1166), token0.beginColumn);
      assertEquals((-1165), token0.beginLine);
      assertEquals((-1165), token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals((-1166), javaCharStream0.getColumn());
      assertEquals((-1166), javaCharStream0.getEndColumn());
      assertEquals((-1166), javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1166), javaCharStream0.getColumn());
      assertEquals((-1166), javaCharStream0.getEndColumn());
      assertEquals((-1166), javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      
      Token token1 = Token.newToken((-1165));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertNull(token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      StringReader stringReader0 = new StringReader(">*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 30, 30, 61);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token0.kind);
      assertEquals(30, token0.endLine);
      assertEquals(30, token0.beginLine);
      assertEquals(30, token0.beginColumn);
      assertEquals(30, token0.endColumn);
      assertEquals(30, javaCharStream0.getEndLine());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 'c';
      javaCharStream0.buffer = charArray0;
      assertEquals(30, javaCharStream0.getEndLine());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(30, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(30, token1.endLine);
      assertEquals(31, token1.endColumn);
      assertEquals(31, token1.beginColumn);
      assertEquals(30, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals("c", token1.toString());
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(2046);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2046. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("ntive");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1026), (-1026));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[2] = 'a';
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-1022), token0.endColumn);
      assertEquals((-1026), token0.endLine);
      assertEquals((-1026), token0.beginColumn);
      assertEquals((-1026), token0.beginLine);
      assertEquals((-1022), javaCharStream0.getColumn());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1026), javaCharStream0.getBeginColumn());
      assertEquals((-1022), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals("ntive", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1026), token1.endLine);
      assertEquals((-1022), token1.endColumn);
      assertEquals((-1022), token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals((-1026), token1.beginLine);
      assertEquals((-1022), javaCharStream0.getColumn());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals((-1022), javaCharStream0.getEndColumn());
      assertEquals((-1022), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<<=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1165), (-1165));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      int int0 = stringReader0.read();
      assertEquals(60, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(94, token0.kind);
      assertEquals((-1165), token0.beginLine);
      assertEquals((-1164), token0.endColumn);
      assertEquals((-1165), token0.beginColumn);
      assertEquals((-1165), token0.endLine);
      assertEquals((-1164), javaCharStream0.getColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1164), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals("<=", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1164), javaCharStream0.getColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1164), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getBeginColumn());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      
      Token token1 = Token.newToken(73);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertNull(token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1164), token2.endColumn);
      assertEquals((-1164), token2.beginColumn);
      assertEquals((-1165), token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals((-1165), token2.beginLine);
      assertEquals((-1164), javaCharStream0.getColumn());
      assertEquals((-1165), javaCharStream0.getEndLine());
      assertEquals((-1165), javaCharStream0.getLine());
      assertEquals((-1164), javaCharStream0.getEndColumn());
      assertEquals((-1165), javaCharStream0.getBeginLine());
      assertEquals((-1164), javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7r:P+,GoMy?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = 'a';
      charArray0[2] = 'V';
      charArray0[3] = '9';
      charArray0[4] = 'l';
      charArray0[5] = '>';
      charArray0[6] = '6';
      charArray0[7] = ',';
      int int0 = stringReader0.read(charArray0);
      assertEquals(8, int0);
      assertArrayEquals(new char[] {'7', 'r', ':', 'P', '+', ',', 'G', 'o'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-1150), token0.endColumn);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.endLine);
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals("My", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(39);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 39. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7GoWsrO|Ct>?s");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("7GoWsrO|Ct>?s");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = JavaParserConstants.DECIMAL_LITERAL;
      assertEquals(67, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 67, (-1180));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(67, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals((-1180), token0.beginColumn);
      assertEquals(67, token0.endLine);
      assertEquals((-1180), token0.endColumn);
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals((-1180), javaCharStream0.getBeginColumn());
      assertEquals((-1180), javaCharStream0.getColumn());
      assertEquals(67, javaCharStream0.getEndLine());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals((-1180), javaCharStream0.getEndColumn());
      assertEquals("7", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1175), token1.endColumn);
      assertEquals((-1179), token1.beginColumn);
      assertEquals(67, token1.beginLine);
      assertEquals(67, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(67, javaCharStream0.getBeginLine());
      assertEquals((-1175), javaCharStream0.getColumn());
      assertEquals((-1179), javaCharStream0.getBeginColumn());
      assertEquals(67, javaCharStream0.getEndLine());
      assertEquals(67, javaCharStream0.getLine());
      assertEquals((-1175), javaCharStream0.getEndColumn());
      assertEquals("GoWsr", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 50, 50);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = 'A';
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 3652);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      javaCharStream1.available = 50;
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(6, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3658, token0.endColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(3652, token0.beginColumn);
      assertEquals(3652, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(3658, javaCharStream1.getColumn());
      assertEquals(3658, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals("Invalid", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(50, token1.endLine);
      assertEquals(50, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(49, token1.beginColumn);
      assertEquals(49, token1.endColumn);
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(50, token2.beginLine);
      assertEquals(49, token2.beginColumn);
      assertEquals(49, token2.endColumn);
      assertEquals(50, token2.endLine);
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager1.SkipLexicalActions((Token) null);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(6, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3652, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(3658, javaCharStream1.getColumn());
      assertEquals(3658, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(49, token3.endColumn);
      assertEquals(49, token3.beginColumn);
      assertEquals(50, token3.beginLine);
      assertEquals(50, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals("", token3.toString());
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 50, 50);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[3];
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'I', 'n', 'v'}, charArray0);
      assertEquals(3, charArray0.length);
      
      StringReader stringReader1 = new StringReader("K&o\" |");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int1 = stringReader1.read();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(int1 == int0);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(75, int1);
      
      stringReader1.close();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 3, 802);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(50, token0.endLine);
      assertEquals(50, token0.beginLine);
      assertEquals(50, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(53, token0.endColumn);
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals("alid", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(60, token1.endColumn);
      assertEquals(50, token1.beginLine);
      assertEquals(50, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(55, token1.beginColumn);
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(60, javaCharStream0.getColumn());
      assertEquals(55, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(60, javaCharStream0.getEndColumn());
      assertEquals("escape", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(50, token2.beginLine);
      assertEquals(50, token2.endLine);
      assertEquals(62, token2.beginColumn);
      assertEquals(70, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(70, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getColumn());
      assertEquals("character", token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(70, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("native");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1026), (-1026));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = 'D';
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'n', 'a'}, charArray0);
      assertEquals(2, charArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1026), token0.beginLine);
      assertEquals((-1026), token0.beginColumn);
      assertEquals((-1023), token0.endColumn);
      assertEquals((-1026), token0.endLine);
      assertEquals((-1026), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals((-1023), javaCharStream0.getColumn());
      assertEquals((-1023), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals("tive", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1026), token0.beginLine);
      assertEquals((-1026), token0.beginColumn);
      assertEquals((-1023), token0.endColumn);
      assertEquals((-1026), token0.endLine);
      assertEquals((-1026), javaCharStream0.getBeginColumn());
      assertEquals((-1026), javaCharStream0.getEndLine());
      assertEquals((-1023), javaCharStream0.getColumn());
      assertEquals((-1023), javaCharStream0.getEndColumn());
      assertEquals((-1026), javaCharStream0.getBeginLine());
      assertEquals((-1026), javaCharStream0.getLine());
      assertEquals("tive", token0.toString());
      
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7r:P+,GoMy?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.curLexState = 119;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.backup(0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1151), token0.endColumn);
      assertEquals((-1151), token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.endLine);
      assertEquals((-1151), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1151), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1151), token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals((-1150), token1.beginColumn);
      assertEquals((-1150), token1.endColumn);
      assertEquals((-1151), token1.endLine);
      assertEquals((-1150), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1150), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1150), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1151), token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals((-1149), token2.endColumn);
      assertEquals((-1149), token2.beginColumn);
      assertEquals((-1151), token2.beginLine);
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1149), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1149), javaCharStream0.getBeginColumn());
      assertEquals((-1149), javaCharStream0.getEndColumn());
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("throws");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1165), (-1165));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7r:P+,GoMy?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1151), (-1151));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[7];
      int int0 = stringReader0.read(charArray0);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'7', 'r', ':', 'P', '+', ',', 'G'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1151), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1149), token0.endColumn);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1149), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1149), javaCharStream0.getEndColumn());
      assertEquals("oMy", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1151), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1149), token0.endColumn);
      assertEquals((-1151), token0.beginColumn);
      assertEquals((-1151), token0.beginLine);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1149), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1149), javaCharStream0.getEndColumn());
      assertEquals("oMy", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1149), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1151), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals((-1149), javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-1151), token1.endLine);
      assertEquals((-1151), token1.beginLine);
      assertEquals((-1148), token1.beginColumn);
      assertEquals((-1148), token1.endColumn);
      assertEquals(91, token1.kind);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1148), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1148), javaCharStream0.getEndColumn());
      assertEquals((-1148), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals("?", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-1151), token2.beginLine);
      assertEquals(91, token2.kind);
      assertEquals((-1148), token2.endColumn);
      assertEquals((-1151), token2.endLine);
      assertEquals((-1148), token2.beginColumn);
      assertEquals((-1151), javaCharStream0.getBeginLine());
      assertEquals((-1148), javaCharStream0.getColumn());
      assertEquals((-1151), javaCharStream0.getEndLine());
      assertEquals((-1148), javaCharStream0.getEndColumn());
      assertEquals((-1148), javaCharStream0.getBeginColumn());
      assertEquals((-1151), javaCharStream0.getLine());
      assertEquals("?", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("&=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 19, 19);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, token0.endLine);
      assertEquals(13, token0.beginLine);
      assertEquals(114, token0.kind);
      assertEquals(19, token0.beginColumn);
      assertEquals(20, token0.endColumn);
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals("&=", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getLine());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, token0.endLine);
      assertEquals(13, token0.beginLine);
      assertEquals(114, token0.kind);
      assertEquals(19, token0.beginColumn);
      assertEquals(20, token0.endColumn);
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals("&=", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(20, token1.beginColumn);
      assertEquals(20, token1.endColumn);
      assertEquals(13, token1.endLine);
      assertEquals(13, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, token2.beginLine);
      assertEquals(13, token2.endLine);
      assertEquals(20, token2.endColumn);
      assertEquals(20, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(20, token3.beginColumn);
      assertEquals(13, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(13, token3.beginLine);
      assertEquals(20, token3.endColumn);
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals("", token3.toString());
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("F!tnO=>(e< RBz");
      assertNotNull(stringReader0);
      
      int int0 = JavaParserConstants.COMMA;
      assertEquals(84, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3970, 105);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, token0.endColumn);
      assertEquals(105, token0.beginColumn);
      assertEquals(3970, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(3970, token0.endLine);
      assertEquals(3970, javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(3970, javaCharStream0.getLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(3970, javaCharStream0.getEndLine());
      assertEquals("F", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3970, token1.beginLine);
      assertEquals(89, token1.kind);
      assertEquals(3970, token1.endLine);
      assertEquals(106, token1.endColumn);
      assertEquals(106, token1.beginColumn);
      assertEquals(3970, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(3970, javaCharStream0.getLine());
      assertEquals(3970, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals("!", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("Invalid escape character at line ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 50, 50);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = 'A';
      charArray0[2] = '\\';
      charArray0[3] = '[';
      charArray0[4] = '9';
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'I', 'n', 'v', 'a', 'l'}, charArray0);
      assertEquals(5, charArray0.length);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, token0.beginLine);
      assertEquals(50, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(51, token0.endColumn);
      assertEquals(50, token0.beginColumn);
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals("id", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, token0.beginLine);
      assertEquals(50, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(51, token0.endColumn);
      assertEquals(50, token0.beginColumn);
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals("id", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager2);
      
      Token token1 = javaParserTokenManager2.getNextToken();
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(50, token1.endLine);
      assertEquals(50, token1.beginLine);
      assertEquals(53, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(58, token1.endColumn);
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(58, javaCharStream0.getColumn());
      assertEquals(58, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals("escape", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager2.getNextToken();
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertEquals(60, token2.beginColumn);
      assertEquals(50, token2.beginLine);
      assertEquals(68, token2.endColumn);
      assertEquals(50, token2.endLine);
      assertEquals(74, token2.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals("character", token2.toString());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(50, token3.beginLine);
      assertEquals(50, token3.endLine);
      assertEquals(71, token3.endColumn);
      assertEquals(74, token3.kind);
      assertEquals(70, token3.beginColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("at", token3.toString());
      assertEquals(70, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getColumn());
      assertEquals(71, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertNotNull(token3);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Token token0 = Token.newToken((-95));
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("LHR");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 61, 61, 47);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.backup(49);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 0, 26, 26);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.ReInit((Reader) null, (-507), (-507), 1225);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }
}
