/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 23:27:06 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.BoxLLSymbol;
import jahuwaldt.plot.BoxURSymbol;
import jahuwaldt.plot.CircleSymbol;
import jahuwaldt.plot.RTriangle1Symbol;
import jahuwaldt.plot.RTriangle2Symbol;
import jahuwaldt.plot.TabDSymbol;
import jahuwaldt.plot.ThinRect2Symbol;
import jahuwaldt.plot.Triangle1Symbol;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.SystemColor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlotSymbol_ESTest extends PlotSymbol_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TabDSymbol tabDSymbol0 = new TabDSymbol();
      int int0 = tabDSymbol0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      rTriangle1Symbol0.setSize((-70));
      int int0 = rTriangle1Symbol0.getSize();
      assertEquals((-70), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Triangle1Symbol triangle1Symbol0 = new Triangle1Symbol();
      Color color0 = new Color((-3854));
      triangle1Symbol0.setFillColor(color0);
      triangle1Symbol0.getFillColor();
      assertEquals(8, triangle1Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CircleSymbol circleSymbol0 = new CircleSymbol();
      Color color0 = new Color(8);
      circleSymbol0.setFillColor(color0);
      circleSymbol0.getFillColor();
      assertEquals(8, circleSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      SystemColor systemColor0 = SystemColor.controlText;
      thinRect2Symbol0.setFillColor(systemColor0);
      thinRect2Symbol0.getFillColor();
      assertEquals(8, thinRect2Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CircleSymbol circleSymbol0 = new CircleSymbol();
      circleSymbol0.setBorderColor((Color) null);
      circleSymbol0.getBorderColor();
      assertEquals(8, circleSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BoxURSymbol boxURSymbol0 = new BoxURSymbol();
      // Undeclared exception!
      try { 
        boxURSymbol0.draw((Graphics) null, (-2743), (-2743));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PolygonSymbol", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      thinRect2Symbol0.getFillColor();
      assertEquals(8, thinRect2Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RTriangle2Symbol rTriangle2Symbol0 = new RTriangle2Symbol();
      rTriangle2Symbol0.getBorderColor();
      assertEquals(8, rTriangle2Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BoxLLSymbol boxLLSymbol0 = new BoxLLSymbol();
      BoxLLSymbol boxLLSymbol1 = (BoxLLSymbol)boxLLSymbol0.clone();
      assertEquals(8, boxLLSymbol1.getSize());
      assertNotSame(boxLLSymbol1, boxLLSymbol0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RTriangle1Symbol rTriangle1Symbol0 = new RTriangle1Symbol();
      assertEquals(8, rTriangle1Symbol0.getSize());
      
      rTriangle1Symbol0.setSize(0);
      int int0 = rTriangle1Symbol0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RTriangle2Symbol rTriangle2Symbol0 = new RTriangle2Symbol();
      Color color0 = new Color((-944));
      rTriangle2Symbol0.setBorderColor(color0);
      rTriangle2Symbol0.getBorderColor();
      assertEquals(8, rTriangle2Symbol0.getSize());
  }
}
