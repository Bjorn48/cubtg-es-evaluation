/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:35:56 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Ladder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ladder_ESTest extends Ladder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2236, 2236, 4, (-1894)).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>((-1));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      PureOrder pureOrder0 = new PureOrder((-3210));
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, tabuListDecorator0, miniSATRestarts0);
      ISolver iSolver1 = solver0.getSolvingEngine();
      try { 
        ladder0.addExactlyOne(iSolver1, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(2242, 2242);
      // Undeclared exception!
      ladder0.addExactlyOne(dimacsStringSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(statisticsSolver0, vecInt0);
      GroupClauseSelectorSolver<AbstractMinimalModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<AbstractMinimalModel>(minimal4CardinalityModel0);
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(groupClauseSelectorSolver0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver((PrintWriter) null);
      Ladder ladder0 = new Ladder();
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(dimacsOutputSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(dimacsStringSolver0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt(46, 1834);
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = (LexicoDecorator<AbstractMinimalModel>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<LexicoDecorator<AbstractMinimalModel>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<AbstractMinimalModel>>(lexicoDecorator0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(groupClauseSelectorSolver0, vecInt0, solutionFoundListener0);
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<AbstractMinimalModel>(minimal4CardinalityModel0, false);
      LexicoDecorator<FullClauseSelectorSolver<AbstractMinimalModel>> lexicoDecorator1 = new LexicoDecorator<FullClauseSelectorSolver<AbstractMinimalModel>>(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(lexicoDecorator1, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(2242, 2242);
      Ladder ladder0 = new Ladder();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, true);
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(maxSatDecorator0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(1825);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(1825);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      ASolverFactory<FullClauseSelectorSolver<AbstractMinimalModel>> aSolverFactory0 = (ASolverFactory<FullClauseSelectorSolver<AbstractMinimalModel>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<FullClauseSelectorSolver<AbstractMinimalModel>> basicLauncher0 = new BasicLauncher<FullClauseSelectorSolver<AbstractMinimalModel>>(aSolverFactory0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, arminRestarts0, basicLauncher0);
      VecInt vecInt0 = new VecInt(337, Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(solver0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(1825);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(1825);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ASolverFactory<FullClauseSelectorSolver<AbstractMinimalModel>> aSolverFactory0 = (ASolverFactory<FullClauseSelectorSolver<AbstractMinimalModel>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<FullClauseSelectorSolver<AbstractMinimalModel>> basicLauncher0 = new BasicLauncher<FullClauseSelectorSolver<AbstractMinimalModel>>(aSolverFactory0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, (RestartStrategy) null, basicLauncher0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, 1825, solutionFoundListener0);
      VecInt vecInt0 = new VecInt(46, 1825);
      modelIteratorToSATAdapter0.addBlockingClause(vecInt0);
      try { 
        ladder0.addAtMostOne(modelIteratorToSATAdapter0, vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(2242, 2242);
      // Undeclared exception!
      ladder0.addAtMostOne(dimacsStringSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink(317);
      Ladder ladder0 = new Ladder();
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(dimacsStringSolver0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2236, 2236, 2236, (-1282)).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = new LexicoDecorator<AbstractMinimalModel>(minimal4InclusionModel0);
      NegationDecorator<LexicoDecorator<AbstractMinimalModel>> negationDecorator0 = new NegationDecorator<LexicoDecorator<AbstractMinimalModel>>(lexicoDecorator0);
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(negationDecorator0, iVecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      Ladder ladder0 = new Ladder();
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(dimacsStringSolver0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      ASolverFactory<LexicoDecorator<AbstractMinimalModel>> aSolverFactory0 = (ASolverFactory<LexicoDecorator<AbstractMinimalModel>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<LexicoDecorator<AbstractMinimalModel>> basicLauncher0 = new BasicLauncher<LexicoDecorator<AbstractMinimalModel>>(aSolverFactory0);
      PrintWriter printWriter0 = basicLauncher0.getLogWriter();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(printWriter0);
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      ladder0.addExactlyOne(dimacsOutputSolver0, vecInt0);
      assertEquals(1, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(1825);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(1825);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ASolverFactory<FullClauseSelectorSolver<AbstractMinimalModel>> aSolverFactory0 = (ASolverFactory<FullClauseSelectorSolver<AbstractMinimalModel>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<FullClauseSelectorSolver<AbstractMinimalModel>> basicLauncher0 = new BasicLauncher<FullClauseSelectorSolver<AbstractMinimalModel>>(aSolverFactory0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, (RestartStrategy) null, basicLauncher0);
      VecInt vecInt0 = new VecInt(46, 1825);
      ladder0.addExactlyOne(solver0, vecInt0);
      assertEquals(180, solver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(1825);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(1825);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      ASolverFactory<FullClauseSelectorSolver<AbstractMinimalModel>> aSolverFactory0 = (ASolverFactory<FullClauseSelectorSolver<AbstractMinimalModel>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<FullClauseSelectorSolver<AbstractMinimalModel>> basicLauncher0 = new BasicLauncher<FullClauseSelectorSolver<AbstractMinimalModel>>(aSolverFactory0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, (RestartStrategy) null, basicLauncher0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(solver0, 1825, solutionFoundListener0);
      VecInt vecInt0 = new VecInt(46, 1825);
      ladder0.addAtMostOne(modelIteratorToSATAdapter0, vecInt0);
      assertEquals(184, solver0.nConstraints());
  }
}
