/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:32:30 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.GroupedCNFReader;
import org.sat4j.reader.InstanceReader;
import org.sat4j.reader.JSONReader;
import org.sat4j.reader.LecteurDimacs;
import org.sat4j.reader.Reader;
import org.sat4j.specs.IGroupSolver;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Reader_ESTest extends Reader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+])");
      // Undeclared exception!
      try { 
        dimacsReader0.parseInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Reader.getInputStreamFromFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      InstanceReader instanceReader0 = new InstanceReader(statisticsSolver0, (Reader) null);
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        instanceReader0.decode(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      try { 
        Reader.getInputStreamFromFilename("PW");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONReader<SubModelIterator> jSONReader0 = new JSONReader<SubModelIterator>((SubModelIterator) null);
      try { 
        jSONReader0.parseInstance("http://VSIDS like heuristics from MiniSAT using a heap VY]_{");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: VSIDS like heuristics from MiniSAT using a heap VY]_{
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONReader<SubModelIterator> jSONReader0 = new JSONReader<SubModelIterator>((SubModelIterator) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("js0|$");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        jSONReader0.parseInstance("js0|$");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorWrong input 
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      try { 
        dimacsReader0.parseInstance("'sNa:fZGsFvGl");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs((ISolver) null);
      assertFalse(lecteurDimacs0.isVerbose());
      
      lecteurDimacs0.setVerbosity(true);
      assertTrue(lecteurDimacs0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      boolean boolean0 = instanceReader0.isVerbose();
      assertFalse(boolean0);
      assertFalse(instanceReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      StringReader stringReader0 = new StringReader("http://solver");
      // Undeclared exception!
      try { 
        dimacsReader0.parseInstance((java.io.Reader) stringReader0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Use #parseInstance(InputStream) instead
         //
         verifyException("org.sat4j.reader.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(dimacsOutputSolver0);
      InstanceReader instanceReader0 = new InstanceReader(dimacsOutputSolver0, lecteurDimacs0);
      instanceReader0.setUseMapping(false);
      assertFalse(instanceReader0.isUsingMapping());
      assertFalse(instanceReader0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONReader<SubModelIterator> jSONReader0 = new JSONReader<SubModelIterator>((SubModelIterator) null);
      boolean boolean0 = jSONReader0.isUsingMapping();
      assertFalse(jSONReader0.isVerbose());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IGroupSolver iGroupSolver0 = mock(IGroupSolver.class, new ViolatedAssumptionAnswer());
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(iGroupSolver0);
      groupedCNFReader0.getMapping();
      assertFalse(groupedCNFReader0.isUsingMapping());
      assertFalse(groupedCNFReader0.isVerbose());
  }
}
