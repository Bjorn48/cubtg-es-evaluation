/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:54:24 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryClause_ESTest extends BinaryClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push((-866));
      Lits lits0 = new Lits();
      DotSearchTracing<LearntBinaryClause> dotSearchTracing0 = new DotSearchTracing<LearntBinaryClause>("restarting ");
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -866
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-415));
      IVecInt iVecInt0 = vecInt0.push((-3533));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      int int0 = originalBinaryClause0.getAssertionLevel(iVecInt0, (-415));
      assertEquals(0, int0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      IVecInt iVecInt0 = vecInt0.push((-205));
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.isSatisfied();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -206
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(128);
      IVecInt iVecInt0 = vecInt0.push(57);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.calcReasonOnTheFly((-3988), vecInt0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-415));
      vecInt0.push(927);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      learntBinaryClause0.hashCode();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-415));
      IVecInt iVecInt0 = vecInt0.push((-3533));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      OriginalBinaryClause originalBinaryClause1 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      boolean boolean0 = originalBinaryClause0.equals(originalBinaryClause1);
      assertTrue(boolean0);
      assertEquals(0.0, originalBinaryClause1.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-415));
      vecInt0.push(926);
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      int[] intArray0 = learntBinaryClause0.getLits();
      assertArrayEquals(new int[] {(-415), 926}, intArray0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-415));
      vecInt0.unsafePush(136);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-1));
      vecInt0.unsafePush(3);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      originalBinaryClause0.rescaleBy(0.0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(2);
      vecInt0.unsafePush(1);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      int int0 = originalBinaryClause0.get(1);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-415));
      vecInt0.unsafePush(136);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      int int0 = originalBinaryClause0.get(0);
      assertEquals((-415), int0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-1915));
      IVecInt iVecInt0 = vecInt0.push((-1915));
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.get((-1915));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(136);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      boolean boolean0 = originalBinaryClause0.locked();
      assertFalse(boolean0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-415));
      vecInt0.push((-3533));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.locked();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(2);
      IVecInt iVecInt0 = vecInt0.push((-446));
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -445
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-415));
      IVecInt iVecInt0 = vecInt0.push((-3533));
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(2);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      originalBinaryClause0.calcReason(0, (IVecInt) null);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      IVecInt iVecInt0 = vecInt0.push(10);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      learntBinaryClause0.calcReasonOnTheFly(3997, iVecInt0, iVecInt0);
      assertEquals(2, vecInt0.size());
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-1883));
      IVecInt iVecInt0 = vecInt0.push((-1883));
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      Constr constr0 = learntBinaryClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-415));
      vecInt0.unsafePush(136);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      originalBinaryClause0.getVocabulary();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-415));
      vecInt0.push((-3533));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      DotSearchTracing<LearntBinaryClause> dotSearchTracing0 = new DotSearchTracing<LearntBinaryClause>("I)iIUber%y)@AKSm(`<0");
      // Undeclared exception!
      try { 
        originalBinaryClause0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-1883));
      vecInt0.push((-2856));
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        learntBinaryClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      IVecInt iVecInt0 = vecInt0.push(4864);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4864
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-1915));
      vecInt0.push((-1915));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-446));
      vecInt0.push((-446));
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, (ILits) null);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, (-446));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      IVecInt iVecInt0 = vecInt0.push(10);
      Lits lits0 = new Lits();
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        learntBinaryClause0.propagatePI(watcherBasedPrimeImplicantStrategy0, Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-446));
      vecInt0.push((-446));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.propagate((UnitPropagationListener) null, (-446));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.propagate((UnitPropagationListener) null, 2581);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2581
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-1883));
      IVecInt iVecInt0 = vecInt0.push((-1883));
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -942
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-429));
      IVecInt iVecInt0 = vecInt0.push((-429));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.isSatisfied();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-446));
      vecInt0.push((-446));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.getAssertionLevel((IVecInt) null, (-446));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-415));
      IVecInt iVecInt0 = vecInt0.push(927);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      iVecInt0.shrinkTo(1948);
      // Undeclared exception!
      try { 
        originalBinaryClause0.getAssertionLevel(iVecInt0, (-415));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-446));
      vecInt0.push((-446));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        originalBinaryClause0.calcReason((-446), vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-429));
      IVecInt iVecInt0 = vecInt0.push((-429));
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.calcReason((-429), iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -429
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-707));
      IVecInt iVecInt0 = vecInt0.push((-707));
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -707
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(23);
      vecInt0.push(23);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-958));
      vecInt0.push(1979);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, glucose21Restarts0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.assertConstraint(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -957
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      String string0 = learntBinaryClause0.toString();
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
      assertEquals("5[?] 5[?]", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      DotSearchTracing<LearntBinaryClause> dotSearchTracing0 = new DotSearchTracing<LearntBinaryClause>(" ");
      String string0 = originalBinaryClause0.toString((VarMapper) dotSearchTracing0);
      assertEquals("5[?] 5[?]", string0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(279);
      IVecInt iVecInt0 = vecInt0.push(451);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      int int0 = originalBinaryClause0.getAssertionLevel(vecInt0, 3560);
      assertEquals(0, int0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-446));
      IVecInt iVecInt0 = vecInt0.push((-446));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      int int0 = originalBinaryClause0.getAssertionLevel(iVecInt0, (-446));
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(2725);
      IVecInt iVecInt0 = vecInt0.push(2725);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      vecInt0.sortUnique();
      iVecInt0.pop();
      int int0 = originalBinaryClause0.getAssertionLevel(iVecInt0, 2725);
      assertEquals((-1), int0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      lits0.satisfies(10);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      boolean boolean0 = originalBinaryClause0.isSatisfied();
      assertTrue(boolean0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      IVecInt iVecInt0 = vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      boolean boolean0 = originalBinaryClause0.isSatisfied();
      assertFalse(boolean0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-415));
      IVecInt iVecInt0 = vecInt0.push((-3533));
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      vecInt0.sortUnique();
      OriginalBinaryClause originalBinaryClause1 = new OriginalBinaryClause(iVecInt0, (ILits) null);
      boolean boolean0 = originalBinaryClause0.equals(originalBinaryClause1);
      assertFalse(boolean0);
      assertEquals(0.0, originalBinaryClause1.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      boolean boolean0 = originalBinaryClause0.equals(lits0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-3579));
      vecInt0.push((-3579));
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      boolean boolean0 = originalBinaryClause0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      originalBinaryClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      int[] intArray0 = new int[6];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, glucose21Restarts0);
      originalBinaryClause0.assertConstraint(solver0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-446));
      IVecInt iVecInt0 = vecInt0.push((-446));
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      int int0 = learntBinaryClause0.get(1);
      assertEquals((-446), int0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      boolean boolean0 = originalBinaryClause0.simplify();
      assertFalse(boolean0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      lits0.satisfies(10);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      boolean boolean0 = originalBinaryClause0.simplify();
      assertTrue(boolean0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      OriginalBinaryClause originalBinaryClause0 = null;
      try {
        originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      int int0 = originalBinaryClause0.size();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      boolean boolean0 = originalBinaryClause0.canBePropagatedMultipleTimes();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      IVecInt iVecInt0 = vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      double double0 = originalBinaryClause0.getActivity();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      originalBinaryClause0.getVocabulary();
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      IVecInt iVecInt0 = vecInt0.push(10);
      Lits lits0 = new Lits();
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, lits0);
      String string0 = learntBinaryClause0.toString((VarMapper) null);
      assertEquals("5[?] 5[?]", string0);
      assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      boolean boolean0 = originalBinaryClause0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      int int0 = originalBinaryClause0.requiredNumberOfSatisfiedLiterals();
      assertEquals(1, int0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(279);
      vecInt0.push(451);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = OriginalBinaryClause.brandNewClause((UnitPropagationListener) null, iLits0, vecInt0);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush((-2113));
      IVecInt iVecInt0 = vecInt0.push(1408);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt0, lits0);
      // Undeclared exception!
      try { 
        originalBinaryClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2114
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(10);
      vecInt0.push(10);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      originalBinaryClause0.rescaleBy(1.0E20);
      assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(20);
      vecInt0.push(20);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      Constr constr0 = originalBinaryClause0.toConstraint();
      assertEquals(0.0, constr0.getActivity(), 0.01);
  }
}
