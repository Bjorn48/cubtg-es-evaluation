/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:26:10 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.cnf.CBClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.MandatoryLiteralListener;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CBClause_ESTest extends CBClause_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      vecInt0.growTo(1, 3126);
      CBClause cBClause0 = new CBClause(vecInt0, lits0, true);
      // Undeclared exception!
      try { 
        cBClause0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3126
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(2190);
      PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(positiveLiteralSelectionStrategy0);
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, noRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      CBClause cBClause0 = new CBClause(vecInt0, iLits0, false);
      cBClause0.rescaleBy(1);
      assertEquals(0.0, cBClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.calcReason((-1614), vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      CBClause cBClause0 = new CBClause(vecInt0, iLits0, true);
      // Undeclared exception!
      try { 
        cBClause0.calcReason((-1614), vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      vecInt0.shrinkTo(640);
      // Undeclared exception!
      try { 
        cBClause0.calcReason((-1614), vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      String string0 = cBClause0.toString();
      assertEquals("1[?] ", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      CBClause cBClause0 = new CBClause(vecInt0, iLits0);
      int int0 = cBClause0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      boolean boolean0 = cBClause0.learnt();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(3);
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2019, (-684));
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -683
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = CBClause.brandNewClause((UnitPropagationListener) null, lits0, vecInt0);
      // Undeclared exception!
      try { 
        cBClause0.propagate((UnitPropagationListener) null, 99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.locked();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.get((-4139));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4139
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.calcReason(250, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt(675, 675);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.calcReason(5370, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 675
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(0.0);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = randomWalkDecorator0.getPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(iPhaseSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, eMARestarts0);
      ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
      VecInt vecInt0 = new VecInt(1678);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        CBClause.brandNewClause(solver0, iLits0, readOnlyVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        CBClause.brandNewClause((UnitPropagationListener) null, lits0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      // Undeclared exception!
      try { 
        CBClause.brandNewClause((UnitPropagationListener) null, lits0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1186);
      // Undeclared exception!
      try { 
        CBClause.brandNewClause((UnitPropagationListener) null, lits0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1187
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause(readOnlyVecInt0, (ILits) null, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause((IVecInt) null, (ILits) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause(vecInt0, lits0, true);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VecInt vecInt0 = new VecInt(20, 20);
      Lits lits0 = new Lits();
      vecInt0.shrinkTo(837);
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause(vecInt0, lits0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause(readOnlyVecInt0, lits0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Lits lits0 = new Lits();
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause((IVecInt) null, lits0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause(vecInt0, lits0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(1132);
      CBClause cBClause0 = null;
      try {
        cBClause0 = new CBClause(vecInt0, lits0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      cBClause0.register();
      assertEquals(0, cBClause0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0, true);
      boolean boolean0 = cBClause0.learnt();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VecInt vecInt0 = new VecInt(36, 36);
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        cBClause0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      int[] intArray0 = new int[0];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, tabuListDecorator0, arminRestarts0);
      VecInt vecInt0 = new VecInt(intArray0);
      CBClause cBClause0 = CBClause.brandNewClause(solver0, iLits0, vecInt0);
      String string0 = cBClause0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      lits0.satisfies(1);
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0, true);
      cBClause0.falsified = (-1);
      cBClause0.register();
      assertTrue(cBClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0, true);
      // Undeclared exception!
      try { 
        cBClause0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(2841);
      CBClause cBClause0 = new CBClause(vecInt0, lits0, true);
      // Undeclared exception!
      try { 
        cBClause0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2840
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VecInt vecInt0 = new VecInt(20, 20);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(20, 20, (-1512.52449), 20);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, arminRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      CBClause cBClause0 = new CBClause(vecInt0, iLits0, false);
      cBClause0.assertConstraint(solver0);
      boolean boolean0 = cBClause0.locked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      boolean boolean0 = cBClause0.locked();
      assertFalse(cBClause0.learnt());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      cBClause0.calcReason(1, vecInt0);
      assertFalse(cBClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      cBClause0.calcReason((-1), vecInt0);
      assertFalse(cBClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.calcReason(2562, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      vecInt0.shrink(1);
      // Undeclared exception!
      try { 
        cBClause0.calcReason((-110), vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VecInt vecInt0 = new VecInt(18, 18);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.calcReason(18, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      lits0.satisfies(1);
      boolean boolean0 = cBClause0.simplify();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      boolean boolean0 = cBClause0.simplify();
      assertFalse(boolean0);
      assertFalse(cBClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(734, 734);
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.remove();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 735
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      cBClause0.remove();
      assertFalse(cBClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.forwardActivity(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null, true);
      // Undeclared exception!
      try { 
        cBClause0.canBeSatisfiedByCountingLiterals();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      cBClause0.size();
      assertFalse(cBClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.toString((VarMapper) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      CBClause cBClause0 = new CBClause(iVecInt0, (ILits) null);
      cBClause0.undo(38);
      cBClause0.remove();
      assertFalse(cBClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      cBClause0.get(0);
      assertFalse(cBClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.setActivity(1665.2813);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.getAssertionLevel(vecInt0, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      cBClause0.rescaleBy(0.0);
      assertEquals(0.0, cBClause0.getActivity(), 0.01);
      assertFalse(cBClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.calcReasonOnTheFly((-1), vecInt0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.propagatePI((MandatoryLiteralListener) null, 3284);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.requiredNumberOfSatisfiedLiterals();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, varOrderHeap0, arminRestarts0);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0, true);
      cBClause0.assertConstraint(solver0);
      assertEquals(0.0, cBClause0.getActivity(), 0.01);
      assertTrue(cBClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      cBClause0.incActivity(1);
      assertEquals(1.0, cBClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      assertFalse(cBClause0.learnt());
      
      cBClause0.setLearnt();
      assertTrue(cBClause0.learnt());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      double double0 = cBClause0.getActivity();
      assertFalse(cBClause0.learnt());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        cBClause0.remove((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      CBClause cBClause0 = new CBClause(vecInt0, lits0, true);
      // Undeclared exception!
      try { 
        cBClause0.canBePropagatedMultipleTimes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.CBClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = CBClause.brandNewClause((UnitPropagationListener) null, lits0, vecInt0);
      // Undeclared exception!
      try { 
        cBClause0.propagate((UnitPropagationListener) null, 1186);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 593
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      CBClause cBClause0 = new CBClause(vecInt0, lits0, false);
      Constr constr0 = cBClause0.toConstraint();
      assertFalse(constr0.learnt());
  }
}
