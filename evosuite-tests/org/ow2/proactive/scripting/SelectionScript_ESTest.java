/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:49:50 GMT 2019
 */

package org.ow2.proactive.scripting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.InputStream;
import java.io.Serializable;
import java.net.URI;
import java.net.URL;
import java.time.LocalDate;
import java.time.Period;
import java.util.LinkedList;
import java.util.List;
import javax.script.Bindings;
import javax.script.SimpleBindings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;
import org.ow2.proactive.scripting.Script;
import org.ow2.proactive.scripting.SelectionScript;
import org.ow2.proactive.scripting.SimpleScript;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SelectionScript_ESTest extends SelectionScript_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[0];
      SelectionScript selectionScript0 = new SelectionScript("", "", serializableArray0, true);
      SelectionScript selectionScript1 = new SelectionScript("selected", "MD5");
      boolean boolean0 = selectionScript1.equals(selectionScript0);
      assertFalse(boolean0);
      assertTrue(selectionScript0.isDynamic());
      assertTrue(selectionScript1.isDynamic());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("-/KXMXP/Heq", "-/KXMXP/Heq");
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[8];
      boolean boolean0 = selectionScript0.compareByteArray(byteArray0, byteArray1);
      assertTrue(selectionScript0.isDynamic());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Script<InputStream> script0 = (Script<InputStream>) mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn((Serializable[]) null).when(script0).getParameters();
      doReturn("Bad result format : awaited Boolean (or Integer when not existing), found ").when(script0).getScript();
      doReturn("Bad result format : awaited Boolean (or Integer when not existing), found ").when(script0).getScriptName();
      SelectionScript selectionScript0 = new SelectionScript(script0, false);
      selectionScript0.getReader();
      assertFalse(selectionScript0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("W++~b+O)R", "selected", false);
      String string0 = selectionScript0.getId();
      assertFalse(selectionScript0.isDynamic());
      assertEquals("W++~b+O)R", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("Attribute ", "Attribute ", false);
      selectionScript0.hashCode();
      assertFalse(selectionScript0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn((Serializable[]) null).when(script0).getParameters();
      doReturn((String) null).when(script0).getScript();
      doReturn((String) null).when(script0).getScriptName();
      SelectionScript selectionScript0 = new SelectionScript(script0, true);
      String string0 = selectionScript0.toString();
      assertEquals("779278683\nnull", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Script<String> script0 = (Script<String>) mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn((Serializable[]) null).when(script0).getParameters();
      doReturn((String) null).when(script0).getScript();
      doReturn((String) null).when(script0).getScriptName();
      SelectionScript selectionScript0 = new SelectionScript(script0, false);
      boolean boolean0 = selectionScript0.isDynamic();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[2];
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1090L));
      Period period0 = Period.between(localDate0, localDate0);
      serializableArray0[0] = (Serializable) period0;
      Script<InputStream> script0 = (Script<InputStream>) mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn(serializableArray0).when(script0).getParameters();
      doReturn("").when(script0).getScript();
      doReturn("SelectionScript").when(script0).getScriptName();
      SelectionScript selectionScript0 = new SelectionScript(script0, false);
      LinkedList<SelectionScript> linkedList0 = new LinkedList<SelectionScript>();
      linkedList0.add(selectionScript0);
      int int0 = SelectionScript.hashCodeFromList(linkedList0);
      assertEquals(10611599, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Script<InputStream> script0 = (Script<InputStream>) mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn((Serializable[]) null).when(script0).getParameters();
      doReturn("Bad result format : awaited Boolean (or Integer when not existing), found ").when(script0).getScript();
      doReturn("Bad result format : awaited Boolean (or Integer when not existing), found ").when(script0).getScriptName();
      SelectionScript selectionScript0 = new SelectionScript(script0, false);
      String string0 = selectionScript0.getId();
      assertNull(string0);
      assertFalse(selectionScript0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("Attribute ", "Attribute ", false);
      selectionScript0.digest();
      assertFalse(selectionScript0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("u^h0'|;x", "Rendering class: [");
      // Undeclared exception!
      try { 
        selectionScript0.getResult("u^h0'|;x", (Bindings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.SelectionScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[0];
      SelectionScript selectionScript0 = new SelectionScript("P8", "63;O|ec;^yZYr{Z", serializableArray0, false);
      SelectionScript selectionScript1 = new SelectionScript();
      // Undeclared exception!
      try { 
        selectionScript0.equals(selectionScript1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.SelectionScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("'N7", "'N7");
      // Undeclared exception!
      try { 
        selectionScript0.compareByteArray((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.SelectionScript", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SimpleScript simpleScript0 = new SimpleScript(uRL0, (String) null, (Serializable[]) null);
      SelectionScript selectionScript0 = new SelectionScript(simpleScript0, true);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript((Script<?>) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[2];
      URL uRL0 = MockURL.getHttpExample();
      SelectionScript selectionScript0 = new SelectionScript(uRL0, serializableArray0, true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SelectionScript selectionScript0 = new SelectionScript(uRL0, (Serializable[]) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SelectionScript selectionScript0 = new SelectionScript(uRL0, false);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SelectionScript selectionScript0 = new SelectionScript(uRL0, "?#s\"54^ias['x&", (Serializable[]) null, true);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(uRL0, "U4aBXVvJcfhQhE$H^w/", serializableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SelectionScript selectionScript0 = new SelectionScript(uRL0, "!,DZ{", true);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SelectionScript selectionScript0 = new SelectionScript(uRL0, "http://www.someFakeButWellFormedURL.org/fooExample");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SelectionScript selectionScript0 = new SelectionScript(uRL0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      Serializable[] serializableArray0 = new Serializable[9];
      serializableArray0[4] = (Serializable) selectionScript0;
      SelectionScript selectionScript1 = null;
      try {
        selectionScript1 = new SelectionScript("Could not read configuration file [", "selected", serializableArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      File file0 = new File("P+0hD nGr%Apo<wXh*Q");
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(file0, (Serializable[]) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to read script : /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/P+0hD nGr%Apo<wXh*Q
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(file0).getPath();
      Serializable[] serializableArray0 = new Serializable[4];
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(file0, serializableArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.utils.FileUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[9];
      SelectionScript selectionScript0 = new SelectionScript("", "", serializableArray0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byte[] byteArray1 = new byte[7];
      boolean boolean0 = selectionScript0.compareByteArray(byteArray1, byteArray0);
      assertFalse(boolean0);
      assertFalse(selectionScript0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      selectionScript0.buildSelectionScriptId();
      assertTrue(selectionScript0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[2];
      Script<InputStream> script0 = (Script<InputStream>) mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn(serializableArray0).when(script0).getParameters();
      doReturn("").when(script0).getScript();
      doReturn("SelectionScript").when(script0).getScriptName();
      SelectionScript selectionScript0 = new SelectionScript(script0, false);
      selectionScript0.buildSelectionScriptId();
      assertFalse(selectionScript0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      File file0 = MockFile.createTempFile(",5pv]=/Y", ",5pv]=/Y");
      Serializable[] serializableArray0 = new Serializable[4];
      SelectionScript selectionScript0 = new SelectionScript(file0, serializableArray0);
      String string0 = selectionScript0.toString();
      assertEquals("98636573\n", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      File file0 = MockFile.createTempFile("UyW", "");
      SelectionScript selectionScript0 = new SelectionScript(file0, (Serializable[]) null, true);
      assertTrue(selectionScript0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      // Undeclared exception!
      try { 
        selectionScript0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<SelectionScript> linkedList0 = new LinkedList<SelectionScript>();
      SelectionScript selectionScript0 = new SelectionScript("", "");
      linkedList0.add(selectionScript0);
      int int0 = SelectionScript.hashCodeFromList(linkedList0);
      assertEquals((-461658112), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<SelectionScript> linkedList0 = new LinkedList<SelectionScript>();
      SelectionScript selectionScript0 = new SelectionScript();
      linkedList0.add(selectionScript0);
      // Undeclared exception!
      try { 
        SelectionScript.hashCodeFromList(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<SelectionScript> linkedList0 = new LinkedList<SelectionScript>();
      int int0 = SelectionScript.hashCodeFromList(linkedList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = SelectionScript.hashCodeFromList((List<SelectionScript>) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = selectionScript0.compareByteArray(byteArray0, byteArray0);
      assertTrue(selectionScript0.isDynamic());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = selectionScript0.compareByteArray(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertTrue(selectionScript0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[0];
      SelectionScript selectionScript0 = new SelectionScript("", "", serializableArray0, true);
      boolean boolean0 = selectionScript0.equals(selectionScript0);
      assertTrue(selectionScript0.isDynamic());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URI uRI0 = MockURL.toURI(uRL0);
      SelectionScript selectionScript0 = new SelectionScript();
      boolean boolean0 = selectionScript0.equals(uRI0);
      assertTrue(selectionScript0.isDynamic());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      SimpleBindings simpleBindings0 = new SimpleBindings();
      selectionScript0.getResult(simpleBindings0, simpleBindings0);
      assertTrue(selectionScript0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(uRL0, "?#s\"54^ias['x&", (Serializable[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript((File) null, (Serializable[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockFile mockFile0 = new MockFile("O`KrfM");
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(mockFile0, (Serializable[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to read script : /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/O`KrfM
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SelectionScript selectionScript0 = new SelectionScript(uRL0, (String) null, (Serializable[]) null);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(uRL0, (Serializable[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      // Undeclared exception!
      try { 
        selectionScript0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript((URL) null, "org.ow2.proactive.scripting.SelectionScript", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Script<String> script0 = (Script<String>) mock(Script.class, new ViolatedAssumptionAnswer());
      doReturn((Serializable[]) null).when(script0).getParameters();
      doReturn((String) null).when(script0).getScript();
      doReturn((String) null).when(script0).getScriptName();
      SelectionScript selectionScript0 = new SelectionScript(script0, true);
      SimpleBindings simpleBindings0 = new SimpleBindings();
      selectionScript0.prepareSpecialBindings(simpleBindings0);
      assertTrue(selectionScript0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      // Undeclared exception!
      try { 
        selectionScript0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      // Undeclared exception!
      try { 
        selectionScript0.digest();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(uRL0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      boolean boolean0 = selectionScript0.isDynamic();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("", "");
      String string0 = selectionScript0.getId();
      assertTrue(selectionScript0.isDynamic());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(uRL0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(uRL0, (Serializable[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      String string0 = selectionScript0.getDefaultScriptName();
      assertEquals("SelectionScript", string0);
      assertTrue(selectionScript0.isDynamic());
  }
}
