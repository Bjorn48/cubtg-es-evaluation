/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 12:41:44 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomePrint;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.ObserverCamera;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.Wall;
import java.math.BigDecimal;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Home_ESTest extends Home_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Home home0 = new Home();
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 0.0F, 35.166668F);
      Wall wall1 = wall0.clone();
      home0.addWall(wall1);
      home0.deleteWall(wall0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      float[][] floatArray0 = new float[6][4];
      Room room0 = new Room(floatArray0);
      home0.addRoom(room0, 0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Home home0 = new Home();
      DimensionLine dimensionLine0 = new DimensionLine(2731.6733F, 0.0F, 2731.6733F, (-1539.5F), 3700L);
      home0.deleteDimensionLine(dimensionLine0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Home home0 = new Home();
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      home0.addRoom(room0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Home home0 = new Home();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      home0.addPieceOfFurniture((HomePieceOfFurniture) homeLight0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Home home0 = new Home();
      Level level0 = new Level("", 69.11667F, (-856.0865F), 3700L);
      home0.addLevel(level0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Home home0 = new Home(1040.0F);
      home0.setRecovered(true);
      boolean boolean0 = home0.isRecovered();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      home0.setModified(true);
      boolean boolean0 = home0.isModified();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Home home0 = new Home();
      home0.setFurnitureDescendingSorted(true);
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      home0.setBasePlanLocked(true);
      boolean boolean0 = home0.isBasePlanLocked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      Class<Wall> class0 = Wall.class;
      List<Wall> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      List<Wall> list1 = Home.getWallsSubList(list0);
      assertNotSame(list0, list1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Home home0 = new Home();
      float float0 = home0.getWallHeight();
      assertEquals(250.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      List<Level> list0 = Home.getLevelsSubList(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Home home0 = new Home();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.DEPTH;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      home0.getFurnitureSortedProperty();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Home home0 = new Home();
      Camera camera0 = new Camera((-100.0F), 0.0F, 3700L, 818.07F, 0.0F, 1.0995575F);
      home0.setCamera(camera0);
      Camera camera1 = home0.getCamera();
      assertEquals(818.07F, camera1.getYaw(), 0.01F);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Home home0 = new Home();
      home0.setFurnitureDescendingSorted(true);
      home0.clone();
      assertTrue(home0.isFurnitureDescendingSorted());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Home home0 = new Home(0.0F);
      Home home1 = home0.clone();
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Home home0 = new Home((-51.7F));
      Home home1 = home0.clone();
      assertEquals((-51.7F), home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.setSelectedItems((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.setFurnitureVisibleProperties((List<HomePieceOfFurniture.SortableProperty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<DimensionLine> class0 = DimensionLine.class;
      // Undeclared exception!
      try { 
        Home.getSubList((List<? extends Selectable>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getRoomsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getLabelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getDimensionLinesSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.duplicate((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.deleteLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.addWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Home home0 = new Home();
      HomePieceOfFurniture homePieceOfFurniture0 = mock(HomePieceOfFurniture.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture(homePieceOfFurniture0, 5291);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5291, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.addLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.addDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Home home0 = null;
      try {
        home0 = new Home((List<HomePieceOfFurniture>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      DimensionLine dimensionLine0 = new DimensionLine(703.59F, 7.5F, (-1017.0F), 2316.8F, 2316.8F);
      linkedList0.offer(dimensionLine0);
      List<Selectable> list0 = Home.duplicate(linkedList0);
      Class<Object> class0 = Object.class;
      List<Object> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertFalse(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      DimensionLine dimensionLine0 = new DimensionLine(703.59F, 2316.8F, 2316.8F, 0.0F, 0.0F);
      linkedList0.offer(dimensionLine0);
      Class<Compass> class0 = Compass.class;
      List<Compass> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Home home0 = new Home();
      ObserverCamera observerCamera0 = new ObserverCamera(114.15F, 114.15F, 114.15F, 728.0F, 728.0F, 728.0F);
      home0.deselectItem(observerCamera0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getWallsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.addRoom((Room) null, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Home home0 = new Home(33.33861F);
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      DimensionLine dimensionLine0 = new DimensionLine(703.59F, 2316.8F, 2316.8F, 0.0F, 0.0F);
      linkedList0.offer(dimensionLine0);
      List<DimensionLine> list0 = Home.getDimensionLinesSubList(linkedList0);
      assertTrue(list0.contains(dimensionLine0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Home home0 = new Home();
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      Compass compass0 = home0.getCompass();
      linkedList0.add(compass0);
      assertTrue(compass0.isVisible());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Home home0 = new Home();
      home0.setBasePlanLocked(true);
      assertTrue(home0.isBasePlanLocked());
      
      home0.setBasePlanLocked(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Home home0 = new Home();
      home0.setBasePlanLocked(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Home home0 = new Home();
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.LANDSCAPE;
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, 0.0F, 3700L, 21.0448F, 21.0448F, 0.0F, 21.0448F, false, false, false, (Float) (-1966.058F), "e,A8mA~7/'I7]\\C pi", (String) null);
      home0.setPrint(homePrint0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Home home0 = new Home(4486.0F);
      home0.setPrint((HomePrint) null);
      assertEquals(4486.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.setStoredCameras((List<Camera>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Home home0 = new Home();
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      ObserverCamera observerCamera0 = new ObserverCamera(114.15F, 114.15F, 114.15F, 728.0F, 728.0F, 728.0F);
      linkedList0.add((Camera) observerCamera0);
      home0.setStoredCameras(linkedList0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Home home0 = new Home();
      Home home1 = home0.clone();
      home1.getCamera();
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Home home0 = new Home();
      Camera camera0 = home0.getTopCamera();
      home0.setCamera(camera0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Home home0 = new Home();
      home0.setCamera((Camera) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Home home0 = new Home();
      BackgroundImage backgroundImage0 = new BackgroundImage((Content) null, 3700L, 3700L, 0.0F, 3700L, 471.4616F, 0.0F, 612.8566F, true);
      home0.setBackgroundImage(backgroundImage0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Home home0 = new Home();
      home0.setBackgroundImage((BackgroundImage) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Home home0 = new Home();
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      home0.setFurnitureVisibleProperties(linkedList0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Home home0 = new Home();
      home0.setFurnitureDescendingSorted(true);
      assertTrue(home0.isFurnitureDescendingSorted());
      
      home0.setFurnitureDescendingSorted(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }
}
