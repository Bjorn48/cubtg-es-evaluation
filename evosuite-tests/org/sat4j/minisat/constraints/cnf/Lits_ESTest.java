/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:30:55 GMT 2019
 */

package org.sat4j.minisat.constraints.cnf;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Lits_ESTest extends Lits_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isImplied((-2201));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1101
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Lits lits0 = new Lits();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, fixedPeriodRestarts0, iLogAble0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      Constr constr0 = cardinalityDataStructure0.createUnregisteredCardinalityConstraint(iVecInt0, 2);
      // Undeclared exception!
      try { 
        lits0.setReason((-2089), constr0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1045
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool((-2536));
      lits0.reset(5073);
      assertEquals(1, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = Lits.toString((-76));
      assertEquals("-38", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.forgets(2);
      lits0.unassign(5);
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.unassign(5);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.nextFreeVarId(true);
      lits0.ensurePool(1);
      assertEquals(1, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.belongsToPool(129);
      assertFalse(boolean0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.belongsToPool(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.ensurePool(1955);
      int int0 = lits0.getFromPool(4);
      assertEquals(1, lits0.realnVars());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.getFromPool(129);
      assertEquals(1, lits0.realnVars());
      assertEquals(258, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.init(129);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(5);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 10);
      lits0.watch(10, atLeast0);
      assertEquals(1, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(5);
      lits0.watches(10);
      assertEquals(1, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.undos(1);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(2);
      lits0.undos(4);
      assertEquals(1, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(3394);
      int int0 = lits0.realnVars();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.not(128);
      assertEquals(129, int0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.not((-1639));
      assertEquals((-1640), int0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(1816);
      int int0 = lits0.nVars();
      assertEquals(1, lits0.realnVars());
      assertEquals(1816, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(14);
      boolean boolean0 = lits0.isSatisfied(14);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isSatisfied(7);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(6);
      boolean boolean0 = lits0.isFalsified(7);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getReason(2);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.setLevel(2, 1369);
      int int0 = lits0.getLevel(2);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(1369, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(6);
      int int0 = lits0.getLevel(12);
      assertEquals(1, lits0.realnVars());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(4);
      boolean boolean0 = lits0.belongsToPool(4);
      assertEquals(1, lits0.realnVars());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.watches((-2606));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2606
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, 113);
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.watch(0, atLeast0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.valueToString((-2079));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2079
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.unassign((-2079));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2079
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.setLevel((-61), (-61));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -31
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.satisfies((-450));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -450
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(65535);
      // Undeclared exception!
      lits0.resetPool();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.reset(128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isUnassigned(1830);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1830
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isFalsified(65535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65535
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getLevel((-2428));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1214
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getFromPool(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.ensurePool(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(0);
      boolean boolean0 = lits0.isUnassigned(1);
      assertFalse(boolean0);
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(129);
      boolean boolean0 = lits0.isUnassigned(129);
      assertFalse(boolean0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.isUnassigned(2);
      assertTrue(boolean0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.init(Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.reset((-1098));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1098
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.isSatisfied(346);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 347
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.nextFreeVarId(false);
      assertEquals(0, lits0.realnVars());
      assertEquals(1, int0);
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.isImplied(2);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = Lits.toStringX(6);
      assertEquals("+x3", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = Lits.toStringX((-403));
      assertEquals("-x-202", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = Lits.toString(2475);
      assertEquals("-1237", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Lits lits0 = new Lits();
      String string0 = lits0.valueToString(129);
      assertEquals(0, lits0.nVars());
      assertEquals("?", string0);
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(1);
      String string0 = lits0.valueToString(0);
      assertEquals("F", string0);
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(92);
      // Undeclared exception!
      try { 
        lits0.satisfies(92);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(0);
      // Undeclared exception!
      try { 
        lits0.satisfies(1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(50);
      lits0.unassign(50);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool((-2536));
      int int0 = lits0.nextFreeVarId(true);
      assertEquals(1, lits0.realnVars());
      assertEquals(2537, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.ensurePool((-1));
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Lits lits0 = new Lits();
      boolean boolean0 = lits0.belongsToPool(346);
      assertFalse(boolean0);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.belongsToPool((-564));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getFromPool(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(6);
      int int0 = lits0.getFromPool(6);
      assertEquals(1, lits0.realnVars());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(1979);
      boolean boolean0 = lits0.isImplied(3958);
      assertEquals(1979, lits0.nVars());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.init((-1));
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.satisfies(16);
      String string0 = lits0.valueToString(16);
      assertEquals("T", string0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.watches(6);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.setReason(16, (Constr) null);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.realnVars();
      assertEquals(0, int0);
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Lits lits0 = new Lits();
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      AtLeast atLeast0 = new AtLeast(lits0, vecInt0, 1392);
      // Undeclared exception!
      try { 
        lits0.watch(1392, atLeast0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1392
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.undos((-136));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -68
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.not(1);
      assertEquals(0, lits0.realnVars());
      assertEquals(0, int0);
      assertEquals(0, lits0.nVars());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(6);
      lits0.resetPool();
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.isFalsified(7);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.nVars();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Lits lits0 = new Lits();
      int int0 = lits0.capacity();
      assertEquals(0, lits0.realnVars());
      assertEquals(0, lits0.nVars());
      assertEquals(128, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.getReason((-2512));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1256
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getLevel(128);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Lits lits0 = new Lits();
      // Undeclared exception!
      try { 
        lits0.forgets(1316);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2632
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }
}
