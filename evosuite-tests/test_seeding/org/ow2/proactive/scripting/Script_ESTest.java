/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:10:46 GMT 2019
 */

package org.ow2.proactive.scripting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintStream;
import java.io.Serializable;
import java.net.URI;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.script.SimpleBindings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.ow2.proactive.scripting.ForkEnvironmentScript;
import org.ow2.proactive.scripting.Script;
import org.ow2.proactive.scripting.ScriptResult;
import org.ow2.proactive.scripting.ScriptTest;
import org.ow2.proactive.scripting.SelectionScript;
import org.ow2.proactive.scripting.SimpleScript;
import org.ow2.proactive.scripting.TaskScript;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Script_ESTest extends Script_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      URL uRL0 = MockURL.getFileExample();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, "&1JG61<gYd}d", false);
      TaskScript taskScript0 = new TaskScript(scriptTest_ScriptForTests0);
      String string0 = taskScript0.display();
      assertEquals(" { \nScript '/fake/but/wellformed/url'\n\tscriptEngineLookupName = '&1JG61<gYd}d'\n\tscript = \nnull\n\tid = \nfile://some/fake/but/wellformed/url\n\tparameters = null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      URL uRL0 = MockURL.getFileExample();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, "Zyxm@QT?}8hB nl", false);
      scriptTest_ScriptForTests0.hashCode();
      assertEquals("Zyxm@QT?}8hB nl", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, "", false);
      // Undeclared exception!
      try { 
        scriptTest_ScriptForTests0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("selected", "&.JN%FA@c[6S");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(scriptTest_ScriptForTests0);
      assertEquals("selected", forkEnvironmentScript0.getId());
      
      forkEnvironmentScript0.id = "1J;%B";
      String string0 = forkEnvironmentScript0.fetchScriptWithExceptionHandling();
      assertEquals("selected", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[0];
      SelectionScript selectionScript0 = new SelectionScript("logger=", "logger=", serializableArray0, true);
      selectionScript0.fetchUrlIfNeeded();
      assertEquals("SelectionScript", selectionScript0.getScriptName());
      assertEquals("logger=", selectionScript0.getId());
      assertEquals("logger=", selectionScript0.getEngineName());
      assertEquals("logger=", selectionScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[6];
      File file0 = new File("!xir6Qyum]]=}ide");
      SimpleScript simpleScript0 = null;
      try {
        simpleScript0 = new SimpleScript(file0, serializableArray0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to read script : /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/!xir6Qyum]]=}ide
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Script<ScriptTest.ScriptForTests> script0 = (Script<ScriptTest.ScriptForTests>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      String string0 = forkEnvironmentScript0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile("logLer=", "logLer=");
      String string0 = Script.readFile(file0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      URL uRL0 = MockURL.getFileExample();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, "{a%9=`\"", false);
      URL uRL1 = scriptTest_ScriptForTests0.getScriptUrl();
      assertNotNull(uRL1);
      assertEquals("{a%9=`\"", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      SimpleScript simpleScript0 = new SimpleScript(uRL0, (Serializable[]) null);
      String string0 = simpleScript0.getScriptName();
      assertNotNull(string0);
      assertEquals("/tmp/foo.bar", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript((String) null, "file");
      String string0 = simpleScript0.getScript();
      assertNull(string0);
      assertEquals("file", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("3BC8{", "3BC8{", true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("c:I!");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "ecmascript");
      File file0 = new File("c:I!");
      SimpleScript simpleScript0 = new SimpleScript(file0, selectionScript0.parameters);
      String string0 = simpleScript0.getScript();
      assertEquals("ecmascript\n", string0);
      assertEquals("SelectionScript", selectionScript0.getScriptName());
      assertEquals("3BC8{", selectionScript0.getScript());
      assertEquals("3BC8{", selectionScript0.getEngineName());
      assertEquals("3BC8{", selectionScript0.getId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("", "F6p|fd}1f2$7z");
      String string0 = simpleScript0.getScript();
      assertEquals("F6p|fd}1f2$7z", simpleScript0.getEngineName());
      assertEquals("", string0);
      assertEquals("", simpleScript0.getId());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("c:I!");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "ecmascript");
      File file0 = new File("c:I!");
      SimpleScript simpleScript0 = new SimpleScript(file0, (Serializable[]) null);
      simpleScript0.getReader();
      assertEquals("ecmascript\n", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("?c~7sxm#4q2 awiw.", "9BC/(yq=tM");
      simpleScript0.getParameters();
      assertEquals("?c~7sxm#4q2 awiw.", simpleScript0.getId());
      assertEquals("9BC/(yq=tM", simpleScript0.getEngineName());
      assertEquals("?c~7sxm#4q2 awiw.", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      Serializable[] serializableArray0 = new Serializable[8];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      Serializable[] serializableArray1 = simpleScript0.getParameters();
      assertSame(serializableArray1, serializableArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript(script0);
      String string0 = simpleScript0.getId();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[0];
      SelectionScript selectionScript0 = new SelectionScript("logger=", "logger=", serializableArray0, true);
      SimpleScript simpleScript0 = new SimpleScript(selectionScript0);
      String string0 = simpleScript0.getId();
      assertEquals("logger=", simpleScript0.getEngineName());
      assertEquals("logger=", string0);
      assertNotNull(string0);
      assertEquals("SelectionScript", simpleScript0.getScriptName());
      assertEquals("logger=", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript(script0);
      simpleScript0.scriptEngineLookupName = " 6/pGj*w";
      String string0 = simpleScript0.getEngineName();
      assertNotNull(string0);
      assertEquals(" 6/pGj*w", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("c:I!");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "ecmasrip");
      File file0 = new File("c:I!");
      SimpleScript simpleScript0 = new SimpleScript(file0, (Serializable[]) null);
      String string0 = simpleScript0.getEngineName();
      assertEquals("", string0);
      assertEquals("ecmasrip\n", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("", "lp~^HjW<N@");
      String string0 = scriptTest_ScriptForTests0.fetchScriptWithExceptionHandling();
      assertEquals("lp~^HjW<N@", scriptTest_ScriptForTests0.getEngineName());
      assertNotNull(string0);
      assertEquals("", scriptTest_ScriptForTests0.getId());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = MockFile.createTempFile("logger=", "logger=");
      Serializable[] serializableArray0 = new Serializable[9];
      SelectionScript selectionScript0 = new SelectionScript(file0, serializableArray0);
      String string0 = selectionScript0.fetchScript();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("3C0{", "org.ow2.proactive.scripting.Script$ScriptContentAndEngineName");
      simpleScript0.createScriptEngine();
      assertEquals("org.ow2.proactive.scripting.Script$ScriptContentAndEngineName", simpleScript0.getEngineName());
      assertEquals("3C0{", simpleScript0.getId());
      assertEquals("3C0{", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Script.readFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("lc}LeI");
      try { 
        Script.readFile(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      // Undeclared exception!
      try { 
        selectionScript0.overrideDefaultScriptName("h");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Script<TaskScript> script0 = (Script<TaskScript>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      // Undeclared exception!
      try { 
        forkEnvironmentScript0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      selectionScript0.url = uRL0;
      // Undeclared exception!
      try { 
        selectionScript0.fetchUrlIfNeeded();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, (String) null, false);
      // Undeclared exception!
      scriptTest_ScriptForTests0.fetchScriptWithExceptionHandling();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        Script.digest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript("org.ow2.proactive.scripting.ScriptResult", "y", serializableArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      simpleScript0.execute((Map<String, Object>) hashMap0, (PrintStream) mockPrintStream0, (PrintStream) mockPrintStream0);
      assertEquals("y", simpleScript0.getEngineName());
      assertEquals("org.ow2.proactive.scripting.ScriptResult", simpleScript0.getScript());
      assertEquals("org.ow2.proactive.scripting.ScriptResult", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("3BC8{", "3BC8{", true);
      assertEquals("SelectionScript", selectionScript0.getScriptName());
      
      selectionScript0.overrideDefaultScriptName("3BC8{");
      selectionScript0.overrideDefaultScriptName("qO0DigOuov/a2wG6");
      assertEquals("3BC8{", selectionScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("cmascrzpt", "cmascrzpt");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      assertEquals("cmascrzpt", forkEnvironmentScript0.getId());
      
      forkEnvironmentScript0.id = " { \nScript 'SimpleScript'\n\tscriptEngineLookupName = 'cmascrzpt'\n\tscript = \ncmascrzpt\n\tid = \ncmascrzpt\n\tparameters = null\n}";
      boolean boolean0 = simpleScript0.equals(forkEnvironmentScript0);
      assertEquals(" { \nScript 'SimpleScript'\n\tscriptEngineLookupName = 'cmascrzpt'\n\tscript = \ncmascrzpt\n\tid = \ncmascrzpt\n\tparameters = null\n}", forkEnvironmentScript0.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript((String) null, (String) null);
      SelectionScript selectionScript0 = new SelectionScript("MD5", "mo!>d|G|");
      boolean boolean0 = simpleScript0.equals(selectionScript0);
      assertEquals("MD5", selectionScript0.getId());
      assertEquals("mo!>d|G|", selectionScript0.getEngineName());
      assertFalse(boolean0);
      assertEquals("SelectionScript", selectionScript0.getScriptName());
      assertEquals("MD5", selectionScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript((String) null, (String) null);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      boolean boolean0 = simpleScript0.equals(forkEnvironmentScript0);
      assertEquals("SimpleScript", forkEnvironmentScript0.getScriptName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("ecmascript", "ecmascript");
      boolean boolean0 = simpleScript0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("ecmascript", simpleScript0.getId());
      assertEquals("ecmascript", simpleScript0.getScript());
      assertEquals("ecmascript", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("ecmascript", "ecmascript");
      boolean boolean0 = simpleScript0.equals("ecmascript");
      assertFalse(boolean0);
      assertEquals("ecmascript", simpleScript0.getScript());
      assertEquals("ecmascript", simpleScript0.getEngineName());
      assertEquals("ecmascript", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript((String) null, (String) null);
      simpleScript0.hashCode();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      File file0 = MockFile.createTempFile("loggeIWr=", "loggeIWr=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Script.readFile(file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("c:I!");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "ecmascript");
      File file0 = new File("c:I!");
      String string0 = Script.readFile(file0);
      assertEquals("ecmascript\n", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript("org.ow2.proactive.scripting.ScriptResult", "y", serializableArray0);
      SimpleBindings simpleBindings0 = new SimpleBindings();
      TaskScript taskScript0 = new TaskScript(simpleScript0);
      taskScript0.prepareBindings(simpleBindings0);
      assertEquals("org.ow2.proactive.scripting.ScriptResult", taskScript0.getScript());
      assertEquals("org.ow2.proactive.scripting.ScriptResult", taskScript0.getId());
      assertEquals("SimpleScript", taskScript0.getScriptName());
      assertEquals("y", taskScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      URL uRL0 = MockURL.getFileExample();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, "&1JG61<gYd}d", false);
      TaskScript taskScript0 = new TaskScript(scriptTest_ScriptForTests0);
      SimpleBindings simpleBindings0 = new SimpleBindings();
      taskScript0.prepareBindings(simpleBindings0);
      assertEquals("&1JG61<gYd}d", taskScript0.getEngineName());
      assertEquals("file://some/fake/but/wellformed/url", taskScript0.getId());
      assertEquals("/fake/but/wellformed/url", taskScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SelectionScript selectionScript0 = new SelectionScript("ecmascript", "ecmascript");
          // Undeclared exception!
          try { 
            selectionScript0.execute();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"nashorn.createContext\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // jdk.nashorn.internal.runtime.Context.<init>(Context.java:495)
             // jdk.nashorn.internal.runtime.Context.<init>(Context.java:466)
             // jdk.nashorn.api.scripting.NashornScriptEngine$1.run(NashornScriptEngine.java:129)
             // jdk.nashorn.api.scripting.NashornScriptEngine$1.run(NashornScriptEngine.java:125)
             // java.security.AccessController.doPrivileged(Native Method)
             // jdk.nashorn.api.scripting.NashornScriptEngine.<init>(NashornScriptEngine.java:125)
             // jdk.nashorn.api.scripting.NashornScriptEngineFactory.getScriptEngine(NashornScriptEngineFactory.java:148)
             // org.ow2.proactive.scripting.Script.findScriptEngineCandidates(Script.java:545)
             // org.ow2.proactive.scripting.Script.createScriptEngine(Script.java:521)
             // org.ow2.proactive.scripting.Script.execute(Script.java:375)
             // org.ow2.proactive.scripting.Script.execute(Script.java:352)
             // sun.reflect.GeneratedMethodAccessor203.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript((String) null, "file");
      simpleScript0.execute();
      assertEquals("file", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      URL uRL0 = MockURL.getHttpExample();
      selectionScript0.url = uRL0;
      ScriptResult<Boolean> scriptResult0 = selectionScript0.execute();
      assertTrue(scriptResult0.errorOccured());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      URI uRI0 = MockURI.aFileURI;
      URL uRL0 = MockURI.toURL(uRI0);
      selectionScript0.url = uRL0;
      ScriptResult<Boolean> scriptResult0 = selectionScript0.execute();
      assertNull(scriptResult0.getHostname());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, (String) null, false);
      // Undeclared exception!
      try { 
        scriptTest_ScriptForTests0.fetchScriptWithExceptionHandling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      String string0 = selectionScript0.fetchScriptWithExceptionHandling();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      URL uRL0 = MockURL.getHttpExample();
      selectionScript0.url = uRL0;
      String string0 = selectionScript0.fetchScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("3BC8{", "3BC8{", true);
      String string0 = selectionScript0.fetchScript();
      assertEquals("3BC8{", selectionScript0.getId());
      assertNotNull(string0);
      assertEquals("SelectionScript", selectionScript0.getScriptName());
      assertEquals("3BC8{", string0);
      assertEquals("3BC8{", selectionScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ScriptTest scriptTest0 = mock(ScriptTest.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("7r", "7r");
      URL uRL0 = mockFile0.toURL();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = null;
      try {
        scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, "rg/!Q!|(\"3cT/l:V@wJ", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = Script.digest("3BC8{");
      assertEquals("\u0016\u0002\uFFFD\uFFFD\u0005\uFFFDy\uFFFD\n\uFFFD\uFFFD\uFFFD\u0011\uFFFDl#", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("cmascrzpt", "cmascrzpt");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      boolean boolean0 = simpleScript0.equals(forkEnvironmentScript0);
      assertEquals("cmascrzpt", forkEnvironmentScript0.getId());
      assertTrue(boolean0);
      assertEquals("SimpleScript", forkEnvironmentScript0.getScriptName());
      assertEquals("cmascrzpt", forkEnvironmentScript0.getEngineName());
      assertEquals("cmascrzpt", forkEnvironmentScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("ecmascript", "ecmascript");
      simpleScript0.getScriptUrl();
      assertEquals("ecmascript", simpleScript0.getEngineName());
      assertEquals("ecmascript", simpleScript0.getId());
      assertEquals("ecmascript", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      File file0 = MockFile.createTempFile("logger=", "logger=");
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(file0);
      assertEquals(1048576, Script.DEFAULT_OUTPUT_MAX_SIZE);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      String string0 = selectionScript0.fetchScript();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Script<Integer> script0 = (Script<Integer>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript(script0);
      String string0 = simpleScript0.getEngineName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("3BC8{", "3BC8{", true);
      selectionScript0.setScript("3BC8{");
      assertEquals("3BC8{", selectionScript0.getScript());
      assertEquals("3BC8{", selectionScript0.getId());
      assertEquals("SelectionScript", selectionScript0.getScriptName());
      assertEquals("3BC8{", selectionScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript("org.ow2.proactive.scripting.ScriptResult", "y", serializableArray0);
      String string0 = simpleScript0.toString();
      assertEquals("org.ow2.proactive.scripting.ScriptResult", simpleScript0.getScript());
      assertEquals("org.ow2.proactive.scripting.ScriptResult", simpleScript0.getId());
      assertEquals("y", simpleScript0.getEngineName());
      assertEquals("SimpleScript", string0);
  }
}
