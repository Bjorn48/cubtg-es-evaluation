/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:19:12 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.Commander;
import org.sat4j.tools.encoding.Policy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Commander_ESTest extends Commander_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      int[] intArray0 = new int[12];
      VecInt vecInt0 = new VecInt(intArray0);
      commander0.addExactlyOne(singleSolutionDetector0, vecInt0);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(144, 0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      int[] intArray0 = new int[3];
      intArray0[1] = 2580;
      intArray0[2] = 1646;
      VecInt vecInt0 = new VecInt(intArray0);
      VecInt vecInt1 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(fullClauseSelectorSolver0, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      int[] intArray0 = new int[15];
      intArray0[0] = (-3586);
      intArray0[12] = 0;
      intArray0[2] = 1646;
      VecInt vecInt0 = new VecInt(1646, 1646);
      vecInt0.ensure(0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = randomWalkDecorator0.getPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(iPhaseSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(212);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, eMARestarts0);
      solver0.nConstraints();
      solver0.nConstraints();
      solver0.isSatisfiable();
      solver0.getStat();
      solver0.isSatisfiable();
      solver0.getStat();
      // Undeclared exception!
      commander0.addExactlyOne(singleSolutionDetector0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(singleSolutionDetector0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(0, 0).when(singleSolutionDetector0).nVars();
      doReturn((String) null).when(singleSolutionDetector0).toString(anyString());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      int[] intArray0 = new int[3];
      intArray0[0] = (-3586);
      intArray0[1] = 0;
      intArray0[2] = 1646;
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(subModelIterator0, true);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.setDBSimplificationAllowed(true);
      maxSatDecorator0.setTimeout(0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(optToSatAdapter0);
      minimal4InclusionModel0.setDBSimplificationAllowed(true);
      optToSatAdapter0.toString("9fP'r&Ma^^56Y)LrZy0");
      IConstr iConstr0 = commander0.addExactly(minimal4InclusionModel0, vecInt0, 0);
      assertEquals(2, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Commander commander0 = new Commander();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        statisticsSolver0.getSolvingEngine();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      int[] intArray0 = new int[3];
      intArray0[0] = (-3586);
      intArray0[1] = 0;
      intArray0[2] = 1646;
      VecInt vecInt0 = new VecInt(intArray0);
      commander0.addExactlyOne(singleSolutionDetector0, vecInt0);
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      int[] intArray0 = new int[15];
      intArray0[0] = (-3586);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.shrinkTo((-2586));
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(singleSolutionDetector0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Commander", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Commander commander0 = new Commander();
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      int[] intArray0 = new int[1];
      intArray0[0] = 212;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = randomWalkDecorator0.getPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(iPhaseSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, eMARestarts0);
      solver0.nConstraints();
      solver0.nConstraints();
      solver0.isSatisfiable();
      solver0.getStat();
      solver0.isSatisfiable();
      solver0.getStat();
      // Undeclared exception!
      try { 
        commander0.addExactly(solver0, (IVecInt) null, 2883);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      int[] intArray0 = new int[14];
      intArray0[0] = (-3586);
      intArray0[1] = 0;
      intArray0[2] = 1646;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure(0);
      commander0.addExactlyOne(singleSolutionDetector0, vecInt0);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(iSolver0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      int[] intArray0 = new int[15];
      int int0 = (-3586);
      intArray0[1] = (-3586);
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      commander0.addExactlyOne(singleSolutionDetector0, vecInt0);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      SingleSolutionDetector singleSolutionDetector1 = new SingleSolutionDetector(iSolver0);
      int int1 = 3255;
      // Undeclared exception!
      try { 
        commander0.addExactly(iSolver0, vecInt0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(singleSolutionDetector0).nVars();
      doReturn(0, 0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      doReturn((String) null).when(singleSolutionDetector0).toString(anyString());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      int[] intArray0 = new int[3];
      intArray0[0] = (-3586);
      intArray0[1] = 0;
      intArray0[2] = 1646;
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(subModelIterator0, true);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.setDBSimplificationAllowed(true);
      maxSatDecorator0.setTimeout(0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(optToSatAdapter0);
      minimal4InclusionModel0.setDBSimplificationAllowed(true);
      optToSatAdapter0.toString("9fP'r&Ma^^56Y)LrZy0");
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(minimal4InclusionModel0, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Commander commander0 = new Commander();
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      int[] intArray1 = new int[1];
      intArray1[0] = 212;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray1);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = randomWalkDecorator0.getPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(iPhaseSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, eMARestarts0);
      solver0.nConstraints();
      int int0 = new Integer(212);
      solver0.isSatisfiable();
      solver0.getStat();
      solver0.isSatisfiable();
      solver0.getStat();
      try { 
        commander0.addExactlyOne(solver0, vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating trivially inconsistent constraint
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Commander commander0 = new Commander();
      // Undeclared exception!
      try { 
        commander0.addExactlyOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      int[] intArray0 = new int[15];
      intArray0[0] = (-3586);
      intArray0[1] = 0;
      intArray0[2] = 1646;
      VecInt vecInt0 = new VecInt(intArray0);
      IConstr iConstr0 = commander0.addExactlyOne(singleSolutionDetector0, vecInt0);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      int[] intArray0 = new int[15];
      VecInt vecInt0 = new VecInt(intArray0);
      IConstr iConstr0 = commander0.addExactlyOne(singleSolutionDetector0, vecInt0);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      commander0.addExactlyOne(singleSolutionDetector0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(2580, 2580, 0).when(singleSolutionDetector0).nVars();
      doReturn("").when(singleSolutionDetector0).toString(anyString());
      doReturn((IVecInt) null).when(singleSolutionDetector0).unsatExplanation();
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      int[] intArray0 = new int[3];
      intArray0[0] = (-3586);
      intArray0[1] = 0;
      intArray0[2] = 1646;
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(subModelIterator0, true);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0);
      optToSatAdapter0.setDBSimplificationAllowed(true);
      maxSatDecorator0.setTimeout(0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(optToSatAdapter0);
      minimal4InclusionModel0.setDBSimplificationAllowed(true);
      optToSatAdapter0.toString("9fP'r&Ma^^56Y)LrZy0");
      minimal4InclusionModel0.unsatExplanation();
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(optToSatAdapter0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      int[] intArray0 = new int[15];
      int int0 = (-3586);
      intArray0[1] = (-3586);
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      commander0.addExactlyOne(singleSolutionDetector0, vecInt0);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      SingleSolutionDetector singleSolutionDetector1 = new SingleSolutionDetector(iSolver0);
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(singleSolutionDetector1, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      int[] intArray0 = new int[6];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.shrink((-1521));
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(singleSolutionDetector0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      int[] intArray0 = new int[1];
      intArray0[0] = 212;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0);
      IPhaseSelectionStrategy iPhaseSelectionStrategy0 = randomWalkDecorator0.getPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(iPhaseSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, eMARestarts0);
      Integer integer0 = new Integer(212);
      solver0.nConstraints();
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("5>g`", objectArray0);
      subsetVarOrder0.printStat(printWriter0, "ca`VJS");
      solver0.isSatisfiable();
      solver0.getStat();
      solver0.propagate();
      solver0.isSatisfiable();
      VecInt vecInt0 = new VecInt(intArray0);
      Commander commander0 = new Commander();
      commander0.addExactlyOne(solver0, vecInt0);
      IConstr iConstr0 = commander0.addAtMostOne(solver0, vecInt0);
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(singleSolutionDetector0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      int[] intArray0 = new int[15];
      intArray0[0] = (-3586);
      intArray0[1] = (-3586);
      intArray0[2] = 1646;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure((-3586));
      commander0.addExactlyOne(singleSolutionDetector0, vecInt0);
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      SingleSolutionDetector singleSolutionDetector1 = new SingleSolutionDetector(iSolver0);
      Policy policy0 = new Policy();
      int[] intArray1 = new int[3];
      intArray1[0] = 1646;
      intArray1[1] = (-3586);
      intArray1[2] = (-3586);
      VecInt vecInt1 = new VecInt(intArray1);
      commander0.addExactlyOne(singleSolutionDetector1, vecInt1);
      try { 
        commander0.addExactly(singleSolutionDetector1, vecInt1, 3987);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Commander commander0 = new Commander();
      ISolver iSolver0 = null;
      IVecInt iVecInt0 = null;
      // Undeclared exception!
      try { 
        commander0.addExactly((ISolver) null, (IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<SingleSolutionDetector> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SingleSolutionDetector>(singleSolutionDetector0, true);
      int[] intArray0 = new int[3];
      intArray0[0] = (-3586);
      intArray0[1] = 0;
      intArray0[2] = 1646;
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0);
      subModelIterator0.setTimeout(1646);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(fullClauseSelectorSolver0, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }
}
