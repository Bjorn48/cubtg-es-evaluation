/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 17:59:20 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.AspectRatio;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomePrint;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.ObserverCamera;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URLStreamHandler;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Home_ESTest extends Home_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addWallsListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float float0 = 1441.383F;
      Home home0 = new Home(1441.383F);
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(1441.383F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(1441.383F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(1441.383F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[3][7];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-738.3041F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-738.3041F);
      floatArray2[1] = (-738.3041F);
      floatArray2[2] = (-738.3041F);
      floatArray2[3] = (-738.3041F);
      floatArray2[4] = (-738.3041F);
      floatArray2[5] = (-738.3041F);
      floatArray2[6] = (-738.3041F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray0[2] = floatArray3;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, floatArray0.length);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertNull(room1.getFloorColor());
      assertTrue(room1.isCeilingVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertFalse(room1.equals((Object)room0));
      assertEquals(3, floatArray0.length);
      
      DimensionLine dimensionLine0 = new DimensionLine((-738.3041F), (-738.3041F), (-738.3041F), (-738.3041F), (-273.2F));
      assertNotNull(dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-273.2F), dimensionLine0.getOffset(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertNotNull(dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-273.2F), dimensionLine0.getOffset(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYStart(), 0.01F);
      assertEquals((-273.2F), dimensionLine1.getOffset(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      Level level0 = dimensionLine1.getLevel();
      assertNull(level0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-273.2F), dimensionLine0.getOffset(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYStart(), 0.01F);
      assertEquals((-273.2F), dimensionLine1.getOffset(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      room1.setLevel((Level) null);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertNull(room1.getFloorColor());
      assertTrue(room1.isCeilingVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(3, floatArray0.length);
      
      // Undeclared exception!
      try { 
        home1.addRoom(room1, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall((-1808.0F), (-1390.0F), 0.0F, 0.0F, 0.19634955F, 158.20833F);
      assertNotNull(wall0);
      assertEquals((-904.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2280.5623F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.19634955F, wall0.getThickness(), 0.01F);
      assertEquals((-1390.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2280.5623F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(158.20833F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-695.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1808.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      float[][] floatArray0 = new float[8][6];
      float[] floatArray1 = new float[10];
      floatArray1[0] = (-1808.0F);
      floatArray1[1] = 1628.9F;
      floatArray1[2] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = (-1390.0F);
      floatArray2[0] = 0.19634955F;
      floatArray2[5] = (-1808.0F);
      floatArray2[7] = 0.0F;
      floatArray2[7] = (-1808.0F);
      floatArray2[8] = (-1808.0F);
      float[] floatArray3 = new float[8];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 0.19634955F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray3[3] = (-1390.0F);
      floatArray3[4] = 0.0F;
      floatArray3[5] = (-1808.0F);
      floatArray3[6] = 3540.39F;
      floatArray3[7] = (-1390.0F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[6];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray4[0] = 158.20833F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-1808.0F);
      floatArray4[3] = 0.19634955F;
      floatArray4[4] = 0.0F;
      floatArray4[5] = 0.19634955F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 1628.9F;
      floatArray5[1] = 0.19634955F;
      floatArray5[2] = 3540.39F;
      floatArray5[3] = 0.0F;
      floatArray5[4] = 0.0F;
      floatArray5[5] = (float) 3700L;
      floatArray5[6] = 0.0F;
      floatArray5[7] = (float) 3700L;
      floatArray5[8] = 1628.9F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray2));
      
      floatArray6[0] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[1];
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray3));
      
      floatArray7[0] = (-1808.0F);
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[4];
      assertFalse(floatArray8.equals((Object)floatArray2));
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray7));
      assertFalse(floatArray8.equals((Object)floatArray5));
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray3));
      
      floatArray8[0] = 158.20833F;
      floatArray8[1] = 0.0F;
      floatArray8[2] = 3540.39F;
      floatArray8[3] = (float) 3700L;
      floatArray0[7] = floatArray8;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-89.54999F), room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean boolean0 = linkedList0.add(room0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-89.54999F), room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(linkedList0.contains(room0));
      assertEquals(8, floatArray0.length);
      
      List<Room> list0 = Home.getRoomsSubList(linkedList0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(room0));
      assertTrue(list0.contains(room0));
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-904.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2280.5623F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.19634955F, wall0.getThickness(), 0.01F);
      assertEquals((-1390.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2280.5623F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(158.20833F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-695.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1808.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1390.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(158.20833F, wall1.getHeight(), 0.01F);
      assertEquals((-1808.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2280.5623F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.19634955F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-904.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-695.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2280.5623F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = (Wall)wall1.clone();
      assertNotNull(wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(158.20833F, wall2.getHeight(), 0.01F);
      assertEquals((-904.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.19634955F, wall2.getThickness(), 0.01F);
      assertEquals((-695.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2280.5623F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-1808.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2280.5623F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1390.0F), wall2.getYStart(), 0.01F);
      assertEquals((-904.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2280.5623F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.19634955F, wall0.getThickness(), 0.01F);
      assertEquals((-1390.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2280.5623F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(158.20833F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-695.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1808.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1390.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(158.20833F, wall1.getHeight(), 0.01F);
      assertEquals((-1808.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2280.5623F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.19634955F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-904.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-695.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2280.5623F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      home0.setRecovered(true);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(false);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = new Home();
      assertNotNull(home1);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home1.getCamera();
      assertNotNull(camera0);
      assertNotSame(home1, home0);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera1 = camera0.clone();
      assertNotNull(camera1);
      assertNotSame(home1, home0);
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertNull(camera1.getName());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertFalse(camera1.equals((Object)camera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setCamera(camera1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertNull(camera1.getName());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera1.equals((Object)camera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName((String) null);
      assertNotSame(home0, home1);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("n)z");
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals("n)z", home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals("n)z", home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals("n)z", home0.getName());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteLevel((Level) null);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals("n)z", home0.getName());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(false);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals("n)z", home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Home.Property[] home_PropertyArray0 = Home.Property.values();
      assertNotNull(home_PropertyArray0);
      assertEquals(12, home_PropertyArray0.length);
      
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall((-4471.0F), (-4471.0F), (-1390.0F), (-1390.0F), (-4471.0F), (-1390.0F));
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4357.192F, wall0.getLength(), 0.01F);
      assertEquals(4357.192F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1390.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2930.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4471.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1390.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1390.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-4471.0F), wall0.getThickness(), 0.01F);
      assertEquals((-4471.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2930.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<HomeLight> class0 = HomeLight.class;
      List<HomeLight> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Room> list1 = Home.getRoomsSubList(list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4357.192F, wall0.getLength(), 0.01F);
      assertEquals(4357.192F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1390.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2930.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4471.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1390.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1390.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-4471.0F), wall0.getThickness(), 0.01F);
      assertEquals((-4471.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2930.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1390.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1390.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-2930.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4471.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4357.192F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2930.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1390.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4471.0F), wall1.getThickness(), 0.01F);
      assertEquals((-4471.0F), wall1.getYStart(), 0.01F);
      assertEquals(4357.192F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = (Wall)wall1.clone();
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4357.192F, wall0.getLength(), 0.01F);
      assertEquals(4357.192F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1390.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2930.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4471.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1390.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1390.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-4471.0F), wall0.getThickness(), 0.01F);
      assertEquals((-4471.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2930.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1390.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1390.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-2930.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4471.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4357.192F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2930.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1390.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4471.0F), wall1.getThickness(), 0.01F);
      assertEquals((-4471.0F), wall1.getYStart(), 0.01F);
      assertEquals(4357.192F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2930.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(4357.192F, wall2.getLength(), 0.01F);
      assertEquals((-4471.0F), wall2.getThickness(), 0.01F);
      assertEquals((-4471.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-4471.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2930.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1390.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-1390.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-1390.0F), wall2.getHeight(), 0.01F);
      assertEquals(4357.192F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      home0.deselectItem(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4357.192F, wall0.getLength(), 0.01F);
      assertEquals(4357.192F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1390.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2930.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4471.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1390.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1390.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-4471.0F), wall0.getThickness(), 0.01F);
      assertEquals((-4471.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2930.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1390.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1390.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-2930.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-4471.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4357.192F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2930.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1390.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-4471.0F), wall1.getThickness(), 0.01F);
      assertEquals((-4471.0F), wall1.getYStart(), 0.01F);
      assertEquals(4357.192F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2930.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(4357.192F, wall2.getLength(), 0.01F);
      assertEquals((-4471.0F), wall2.getThickness(), 0.01F);
      assertEquals((-4471.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-4471.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2930.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1390.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-1390.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-1390.0F), wall2.getHeight(), 0.01F);
      assertEquals(4357.192F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isRecovered();
      assertFalse(boolean0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addWallsListener(collectionListener0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertTrue(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isModified();
      assertTrue(boolean0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertTrue(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertTrue(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isModified());
      assertTrue(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("America/Cayman");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.America/Cayman
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Home home0 = new Home((-1808.0F));
      assertNotNull(home0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      home0.setStoredCameras(linkedList0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(homePrint0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setPrint((HomePrint) null);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener1 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener1);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertNotNull(list0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setSelectedItems(list0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      Label label0 = new Label("[jyJ%", 2809.08F, 3088.5837F);
      assertNotNull(label0);
      assertEquals(2809.08F, label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3088.5837F, label0.getY(), 0.01F);
      assertEquals("[jyJ%", label0.getText());
      
      home0.deleteLabel(label0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(2809.08F, label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3088.5837F, label0.getY(), 0.01F);
      assertEquals("[jyJ%", label0.getText());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener2 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener2);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.Y;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(3700L, 3700L, (-1648.5F), 0.0F, 1891.0F);
      assertNotNull(wall0);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(1891.0F, wall0.getThickness(), 0.01F);
      assertEquals(6503.5723F, wall0.getLength(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6503.5723F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1648.5F), wall0.getXEnd(), 0.01F);
      assertEquals(1025.75F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      home0.addWall(wall0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(1891.0F, wall0.getThickness(), 0.01F);
      assertEquals(6503.5723F, wall0.getLength(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(6503.5723F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1648.5F), wall0.getXEnd(), 0.01F);
      assertEquals(1025.75F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteLevel((Level) null);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getLevelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list0 = home0.getStoredCameras();
      assertNotNull(list0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setStoredCameras(list0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list1 = home0.getSelectedItems();
      assertNotNull(list1);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Home home0 = new Home(0.19634955F);
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(0.19634955F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(2669.7798F, 2669.7798F, 1638.57F, 2669.7798F, 1638.57F);
      assertNotNull(dimensionLine0);
      assertEquals(2669.7798F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2669.7798F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(1638.57F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1031.2098F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1638.57F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2669.7798F, dimensionLine0.getYEnd(), 0.01F);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertNotNull(dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(2669.7798F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2669.7798F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(1638.57F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1031.2098F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1638.57F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2669.7798F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(1031.2098F, dimensionLine1.getLength(), 0.01F);
      assertEquals(2669.7798F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(1638.57F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(2669.7798F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(1638.57F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(2669.7798F, dimensionLine1.getYEnd(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      Home home1 = new Home();
      assertNotNull(home1);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      dimensionLine0.setYEnd(2669.7798F);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertEquals(2669.7798F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2669.7798F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(1638.57F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1031.2098F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1638.57F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2669.7798F, dimensionLine0.getYEnd(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("1i/", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("1i/", propertyChangeListenerProxy0.getPropertyName());
      
      dimensionLine0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertEquals(2669.7798F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2669.7798F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(1638.57F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1031.2098F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1638.57F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2669.7798F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals("1i/", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      
      Level level0 = home1.getSelectedLevel();
      assertNull(level0);
      assertNotSame(home1, home0);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      dimensionLine1.setLevel((Level) null);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(2669.7798F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2669.7798F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(1638.57F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1031.2098F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1638.57F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2669.7798F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(1031.2098F, dimensionLine1.getLength(), 0.01F);
      assertEquals(2669.7798F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(1638.57F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(2669.7798F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(1638.57F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(2669.7798F, dimensionLine1.getYEnd(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      home0.addDimensionLine(dimensionLine1);
      assertNotSame(home0, home1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(0.19634955F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(2669.7798F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2669.7798F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(1638.57F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1031.2098F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1638.57F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2669.7798F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(1031.2098F, dimensionLine1.getLength(), 0.01F);
      assertEquals(2669.7798F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(1638.57F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(2669.7798F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(1638.57F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(2669.7798F, dimensionLine1.getYEnd(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertNotSame(home0, home1);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(0.19634955F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertNotNull(collection0);
      assertNotSame(home0, home1);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(0.19634955F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertNotNull(list0);
      assertNotSame(home0, home1);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(0.19634955F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getRoomsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Home home0 = new Home(linkedList0);
      assertNotNull(home0);
      assertEquals(0, linkedList0.size());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Wall> list0 = Home.getWallsSubList(linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Room> list1 = home0.getRooms();
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(0, linkedList0.size());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteLevel((Level) null);
      assertEquals(0, linkedList0.size());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.deleteLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertNotNull(list0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setSelectedItems(list0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<HomeFurnitureGroup> class0 = HomeFurnitureGroup.class;
      List<HomeFurnitureGroup> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Compass> class1 = Compass.class;
      List<Compass> list1 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<HomeFurnitureGroup> list2 = Home.getSubList((List<? extends Selectable>) list1, class0);
      assertNotNull(list2);
      assertNotSame(list0, list2);
      assertNotSame(list2, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list2.equals((Object)list0));
      
      List<DimensionLine> list3 = Home.getDimensionLinesSubList(list2);
      assertNotNull(list3);
      assertNotSame(list0, list2);
      assertNotSame(list2, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list0.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      
      List<Wall> list4 = Home.getWallsSubList(list1);
      assertNotNull(list4);
      assertNotSame(list0, list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list0.equals((Object)list2));
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      Home home0 = new Home();
      assertNotNull(home0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addRoomsListener(collectionListener0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Level> list5 = Home.getLevelsSubList(list2);
      assertNotNull(list5);
      assertNotSame(list0, list2);
      assertNotSame(list2, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list5.size());
      assertTrue(list5.isEmpty());
      assertTrue(list0.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      
      Compass compass0 = mock(Compass.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedList0.offer(compass0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(compass0));
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertNotNull(observerCamera0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list6 = Home.getRoomsSubList(list3);
      assertNotNull(list6);
      assertNotSame(list0, list2);
      assertNotSame(list2, list0);
      assertTrue(list6.isEmpty());
      assertEquals(0, list6.size());
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list0.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(linkedList0.contains(compass0));
      assertFalse(list1.contains(compass0));
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home1, home0);
      assertNotSame(home0, home1);
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home.Property home_Property0 = Home.Property.RECOVERED;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("1a", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("1a", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("1a", propertyChangeListenerProxy0.getPropertyName());
      
      home1.removePropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertNotSame(home1, home0);
      assertNotSame(home0, home1);
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertEquals("1a", propertyChangeListenerProxy0.getPropertyName());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.equals((Object)home0));
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Compass> linkedList1 = new LinkedList<Compass>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(compass0));
      
      List<HomePieceOfFurniture> list7 = Home.getFurnitureSubList(linkedList1);
      assertNotNull(list7);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list7.size());
      assertTrue(list7.isEmpty());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(compass0));
      
      CollectionListener<Level> collectionListener1 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.removeLevelsListener(collectionListener1);
      assertNotSame(home1, home0);
      assertNotSame(home0, home1);
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.equals((Object)home0));
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.addDimensionLinesListener((CollectionListener<DimensionLine>) null);
      assertNotSame(home0, home1);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setVisualProperty("", "");
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteRoom((Room) null);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float float0 = home0.getWallHeight();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Home home0 = new Home((-1808.0F));
      assertNotNull(home0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(homePrint0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setPrint((HomePrint) null);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener1 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertNotNull(list0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = new Home(list0);
      assertNotNull(home1);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home2 = home0.clone();
      assertNotNull(home2);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home2.getVersion());
      assertEquals((-1808.0F), home2.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getName());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getFurnitureSortedProperty());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isModified());
      assertFalse(home2.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home2.isModified();
      assertFalse(boolean0);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home2.getVersion());
      assertEquals((-1808.0F), home2.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getName());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getFurnitureSortedProperty());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isModified());
      assertFalse(home2.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home2.setModified(true);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home2.getVersion());
      assertEquals((-1808.0F), home2.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getName());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getFurnitureSortedProperty());
      assertTrue(home2.isModified());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.TEXTURE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        Home.getFurnitureSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.removeWallsListener((CollectionListener<Wall>) null);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertNotNull(camera0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Home home0 = new Home((-139.41667F));
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertNotNull(camera0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertNotNull(collection0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNotNull(list0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener1 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.Y;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(0.0F, 0.0F, 1000.0F, (-831.04266F), (-2068.8F));
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1300.243F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2068.8F), wall0.getThickness(), 0.01F);
      assertEquals(1000.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1300.243F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-831.04266F), wall0.getYEnd(), 0.01F);
      assertEquals((-415.52133F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(500.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      home0.addWall(wall0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1300.243F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2068.8F), wall0.getThickness(), 0.01F);
      assertEquals(1000.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1300.243F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-831.04266F), wall0.getYEnd(), 0.01F);
      assertEquals((-415.52133F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(500.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<DimensionLine> list1 = Home.getDimensionLinesSubList(linkedList0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      float float0 = home0.getWallHeight();
      assertEquals((-139.41667F), float0, 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Home.Property[] home_PropertyArray0 = Home.Property.values();
      assertNotNull(home_PropertyArray0);
      assertEquals(12, home_PropertyArray0.length);
      
      Home home0 = new Home();
      assertNotNull(home0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall((-4471.0F), (-4471.0F), (-1390.0F), (-1390.0F), (-4471.0F), (-1390.0F));
      assertNotNull(wall0);
      assertEquals(4357.192F, wall0.getLength(), 0.01F);
      assertEquals((-2930.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1390.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1390.0F), wall0.getXEnd(), 0.01F);
      assertEquals(4357.192F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1390.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4471.0F), wall0.getThickness(), 0.01F);
      assertEquals((-4471.0F), wall0.getXStart(), 0.01F);
      assertEquals((-2930.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4471.0F), wall0.getYStart(), 0.01F);
      
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<HomeLight> class0 = HomeLight.class;
      List<HomeLight> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Room> list1 = Home.getRoomsSubList(list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      Class<HomeLight> class1 = HomeLight.class;
      List<HomeLight> list2 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertNotNull(list2);
      assertSame(class0, class1);
      assertNotSame(list0, list2);
      assertSame(class1, class0);
      assertNotSame(list2, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.equals((Object)list0));
      
      List<Selectable> list3 = home0.getSelectedItems();
      assertNotNull(list3);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.PORTRAIT;
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      ObserverCamera observerCamera0 = new ObserverCamera((-29.05F), (-29.05F), (-29.05F), (-29.05F), (-29.05F), (-29.05F));
      assertNotNull(observerCamera0);
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals((-29.05F), observerCamera0.getPitch(), 0.01F);
      assertEquals((-29.05F), observerCamera0.getYaw(), 0.01F);
      assertEquals((-31.125F), observerCamera0.getHeight(), 0.01F);
      assertEquals((-29.05F), observerCamera0.getY(), 0.01F);
      assertEquals((-29.05F), observerCamera0.getX(), 0.01F);
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals((-29.05F), observerCamera0.getZ(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals((-29.05F), observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      
      boolean boolean0 = float0.equals(observerCamera0);
      assertFalse(boolean0);
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals((-29.05F), observerCamera0.getPitch(), 0.01F);
      assertEquals((-29.05F), observerCamera0.getYaw(), 0.01F);
      assertEquals((-31.125F), observerCamera0.getHeight(), 0.01F);
      assertEquals((-29.05F), observerCamera0.getY(), 0.01F);
      assertEquals((-29.05F), observerCamera0.getX(), 0.01F);
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals((-29.05F), observerCamera0.getZ(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals((-29.05F), observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, 3700L, 3700L, 5430.869F, 53.9F, 3700L, 3700L, true, true, true, (Float) (-29.05F), "", "");
      assertNotNull(homePrint0);
      assertEquals(5430.869F, homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperWidth(), 0.01F);
      assertTrue(homePrint0.isView3DPrinted());
      assertEquals(3700.0F, homePrint0.getPaperHeight(), 0.01F);
      assertEquals(53.9F, homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals("", homePrint0.getHeaderFormat());
      assertTrue(homePrint0.isPlanPrinted());
      assertEquals(HomePrint.PaperOrientation.PORTRAIT, homePrint0.getPaperOrientation());
      assertEquals(3700.0F, homePrint0.getPaperRightMargin(), 0.01F);
      assertTrue(homePrint0.isFurniturePrinted());
      assertEquals("", homePrint0.getFooterFormat());
      assertEquals((-29.05F), homePrint0.getPlanScale(), 0.01F);
      
      home0.setPrint(homePrint0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(5430.869F, homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperWidth(), 0.01F);
      assertTrue(homePrint0.isView3DPrinted());
      assertEquals(3700.0F, homePrint0.getPaperHeight(), 0.01F);
      assertEquals(53.9F, homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals("", homePrint0.getHeaderFormat());
      assertTrue(homePrint0.isPlanPrinted());
      assertEquals(HomePrint.PaperOrientation.PORTRAIT, homePrint0.getPaperOrientation());
      assertEquals(3700.0F, homePrint0.getPaperRightMargin(), 0.01F);
      assertTrue(homePrint0.isFurniturePrinted());
      assertEquals("", homePrint0.getFooterFormat());
      assertEquals((-29.05F), homePrint0.getPlanScale(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.HEIGHT;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Home home0 = new Home((-1808.0F));
      assertNotNull(home0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      home0.setStoredCameras(linkedList0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(0, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(homePrint0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setPrint((HomePrint) null);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener1 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener1);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertNotNull(list0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setSelectedItems(list0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      Label label0 = new Label("[jyJ%", 2809.08F, 3088.5837F);
      assertNotNull(label0);
      assertEquals(3088.5837F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(2809.08F, label0.getX(), 0.01F);
      assertEquals("[jyJ%", label0.getText());
      
      home0.deleteLabel(label0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3088.5837F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(2809.08F, label0.getX(), 0.01F);
      assertEquals("[jyJ%", label0.getText());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener2 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener2);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener3 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener3);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Home home0 = null;
      try {
        home0 = new Home((List<HomePieceOfFurniture>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addWallsListener(collectionListener0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isModified();
      assertTrue(boolean0);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("America/Cayman");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.America/Cayman
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Home home0 = new Home((-1808.0F));
      assertNotNull(home0);
      assertNull(home0.getName());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertTrue(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertTrue(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(280.46353F, (-46.616665F), 0.0F, 1451.693F, (-1648.5F));
      assertNotNull(wall0);
      assertEquals(1524.3331F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(280.46353F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1648.5F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1524.3331F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(702.53815F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(140.23177F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1451.693F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-46.616665F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertTrue(boolean0);
      assertTrue(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<HomeLight> class0 = HomeLight.class;
      List<HomeLight> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Room> list1 = Home.getRoomsSubList(list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      Class<HomePieceOfFurniture> class1 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list2 = Home.getSubList((List<? extends Selectable>) list1, class1);
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      Home home1 = new Home(list2);
      assertNotNull(home1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home1.getTopCamera();
      assertNotNull(camera0);
      assertNotSame(home1, home0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera1 = camera0.clone();
      assertNotNull(camera1);
      assertNotSame(home1, home0);
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertFalse(camera1.equals((Object)camera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setCamera(camera1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera1.equals((Object)camera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertNotSame(home0, home1);
      assertTrue(home0.isEmpty());
      assertTrue(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ky\"V|";
      Long long0 = new Long(1725L);
      assertEquals(1725L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float(2398.615F);
      assertEquals(2398.615F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<Compass> class2 = Compass.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class2, "", false);
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      Sash[] sashArray0 = new Sash[6];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 2398.615F, 1725L);
      assertNotNull(sash0);
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(1725.0F, sash0.getEndAngle(), 0.01F);
      assertEquals(2398.615F, sash0.getStartAngle(), 0.01F);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-147.53F), 0.0F, (-912.0F), (-147.53F), 2955.753F);
      assertNotNull(sash1);
      assertEquals(0.0F, sash1.getYAxis(), 0.01F);
      assertEquals((-147.53F), sash1.getXAxis(), 0.01F);
      assertEquals(2955.753F, sash1.getEndAngle(), 0.01F);
      assertEquals((-912.0F), sash1.getWidth(), 0.01F);
      assertEquals((-147.53F), sash1.getStartAngle(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-147.53F), 1725L, (-5122.332F), 0.0F, 0.0F);
      assertNotNull(sash2);
      assertEquals(1725.0F, sash2.getYAxis(), 0.01F);
      assertEquals((-147.53F), sash2.getXAxis(), 0.01F);
      assertEquals(0.0F, sash2.getStartAngle(), 0.01F);
      assertEquals((-5122.332F), sash2.getWidth(), 0.01F);
      assertEquals(0.0F, sash2.getEndAngle(), 0.01F);
      assertFalse(sash2.equals((Object)sash1));
      assertFalse(sash2.equals((Object)sash0));
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(1725L, 0.0F, 0.0F, 147.33333F, (-5122.332F));
      assertNotNull(sash3);
      assertEquals(147.33333F, sash3.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash3.getYAxis(), 0.01F);
      assertEquals(0.0F, sash3.getWidth(), 0.01F);
      assertEquals((-5122.332F), sash3.getEndAngle(), 0.01F);
      assertEquals(1725.0F, sash3.getXAxis(), 0.01F);
      assertFalse(sash3.equals((Object)sash0));
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash1));
      
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(2398.615F, (-5122.332F), (-912.0F), 147.33333F, (-912.0F));
      assertNotNull(sash4);
      assertEquals((-912.0F), sash4.getWidth(), 0.01F);
      assertEquals(2398.615F, sash4.getXAxis(), 0.01F);
      assertEquals((-5122.332F), sash4.getYAxis(), 0.01F);
      assertEquals((-912.0F), sash4.getEndAngle(), 0.01F);
      assertEquals(147.33333F, sash4.getStartAngle(), 0.01F);
      assertFalse(sash4.equals((Object)sash1));
      assertFalse(sash4.equals((Object)sash2));
      assertFalse(sash4.equals((Object)sash0));
      assertFalse(sash4.equals((Object)sash3));
      
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(2955.753F, 1725L, 0.0F, 2955.753F, 2955.753F);
      assertNotNull(sash5);
      assertEquals(0.0F, sash5.getWidth(), 0.01F);
      assertEquals(1725.0F, sash5.getYAxis(), 0.01F);
      assertEquals(2955.753F, sash5.getEndAngle(), 0.01F);
      assertEquals(2955.753F, sash5.getStartAngle(), 0.01F);
      assertEquals(2955.753F, sash5.getXAxis(), 0.01F);
      assertFalse(sash5.equals((Object)sash1));
      assertFalse(sash5.equals((Object)sash4));
      assertFalse(sash5.equals((Object)sash2));
      assertFalse(sash5.equals((Object)sash3));
      assertFalse(sash5.equals((Object)sash0));
      
      sashArray0[5] = sash5;
      float[][] floatArray0 = new float[7][7];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-147.53F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-147.53F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = (-5122.332F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-1620.677F);
      floatArray2[1] = 0.0F;
      floatArray2[2] = (-147.53F);
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = (-912.0F);
      floatArray3[2] = (-147.53F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray4[0] = (float) 1725L;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      
      floatArray5[0] = 2398.615F;
      floatArray5[1] = (-147.53F);
      floatArray5[2] = 0.0F;
      floatArray5[3] = 0.0F;
      floatArray5[4] = (-94.1F);
      floatArray5[5] = 147.33333F;
      floatArray5[6] = (-1620.677F);
      floatArray5[7] = 0.0F;
      floatArray5[8] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray3));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = 0.0F;
      floatArray6[3] = 0.0F;
      floatArray6[4] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[8];
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray2));
      
      floatArray7[0] = (float) 1725L;
      floatArray7[1] = 147.33333F;
      floatArray7[2] = (float) 1725L;
      floatArray7[3] = 2955.753F;
      floatArray7[4] = (-94.1F);
      floatArray7[5] = 0.0F;
      floatArray7[6] = (-1620.677F);
      floatArray7[7] = (-912.0F);
      floatArray0[6] = floatArray7;
      BigDecimal bigDecimal0 = new BigDecimal(1468);
      assertNotNull(bigDecimal0);
      assertEquals((short)1468, bigDecimal0.shortValue());
      assertEquals((byte) (-68), bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "ky\"V|", "ky\"V|", stringArray0, long0, float0, resourceURLContent0, resourceURLContent0, resourceURLContent0, 2398.615F, 0.0F, (-912.0F), 0.0F, false, 0.0F, (-5122.332F), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertNotNull(catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)1468, bigDecimal0.shortValue());
      assertEquals((byte) (-68), bigDecimal0.byteValue());
      assertEquals(2398.615F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-5122.332F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1725L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("ky\"V|", catalogDoorOrWindow0.getDescription());
      assertEquals(2398.615F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("ky\"V|", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-912.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(6, sashArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals(7, floatArray0.length);
      
      float float1 = catalogDoorOrWindow0.getWallThickness();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)1468, bigDecimal0.shortValue());
      assertEquals((byte) (-68), bigDecimal0.byteValue());
      assertEquals(2398.615F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-5122.332F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1725L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("ky\"V|", catalogDoorOrWindow0.getDescription());
      assertEquals(2398.615F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("ky\"V|", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-912.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(6, sashArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals(7, floatArray0.length);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("jar:", "", "ky\"V|", resourceURLContent0, resourceURLContent0, (-147.53F), 0.0F, 0.0F, 0.0F, true, 0.0F, (-2342.128F), sashArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogDoorOrWindow1);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)1468, bigDecimal0.shortValue());
      assertEquals((byte) (-68), bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("ky\"V|", catalogDoorOrWindow1.getDescription());
      assertEquals((-2342.128F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals("jar:", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-147.53F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals(6, sashArray0.length);
      assertEquals(7, floatArray0.length);
      
      float float2 = catalogDoorOrWindow1.getWallDistance();
      assertEquals((-2342.128F), float2, 0.01F);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)1468, bigDecimal0.shortValue());
      assertEquals((byte) (-68), bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("ky\"V|", catalogDoorOrWindow1.getDescription());
      assertEquals((-2342.128F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals("jar:", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-147.53F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(6, sashArray0.length);
      assertEquals(7, floatArray0.length);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertNotNull(sashArray1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)1468, bigDecimal0.shortValue());
      assertEquals((byte) (-68), bigDecimal0.byteValue());
      assertEquals(2398.615F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-5122.332F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1725L, (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("ky\"V|", catalogDoorOrWindow0.getDescription());
      assertEquals(2398.615F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("ky\"V|", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-912.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals(6, sashArray0.length);
      assertEquals(6, sashArray1.length);
      assertEquals(1, stringArray0.length);
      assertEquals(7, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertNotNull(homeDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)1468, bigDecimal0.shortValue());
      assertEquals((byte) (-68), bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("ky\"V|", catalogDoorOrWindow1.getDescription());
      assertEquals((-2342.128F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals("jar:", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-147.53F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-2342.128F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-73.765F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-147.53F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("ky\"V|", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals(6, sashArray0.length);
      assertEquals(7, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)1468, bigDecimal0.shortValue());
      assertEquals((byte) (-68), bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("ky\"V|", catalogDoorOrWindow1.getDescription());
      assertEquals((-2342.128F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals("jar:", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-147.53F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-2342.128F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-73.765F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-147.53F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("ky\"V|", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-2342.128F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-73.765F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("jar:", homeDoorOrWindow1.getCatalogId());
      assertEquals("ky\"V|", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-147.53F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(6, sashArray0.length);
      assertEquals(7, floatArray0.length);
      
      home0.addPieceOfFurniture((HomePieceOfFurniture) homeDoorOrWindow1);
      assertNotSame(home0, home1);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertTrue(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((short)1468, bigDecimal0.shortValue());
      assertEquals((byte) (-68), bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("ky\"V|", catalogDoorOrWindow1.getDescription());
      assertEquals((-2342.128F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertEquals("", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals("jar:", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-147.53F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-2342.128F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-73.765F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-147.53F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("ky\"V|", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("jar:", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-2342.128F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-73.765F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("jar:", homeDoorOrWindow1.getCatalogId());
      assertEquals("ky\"V|", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-147.53F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(home0.equals((Object)home1));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(6, sashArray0.length);
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      home0.setFurnitureVisibleProperties(list0);
      Home home1 = new Home(3700L);
      home1.setBasePlanLocked(true);
      assertTrue(home1.isBasePlanLocked());
      
      home0.setFurnitureDescendingSorted(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Home home0 = new Home((-5173.4766F));
      assertNotNull(home0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home1.getCamera();
      assertNotNull(camera0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.Y;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertNotSame(home0, home1);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertNotSame(home0, home1);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setFurnitureDescendingSorted(true);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertTrue(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(0.0F, (-1648.5F), 280.46353F, 1451.693F, (-3542.6145F));
      assertNotNull(wall0);
      assertEquals((-98.4035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1648.5F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(140.23177F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3112.8535F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1451.693F, wall0.getYEnd(), 0.01F);
      assertEquals(280.46353F, wall0.getXEnd(), 0.01F);
      assertEquals((-3542.6145F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3112.8535F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      home1.addWall(wall0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertTrue(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertEquals((-98.4035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1648.5F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(140.23177F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3112.8535F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1451.693F, wall0.getYEnd(), 0.01F);
      assertEquals(280.46353F, wall0.getXEnd(), 0.01F);
      assertEquals((-3542.6145F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3112.8535F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Wall> collection0 = home1.getWalls();
      assertNotNull(collection0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertTrue(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(collection0.contains(wall0));
      
      Class<Wall> class0 = Wall.class;
      // Undeclared exception!
      try { 
        Home.getSubList((List<? extends Selectable>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Home home0 = new Home((-139.41667F));
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertNotNull(camera0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNotNull(list0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener1 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener1);
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-139.41667F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<HomeFurnitureGroup> class0 = HomeFurnitureGroup.class;
      List<HomeFurnitureGroup> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<HomePieceOfFurniture> list1 = Home.getFurnitureSubList(list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      Home home0 = new Home(list1);
      assertNotNull(home0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addFurnitureListener(collectionListener0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list2 = home0.getRooms();
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addFurnitureListener(collectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home1.getCamera();
      assertNotNull(camera0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = new Level("CAMERA", 3700L, 3700L, 0.0F);
      assertNotNull(level0);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals("CAMERA", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      
      home0.addLevel(level0);
      assertNotSame(home0, home1);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals("CAMERA", level0.getName());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list0 = home0.getSelectedItems();
      assertNotNull(list0);
      assertNotSame(home0, home1);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertNotNull(collection0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setSelectedLevel((Level) null);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home1.getCamera();
      assertNotNull(camera0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home1.getVersion();
      assertEquals(3700L, long0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Compass compass0 = home0.getCompass();
      assertNotNull(compass0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = linkedList0.add(compass0);
      assertTrue(boolean0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1, linkedList0.size());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(linkedList0.contains(compass0));
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedList0.contains(compass0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("<D");
      assertFalse(home0.isBasePlanLocked());
      assertEquals("<D", home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Object object0 = home0.getVisualProperty("<D");
      assertNull(object0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals("<D", home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.PORTRAIT;
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      float float2 = Float.min(101.7F, 0.0F);
      assertEquals(0.0F, float2, 0.01F);
      
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, 3700L, 114.15F, 101.7F, (-1259.657F), (-1259.657F), (-1259.657F), true, false, true, float1, "", "AGmVfg&c");
      assertNotNull(homePrint0);
      assertEquals(101.7F, homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperWidth(), 0.01F);
      assertEquals((-1259.657F), homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals("AGmVfg&c", homePrint0.getFooterFormat());
      assertEquals("", homePrint0.getHeaderFormat());
      assertEquals((-1259.657F), homePrint0.getPaperBottomMargin(), 0.01F);
      assertFalse(homePrint0.isPlanPrinted());
      assertTrue(homePrint0.isFurniturePrinted());
      assertEquals(0.0F, homePrint0.getPlanScale(), 0.01F);
      assertTrue(homePrint0.isView3DPrinted());
      assertEquals(HomePrint.PaperOrientation.PORTRAIT, homePrint0.getPaperOrientation());
      assertEquals((-1259.657F), homePrint0.getPaperRightMargin(), 0.01F);
      assertEquals(114.15F, homePrint0.getPaperHeight(), 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      
      home0.setPrint(homePrint0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(101.7F, homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperWidth(), 0.01F);
      assertEquals((-1259.657F), homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals("AGmVfg&c", homePrint0.getFooterFormat());
      assertEquals("", homePrint0.getHeaderFormat());
      assertEquals((-1259.657F), homePrint0.getPaperBottomMargin(), 0.01F);
      assertFalse(homePrint0.isPlanPrinted());
      assertTrue(homePrint0.isFurniturePrinted());
      assertEquals(0.0F, homePrint0.getPlanScale(), 0.01F);
      assertTrue(homePrint0.isView3DPrinted());
      assertEquals(HomePrint.PaperOrientation.PORTRAIT, homePrint0.getPaperOrientation());
      assertEquals((-1259.657F), homePrint0.getPaperRightMargin(), 0.01F);
      assertEquals(114.15F, homePrint0.getPaperHeight(), 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Label label0 = new Label("com.eteks.sweethome3d.model.Home$1", 0.0F, 3700L);
      assertNotNull(label0);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Home$1", label0.getText());
      
      label0.setAngle(22.569721F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Home$1", label0.getText());
      assertEquals(3.7201653F, label0.getAngle(), 0.01F);
      
      label0.setY(3700L);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Home$1", label0.getText());
      assertEquals(3.7201653F, label0.getAngle(), 0.01F);
      
      home0.addLabel(label0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Home$1", label0.getText());
      assertEquals(3.7201653F, label0.getAngle(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Object object0 = home0.getVisualProperty("AGmVfg&c");
      assertNull(object0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.CATALOG_ID;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.CATALOG_ID, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addRoomsListener(collectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("NAME_X_OFFSET");
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals("NAME_X_OFFSET", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = (-738.3041F);
      floatArray2[2] = (-100.0F);
      floatArray2[3] = (float) 3700L;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3700.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3700.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(3700.0F, room1.getXCenter(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getName());
      assertFalse(room1.equals((Object)room0));
      assertEquals(2, floatArray0.length);
      
      DimensionLine dimensionLine0 = new DimensionLine((-100.0F), (-175.153F), 761.5697F, 3700.0F, 0.0F);
      assertNotNull(dimensionLine0);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-175.153F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-100.0F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(3969.775F, dimensionLine0.getLength(), 0.01F);
      assertEquals(761.5697F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertNotNull(dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-175.153F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-100.0F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(3969.775F, dimensionLine0.getLength(), 0.01F);
      assertEquals(761.5697F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3969.775F, dimensionLine1.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(761.5697F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-100.0F), dimensionLine1.getXStart(), 0.01F);
      assertEquals((-175.153F), dimensionLine1.getYStart(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      Level level0 = dimensionLine1.getLevel();
      assertNull(level0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-175.153F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-100.0F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(3969.775F, dimensionLine0.getLength(), 0.01F);
      assertEquals(761.5697F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3969.775F, dimensionLine1.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(761.5697F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-100.0F), dimensionLine1.getXStart(), 0.01F);
      assertEquals((-175.153F), dimensionLine1.getYStart(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      room1.setLevel((Level) null);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3700.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(3700.0F, room1.getXCenter(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getName());
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(2, floatArray0.length);
      
      home0.addRoom(room0);
      assertNotSame(room0, room1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3700.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.equals((Object)room1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(2, floatArray0.length);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertNotNull(collection0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertNotNull(list0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(list0.contains(room1));
      assertTrue(list0.contains(room0));
      
      List<Level> list1 = home0.getLevels();
      assertNotNull(list1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list2 = home0.getStoredCameras();
      assertNotNull(list2);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertNotNull(camera0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertNotNull(compass0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Home.Property[] home_PropertyArray0 = Home.Property.values();
      assertNotNull(home_PropertyArray0);
      assertEquals(12, home_PropertyArray0.length);
      
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.LEVEL;
      Label label0 = new Label("", 85.316666F, 85.316666F);
      assertNotNull(label0);
      assertEquals("", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(85.316666F, label0.getY(), 0.01F);
      assertEquals(85.316666F, label0.getX(), 0.01F);
      
      home0.addLabel(label0);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals("", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(85.316666F, label0.getY(), 0.01F);
      assertEquals(85.316666F, label0.getX(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      label0.move(1572.3961F, 85.316666F);
      assertEquals("", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(170.63333F, label0.getY(), 0.01F);
      assertEquals(1657.7128F, label0.getX(), 0.01F);
      
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.LEVEL, home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Label label1 = mock(Label.class, new ViolatedAssumptionAnswer());
      home0.addLabel(label1);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.LEVEL, home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      TextStyle textStyle0 = new TextStyle(3700L);
      assertNotNull(textStyle0);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals(3700.0F, textStyle0.getFontSize(), 0.01F);
      
      label0.setStyle(textStyle0);
      assertEquals("", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(170.63333F, label0.getY(), 0.01F);
      assertEquals(1657.7128F, label0.getX(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals(3700.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(label0.equals((Object)label1));
      
      home0.addLabelsListener(collectionListener0);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.LEVEL, home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deselectItem(label0);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.LEVEL, home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals("", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(170.63333F, label0.getY(), 0.01F);
      assertEquals(1657.7128F, label0.getX(), 0.01F);
      assertFalse(label0.equals((Object)label1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener1 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener1);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.LEVEL, home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = home0.getSelectedLevel();
      assertNull(level0);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.LEVEL, home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isBasePlanLocked();
      assertFalse(boolean0);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.LEVEL, home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.DEPTH;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.DEPTH, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setCamera((Camera) null);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.DEPTH, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNotNull(list0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureVisibleProperties(list0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertNotNull(compass0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "PRINT";
      stringArray0[1] = "com.eteks.sweethome3d.model.LightSource";
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) 0L);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Sash[] sashArray0 = new Sash[6];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      sashArray0[4] = sash0;
      sashArray0[5] = sash0;
      float[][] floatArray0 = new float[9][0];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 76.767F;
      floatArray1[1] = (-9.464723F);
      floatArray1[2] = 76.767F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1023.60596F;
      floatArray2[1] = (-9.464723F);
      floatArray2[2] = 1023.60596F;
      floatArray2[3] = (-9.464723F);
      floatArray2[4] = (-61.2333F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (-9.464723F);
      floatArray3[1] = (-9.464723F);
      floatArray3[2] = 76.767F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = (-2388.0F);
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-61.2333F);
      floatArray4[3] = (-61.2333F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[6];
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray5[0] = (-2388.0F);
      floatArray5[1] = 1023.60596F;
      floatArray5[2] = (-4462.0F);
      floatArray5[3] = (float) 0L;
      floatArray5[4] = (-9.464723F);
      floatArray5[5] = 1023.60596F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray3));
      
      floatArray6[0] = (-2388.0F);
      floatArray6[1] = (-4462.0F);
      floatArray6[2] = (-2388.0F);
      floatArray6[3] = 1023.60596F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[9];
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray3));
      
      floatArray7[0] = 0.0F;
      floatArray7[1] = (-61.2333F);
      floatArray7[2] = (-9.464723F);
      floatArray7[3] = (-2388.0F);
      floatArray7[4] = 1023.60596F;
      floatArray7[5] = 1023.60596F;
      floatArray7[6] = 1023.60596F;
      floatArray7[7] = (-9.464723F);
      floatArray7[8] = 76.767F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[7];
      assertFalse(floatArray8.equals((Object)floatArray2));
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray3));
      assertFalse(floatArray8.equals((Object)floatArray7));
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray5));
      
      floatArray8[0] = (-61.2333F);
      floatArray8[1] = 76.767F;
      floatArray8[2] = 1023.60596F;
      floatArray8[3] = 76.767F;
      floatArray8[4] = (-61.2333F);
      floatArray8[5] = (float) 0L;
      floatArray8[6] = (float) 0L;
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[9];
      assertFalse(floatArray9.equals((Object)floatArray5));
      assertFalse(floatArray9.equals((Object)floatArray1));
      assertFalse(floatArray9.equals((Object)floatArray2));
      assertFalse(floatArray9.equals((Object)floatArray7));
      assertFalse(floatArray9.equals((Object)floatArray3));
      assertFalse(floatArray9.equals((Object)floatArray6));
      assertFalse(floatArray9.equals((Object)floatArray8));
      assertFalse(floatArray9.equals((Object)floatArray4));
      
      floatArray9[0] = (-4462.0F);
      floatArray9[1] = 76.767F;
      floatArray9[2] = 0.0F;
      floatArray9[3] = (float) 0L;
      floatArray9[4] = (-9.464723F);
      floatArray9[5] = (float) 0L;
      floatArray9[6] = 76.767F;
      floatArray9[7] = 76.767F;
      floatArray9[8] = (float) 0L;
      floatArray0[8] = floatArray9;
      BigDecimal bigDecimal0 = new BigDecimal(76.767F);
      assertNotNull(bigDecimal0);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("PRINT", "PRINT", "PRINT", "com.eteks.sweethome3d.model.LightSource", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 1023.60596F, 0.0F, 1023.60596F, 0.0F, true, 1023.60596F, 76.767F, sashArray0, floatArray0, "PRINT", true, true, true, bigDecimal0, bigDecimal1, "com.eteks.sweethome3d.model.LightSource");
      assertNotNull(catalogDoorOrWindow0);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(76.767F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRINT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("PRINT", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogDoorOrWindow0.getId());
      assertEquals("PRINT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(9, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(6, sashArray0.length);
      
      String string0 = catalogDoorOrWindow0.getName();
      assertEquals("PRINT", string0);
      assertNotNull(string0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(76.767F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRINT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("PRINT", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogDoorOrWindow0.getId());
      assertEquals("PRINT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(9, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(6, sashArray0.length);
      
      String string1 = catalogDoorOrWindow0.getDescription();
      assertEquals("PRINT", string1);
      assertNotNull(string1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(76.767F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRINT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("PRINT", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogDoorOrWindow0.getId());
      assertEquals("PRINT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(9, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(6, sashArray0.length);
      
      Content content0 = catalogDoorOrWindow0.getIcon();
      assertNull(content0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(76.767F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRINT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("PRINT", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogDoorOrWindow0.getId());
      assertEquals("PRINT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(9, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(6, sashArray0.length);
      
      Content content1 = catalogDoorOrWindow0.getPlanIcon();
      assertNull(content1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(76.767F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRINT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("PRINT", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogDoorOrWindow0.getId());
      assertEquals("PRINT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(9, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(6, sashArray0.length);
      
      Content content2 = catalogDoorOrWindow0.getModel();
      assertNull(content2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(76.767F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRINT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("PRINT", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogDoorOrWindow0.getId());
      assertEquals("PRINT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(9, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(6, sashArray0.length);
      
      float float1 = catalogDoorOrWindow0.getWidth();
      assertEquals(1023.60596F, float1, 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(76.767F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRINT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("PRINT", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogDoorOrWindow0.getId());
      assertEquals("PRINT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(9, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(6, sashArray0.length);
      
      float float2 = catalogDoorOrWindow0.getDepth();
      assertEquals(0.0F, float2, 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(76.767F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRINT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("PRINT", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogDoorOrWindow0.getId());
      assertEquals("PRINT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotEquals(float2, float1, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(6, sashArray0.length);
      
      float float3 = catalogDoorOrWindow0.getHeight();
      assertEquals(1023.60596F, float3, 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(76.767F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRINT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("PRINT", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogDoorOrWindow0.getId());
      assertEquals("PRINT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(6, sashArray0.length);
      
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("}sJtNjT15~lL", "", "", (Content) null, (Content) null, (Content) null, (-941.486F), 99.02F, 1737.0F, 0.0F, false, 0.0F, 0.0F, sashArray0, floatArray0, "nV{", false, false, true, bigDecimal0, bigDecimal2);
      assertNotNull(catalogDoorOrWindow1);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(99.02F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(1737.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-941.486F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals("nV{", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals("}sJtNjT15~lL", catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals(9, floatArray0.length);
      assertEquals(6, sashArray0.length);
      
      float float4 = catalogDoorOrWindow1.getElevation();
      assertEquals(0.0F, float4, 0.01F);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(99.02F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(1737.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-941.486F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals("nV{", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals("}sJtNjT15~lL", catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals(9, floatArray0.length);
      assertEquals(6, sashArray0.length);
      
      boolean boolean0 = catalogDoorOrWindow1.isMovable();
      assertFalse(boolean0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(99.02F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(1737.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-941.486F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals("nV{", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals("}sJtNjT15~lL", catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals(9, floatArray0.length);
      assertEquals(6, sashArray0.length);
      
      boolean boolean1 = catalogDoorOrWindow0.isDoorOrWindow();
      assertTrue(boolean1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(76.767F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRINT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("PRINT", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogDoorOrWindow0.getId());
      assertEquals("PRINT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(boolean1 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(6, sashArray0.length);
      
      Integer integer0 = catalogDoorOrWindow1.getColor();
      assertNull(integer0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(99.02F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(1737.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-941.486F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals("nV{", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals("}sJtNjT15~lL", catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals(9, floatArray0.length);
      assertEquals(6, sashArray0.length);
      
      float[][] floatArray10 = catalogDoorOrWindow1.getModelRotation();
      assertNotNull(floatArray10);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(floatArray0, floatArray10);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(floatArray10, floatArray0);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(99.02F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(1737.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-941.486F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals("nV{", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals("}sJtNjT15~lL", catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(floatArray10.equals((Object)floatArray0));
      assertEquals(9, floatArray0.length);
      assertEquals(3, floatArray10.length);
      assertEquals(6, sashArray0.length);
      
      String string2 = catalogDoorOrWindow0.getStaircaseCutOutShape();
      assertNull(string2);
      assertNotSame(floatArray0, floatArray10);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(76.767F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRINT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("PRINT", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogDoorOrWindow0.getId());
      assertEquals("PRINT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(floatArray0.equals((Object)floatArray10));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(6, sashArray0.length);
      
      boolean boolean2 = catalogDoorOrWindow1.isBackFaceShown();
      assertFalse(boolean2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(floatArray0, floatArray10);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(99.02F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(1737.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-941.486F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals("nV{", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals("}sJtNjT15~lL", catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(floatArray0.equals((Object)floatArray10));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(9, floatArray0.length);
      assertEquals(6, sashArray0.length);
      
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      assertNotNull(bigDecimal3);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertEquals((short)10, bigDecimal3.shortValue());
      assertEquals((byte)10, bigDecimal3.byteValue());
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Q^zi.;u`(", "PRINT", "BACKGROUND_IMAGE", (Content) null, (Content) null, 76.767F, 2773.394F, (-3632.3F), 0.19634955F, true, floatArray0, "PRINT", true, bigDecimal2, bigDecimal3);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)10, bigDecimal3.shortValue());
      assertEquals((byte)10, bigDecimal3.byteValue());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("BACKGROUND_IMAGE", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(76.767F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2773.394F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.19634955F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-3632.3F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("Q^zi.;u`(", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("PRINT", catalogPieceOfFurniture0.getCreator());
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal3));
      assertFalse(floatArray0.equals((Object)floatArray10));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertEquals(9, floatArray0.length);
      
      boolean boolean3 = catalogPieceOfFurniture0.isResizable();
      assertTrue(boolean3);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertNotSame(floatArray0, floatArray10);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)10, bigDecimal3.shortValue());
      assertEquals((byte)10, bigDecimal3.byteValue());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("BACKGROUND_IMAGE", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(76.767F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2773.394F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.19634955F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-3632.3F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("Q^zi.;u`(", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("PRINT", catalogPieceOfFurniture0.getCreator());
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal3));
      assertFalse(floatArray0.equals((Object)floatArray10));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(9, floatArray0.length);
      
      boolean boolean4 = catalogDoorOrWindow0.isDeformable();
      assertTrue(boolean4);
      assertNotSame(floatArray0, floatArray10);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(76.767F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("PRINT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(1023.60596F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("PRINT", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogDoorOrWindow0.getId());
      assertEquals("PRINT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(floatArray0.equals((Object)floatArray10));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal3));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertEquals(9, floatArray0.length);
      assertEquals(2, stringArray0.length);
      assertEquals(6, sashArray0.length);
      
      boolean boolean5 = catalogDoorOrWindow1.isTexturable();
      assertTrue(boolean5);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertNotSame(floatArray0, floatArray10);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(99.02F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(1737.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-941.486F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals("nV{", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals("}sJtNjT15~lL", catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal3));
      assertFalse(floatArray0.equals((Object)floatArray10));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertEquals(9, floatArray0.length);
      assertEquals(6, sashArray0.length);
      
      BigDecimal bigDecimal4 = catalogDoorOrWindow1.getPrice();
      assertNotNull(bigDecimal4);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal4);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertNotSame(floatArray0, floatArray10);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals((short)76, bigDecimal4.shortValue());
      assertEquals((byte)76, bigDecimal4.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(99.02F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(1737.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-941.486F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals("nV{", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals("}sJtNjT15~lL", catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertFalse(bigDecimal4.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal3));
      assertFalse(floatArray0.equals((Object)floatArray10));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals(9, floatArray0.length);
      assertEquals(6, sashArray0.length);
      
      BigDecimal bigDecimal5 = catalogDoorOrWindow1.getValueAddedTaxPercentage();
      assertNotNull(bigDecimal5);
      assertSame(bigDecimal5, bigDecimal2);
      assertNotSame(bigDecimal5, bigDecimal4);
      assertNotSame(bigDecimal5, bigDecimal3);
      assertNotSame(bigDecimal5, bigDecimal0);
      assertNotSame(bigDecimal5, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal4);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal5);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertNotSame(floatArray0, floatArray10);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals((byte)0, bigDecimal5.byteValue());
      assertEquals((short)0, bigDecimal5.shortValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(99.02F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(1737.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-941.486F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals("nV{", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals("}sJtNjT15~lL", catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertFalse(bigDecimal5.equals((Object)bigDecimal4));
      assertFalse(bigDecimal5.equals((Object)bigDecimal3));
      assertFalse(bigDecimal5.equals((Object)bigDecimal0));
      assertFalse(bigDecimal5.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal4));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal3));
      assertFalse(floatArray0.equals((Object)floatArray10));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals(9, floatArray0.length);
      assertEquals(6, sashArray0.length);
      
      String string3 = catalogDoorOrWindow1.getCurrency();
      assertNull(string3);
      assertNotSame(bigDecimal2, bigDecimal4);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal5);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertNotSame(floatArray0, floatArray10);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getName());
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals(99.02F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertEquals(1737.0F, catalogDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-941.486F), catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals("nV{", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertEquals("}sJtNjT15~lL", catalogDoorOrWindow1.getId());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertNull(catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals(0.0F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isMovable());
      assertEquals((byte)76, bigDecimal0.byteValue());
      assertEquals((short)76, bigDecimal0.shortValue());
      assertFalse(bigDecimal2.equals((Object)bigDecimal4));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal3));
      assertFalse(floatArray0.equals((Object)floatArray10));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal5));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals(9, floatArray0.length);
      assertEquals(6, sashArray0.length);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("BACKGROUND_IMAGE", homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(76.767F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("PRINT", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals("Q^zi.;u`(", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-3632.3F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(1386.697F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.19634955F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2773.394F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.19634955F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(38.3835F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((short)10, bigDecimal3.shortValue());
      assertEquals((byte)10, bigDecimal3.byteValue());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("BACKGROUND_IMAGE", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(76.767F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2773.394F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("PRINT", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.19634955F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-3632.3F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("Q^zi.;u`(", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("PRINT", catalogPieceOfFurniture0.getCreator());
      assertFalse(bigDecimal2.equals((Object)bigDecimal4));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal3));
      assertFalse(floatArray0.equals((Object)floatArray10));
      assertFalse(bigDecimal3.equals((Object)bigDecimal5));
      assertFalse(bigDecimal3.equals((Object)bigDecimal4));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertEquals(9, floatArray0.length);
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture(homePieceOfFurniture0, 320);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 320, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      home0.setFurnitureVisibleProperties(list0);
      assertTrue(home0.isBasePlanLocked());
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      LinkedList<Label> linkedList1 = new LinkedList<Label>();
      Label label0 = new Label("STORED_CAMERAS", (-45.083332F), (-45.083332F));
      linkedList1.add(label0);
      List<Selectable> list1 = Home.duplicate(linkedList1);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addRoom((Room) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<HomeLight> class0 = HomeLight.class;
      List<HomeLight> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isBasePlanLocked();
      assertFalse(boolean0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Home home0 = new Home((-1822.2877F));
      assertNotNull(home0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(homePrint0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteLevel((Level) null);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertNull(camera0.getName());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setCamera(camera0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertNull(camera0.getName());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteLevel((Level) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[3][7];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-738.3041F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-738.3041F);
      floatArray2[1] = (-738.3041F);
      floatArray2[2] = (-738.3041F);
      floatArray2[3] = (-738.3041F);
      floatArray2[4] = (-738.3041F);
      floatArray2[5] = (-738.3041F);
      floatArray2[6] = (-738.3041F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray0[2] = floatArray3;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(3, floatArray0.length);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room1.getCeilingColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(3, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertFalse(room1.equals((Object)room0));
      assertEquals(3, floatArray0.length);
      
      DimensionLine dimensionLine0 = new DimensionLine((-738.3041F), (-738.3041F), (-738.3041F), (-738.3041F), (-272.2763F));
      assertNotNull(dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-272.2763F), dimensionLine0.getOffset(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertNotNull(dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-272.2763F), dimensionLine0.getOffset(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYStart(), 0.01F);
      assertEquals((-272.2763F), dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYEnd(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      Level level0 = dimensionLine1.getLevel();
      assertNull(level0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-272.2763F), dimensionLine0.getOffset(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYStart(), 0.01F);
      assertEquals((-272.2763F), dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYEnd(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      room1.setLevel((Level) null);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room1.getCeilingColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(3, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(3, floatArray0.length);
      
      home0.addRoom(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertNull(room1.getCeilingColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(3, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3, floatArray0.length);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isEmpty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<HomeLight> class0 = HomeLight.class;
      List<HomeLight> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Label> list1 = Home.getLabelsSubList(list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<Label> list2 = Home.getLabelsSubList(list1);
      assertNotNull(list2);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.equals((Object)list1));
      
      home1.setSelectedItems(list2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isEmpty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level1 = home1.getSelectedLevel();
      assertNull(level1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isEmpty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Selectable> list1 = Home.duplicate(list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertNotNull(list0);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      CollectionListener<Label> collectionListener1 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLabelsListener(collectionListener1);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.addLabelsListener(collectionListener0);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = new Home(list0);
      assertNotNull(home1);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener2 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.removeWallsListener(collectionListener2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home1.isModified();
      assertFalse(boolean0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home.Property[] home_PropertyArray0 = Home.Property.values();
      assertNotNull(home_PropertyArray0);
      assertEquals(12, home_PropertyArray0.length);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertNotNull(collection0);
      assertNotSame(home0, home1);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Wall> list1 = Home.getWallsSubList(list0);
      assertNotNull(list1);
      assertNotSame(home0, home1);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(3700L, 3700L, 0.0F, 1447.0F, 3700L, 3700L);
      assertNotNull(wall0);
      assertEquals(4331.975F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2573.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(1850.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4331.975F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(1447.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setYStart(0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(1850.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(723.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3972.8843F, wall0.getLength(), 0.01F);
      assertEquals(3972.8843F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1447.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      home0.addWall(wall0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(1850.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(723.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3972.8843F, wall0.getLength(), 0.01F);
      assertEquals(3972.8843F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1447.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertNotNull(list0);
      assertNotSame(home0, home1);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list0 = home0.getStoredCameras();
      assertNotNull(list0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setStoredCameras(list0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(1776.4973F, 3592.348F, 3592.348F, 3700L, 3592.348F, 1746.147F);
      assertNotNull(wall0);
      assertEquals(3592.348F, wall0.getYStart(), 0.01F);
      assertEquals(2684.4226F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3592.348F, wall0.getXEnd(), 0.01F);
      assertEquals(3646.1738F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1746.147F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1819.0388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1776.4973F, wall0.getXStart(), 0.01F);
      assertEquals(1819.0388F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3592.348F, wall0.getThickness(), 0.01F);
      
      boolean boolean0 = home0.isModified();
      assertFalse(boolean0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(false);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null, 46);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = new BackgroundImage((Content) null, 3700L, 3700L, 3700L, 57.49889F, 57.49889F, (-2.1666667F), 0.0F);
      assertNotNull(backgroundImage0);
      assertEquals(3700.0F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals(3700.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertTrue(backgroundImage0.isVisible());
      assertEquals(3700.0F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(0.7182689F, backgroundImage0.getScale(), 0.01F);
      assertEquals(57.49889F, backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals((-2.1666667F), backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(57.49889F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      
      home0.setBackgroundImage(backgroundImage0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700.0F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals(3700.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertTrue(backgroundImage0.isVisible());
      assertEquals(3700.0F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(0.7182689F, backgroundImage0.getScale(), 0.01F);
      assertEquals(57.49889F, backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals((-2.1666667F), backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(57.49889F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteLevel((Level) null);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName((String) null);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addRoom((Room) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Home home0 = new Home((-1808.0F));
      assertNotNull(home0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty1 = home0.getFurnitureSortedProperty();
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, homePieceOfFurniture_SortableProperty1);
      assertSame(homePieceOfFurniture_SortableProperty1, homePieceOfFurniture_SortableProperty0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Compass compass0 = new Compass(0.0F, 0.0F, 0.0F);
      assertNotNull(compass0);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      
      Compass compass1 = compass0.clone();
      assertNotNull(compass1);
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(0.0F, compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getY(), 0.01F);
      assertEquals(0.0F, compass1.getX(), 0.01F);
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertFalse(compass1.equals((Object)compass0));
      
      boolean boolean0 = linkedList0.add(compass1);
      assertTrue(boolean0);
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      assertEquals(1, linkedList0.size());
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(0.0F, compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getY(), 0.01F);
      assertEquals(0.0F, compass1.getX(), 0.01F);
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertFalse(compass0.equals((Object)compass1));
      assertFalse(compass1.equals((Object)compass0));
      assertFalse(linkedList0.contains(compass0));
      assertTrue(linkedList0.contains(compass1));
      
      Class<Compass> class0 = Compass.class;
      List<Compass> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(linkedList0.contains(compass0));
      assertTrue(linkedList0.contains(compass1));
      assertFalse(list0.contains(compass0));
      assertTrue(list0.contains(compass1));
      
      List<Selectable> list1 = Home.duplicate(list0);
      assertNotNull(list1);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(linkedList0.contains(compass0));
      assertTrue(linkedList0.contains(compass1));
      assertFalse(list0.contains(compass0));
      assertTrue(list0.contains(compass1));
      
      home0.setName("America/Grenada");
      assertEquals("America/Grenada", home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(homePrint0);
      assertEquals("America/Grenada", home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BackgroundImage backgroundImage0 = new BackgroundImage((Content) null, 709.7097F, 0.0F, 709.7097F, 34.052223F, (-929.26654F), 0.7853982F, 5.4977875F, false);
      assertNotNull(backgroundImage0);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertEquals(5.4977875F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(34.052223F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(709.7097F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(709.7097F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals((-929.26654F), backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals(0.4329267F, backgroundImage0.getScale(), 0.01F);
      assertFalse(backgroundImage0.isVisible());
      assertEquals(0.7853982F, backgroundImage0.getXOrigin(), 0.01F);
      
      Home home0 = new Home(34.052223F);
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(34.052223F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = new Home((-929.26654F));
      assertNotNull(home1);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals((-929.26654F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setBackgroundImage(backgroundImage0);
      assertNotSame(home1, home0);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertEquals(5.4977875F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(34.052223F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(709.7097F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(709.7097F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals((-929.26654F), backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals(0.4329267F, backgroundImage0.getScale(), 0.01F);
      assertFalse(backgroundImage0.isVisible());
      assertEquals(0.7853982F, backgroundImage0.getXOrigin(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals((-929.26654F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setPrint((HomePrint) null);
      assertNotSame(home1, home0);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals((-929.26654F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.deleteRoom((Room) null);
      assertNotSame(home1, home0);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals((-929.26654F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(34.052223F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(34.052223F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setFurnitureDescendingSorted(true);
      assertNotSame(home1, home0);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals((-929.26654F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home1.getFurnitureVisibleProperties();
      assertNotNull(list0);
      assertNotSame(home1, home0);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals((-929.26654F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureVisibleProperties(list0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(34.052223F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals((-929.26654F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list1 = home0.getFurnitureVisibleProperties();
      assertNotNull(list1);
      assertNotSame(home0, home1);
      assertNotSame(list1, list0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(34.052223F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(list1.isEmpty());
      assertEquals(5, list1.size());
      assertFalse(home0.equals((Object)home1));
      assertTrue(list1.equals((Object)list0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureVisibleProperties(list1);
      assertNotSame(home0, home1);
      assertNotSame(list1, list0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(34.052223F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(list1.isEmpty());
      assertEquals(5, list1.size());
      assertFalse(home0.equals((Object)home1));
      assertTrue(list1.equals((Object)list0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage1 = home1.getBackgroundImage();
      assertNotNull(backgroundImage1);
      assertNotSame(home1, home0);
      assertSame(backgroundImage1, backgroundImage0);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals((-929.26654F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(0.4329267F, backgroundImage1.getScale(), 0.01F);
      assertEquals(709.7097F, backgroundImage1.getScaleDistance(), 0.01F);
      assertFalse(backgroundImage1.isVisible());
      assertEquals(34.052223F, backgroundImage1.getScaleDistanceXEnd(), 0.01F);
      assertEquals(709.7097F, backgroundImage1.getScaleDistanceYStart(), 0.01F);
      assertEquals((-929.26654F), backgroundImage1.getScaleDistanceYEnd(), 0.01F);
      assertEquals(0.0F, backgroundImage1.getScaleDistanceXStart(), 0.01F);
      assertEquals(0.7853982F, backgroundImage1.getXOrigin(), 0.01F);
      assertEquals(5.4977875F, backgroundImage1.getYOrigin(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home.Property home_Property0 = Home.Property.CAMERA;
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      home0.removePropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertNull(backgroundImage0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = home0.getSelectedLevel();
      assertNull(level0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L, 3700L);
      assertNotNull(wall0);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      
      home0.addWall(wall0);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.deleteWall(wall0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertNotNull(collection0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float float0 = 1319.6691F;
      Home home0 = new Home(1319.6691F);
      assertNotNull(home0);
      assertEquals(1319.6691F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Pacific/Yap";
      stringArray0[1] = "Pacific/Yap";
      Long long0 = new Long(2283L);
      assertEquals(2283L, (long)long0);
      assertNotNull(long0);
      
      Float float1 = new Float((-1225.49734581));
      assertEquals((-1225.4973F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Class<Compass> class0 = Compass.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      LightSource[] lightSourceArray0 = new LightSource[7];
      LightSource lightSource0 = new LightSource(1.0995575F, (-4915.747F), (-4915.747F), (-1726));
      assertNotNull(lightSource0);
      assertEquals((-1726), lightSource0.getColor());
      assertEquals(1.0995575F, lightSource0.getX(), 0.01F);
      assertEquals((-4915.747F), lightSource0.getY(), 0.01F);
      assertEquals((-4915.747F), lightSource0.getZ(), 0.01F);
      assertNull(lightSource0.getDiameter());
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-11.666667F), (-1120.8124F), 2573.5112F, 420);
      assertNotNull(lightSource1);
      assertEquals(420, lightSource1.getColor());
      assertEquals((-1120.8124F), lightSource1.getY(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertEquals((-11.666667F), lightSource1.getX(), 0.01F);
      assertEquals(2573.5112F, lightSource1.getZ(), 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(420, 2283L, 250.0F, 249);
      assertNotNull(lightSource2);
      assertEquals(2283.0F, lightSource2.getY(), 0.01F);
      assertEquals(250.0F, lightSource2.getZ(), 0.01F);
      assertEquals(249, lightSource2.getColor());
      assertNull(lightSource2.getDiameter());
      assertEquals(420.0F, lightSource2.getX(), 0.01F);
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertFalse(lightSource2.equals((Object)lightSource1));
      
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource((-1698.0183F), 420, 249, 0);
      assertNotNull(lightSource3);
      assertEquals((-1698.0183F), lightSource3.getX(), 0.01F);
      assertEquals(249.0F, lightSource3.getZ(), 0.01F);
      assertEquals(420.0F, lightSource3.getY(), 0.01F);
      assertNull(lightSource3.getDiameter());
      assertEquals(0, lightSource3.getColor());
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource1));
      
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(173.0333F, (-3126.5F), (-9.45F), 249, float1);
      assertNotNull(lightSource4);
      assertEquals((-3126.5F), lightSource4.getY(), 0.01F);
      assertEquals((-1225.4973F), lightSource4.getDiameter(), 0.01F);
      assertEquals(249, lightSource4.getColor());
      assertEquals(173.0333F, lightSource4.getX(), 0.01F);
      assertEquals((-9.45F), lightSource4.getZ(), 0.01F);
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(0.0F, 0.0F, 23.316668F, (-1590));
      assertNotNull(lightSource5);
      assertEquals(0.0F, lightSource5.getY(), 0.01F);
      assertEquals(23.316668F, lightSource5.getZ(), 0.01F);
      assertEquals(0.0F, lightSource5.getX(), 0.01F);
      assertEquals((-1590), lightSource5.getColor());
      assertNull(lightSource5.getDiameter());
      assertFalse(lightSource5.equals((Object)lightSource3));
      assertFalse(lightSource5.equals((Object)lightSource1));
      assertFalse(lightSource5.equals((Object)lightSource4));
      assertFalse(lightSource5.equals((Object)lightSource0));
      assertFalse(lightSource5.equals((Object)lightSource2));
      
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(0.0F, 1.0F, 3789.7F, 360);
      assertNotNull(lightSource6);
      assertEquals(3789.7F, lightSource6.getZ(), 0.01F);
      assertEquals(0.0F, lightSource6.getX(), 0.01F);
      assertEquals(1.0F, lightSource6.getY(), 0.01F);
      assertEquals(360, lightSource6.getColor());
      assertNull(lightSource6.getDiameter());
      assertFalse(lightSource6.equals((Object)lightSource0));
      assertFalse(lightSource6.equals((Object)lightSource2));
      assertFalse(lightSource6.equals((Object)lightSource5));
      assertFalse(lightSource6.equals((Object)lightSource4));
      assertFalse(lightSource6.equals((Object)lightSource1));
      assertFalse(lightSource6.equals((Object)lightSource3));
      
      lightSourceArray0[6] = lightSource6;
      float[][] floatArray0 = new float[8][4];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 250.0F;
      floatArray1[2] = (-9.45F);
      floatArray1[3] = (-3126.5F);
      floatArray1[4] = 1.0F;
      floatArray1[5] = 1.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 23.316668F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 2283L;
      floatArray2[1] = (-11.666667F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 250.0F;
      floatArray3[1] = 1.0F;
      floatArray3[2] = (float) (-1590);
      floatArray3[3] = 0.0F;
      floatArray3[4] = 1.0F;
      floatArray3[5] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray4[0] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray5[0] = (-174.20056F);
      floatArray5[1] = 1531.5F;
      floatArray5[2] = (-1698.0183F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray4));
      
      floatArray6[0] = 3789.7F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (float) 0;
      floatArray6[3] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[0];
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray2));
      
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[9];
      assertFalse(floatArray8.equals((Object)floatArray3));
      assertFalse(floatArray8.equals((Object)floatArray7));
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray5));
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray2));
      
      floatArray8[0] = (-1698.0183F);
      floatArray8[1] = 0.0F;
      floatArray8[2] = (float) 249;
      floatArray8[3] = 2065.8862F;
      floatArray8[4] = (-1698.0183F);
      floatArray8[5] = 0.0F;
      floatArray8[6] = 1.0F;
      floatArray8[7] = (float) 2283L;
      floatArray8[8] = 0.0F;
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = null;
      try {
        catalogLight0 = new CatalogLight("N[2M5vN?&>l<2F Yu/b", "Europe/Lisbon", "Pacific/Yap", "Pacific/Yap", stringArray0, long0, float1, resourceURLContent0, resourceURLContent0, resourceURLContent0, 23.316668F, 23.316668F, 23.316668F, 0.0F, false, lightSourceArray0, "Pacific/Yap", floatArray0, "", false, false, false, bigDecimal0, bigDecimal0, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<DimensionLine> list0 = Home.getDimensionLinesSubList(linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Level> list1 = Home.getLevelsSubList(list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(131.9F, 5.4977875F, 3700L, 5.4977875F, 3700L);
      assertNotNull(dimensionLine0);
      assertEquals(5.4977875F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(5.4977875F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(131.9F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3568.1F, dimensionLine0.getLength(), 0.01F);
      
      home0.deleteDimensionLine(dimensionLine0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(5.4977875F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(5.4977875F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(131.9F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3568.1F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("ZqO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.ZqO
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[3][7];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-738.3041F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-738.3041F);
      floatArray2[1] = (-738.3041F);
      floatArray2[2] = (-738.3041F);
      floatArray2[3] = (-738.3041F);
      floatArray2[4] = (-738.3041F);
      floatArray2[5] = (-738.3041F);
      floatArray2[6] = (-738.3041F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray0[2] = floatArray3;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(3, floatArray0.length);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room1.getCeilingColor());
      assertEquals(3, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getFloorColor());
      assertFalse(room1.equals((Object)room0));
      assertEquals(3, floatArray0.length);
      
      DimensionLine dimensionLine0 = new DimensionLine((-738.3041F), (-738.3041F), (-738.3041F), (-738.3041F), (-273.2F));
      assertNotNull(dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-273.2F), dimensionLine0.getOffset(), 0.01F);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertNotNull(dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-273.2F), dimensionLine0.getOffset(), 0.01F);
      assertEquals((-273.2F), dimensionLine1.getOffset(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getLength(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      Level level0 = dimensionLine1.getLevel();
      assertNull(level0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-273.2F), dimensionLine0.getOffset(), 0.01F);
      assertEquals((-273.2F), dimensionLine1.getOffset(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getLength(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      room1.setLevel((Level) null);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room1.getCeilingColor());
      assertEquals(3, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getFloorColor());
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(3, floatArray0.length);
      
      home0.addRoom(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(room1.getCeilingColor());
      assertEquals(3, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getFloorColor());
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3, floatArray0.length);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertNotNull(collection0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertNotNull(list0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(list0.contains(room1));
      assertFalse(list0.contains(room0));
      
      List<Level> list1 = home0.getLevels();
      assertNotNull(list1);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list2 = home0.getStoredCameras();
      assertNotNull(list2);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertNotNull(camera0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteRoom(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(room1.getCeilingColor());
      assertEquals(3, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getFloorColor());
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Home home0 = new Home((-5173.4766F));
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home1.getCamera();
      assertNotNull(camera0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.addLevelsListener(collectionListener0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home1.isFurnitureDescendingSorted();
      assertFalse(boolean0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine((-2199.7239F), 0.0F, 0.0F, 0.0F, (-2199.7239F));
      assertNotNull(dimensionLine0);
      assertEquals((-2199.7239F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2199.7239F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-2199.7239F), dimensionLine0.getXStart(), 0.01F);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertNotNull(dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals((-2199.7239F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2199.7239F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-2199.7239F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(2199.7239F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-2199.7239F), dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-2199.7239F), dimensionLine1.getXStart(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      home0.deleteDimensionLine(dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals((-2199.7239F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2199.7239F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-2199.7239F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(2199.7239F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-2199.7239F), dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-2199.7239F), dimensionLine1.getXStart(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine2 = new DimensionLine(2794.703F, (-1319.62F), (-2199.7239F), 0.0F, 0.0F);
      assertNotNull(dimensionLine2);
      assertEquals((-2199.7239F), dimensionLine2.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine2.getOffset(), 0.01F);
      assertEquals((-1319.62F), dimensionLine2.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine2.getYEnd(), 0.01F);
      assertEquals(5165.82F, dimensionLine2.getLength(), 0.01F);
      assertEquals(2794.703F, dimensionLine2.getXStart(), 0.01F);
      assertFalse(dimensionLine2.equals((Object)dimensionLine1));
      assertFalse(dimensionLine2.equals((Object)dimensionLine0));
      
      boolean boolean0 = dimensionLine2.intersectsRectangle((-1319.62F), 0.0F, 0.0F, (-1998.38F));
      assertTrue(boolean0);
      assertNotSame(dimensionLine2, dimensionLine1);
      assertNotSame(dimensionLine2, dimensionLine0);
      assertEquals((-2199.7239F), dimensionLine2.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine2.getOffset(), 0.01F);
      assertEquals((-1319.62F), dimensionLine2.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine2.getYEnd(), 0.01F);
      assertEquals(5165.82F, dimensionLine2.getLength(), 0.01F);
      assertEquals(2794.703F, dimensionLine2.getXStart(), 0.01F);
      assertFalse(dimensionLine2.equals((Object)dimensionLine1));
      assertFalse(dimensionLine2.equals((Object)dimensionLine0));
      
      boolean boolean1 = dimensionLine2.intersectsRectangle(802.8F, (-1998.38F), (-288.05325F), 0.0F);
      assertTrue(boolean1);
      assertNotSame(dimensionLine2, dimensionLine1);
      assertNotSame(dimensionLine2, dimensionLine0);
      assertEquals((-2199.7239F), dimensionLine2.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine2.getOffset(), 0.01F);
      assertEquals((-1319.62F), dimensionLine2.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine2.getYEnd(), 0.01F);
      assertEquals(5165.82F, dimensionLine2.getLength(), 0.01F);
      assertEquals(2794.703F, dimensionLine2.getXStart(), 0.01F);
      assertFalse(dimensionLine2.equals((Object)dimensionLine1));
      assertFalse(dimensionLine2.equals((Object)dimensionLine0));
      assertTrue(boolean1 == boolean0);
      
      DimensionLine dimensionLine3 = dimensionLine2.clone();
      assertNotNull(dimensionLine3);
      assertNotSame(dimensionLine2, dimensionLine3);
      assertNotSame(dimensionLine2, dimensionLine1);
      assertNotSame(dimensionLine2, dimensionLine0);
      assertNotSame(dimensionLine3, dimensionLine1);
      assertNotSame(dimensionLine3, dimensionLine0);
      assertNotSame(dimensionLine3, dimensionLine2);
      assertEquals((-2199.7239F), dimensionLine2.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine2.getOffset(), 0.01F);
      assertEquals((-1319.62F), dimensionLine2.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine2.getYEnd(), 0.01F);
      assertEquals(5165.82F, dimensionLine2.getLength(), 0.01F);
      assertEquals(2794.703F, dimensionLine2.getXStart(), 0.01F);
      assertEquals((-1319.62F), dimensionLine3.getYStart(), 0.01F);
      assertEquals(2794.703F, dimensionLine3.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine3.getYEnd(), 0.01F);
      assertEquals(5165.82F, dimensionLine3.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine3.getOffset(), 0.01F);
      assertEquals((-2199.7239F), dimensionLine3.getXEnd(), 0.01F);
      assertFalse(dimensionLine2.equals((Object)dimensionLine1));
      assertFalse(dimensionLine2.equals((Object)dimensionLine0));
      assertFalse(dimensionLine3.equals((Object)dimensionLine1));
      assertFalse(dimensionLine3.equals((Object)dimensionLine0));
      assertFalse(dimensionLine3.equals((Object)dimensionLine2));
      
      dimensionLine2.setXEnd((-1319.62F));
      assertNotSame(dimensionLine2, dimensionLine3);
      assertNotSame(dimensionLine2, dimensionLine1);
      assertNotSame(dimensionLine2, dimensionLine0);
      assertEquals(0.0F, dimensionLine2.getOffset(), 0.01F);
      assertEquals((-1319.62F), dimensionLine2.getYStart(), 0.01F);
      assertEquals(4320.7695F, dimensionLine2.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine2.getYEnd(), 0.01F);
      assertEquals(2794.703F, dimensionLine2.getXStart(), 0.01F);
      assertEquals((-1319.62F), dimensionLine2.getXEnd(), 0.01F);
      assertFalse(dimensionLine2.equals((Object)dimensionLine3));
      assertFalse(dimensionLine2.equals((Object)dimensionLine1));
      assertFalse(dimensionLine2.equals((Object)dimensionLine0));
      
      DimensionLine dimensionLine4 = (DimensionLine)dimensionLine3.clone();
      assertNotNull(dimensionLine4);
      assertNotSame(dimensionLine2, dimensionLine3);
      assertNotSame(dimensionLine2, dimensionLine1);
      assertNotSame(dimensionLine2, dimensionLine0);
      assertNotSame(dimensionLine2, dimensionLine4);
      assertNotSame(dimensionLine3, dimensionLine1);
      assertNotSame(dimensionLine3, dimensionLine0);
      assertNotSame(dimensionLine3, dimensionLine2);
      assertNotSame(dimensionLine3, dimensionLine4);
      assertNotSame(dimensionLine4, dimensionLine0);
      assertNotSame(dimensionLine4, dimensionLine2);
      assertNotSame(dimensionLine4, dimensionLine3);
      assertNotSame(dimensionLine4, dimensionLine1);
      assertEquals(0.0F, dimensionLine2.getOffset(), 0.01F);
      assertEquals((-1319.62F), dimensionLine2.getYStart(), 0.01F);
      assertEquals(4320.7695F, dimensionLine2.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine2.getYEnd(), 0.01F);
      assertEquals(2794.703F, dimensionLine2.getXStart(), 0.01F);
      assertEquals((-1319.62F), dimensionLine2.getXEnd(), 0.01F);
      assertEquals((-1319.62F), dimensionLine3.getYStart(), 0.01F);
      assertEquals(2794.703F, dimensionLine3.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine3.getYEnd(), 0.01F);
      assertEquals(5165.82F, dimensionLine3.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine3.getOffset(), 0.01F);
      assertEquals((-2199.7239F), dimensionLine3.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine4.getYEnd(), 0.01F);
      assertEquals(5165.82F, dimensionLine4.getLength(), 0.01F);
      assertEquals(2794.703F, dimensionLine4.getXStart(), 0.01F);
      assertEquals((-2199.7239F), dimensionLine4.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine4.getOffset(), 0.01F);
      assertEquals((-1319.62F), dimensionLine4.getYStart(), 0.01F);
      assertFalse(dimensionLine2.equals((Object)dimensionLine3));
      assertFalse(dimensionLine2.equals((Object)dimensionLine1));
      assertFalse(dimensionLine2.equals((Object)dimensionLine0));
      assertFalse(dimensionLine3.equals((Object)dimensionLine1));
      assertFalse(dimensionLine3.equals((Object)dimensionLine0));
      assertFalse(dimensionLine3.equals((Object)dimensionLine2));
      assertFalse(dimensionLine4.equals((Object)dimensionLine0));
      assertFalse(dimensionLine4.equals((Object)dimensionLine2));
      assertFalse(dimensionLine4.equals((Object)dimensionLine3));
      assertFalse(dimensionLine4.equals((Object)dimensionLine1));
      
      home0.deselectItem(dimensionLine4);
      assertNotSame(dimensionLine2, dimensionLine3);
      assertNotSame(dimensionLine2, dimensionLine1);
      assertNotSame(dimensionLine2, dimensionLine0);
      assertNotSame(dimensionLine2, dimensionLine4);
      assertNotSame(dimensionLine3, dimensionLine1);
      assertNotSame(dimensionLine3, dimensionLine0);
      assertNotSame(dimensionLine3, dimensionLine2);
      assertNotSame(dimensionLine3, dimensionLine4);
      assertNotSame(dimensionLine4, dimensionLine0);
      assertNotSame(dimensionLine4, dimensionLine2);
      assertNotSame(dimensionLine4, dimensionLine3);
      assertNotSame(dimensionLine4, dimensionLine1);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(0.0F, dimensionLine2.getOffset(), 0.01F);
      assertEquals((-1319.62F), dimensionLine2.getYStart(), 0.01F);
      assertEquals(4320.7695F, dimensionLine2.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine2.getYEnd(), 0.01F);
      assertEquals(2794.703F, dimensionLine2.getXStart(), 0.01F);
      assertEquals((-1319.62F), dimensionLine2.getXEnd(), 0.01F);
      assertEquals((-1319.62F), dimensionLine3.getYStart(), 0.01F);
      assertEquals(2794.703F, dimensionLine3.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine3.getYEnd(), 0.01F);
      assertEquals(5165.82F, dimensionLine3.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine3.getOffset(), 0.01F);
      assertEquals((-2199.7239F), dimensionLine3.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine4.getYEnd(), 0.01F);
      assertEquals(5165.82F, dimensionLine4.getLength(), 0.01F);
      assertEquals(2794.703F, dimensionLine4.getXStart(), 0.01F);
      assertEquals((-2199.7239F), dimensionLine4.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine4.getOffset(), 0.01F);
      assertEquals((-1319.62F), dimensionLine4.getYStart(), 0.01F);
      assertFalse(dimensionLine2.equals((Object)dimensionLine3));
      assertFalse(dimensionLine2.equals((Object)dimensionLine1));
      assertFalse(dimensionLine2.equals((Object)dimensionLine0));
      assertFalse(dimensionLine2.equals((Object)dimensionLine4));
      assertFalse(dimensionLine3.equals((Object)dimensionLine1));
      assertFalse(dimensionLine3.equals((Object)dimensionLine0));
      assertFalse(dimensionLine3.equals((Object)dimensionLine2));
      assertFalse(dimensionLine3.equals((Object)dimensionLine4));
      assertFalse(dimensionLine4.equals((Object)dimensionLine0));
      assertFalse(dimensionLine4.equals((Object)dimensionLine2));
      assertFalse(dimensionLine4.equals((Object)dimensionLine3));
      assertFalse(dimensionLine4.equals((Object)dimensionLine1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        Home.getLevelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list0 = home0.getStoredCameras();
      assertNotNull(list0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setStoredCameras(list0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(1776.4973F, 3592.348F, 3592.348F, 3700L, 3592.348F, 1746.147F);
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1776.4973F, wall0.getXStart(), 0.01F);
      assertEquals(1819.0388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2684.4226F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3646.1738F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1746.147F, wall0.getHeight(), 0.01F);
      assertEquals(1819.0388F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3592.348F, wall0.getXEnd(), 0.01F);
      assertEquals(3592.348F, wall0.getYStart(), 0.01F);
      assertEquals(3592.348F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1776.4973F, wall0.getXStart(), 0.01F);
      assertEquals(1819.0388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2684.4226F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3646.1738F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1746.147F, wall0.getHeight(), 0.01F);
      assertEquals(1819.0388F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3592.348F, wall0.getXEnd(), 0.01F);
      assertEquals(3592.348F, wall0.getYStart(), 0.01F);
      assertEquals(3592.348F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      Wall wall1 = wall0.getWallAtStart();
      assertNull(wall1);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1776.4973F, wall0.getXStart(), 0.01F);
      assertEquals(1819.0388F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2684.4226F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3646.1738F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1746.147F, wall0.getHeight(), 0.01F);
      assertEquals(1819.0388F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3592.348F, wall0.getXEnd(), 0.01F);
      assertEquals(3592.348F, wall0.getYStart(), 0.01F);
      assertEquals(3592.348F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      // Undeclared exception!
      try { 
        home0.deleteWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.PRICE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Class<Room> class0 = Room.class;
      List<Room> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<DimensionLine> list1 = Home.getDimensionLinesSubList(list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<Wall> list2 = Home.getWallsSubList(list0);
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      home0.setSelectedLevel((Level) null);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setPrint((HomePrint) null);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = new Long(3700L);
      assertEquals(3700L, long0);
      
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Label) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        Home.duplicate(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(homePrint0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall((-1808.0F), (-1390.0F), 0.0F, 0.0F, 0.19634955F, 158.20833F);
      assertNotNull(wall0);
      assertEquals(0.19634955F, wall0.getThickness(), 0.01F);
      assertEquals((-904.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2280.5623F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2280.5623F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1390.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1808.0F), wall0.getXStart(), 0.01F);
      assertEquals(158.20833F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-695.0F), wall0.getYArcCircleCenter(), 0.01F);
      
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      float[][] floatArray0 = new float[8][6];
      float[] floatArray1 = new float[10];
      floatArray1[0] = (-1808.0F);
      floatArray1[1] = 1628.9F;
      floatArray1[2] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = (-1390.0F);
      floatArray2[0] = 0.19634955F;
      floatArray2[5] = (-1808.0F);
      floatArray2[7] = 0.0F;
      floatArray2[7] = (-1808.0F);
      floatArray2[8] = (-1808.0F);
      float[] floatArray3 = new float[8];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 0.19634955F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray3[3] = (-1390.0F);
      floatArray3[4] = 0.0F;
      floatArray3[5] = (-1808.0F);
      floatArray3[6] = 3540.39F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[6];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 158.20833F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-1808.0F);
      floatArray4[3] = 0.19634955F;
      floatArray4[4] = 0.0F;
      floatArray4[5] = 0.19634955F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray5[0] = 1628.9F;
      floatArray5[1] = 0.19634955F;
      floatArray5[2] = 3540.39F;
      floatArray5[3] = 0.0F;
      floatArray5[4] = 0.0F;
      floatArray5[5] = (float) 3700L;
      floatArray5[6] = 0.0F;
      floatArray5[7] = (float) 3700L;
      floatArray5[8] = 1628.9F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray3));
      
      floatArray6[0] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[1];
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray5));
      
      floatArray7[0] = (-1808.0F);
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[4];
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray3));
      assertFalse(floatArray8.equals((Object)floatArray2));
      assertFalse(floatArray8.equals((Object)floatArray5));
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray7));
      
      floatArray8[0] = 158.20833F;
      floatArray8[1] = 0.0F;
      floatArray8[2] = 3540.39F;
      floatArray8[3] = (float) 3700L;
      floatArray0[7] = floatArray8;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-89.54999F), room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(8, floatArray0.length);
      
      boolean boolean0 = linkedList0.add(room0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals((-89.54999F), room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(linkedList0.contains(room0));
      assertEquals(8, floatArray0.length);
      
      List<Room> list0 = Home.getRoomsSubList(linkedList0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(room0));
      assertTrue(list0.contains(room0));
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.19634955F, wall0.getThickness(), 0.01F);
      assertEquals((-904.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2280.5623F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2280.5623F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1390.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1808.0F), wall0.getXStart(), 0.01F);
      assertEquals(158.20833F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-695.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(158.20833F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1808.0F), wall1.getXStart(), 0.01F);
      assertEquals(2280.5623F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1390.0F), wall1.getYStart(), 0.01F);
      assertEquals(2280.5623F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.19634955F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-904.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-695.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = (Wall)wall1.clone();
      assertNotNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.19634955F, wall0.getThickness(), 0.01F);
      assertEquals((-904.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2280.5623F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2280.5623F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1390.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1808.0F), wall0.getXStart(), 0.01F);
      assertEquals(158.20833F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-695.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(158.20833F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1808.0F), wall1.getXStart(), 0.01F);
      assertEquals(2280.5623F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1390.0F), wall1.getYStart(), 0.01F);
      assertEquals(2280.5623F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.19634955F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-904.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-695.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1390.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2280.5623F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-695.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-1808.0F), wall2.getXStart(), 0.01F);
      assertEquals((-904.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(158.20833F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(2280.5623F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.19634955F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      home0.setRecovered(true);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(false);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home.Property home_Property0 = Home.Property.FURNITURE_DESCENDING_SORTED;
      home0.addPropertyChangeListener(home_Property0, (PropertyChangeListener) null);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        Home.duplicate((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertNotNull(list0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.PRICE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Compass compass0 = new Compass(0.0F, 0.0F, 0.0F);
      assertNotNull(compass0);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      
      Compass compass1 = compass0.clone();
      assertNotNull(compass1);
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertEquals(0.0F, compass1.getX(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(0.0F, compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getY(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertFalse(compass1.equals((Object)compass0));
      
      Compass compass2 = compass1.clone();
      assertNotNull(compass2);
      assertNotSame(compass0, compass1);
      assertNotSame(compass0, compass2);
      assertNotSame(compass1, compass2);
      assertNotSame(compass1, compass0);
      assertNotSame(compass2, compass1);
      assertNotSame(compass2, compass0);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertEquals(0.0F, compass1.getX(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(0.0F, compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getY(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertEquals(0.0F, compass2.getLongitude(), 0.01F);
      assertEquals(0.0F, compass2.getX(), 0.01F);
      assertEquals(0.0F, compass2.getDiameter(), 0.01F);
      assertEquals(0.0F, compass2.getY(), 0.01F);
      assertEquals(0.8982628F, compass2.getLatitude(), 0.01F);
      assertEquals("GMT", compass2.getTimeZone());
      assertEquals(0.0F, compass2.getNorthDirection(), 0.01F);
      assertTrue(compass2.isVisible());
      assertFalse(compass0.equals((Object)compass1));
      assertFalse(compass1.equals((Object)compass0));
      assertFalse(compass2.equals((Object)compass1));
      assertFalse(compass2.equals((Object)compass0));
      
      boolean boolean0 = linkedList0.add(compass2);
      assertTrue(boolean0);
      assertNotSame(compass0, compass1);
      assertNotSame(compass0, compass2);
      assertNotSame(compass1, compass2);
      assertNotSame(compass1, compass0);
      assertNotSame(compass2, compass1);
      assertNotSame(compass2, compass0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertEquals(0.0F, compass1.getX(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(0.0F, compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getY(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertEquals(0.0F, compass2.getLongitude(), 0.01F);
      assertEquals(0.0F, compass2.getX(), 0.01F);
      assertEquals(0.0F, compass2.getDiameter(), 0.01F);
      assertEquals(0.0F, compass2.getY(), 0.01F);
      assertEquals(0.8982628F, compass2.getLatitude(), 0.01F);
      assertEquals("GMT", compass2.getTimeZone());
      assertEquals(0.0F, compass2.getNorthDirection(), 0.01F);
      assertTrue(compass2.isVisible());
      assertFalse(compass0.equals((Object)compass1));
      assertFalse(compass0.equals((Object)compass2));
      assertFalse(compass1.equals((Object)compass2));
      assertFalse(compass1.equals((Object)compass0));
      assertFalse(compass2.equals((Object)compass1));
      assertFalse(compass2.equals((Object)compass0));
      assertFalse(linkedList0.contains(compass1));
      assertTrue(linkedList0.contains(compass2));
      
      Class<Room> class0 = Room.class;
      List<Room> list1 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list1);
      assertEquals(1, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(linkedList0.contains(compass1));
      assertTrue(linkedList0.contains(compass2));
      
      List<DimensionLine> list2 = Home.getDimensionLinesSubList(list1);
      assertNotNull(list2);
      assertEquals(1, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(linkedList0.contains(compass1));
      assertTrue(linkedList0.contains(compass2));
      
      List<Wall> list3 = Home.getWallsSubList(list1);
      assertNotNull(list3);
      assertEquals(1, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertFalse(linkedList0.contains(compass1));
      assertTrue(linkedList0.contains(compass2));
      
      home0.setSelectedLevel((Level) null);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Home home0 = new Home((-5173.4766F));
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home1.getCamera();
      assertNotNull(camera0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.addLevelsListener(collectionListener0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        home1.deleteDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float float0 = 0.0F;
      Home home0 = new Home(0.0F);
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Class<Integer> class0 = Integer.class;
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(class0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource 
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Label label0 = new Label("com.eteks.sweethome3d.model.Room$Property", 3700L, 3700L);
      assertNotNull(label0);
      assertEquals("com.eteks.sweethome3d.model.Room$Property", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      
      home0.deleteLabel(label0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals("com.eteks.sweethome3d.model.Room$Property", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Home home0 = new Home(1264.5703F);
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1264.5703F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<DimensionLine> list0 = Home.getDimensionLinesSubList(linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Label> list1 = Home.getLabelsSubList(list0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      LinkedList<HomeFurnitureGroup> linkedList1 = new LinkedList<HomeFurnitureGroup>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      Class<DimensionLine> class0 = DimensionLine.class;
      List<DimensionLine> list2 = Home.getSubList((List<? extends Selectable>) linkedList1, class0);
      assertNotNull(list2);
      assertNotSame(list2, list0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list2.equals((Object)list0));
      
      List<DimensionLine> list3 = Home.getDimensionLinesSubList(list2);
      assertNotNull(list3);
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      
      Class<HomeDoorOrWindow> class1 = HomeDoorOrWindow.class;
      List<HomeDoorOrWindow> list4 = Home.getSubList((List<? extends Selectable>) list3, class1);
      assertNotNull(list4);
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      
      List<Wall> list5 = Home.getWallsSubList(list4);
      assertNotNull(list5);
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertEquals(0, list5.size());
      assertTrue(list5.isEmpty());
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1264.5703F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isRecovered());
      assertEquals(1264.5703F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home1.getObserverCamera();
      assertNotNull(observerCamera0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1264.5703F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isRecovered());
      assertEquals(1264.5703F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNull(observerCamera0.getName());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list6 = Home.duplicate(list2);
      assertNotNull(list6);
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list6.isEmpty());
      assertEquals(0, list6.size());
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list3));
      
      List<Level> list7 = home1.getLevels();
      assertNotNull(list7);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1264.5703F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isRecovered());
      assertEquals(1264.5703F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(0, list7.size());
      assertTrue(list7.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home2 = new Home();
      assertNotNull(home2);
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isModified());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home2.addLevelsListener((CollectionListener<Level>) null);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isModified());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[3][7];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-738.3041F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-738.3041F);
      floatArray2[1] = (-738.3041F);
      floatArray2[2] = (-738.3041F);
      floatArray2[3] = (-738.3041F);
      floatArray2[4] = (-738.3041F);
      floatArray2[5] = (-738.3041F);
      floatArray2[6] = (-738.3041F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray0[2] = floatArray3;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, floatArray0.length);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertFalse(room1.equals((Object)room0));
      assertEquals(3, floatArray0.length);
      
      DimensionLine dimensionLine0 = new DimensionLine((-738.3041F), (-738.3041F), (-738.3041F), (-738.3041F), (-273.2F));
      assertNotNull(dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-273.2F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertNotNull(dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-273.2F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXStart(), 0.01F);
      assertEquals((-273.2F), dimensionLine1.getOffset(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      Level level0 = dimensionLine1.getLevel();
      assertNull(level0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-273.2F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXStart(), 0.01F);
      assertEquals((-273.2F), dimensionLine1.getOffset(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      room1.setLevel((Level) null);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(3, floatArray0.length);
      
      Room room2 = room1.clone();
      assertNotNull(room2);
      assertNotSame(room0, room2);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertNotSame(room1, room2);
      assertNotSame(room2, room0);
      assertNotSame(room2, room1);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room2.getAreaXOffset(), 0.01F);
      assertTrue(room2.isCeilingVisible());
      assertEquals(0.0F, room2.getNameAngle(), 0.01F);
      assertNull(room2.getCeilingColor());
      assertNull(room2.getFloorColor());
      assertEquals(3, room2.getPointCount());
      assertEquals((-40.0F), room2.getNameYOffset(), 0.01F);
      assertTrue(room2.isAreaVisible());
      assertEquals(0.0F, room2.getAreaAngle(), 0.01F);
      assertTrue(room2.isFloorVisible());
      assertEquals(0.0F, room2.getCeilingShininess(), 0.01F);
      assertNull(room2.getName());
      assertEquals(0.0F, room2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room2.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room2.getFloorShininess(), 0.01F);
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertFalse(room2.equals((Object)room0));
      assertFalse(room2.equals((Object)room1));
      assertEquals(3, floatArray0.length);
      
      home2.addRoom(room2);
      assertNotSame(room0, room2);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertNotSame(room1, room2);
      assertNotSame(room2, room0);
      assertNotSame(room2, room1);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room2.getAreaXOffset(), 0.01F);
      assertTrue(room2.isCeilingVisible());
      assertEquals(0.0F, room2.getNameAngle(), 0.01F);
      assertNull(room2.getCeilingColor());
      assertNull(room2.getFloorColor());
      assertEquals(3, room2.getPointCount());
      assertEquals((-40.0F), room2.getNameYOffset(), 0.01F);
      assertTrue(room2.isAreaVisible());
      assertEquals(0.0F, room2.getAreaAngle(), 0.01F);
      assertTrue(room2.isFloorVisible());
      assertEquals(0.0F, room2.getCeilingShininess(), 0.01F);
      assertNull(room2.getName());
      assertEquals(0.0F, room2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room2.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room2.getFloorShininess(), 0.01F);
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isEmpty());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isModified());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertFalse(room0.equals((Object)room2));
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertFalse(room1.equals((Object)room2));
      assertFalse(room2.equals((Object)room0));
      assertFalse(room2.equals((Object)room1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3, floatArray0.length);
      
      home2.setBasePlanLocked(false);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isEmpty());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isModified());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setFurnitureDescendingSorted(false);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1264.5703F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isRecovered());
      assertEquals(1264.5703F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BackgroundImage backgroundImage0 = new BackgroundImage((Content) null, 709.7097F, 0.0F, 709.7097F, 34.052223F, (-929.26654F), 0.7853982F, 5.4977875F, false);
      assertNotNull(backgroundImage0);
      assertEquals(0.7853982F, backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(34.052223F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(0.4329267F, backgroundImage0.getScale(), 0.01F);
      assertEquals(709.7097F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals((-929.26654F), backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals(709.7097F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertFalse(backgroundImage0.isVisible());
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertEquals(5.4977875F, backgroundImage0.getYOrigin(), 0.01F);
      
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setBackgroundImage(backgroundImage0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(0.7853982F, backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(34.052223F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(0.4329267F, backgroundImage0.getScale(), 0.01F);
      assertEquals(709.7097F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals((-929.26654F), backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals(709.7097F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertFalse(backgroundImage0.isVisible());
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertEquals(5.4977875F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setPrint((HomePrint) null);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.deleteRoom((Room) null);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setFurnitureDescendingSorted(true);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Wall> list0 = Home.getWallsSubList(linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      float float0 = home0.getWallHeight();
      assertEquals(250.0F, float0, 0.01F);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      // Undeclared exception!
      try { 
        Home.getSubList((List<? extends Selectable>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[3][7];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-738.3041F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-738.3041F);
      floatArray2[1] = (-738.3041F);
      floatArray2[2] = (-738.3041F);
      floatArray2[3] = (-738.3041F);
      floatArray2[4] = (-738.3041F);
      floatArray2[5] = (-738.3041F);
      floatArray2[6] = (-738.3041F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray0[2] = floatArray3;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(3, floatArray0.length);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getFloorColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertFalse(room1.equals((Object)room0));
      assertEquals(3, floatArray0.length);
      
      DimensionLine dimensionLine0 = new DimensionLine((-738.3041F), (-738.3041F), (-738.3041F), (-738.3041F), (-273.2F));
      assertNotNull(dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-273.2F), dimensionLine0.getOffset(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertNotNull(dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-273.2F), dimensionLine0.getOffset(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-273.2F), dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXStart(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      Level level0 = dimensionLine1.getLevel();
      assertNull(level0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals((-738.3041F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-273.2F), dimensionLine0.getOffset(), 0.01F);
      assertEquals((-738.3041F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYStart(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-273.2F), dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-738.3041F), dimensionLine1.getXStart(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      
      room1.setLevel((Level) null);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getFloorColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(3, floatArray0.length);
      
      home0.addRoom(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(room1.isFloorVisible());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getFloorColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3, floatArray0.length);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertNotNull(collection0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertNotNull(list0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(list0.contains(room0));
      assertTrue(list0.contains(room1));
      
      List<Level> list1 = home0.getLevels();
      assertNotNull(list1);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list2 = home0.getStoredCameras();
      assertNotNull(list2);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertNotNull(camera0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertNotNull(compass0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.NAME;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(HomePieceOfFurniture.SortableProperty.NAME, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BackgroundImage backgroundImage0 = new BackgroundImage((Content) null, 709.7097F, 0.0F, 709.7097F, 34.052223F, (-929.26654F), 0.7853982F, 5.4977875F, false);
      assertNotNull(backgroundImage0);
      assertEquals(709.7097F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertEquals(5.4977875F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(34.052223F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(0.7853982F, backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(0.4329267F, backgroundImage0.getScale(), 0.01F);
      assertFalse(backgroundImage0.isVisible());
      assertEquals(709.7097F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals((-929.26654F), backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setBackgroundImage(backgroundImage0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(709.7097F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertEquals(5.4977875F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(34.052223F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(0.7853982F, backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(0.4329267F, backgroundImage0.getScale(), 0.01F);
      assertFalse(backgroundImage0.isVisible());
      assertEquals(709.7097F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals((-929.26654F), backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setPrint((HomePrint) null);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.deleteRoom((Room) null);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      assertNotSame(home0, home1);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertNotSame(home0, home1);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setFurnitureDescendingSorted(true);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home1.getFurnitureVisibleProperties();
      assertNotNull(list0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureVisibleProperties(list0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(false);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.setFurnitureVisibleProperties((List<HomePieceOfFurniture.SortableProperty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertNull(string0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Home home0 = new Home((-5173.4766F));
      assertNotNull(home0);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = new Home(3700L);
      assertNotNull(home1);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertEquals(3700.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home2 = home1.clone();
      assertNotNull(home2);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertEquals(3700.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3700.0F, home2.getWallHeight(), 0.01F);
      assertTrue(home2.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isModified());
      assertNull(home2.getName());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home1.getCamera();
      assertNotNull(camera0);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertEquals(3700.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.Y;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home1.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertEquals(3700.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(280.46353F, 96.166664F, 1764.565F, 280.46353F, (-1.0F));
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(280.46353F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.565F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(96.166664F, wall0.getYStart(), 0.01F);
      assertEquals(1022.5142F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1495.5007F, wall0.getLength(), 0.01F);
      assertEquals(280.46353F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(188.3151F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1495.5007F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      home1.addWall(wall0);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertFalse(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertEquals(3700.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(280.46353F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1764.565F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(96.166664F, wall0.getYStart(), 0.01F);
      assertEquals(1022.5142F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1495.5007F, wall0.getLength(), 0.01F);
      assertEquals(280.46353F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(188.3151F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1495.5007F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Compass) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Class<Room> class0 = Room.class;
      List<Room> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      ListIterator<HomePieceOfFurniture> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Home home0 = new Home(linkedList0);
      assertNotNull(home0);
      assertEquals(0, linkedList0.size());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isModified();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(false);
      assertEquals(0, linkedList0.size());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Home home0 = new Home((-1822.2877F));
      assertNotNull(home0);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(homePrint0);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setPrint((HomePrint) null);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.removeSelectionListener((SelectionListener) null);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName((String) null);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list0 = new LinkedList<Selectable>();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        Home.getLevelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("");
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals("", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals("", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(false);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home0.getLabels();
      assertNotNull(collection0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<Level> class0 = Level.class;
      List<Level> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null, (-1920));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.PRICE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = new Compass(3700L, 3700L, 3700L);
      assertNotNull(compass0);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(3700.0F, compass0.getDiameter(), 0.01F);
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      
      Compass compass1 = compass0.clone();
      assertNotNull(compass1);
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(3700.0F, compass0.getDiameter(), 0.01F);
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(3700.0F, compass1.getDiameter(), 0.01F);
      assertEquals(3700.0F, compass1.getY(), 0.01F);
      assertEquals(3700.0F, compass1.getX(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertTrue(compass1.isVisible());
      assertFalse(compass1.equals((Object)compass0));
      
      Compass compass2 = home0.getCompass();
      assertNotNull(compass2);
      assertNotSame(compass2, compass0);
      assertNotSame(compass2, compass1);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(compass2.isVisible());
      assertEquals(100.0F, compass2.getDiameter(), 0.01F);
      assertEquals(50.0F, compass2.getY(), 0.01F);
      assertEquals(0.0F, compass2.getLongitude(), 0.01F);
      assertEquals((-100.0F), compass2.getX(), 0.01F);
      assertEquals(0.0F, compass2.getNorthDirection(), 0.01F);
      assertEquals(0.8982628F, compass2.getLatitude(), 0.01F);
      assertEquals("GMT", compass2.getTimeZone());
      assertFalse(compass2.equals((Object)compass0));
      assertFalse(compass2.equals((Object)compass1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(compass1));
      
      boolean boolean0 = linkedList0.add(compass1);
      assertTrue(boolean0);
      assertNotSame(compass0, compass1);
      assertNotSame(compass0, compass2);
      assertNotSame(compass1, compass0);
      assertNotSame(compass1, compass2);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(3700.0F, compass0.getDiameter(), 0.01F);
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(3700.0F, compass1.getDiameter(), 0.01F);
      assertEquals(3700.0F, compass1.getY(), 0.01F);
      assertEquals(3700.0F, compass1.getX(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(1, linkedList0.size());
      assertFalse(compass0.equals((Object)compass1));
      assertFalse(compass0.equals((Object)compass2));
      assertFalse(compass1.equals((Object)compass0));
      assertFalse(compass1.equals((Object)compass2));
      assertTrue(linkedList0.contains(compass1));
      assertFalse(linkedList0.contains(compass0));
      
      boolean boolean1 = linkedList0.add(compass0);
      assertTrue(boolean1);
      assertNotSame(compass0, compass1);
      assertNotSame(compass0, compass2);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(3700.0F, compass0.getDiameter(), 0.01F);
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(2, linkedList0.size());
      assertFalse(compass0.equals((Object)compass1));
      assertFalse(compass0.equals((Object)compass2));
      assertTrue(boolean1 == boolean0);
      assertTrue(linkedList0.contains(compass1));
      assertFalse(linkedList0.contains(compass2));
      
      LinkedList<Label> linkedList1 = new LinkedList<Label>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      boolean boolean2 = linkedList1.add((Label) null);
      assertTrue(boolean2);
      assertEquals(1, linkedList1.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertNotNull(list0);
      assertEquals(2, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedList0.contains(compass1));
      assertFalse(linkedList0.contains(compass2));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName((String) null);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home1.getCamera();
      assertNotNull(camera0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertNotSame(home0, home1);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      CollectionListener<HomePieceOfFurniture> collectionListener1 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addFurnitureListener(collectionListener1);
      assertNotSame(home0, home1);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.removeFurnitureListener(collectionListener0);
      assertNotSame(home0, home1);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeSelectionListener(selectionListener0);
      assertNotSame(home0, home1);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.deleteLevel((Level) null);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertNotNull(list0);
      assertNotSame(home0, home1);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list0 = home0.getStoredCameras();
      assertNotNull(list0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setStoredCameras(list0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("+j9i]IrFA", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("+j9i]IrFA", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("+j9i]IrFA", propertyChangeListenerProxy0);
      assertNotNull(propertyChangeListenerProxy1);
      assertEquals("+j9i]IrFA", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("+j9i]IrFA", propertyChangeListenerProxy1.getPropertyName());
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy1);
      assertNotNull(propertyChangeListenerProxy2);
      assertEquals("+j9i]IrFA", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("+j9i]IrFA", propertyChangeListenerProxy1.getPropertyName());
      assertEquals("", propertyChangeListenerProxy2.getPropertyName());
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      
      Home.Property home_Property0 = Home.Property.SELECTED_LEVEL;
      home0.addPropertyChangeListener(home_Property0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy2);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy2);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals("+j9i]IrFA", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("+j9i]IrFA", propertyChangeListenerProxy1.getPropertyName());
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list1 = home0.getFurnitureVisibleProperties();
      assertNotNull(list1);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(5, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.getObserverCamera();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Home home0 = new Home((-1808.0F));
      assertNotNull(home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Camera) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      home0.setStoredCameras(linkedList0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(1, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(homePrint0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setPrint((HomePrint) null);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Label> collectionListener1 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener1);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertNotNull(list0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setSelectedItems(list0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      Label label0 = new Label("[jyJ%", 2809.08F, 3088.5837F);
      assertNotNull(label0);
      assertEquals("[jyJ%", label0.getText());
      assertEquals(3088.5837F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(2809.08F, label0.getX(), 0.01F);
      
      label0.setX((-8.766666F));
      assertEquals((-8.766666F), label0.getX(), 0.01F);
      assertEquals("[jyJ%", label0.getText());
      assertEquals(3088.5837F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      
      home0.deleteLabel(label0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals((-8.766666F), label0.getX(), 0.01F);
      assertEquals("[jyJ%", label0.getText());
      assertEquals(3088.5837F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener2 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener2);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener3 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener3);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list1 = home0.getFurniture();
      assertNotNull(list1);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = new Home(list1);
      assertNotNull(home1);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = home1.isFurnitureDescendingSorted();
      assertFalse(boolean1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(boolean1 == boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BackgroundImage backgroundImage0 = new BackgroundImage((Content) null, 709.7097F, 0.0F, 709.7097F, 34.052223F, (-929.26654F), 0.7853982F, 5.4977875F, false);
      assertNotNull(backgroundImage0);
      assertEquals(34.052223F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(709.7097F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals(0.4329267F, backgroundImage0.getScale(), 0.01F);
      assertEquals((-929.26654F), backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals(5.4977875F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(0.7853982F, backgroundImage0.getXOrigin(), 0.01F);
      assertFalse(backgroundImage0.isVisible());
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertEquals(709.7097F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      
      Home home0 = new Home();
      assertNotNull(home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setBackgroundImage(backgroundImage0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(34.052223F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(709.7097F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals(0.4329267F, backgroundImage0.getScale(), 0.01F);
      assertEquals((-929.26654F), backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals(5.4977875F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(0.7853982F, backgroundImage0.getXOrigin(), 0.01F);
      assertFalse(backgroundImage0.isVisible());
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertEquals(709.7097F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home1.getLabels();
      assertNotNull(collection0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      List<HomePieceOfFurniture> list0 = home1.getFurniture();
      assertNotNull(list0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.addLevelsListener(collectionListener0);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setName("k");
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertEquals("k", home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(homePrint0);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list1 = home0.getStoredCameras();
      assertNotNull(list1);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      home0.setStoredCameras(list1);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeDoorOrWindow> linkedList1 = new LinkedList<HomeDoorOrWindow>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      List<DimensionLine> list2 = Home.getDimensionLinesSubList(linkedList1);
      assertNotNull(list2);
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      CollectionListener<Label> collectionListener1 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLabelsListener(collectionListener1);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean0);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = home1.isEmpty();
      assertTrue(boolean1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertEquals("k", home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(boolean1 == boolean0);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        Home.duplicate((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Home home0 = new Home((-1822.2877F));
      assertNotNull(home0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.HEIGHT;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home1.getFurnitureSortedProperty());
      assertEquals((-1822.2877F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setBackgroundImage((BackgroundImage) null);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home1.getFurnitureSortedProperty());
      assertEquals((-1822.2877F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home0.getLabels();
      assertNotNull(collection0);
      assertNotSame(home0, home1);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list0 = home1.getFurniture();
      assertNotNull(list0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home1.getFurnitureSortedProperty());
      assertEquals((-1822.2877F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setName("WN)");
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals("WN)", home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home1.getFurnitureSortedProperty());
      assertEquals((-1822.2877F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(homePrint0);
      assertNotSame(home0, home1);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list1 = home0.getStoredCameras();
      assertNotNull(list1);
      assertNotSame(home0, home1);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      home1.setStoredCameras(list1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals("WN)", home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home1.getFurnitureSortedProperty());
      assertEquals((-1822.2877F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeDoorOrWindow> linkedList2 = new LinkedList<HomeDoorOrWindow>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      
      List<DimensionLine> list2 = Home.getDimensionLinesSubList(linkedList2);
      assertNotNull(list2);
      assertEquals(0, linkedList2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLabelsListener(collectionListener0);
      assertNotSame(home0, home1);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home1.isEmpty();
      assertTrue(boolean0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1822.2877F), home0.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals("WN)", home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home1.getFurnitureSortedProperty());
      assertEquals((-1822.2877F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Home home0 = new Home((-5173.4766F));
      assertNotNull(home0);
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera.Lens camera_Lens0 = Camera.Lens.SPHERICAL;
      Camera camera0 = new Camera(4022.363F, 0.0F, 0.0F, 3700L, 3700L, 4022.363F, 0L, camera_Lens0);
      assertNotNull(camera0);
      assertEquals(4022.363F, camera0.getX(), 0.01F);
      assertEquals(3700.0F, camera0.getYaw(), 0.01F);
      assertEquals(3700.0F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.0F, camera0.getY(), 0.01F);
      assertEquals(0.0F, camera0.getZ(), 0.01F);
      assertEquals(4022.363F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.SPHERICAL, camera0.getLens());
      assertEquals(0L, camera0.getTime());
      
      Camera camera1 = new Camera(909.1838F, 36.763054F, 377.5206F, 0.0F, 2322.5908F, 909.1838F);
      assertNotNull(camera1);
      assertEquals(36.763054F, camera1.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(909.1838F, camera1.getX(), 0.01F);
      assertEquals(377.5206F, camera1.getZ(), 0.01F);
      assertEquals(0.0F, camera1.getYaw(), 0.01F);
      assertEquals(2322.5908F, camera1.getPitch(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(909.1838F, camera1.getFieldOfView(), 0.01F);
      assertFalse(camera1.equals((Object)camera0));
      
      camera1.setX(0.0F);
      assertNotSame(camera1, camera0);
      assertEquals(36.763054F, camera1.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(377.5206F, camera1.getZ(), 0.01F);
      assertEquals(0.0F, camera1.getX(), 0.01F);
      assertEquals(0.0F, camera1.getYaw(), 0.01F);
      assertEquals(2322.5908F, camera1.getPitch(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(909.1838F, camera1.getFieldOfView(), 0.01F);
      assertFalse(camera1.equals((Object)camera0));
      
      Camera camera2 = camera1.clone();
      assertNotNull(camera2);
      assertNotSame(camera1, camera2);
      assertNotSame(camera1, camera0);
      assertNotSame(camera2, camera1);
      assertNotSame(camera2, camera0);
      assertEquals(36.763054F, camera1.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(377.5206F, camera1.getZ(), 0.01F);
      assertEquals(0.0F, camera1.getX(), 0.01F);
      assertEquals(0.0F, camera1.getYaw(), 0.01F);
      assertEquals(2322.5908F, camera1.getPitch(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(909.1838F, camera1.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera2.getLens());
      assertEquals(377.5206F, camera2.getZ(), 0.01F);
      assertEquals(0.0F, camera2.getYaw(), 0.01F);
      assertNull(camera2.getName());
      assertEquals(0.0F, camera2.getX(), 0.01F);
      assertEquals(1392409281320L, camera2.getTime());
      assertEquals(909.1838F, camera2.getFieldOfView(), 0.01F);
      assertEquals(36.763054F, camera2.getY(), 0.01F);
      assertEquals(2322.5908F, camera2.getPitch(), 0.01F);
      assertFalse(camera1.equals((Object)camera0));
      assertFalse(camera2.equals((Object)camera1));
      assertFalse(camera2.equals((Object)camera0));
      
      Camera camera3 = camera2.clone();
      assertNotNull(camera3);
      assertNotSame(camera1, camera2);
      assertNotSame(camera1, camera3);
      assertNotSame(camera1, camera0);
      assertNotSame(camera2, camera3);
      assertNotSame(camera2, camera1);
      assertNotSame(camera2, camera0);
      assertNotSame(camera3, camera2);
      assertNotSame(camera3, camera0);
      assertNotSame(camera3, camera1);
      assertEquals(36.763054F, camera1.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(377.5206F, camera1.getZ(), 0.01F);
      assertEquals(0.0F, camera1.getX(), 0.01F);
      assertEquals(0.0F, camera1.getYaw(), 0.01F);
      assertEquals(2322.5908F, camera1.getPitch(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(909.1838F, camera1.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera2.getLens());
      assertEquals(377.5206F, camera2.getZ(), 0.01F);
      assertEquals(0.0F, camera2.getYaw(), 0.01F);
      assertNull(camera2.getName());
      assertEquals(0.0F, camera2.getX(), 0.01F);
      assertEquals(1392409281320L, camera2.getTime());
      assertEquals(909.1838F, camera2.getFieldOfView(), 0.01F);
      assertEquals(36.763054F, camera2.getY(), 0.01F);
      assertEquals(2322.5908F, camera2.getPitch(), 0.01F);
      assertEquals(36.763054F, camera3.getY(), 0.01F);
      assertEquals(0.0F, camera3.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera3.getLens());
      assertNull(camera3.getName());
      assertEquals(2322.5908F, camera3.getPitch(), 0.01F);
      assertEquals(377.5206F, camera3.getZ(), 0.01F);
      assertEquals(1392409281320L, camera3.getTime());
      assertEquals(909.1838F, camera3.getFieldOfView(), 0.01F);
      assertEquals(0.0F, camera3.getYaw(), 0.01F);
      assertFalse(camera1.equals((Object)camera2));
      assertFalse(camera1.equals((Object)camera0));
      assertFalse(camera2.equals((Object)camera1));
      assertFalse(camera2.equals((Object)camera0));
      assertFalse(camera3.equals((Object)camera2));
      assertFalse(camera3.equals((Object)camera0));
      assertFalse(camera3.equals((Object)camera1));
      
      camera0.setCamera(camera3);
      assertNotSame(camera0, camera2);
      assertNotSame(camera0, camera1);
      assertNotSame(camera0, camera3);
      assertNotSame(camera1, camera2);
      assertNotSame(camera1, camera3);
      assertNotSame(camera1, camera0);
      assertNotSame(camera2, camera3);
      assertNotSame(camera2, camera1);
      assertNotSame(camera2, camera0);
      assertNotSame(camera3, camera2);
      assertNotSame(camera3, camera0);
      assertNotSame(camera3, camera1);
      assertEquals(909.1838F, camera0.getFieldOfView(), 0.01F);
      assertEquals(2322.5908F, camera0.getPitch(), 0.01F);
      assertEquals(36.763054F, camera0.getY(), 0.01F);
      assertEquals(377.5206F, camera0.getZ(), 0.01F);
      assertEquals(0.0F, camera0.getYaw(), 0.01F);
      assertEquals(0.0F, camera0.getX(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(Camera.Lens.SPHERICAL, camera0.getLens());
      assertEquals(0L, camera0.getTime());
      assertEquals(36.763054F, camera1.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(377.5206F, camera1.getZ(), 0.01F);
      assertEquals(0.0F, camera1.getX(), 0.01F);
      assertEquals(0.0F, camera1.getYaw(), 0.01F);
      assertEquals(2322.5908F, camera1.getPitch(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(909.1838F, camera1.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera2.getLens());
      assertEquals(377.5206F, camera2.getZ(), 0.01F);
      assertEquals(0.0F, camera2.getYaw(), 0.01F);
      assertNull(camera2.getName());
      assertEquals(0.0F, camera2.getX(), 0.01F);
      assertEquals(1392409281320L, camera2.getTime());
      assertEquals(909.1838F, camera2.getFieldOfView(), 0.01F);
      assertEquals(36.763054F, camera2.getY(), 0.01F);
      assertEquals(2322.5908F, camera2.getPitch(), 0.01F);
      assertEquals(36.763054F, camera3.getY(), 0.01F);
      assertEquals(0.0F, camera3.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera3.getLens());
      assertNull(camera3.getName());
      assertEquals(2322.5908F, camera3.getPitch(), 0.01F);
      assertEquals(377.5206F, camera3.getZ(), 0.01F);
      assertEquals(1392409281320L, camera3.getTime());
      assertEquals(909.1838F, camera3.getFieldOfView(), 0.01F);
      assertEquals(0.0F, camera3.getYaw(), 0.01F);
      assertFalse(camera0.equals((Object)camera2));
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera0.equals((Object)camera3));
      assertFalse(camera1.equals((Object)camera2));
      assertFalse(camera1.equals((Object)camera3));
      assertFalse(camera1.equals((Object)camera0));
      assertFalse(camera2.equals((Object)camera3));
      assertFalse(camera2.equals((Object)camera1));
      assertFalse(camera2.equals((Object)camera0));
      assertFalse(camera3.equals((Object)camera2));
      assertFalse(camera3.equals((Object)camera0));
      assertFalse(camera3.equals((Object)camera1));
      
      Camera camera4 = camera0.clone();
      assertNotNull(camera4);
      assertNotSame(camera0, camera2);
      assertNotSame(camera0, camera1);
      assertNotSame(camera0, camera4);
      assertNotSame(camera0, camera3);
      assertNotSame(camera4, camera3);
      assertNotSame(camera4, camera0);
      assertNotSame(camera4, camera1);
      assertNotSame(camera4, camera2);
      assertEquals(909.1838F, camera0.getFieldOfView(), 0.01F);
      assertEquals(2322.5908F, camera0.getPitch(), 0.01F);
      assertEquals(36.763054F, camera0.getY(), 0.01F);
      assertEquals(377.5206F, camera0.getZ(), 0.01F);
      assertEquals(0.0F, camera0.getYaw(), 0.01F);
      assertEquals(0.0F, camera0.getX(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(Camera.Lens.SPHERICAL, camera0.getLens());
      assertEquals(0L, camera0.getTime());
      assertEquals(0L, camera4.getTime());
      assertEquals(0.0F, camera4.getX(), 0.01F);
      assertEquals(909.1838F, camera4.getFieldOfView(), 0.01F);
      assertEquals(36.763054F, camera4.getY(), 0.01F);
      assertNull(camera4.getName());
      assertEquals(2322.5908F, camera4.getPitch(), 0.01F);
      assertEquals(0.0F, camera4.getYaw(), 0.01F);
      assertEquals(Camera.Lens.SPHERICAL, camera4.getLens());
      assertEquals(377.5206F, camera4.getZ(), 0.01F);
      assertFalse(camera0.equals((Object)camera2));
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera0.equals((Object)camera3));
      assertFalse(camera4.equals((Object)camera3));
      assertFalse(camera4.equals((Object)camera0));
      assertFalse(camera4.equals((Object)camera1));
      assertFalse(camera4.equals((Object)camera2));
      
      home1.setCamera(camera4);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(camera0, camera2);
      assertNotSame(camera0, camera1);
      assertNotSame(camera0, camera4);
      assertNotSame(camera0, camera3);
      assertNotSame(camera4, camera3);
      assertNotSame(camera4, camera0);
      assertNotSame(camera4, camera1);
      assertNotSame(camera4, camera2);
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(909.1838F, camera0.getFieldOfView(), 0.01F);
      assertEquals(2322.5908F, camera0.getPitch(), 0.01F);
      assertEquals(36.763054F, camera0.getY(), 0.01F);
      assertEquals(377.5206F, camera0.getZ(), 0.01F);
      assertEquals(0.0F, camera0.getYaw(), 0.01F);
      assertEquals(0.0F, camera0.getX(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(Camera.Lens.SPHERICAL, camera0.getLens());
      assertEquals(0L, camera0.getTime());
      assertEquals(0L, camera4.getTime());
      assertEquals(0.0F, camera4.getX(), 0.01F);
      assertEquals(909.1838F, camera4.getFieldOfView(), 0.01F);
      assertEquals(36.763054F, camera4.getY(), 0.01F);
      assertNull(camera4.getName());
      assertEquals(2322.5908F, camera4.getPitch(), 0.01F);
      assertEquals(0.0F, camera4.getYaw(), 0.01F);
      assertEquals(Camera.Lens.SPHERICAL, camera4.getLens());
      assertEquals(377.5206F, camera4.getZ(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(camera0.equals((Object)camera2));
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera0.equals((Object)camera4));
      assertFalse(camera0.equals((Object)camera3));
      assertFalse(camera4.equals((Object)camera3));
      assertFalse(camera4.equals((Object)camera0));
      assertFalse(camera4.equals((Object)camera1));
      assertFalse(camera4.equals((Object)camera2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera5 = home1.getCamera();
      assertNotNull(camera5);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(camera5, camera2);
      assertSame(camera5, camera4);
      assertNotSame(camera5, camera0);
      assertNotSame(camera5, camera1);
      assertNotSame(camera5, camera3);
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(0L, camera5.getTime());
      assertEquals(36.763054F, camera5.getY(), 0.01F);
      assertEquals(0.0F, camera5.getX(), 0.01F);
      assertEquals(Camera.Lens.SPHERICAL, camera5.getLens());
      assertNull(camera5.getName());
      assertEquals(377.5206F, camera5.getZ(), 0.01F);
      assertEquals(2322.5908F, camera5.getPitch(), 0.01F);
      assertEquals(909.1838F, camera5.getFieldOfView(), 0.01F);
      assertEquals(0.0F, camera5.getYaw(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(camera5.equals((Object)camera2));
      assertFalse(camera5.equals((Object)camera0));
      assertFalse(camera5.equals((Object)camera1));
      assertFalse(camera5.equals((Object)camera3));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener0);
      assertNotSame(home0, home1);
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isModified();
      assertFalse(boolean0);
      assertNotSame(home0, home1);
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(false);
      assertNotSame(home0, home1);
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertNull(backgroundImage0);
      assertNotSame(home0, home1);
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setFurnitureDescendingSorted(true);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals((-5173.4766F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Home home0 = new Home((-1808.0F));
      assertNotNull(home0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertNotNull(list0);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list1 = Home.getRoomsSubList(list0);
      assertNotNull(list1);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Home home0 = new Home();
      assertNotNull(home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setVisualProperty("w$sS23Re9@ ", "w$sS23Re9@ ");
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home1.getCamera();
      assertNotNull(camera0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNotNull(homeEnvironment0);
      assertNotSame(home0, home1);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setName("n)z");
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals("n)z", home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setBasePlanLocked(true);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals("n)z", home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home1.setFurnitureDescendingSorted(true);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals("n)z", home1.getName());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Label label0 = new Label(" 4V'AW:5E+A&!6c&y", 0.01F, 3700L);
      assertNotNull(label0);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(" 4V'AW:5E+A&!6c&y", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.01F, label0.getX(), 0.01F);
      
      boolean boolean0 = linkedList0.add(label0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(" 4V'AW:5E+A&!6c&y", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.01F, label0.getX(), 0.01F);
      assertTrue(linkedList0.contains(label0));
      
      List<Room> list0 = Home.getRoomsSubList(linkedList0);
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedList0.contains(label0));
      
      Home.Property[] home_PropertyArray0 = Home.Property.values();
      assertNotNull(home_PropertyArray0);
      assertEquals(12, home_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Home home0 = new Home((-5173.4766F));
      Home home1 = home0.clone();
      home1.getCamera();
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.getCamera();
      home0.removeWallsListener(collectionListener0);
      home0.setModified(true);
      home0.getCamera();
      home1.getName();
      assertTrue(home0.isModified());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.deleteWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BackgroundImage backgroundImage0 = new BackgroundImage((Content) null, 709.7097F, 0.0F, 709.7097F, 34.052223F, (-929.26654F), 0.7853982F, 5.4977875F, false);
      Home home0 = new Home();
      Home home1 = home0.clone();
      home1.setBackgroundImage(backgroundImage0);
      home1.deleteRoom((Room) null);
      Collection<Label> collection0 = new LinkedList<Label>();
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      String string0 = "k";
      home1.setName("k");
      home0.getPrint();
      home0.getStoredCameras();
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      // Undeclared exception!
      try { 
        linkedList0.subList((-1815), 255);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1815
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Home home0 = new Home();
      home0.setRecovered(false);
      home0.setBasePlanLocked(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Home home0 = new Home();
      Wall wall0 = new Wall((-95.0F), (-95.0F), (-95.0F), (-95.0F), (-95.0F));
      wall0.move(3700L, 3700L);
      home0.addWall(wall0);
      Wall wall1 = new Wall((-3242.84F), 0.0F, 5.4977875F, 0.0F, (-3242.84F));
      wall1.setWallAtStart(wall0);
      home0.deleteWall(wall1);
      home0.getLevels();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Home home0 = new Home();
      Compass compass0 = home0.getCompass();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(compass0.isVisible());
      
      compass0.clone();
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      linkedList0.add(compass0);
      assertTrue(compass0.isVisible());
      
      Class<Room> class0 = Room.class;
      Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      Level level0 = new Level("", 3700L, 3700L, 2200.169F);
      home0.setSelectedLevel(level0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Home home0 = new Home();
      Class<Room> class0 = Room.class;
      // Undeclared exception!
      try { 
        Home.getSubList((List<? extends Selectable>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Home home0 = new Home();
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      Home home1 = new Home();
      Camera camera0 = home1.getCamera();
      Camera camera1 = camera0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      camera1.removePropertyChangeListener(propertyChangeListenerProxy0);
      home0.setCamera(camera1);
      home0.removeRoomsListener(collectionListener0);
      home0.getEnvironment();
      home0.setBasePlanLocked(true);
      home0.setFurnitureDescendingSorted(true);
      Wall wall0 = new Wall((-0.36784258F), 3700L, 0.0F, (-207.691F), (-0.36784258F));
      wall0.move(0.0F, 0.0F);
      home0.addWall(wall0);
      assertTrue(home0.isFurnitureDescendingSorted());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLabelsListener(collectionListener0);
      home0.deleteRoom((Room) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Home home0 = new Home(0.0F);
      home0.getLevels();
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Home home0 = new Home((-5173.4766F));
      Home home1 = home0.clone();
      Camera.Lens camera_Lens0 = Camera.Lens.SPHERICAL;
      Camera camera0 = new Camera(4022.363F, 0.0F, 0.0F, 0.0F, 1415.813F, 4518.8354F, 0L, camera_Lens0);
      Camera camera1 = camera0.clone();
      home1.setCamera(camera1);
      home1.getCamera();
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener0);
      home0.isModified();
      home0.setModified(false);
      home0.getBackgroundImage();
      home1.setFurnitureDescendingSorted(true);
      assertTrue(home1.isFurnitureDescendingSorted());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Home home0 = new Home((-5173.4766F));
      Home home1 = home0.clone();
      home1.getCamera();
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.Y;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      home1.getEnvironment();
      home0.setBasePlanLocked(true);
      home1.setFurnitureDescendingSorted(true);
      Wall wall0 = new Wall(0.0F, (-1648.5F), 280.46353F, 1451.693F, (-3542.6145F));
      home1.addWall(wall0);
      assertTrue(home1.isFurnitureDescendingSorted());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Home.Property.values();
      Home home0 = new Home();
      Wall wall0 = new Wall((-4471.0F), (-4471.0F), (-1390.0F), (-1390.0F), (-4471.0F), (-1390.0F));
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      Class<HomeLight> class0 = HomeLight.class;
      List<HomeLight> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      Home.getRoomsSubList(list0);
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener0);
      home0.getBackgroundImage();
      home0.getObserverCamera();
      home0.isFurnitureDescendingSorted();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Home home0 = new Home();
      Wall wall0 = new Wall((-1808.0F), (-1390.0F), 0.0F, 0.0F, 0.19634955F, 158.20833F);
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      float[][] floatArray0 = new float[8][6];
      float[] floatArray1 = new float[10];
      floatArray1[0] = (-1808.0F);
      floatArray1[1] = 1628.9F;
      floatArray1[2] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 0.0F;
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      home0.getPrint();
      home0.setPrint((HomePrint) null);
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      Home home1 = new Home(list0);
      home0.setRecovered(true);
      home0.setRecovered(true);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.WIDTH;
      home1.setVisualProperty("Xc-07iRfaAf7Mgg", homePieceOfFurniture_SortableProperty0);
      assertTrue(home0.isRecovered());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Home home0 = new Home();
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Home home0 = new Home();
      home0.isModified();
      home0.getSelectedItems();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Home home0 = new Home((-5173.4766F));
      Home home1 = home0.clone();
      home1.getCamera();
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      Compass compass0 = home1.getCompass();
      Compass compass1 = compass0.clone();
      compass1.clone();
      home0.deselectItem(compass1);
      assertTrue(compass1.isVisible());
      assertEquals((-5173.4766F), home1.getWallHeight(), 0.01F);
      assertTrue(compass0.isVisible());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Home home0 = new Home((-896.8F));
      Home home1 = home0.clone();
      home1.getObserverCamera();
      HomePieceOfFurniture homePieceOfFurniture0 = mock(HomePieceOfFurniture.class, new ViolatedAssumptionAnswer());
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      home0.setBasePlanLocked(false);
      home1.setFurnitureDescendingSorted(false);
      Wall wall0 = new Wall(1127.927F, 1451.693F, 0.0F, (-896.8F), 2221.0F);
      home0.addWall(wall0);
      assertEquals((-896.8F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.setStoredCameras((List<Camera>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BackgroundImage backgroundImage0 = new BackgroundImage((Content) null, 709.7097F, 0.0F, 709.7097F, 34.052223F, (-929.26654F), 0.7853982F, 5.4977875F, false);
      Home home0 = new Home();
      Home home1 = home0.clone();
      home1.setBackgroundImage(backgroundImage0);
      home1.getLabels();
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      String string0 = "k";
      home1.setName("k");
      home0.getPrint();
      home0.getStoredCameras();
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      // Undeclared exception!
      try { 
        linkedList0.subList((-1815), 255);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1815
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Home home0 = new Home(1264.5703F);
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      List<DimensionLine> list0 = Home.getDimensionLinesSubList(linkedList0);
      Home.getLabelsSubList(list0);
      LinkedList<HomeFurnitureGroup> linkedList1 = new LinkedList<HomeFurnitureGroup>();
      Class<DimensionLine> class0 = DimensionLine.class;
      List<DimensionLine> list1 = Home.getSubList((List<? extends Selectable>) linkedList1, class0);
      List<DimensionLine> list2 = Home.getDimensionLinesSubList(list1);
      Class<HomeDoorOrWindow> class1 = HomeDoorOrWindow.class;
      List<HomeDoorOrWindow> list3 = Home.getSubList((List<? extends Selectable>) list2, class1);
      Home.getWallsSubList(list3);
      Home home1 = home0.clone();
      home1.getObserverCamera();
      Home.duplicate(list1);
      home1.getLevels();
      String string0 = "UCS=HN";
      String string1 = "i";
      int int0 = (-1009);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        MockURL.URL("i", "i", (-1009), "i", uRLStreamHandler0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid port number :-1009
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Home home0 = new Home();
      home0.deleteRoom((Room) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      
      // Undeclared exception!
      try { 
        home0.addRoom((Room) null, (-4617));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -4617, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Home home0 = new Home();
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Home home0 = new Home();
      Home home1 = home0.clone();
      home1.getCamera();
      home0.getEnvironment();
      home1.setBasePlanLocked(true);
      Home home2 = home1.clone();
      home1.isModified();
      home2.setModified(false);
      assertTrue(home1.isBasePlanLocked());
      
      home0.isRecovered();
      home0.getLabels();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Home home0 = new Home();
      Wall wall0 = new Wall((-1808.0F), (-1390.0F), 0.0F, 0.0F, 0.19634955F, 0.0F);
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      float[][] floatArray0 = new float[8][6];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-1808.0F);
      floatArray1[1] = 1628.9F;
      floatArray1[2] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = (-1390.0F);
      floatArray2[4] = 0.19634955F;
      floatArray2[5] = (-1808.0F);
      floatArray2[6] = 0.0F;
      floatArray2[7] = (-1808.0F);
      floatArray2[8] = (-1808.0F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[0] = 0.19634955F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray3[3] = (-1390.0F);
      floatArray3[4] = 0.0F;
      floatArray3[5] = (-1808.0F);
      floatArray3[6] = 3540.39F;
      floatArray3[7] = (-1390.0F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[6];
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-1808.0F);
      floatArray4[3] = 0.19634955F;
      floatArray4[4] = 0.0F;
      floatArray4[5] = 0.19634955F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      floatArray5[0] = 1628.9F;
      floatArray5[1] = 0.19634955F;
      floatArray5[2] = 3540.39F;
      floatArray5[3] = 0.0F;
      floatArray5[4] = 0.0F;
      floatArray5[5] = (float) 3700L;
      floatArray5[6] = 0.0F;
      floatArray5[7] = (float) 3700L;
      floatArray5[8] = 1628.9F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      floatArray6[0] = 1628.9F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[1];
      floatArray7[0] = (-1808.0F);
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[4];
      floatArray8[0] = 0.0F;
      floatArray8[1] = 0.0F;
      floatArray8[2] = 3540.39F;
      floatArray8[3] = (float) 3700L;
      floatArray0[7] = floatArray8;
      Room room0 = new Room(floatArray0);
      linkedList0.add(room0);
      Home.getRoomsSubList(linkedList0);
      Wall wall1 = wall0.clone();
      wall1.clone();
      home0.setRecovered(true);
      home0.setRecovered(true);
      long long0 = home0.getVersion();
      assertTrue(home0.isRecovered());
      assertEquals(3700L, long0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Home home0 = new Home((-1808.0F));
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      home0.getEnvironment();
      home0.setBasePlanLocked(false);
      home0.setFurnitureDescendingSorted(true);
      home0.getFurnitureSortedProperty();
      assertTrue(home0.isFurnitureDescendingSorted());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Home home0 = new Home();
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      home0.setSelectedItems(list0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Home home0 = new Home();
      home0.setName(",K]d\"Y/}RQ0%gXcIV%g");
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Home home0 = new Home((-5173.4766F));
      Home home1 = home0.clone();
      List<Room> list0 = home0.getRooms();
      Home.getRoomsSubList(list0);
      home0.setBasePlanLocked(false);
      home1.setFurnitureDescendingSorted(true);
      home1.clone();
      long long0 = Home.CURRENT_VERSION;
      boolean boolean0 = home1.isEmpty();
      assertTrue(home1.isFurnitureDescendingSorted());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Home home0 = new Home(0.94604677F);
      float float0 = home0.getWallHeight();
      assertEquals(0.94604677F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Home home0 = new Home();
      home0.removeRoomsListener((CollectionListener<Room>) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getLabelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        Home.getWallsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Home home0 = new Home();
      home0.getBackgroundImage();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      
      home0.setBackgroundImage((BackgroundImage) null);
      home0.setModified(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Home home0 = new Home();
      Wall wall0 = new Wall(3700L, 0.0F, 0.0F, 3700L, 0.0F, 0.0F);
      wall0.setYStart(3700L);
      wall0.move(0.0F, (-95.0F));
      home0.addWall(wall0);
      home0.deleteWall(wall0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Home home0 = new Home();
      home0.getVersion();
      float[][] floatArray0 = new float[2][7];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (float) 3700L;
      floatArray1[2] = (float) 3700L;
      floatArray1[3] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = (float) 3700L;
      floatArray2[2] = (float) 3700L;
      floatArray2[3] = (float) 3700L;
      floatArray2[4] = (float) 3700L;
      floatArray2[5] = (float) 3700L;
      floatArray2[6] = 0.0F;
      floatArray2[7] = (float) 3700L;
      floatArray2[8] = (float) 3700L;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      home0.addRoom(room0, 0);
      String string0 = "O_=ddn";
      String string1 = "";
      String string2 = "";
      try { 
        MockURL.URL("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Home home0 = new Home();
      home0.deleteLevel((Level) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.pollLast();
      Home.getLevelsSubList(linkedList0);
      LinkedList<DimensionLine> linkedList1 = new LinkedList<DimensionLine>();
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list0 = Home.getSubList((List<? extends Selectable>) linkedList1, class0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(list0, "AQ3T+vZ_3,D$L<");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      linkedList0.add((Label) null);
      // Undeclared exception!
      try { 
        Home.duplicate(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Home home0 = new Home((-1808.0F));
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      home0.getPrint();
      home0.setPrint((HomePrint) null);
      CollectionListener<Label> collectionListener1 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      home0.setSelectedItems(list0);
      Home home1 = new Home(list0);
      Home home2 = home0.clone();
      home2.isModified();
      home2.setModified(true);
      assertTrue(home2.isModified());
      
      home1.isRecovered();
      assertEquals((-1808.0F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      List<Room> list0 = Home.getRoomsSubList(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        Home.getDimensionLinesSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      home0.getLabels();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedList<HomeDoorOrWindow> linkedList0 = new LinkedList<HomeDoorOrWindow>();
      Home.getDimensionLinesSubList(linkedList0);
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Home home0 = new Home();
      home0.setModified(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Home home0 = new Home();
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener0);
      List<Camera> list0 = home0.getStoredCameras();
      home0.setStoredCameras(list0);
      Wall wall0 = new Wall(1746.147F, (-586.05F), 3592.348F, 369.0F, (-586.05F), 1746.147F);
      wall0.getPoints();
      wall0.getWallAtStart();
      home0.deleteWall(wall0);
      home0.setStoredCameras(list0);
      LinkedList<HomeDoorOrWindow> linkedList0 = new LinkedList<HomeDoorOrWindow>();
      List<DimensionLine> list1 = Home.getDimensionLinesSubList(linkedList0);
      home0.addLabelsListener((CollectionListener<Label>) null);
      Class<Integer> class0 = Integer.class;
      List<Integer> list2 = Home.getSubList((List<? extends Selectable>) list1, class0);
      assertTrue(list2.isEmpty());
  }
}
