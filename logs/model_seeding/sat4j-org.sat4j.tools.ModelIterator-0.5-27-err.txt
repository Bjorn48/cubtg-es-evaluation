[MASTER] 13:51:48.069 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.tools.ClausalCardinalitiesDecorator<T> : Type points to itself
[MASTER] 13:51:48.071 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.tools.FullClauseSelectorSolver<T> : Type points to itself
[MASTER] 13:51:48.072 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.tools.GroupClauseSelectorSolver<T> : Type points to itself
[MASTER] 13:51:48.073 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.tools.LexicoDecorator<T> : Type points to itself
[MASTER] 13:51:48.073 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.tools.ManyCore<S> : Type points to itself
[MASTER] 13:51:48.074 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.tools.NegationDecorator<T> : Type points to itself
[MASTER] 13:51:48.075 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.minisat.core.Solver<D> : Type points to itself
[MASTER] 13:55:47.310 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_30_1550580946890/org/sat4j/tools/ModelIterator_30_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_30_1550580946890/org/sat4j/tools/ModelIterator_30_tmp__ESTest_scaffolding.java]]
[MASTER] 13:55:47.310 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 13:55:47.310 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 13:55:47.319 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 51
[MASTER] 13:55:47.319 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$100(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 52
[MASTER] 13:55:47.319 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_30_1550580946890/org/sat4j/tools/ModelIterator_30_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 13:55:47.319 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 13:55:47.375 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_30_1550580946890/org/sat4j/tools/ModelIterator_30_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 12:55:47 GMT 2019
4:  */
5: 
6: package org.sat4j.tools;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.evosuite.runtime.ViolatedAssumptionAnswer;
14: import org.junit.runner.RunWith;
15: import org.sat4j.core.ASolverFactory;
16: import org.sat4j.core.VecInt;
17: import org.sat4j.specs.IConstr;
18: import org.sat4j.specs.ISolver;
19: import org.sat4j.specs.IVecInt;
20: import org.sat4j.tools.AbstractMinimalModel;
21: import org.sat4j.tools.CheckMUSSolutionListener;
22: import org.sat4j.tools.ModelIterator;
23: import org.sat4j.tools.ModelIteratorToSATAdapter;
24: 
25: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
26: public class ModelIterator_30_tmp__ESTest extends ModelIterator_30_tmp__ESTest_scaffolding {
27: 
28:   @Test(timeout = 4000)
29:   public void test0()  throws Throwable  {
30:       int[] intArray0 = new int[0];
31:       ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
32:       doReturn(false, true, false, false, true).when(iSolver0).isSatisfiable(anyBoolean());
33:       doReturn((Object) intArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(iSolver0).model();
34:       doReturn(16384).when(iSolver0).nVars();
35:       doReturn(intArray0).when(iSolver0).primeImplicant();
36:       doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
37:       doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(iSolver0).discardCurrentModel();
38:       ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
39:       CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
40:       ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, 2107L, checkMUSSolutionListener0);
41:       modelIteratorToSATAdapter0.primeImplicant();
42:       modelIteratorToSATAdapter0.isSatisfiable(true);
43:       modelIteratorToSATAdapter0.setExpectedNumberOfClauses((-1));
44:       modelIteratorToSATAdapter0.reset();
45:       modelIteratorToSATAdapter0.isSatisfiable(true);
46:       modelIteratorToSATAdapter0.isSatisfiable(false);
47:       modelIteratorToSATAdapter0.model();
48:       ModelIteratorToSATAdapter modelIteratorToSATAdapter1 = new ModelIteratorToSATAdapter(modelIteratorToSATAdapter0, checkMUSSolutionListener0);
49:       modelIteratorToSATAdapter1.isSatisfiable(false);
50:       VecInt vecInt0 = new VecInt();
51:       VecInt.access$000(vecInt0);
52:       VecInt.access$100(vecInt0);
53:       vecInt0.moveTo(intArray0);
54:       boolean boolean0 = false;
55:       modelIteratorToSATAdapter0.isSatisfiable(boolean0);
56:       ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
57:       doReturn(false).when(iSolver1).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
58:       doReturn(false).when(iSolver1).isSatisfiable(anyBoolean());
59:       doReturn((IConstr) null).when(iSolver1).addClause(any(org.sat4j.specs.IVecInt.class));
60:       ModelIterator modelIterator0 = new ModelIterator(iSolver1);
61:       int int0 = 2106;
62:       modelIterator0.setExpectedNumberOfClauses(int0);
63:       IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
64:       modelIterator0.addClause(iVecInt0);
65:       modelIterator0.setTimeout(int0);
66:       modelIterator0.isSatisfiable();
67:       modelIterator0.isSatisfiable((IVecInt) vecInt0);
68:   }
69: }
RegularFileObject[/tmp/EvoSuite_30_1550580946890/org/sat4j/tools/ModelIterator_30_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 12:55:47 GMT 2019
5:  */
6: 
7: package org.sat4j.tools;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class ModelIterator_30_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.tools.ModelIterator"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(ModelIterator_30_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.sat4j.minisat.core.ConflictTimerAdapter",
84:       "org.sat4j.tools.ManyCore",
85:       "org.sat4j.specs.UnitPropagationListener",
86:       "org.sat4j.tools.SolutionCounter",
87:       "org.sat4j.minisat.core.SizeComparator",
88:       "org.sat4j.tools.FullClauseSelectorSolver",
89:       "org.sat4j.tools.SolverDecorator",
90:       "org.sat4j.minisat.learning.FixedLengthLearning",
91:       "org.sat4j.minisat.constraints.cnf.Clauses",
92:       "org.sat4j.core.EmptyVecInt",
93:       "org.sat4j.minisat.core.Pair",
94:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
95:       "org.sat4j.specs.IVec",
96:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
97:       "org.sat4j.specs.Lbool",
98:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
99:       "org.sat4j.AbstractLauncher$2",
100:       "org.sat4j.specs.IOptimizationProblem",
101:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
102:       "org.sat4j.AbstractLauncher$1",
103:       "org.sat4j.specs.SearchListener",
104:       "org.sat4j.tools.Minimal4CardinalityModel",
105:       "org.sat4j.minisat.core.SimplificationType",
106:       "org.sat4j.minisat.learning.MiniSATLearning",
107:       "org.sat4j.minisat.core.SearchParams",
108:       "org.sat4j.tools.AbstractMinimalModel",
109:       "org.sat4j.tools.Minimal4InclusionModel",
110:       "org.sat4j.minisat.core.Heap",
111:       "org.sat4j.specs.ILogAble$1",
112:       "org.sat4j.specs.TimeoutException",
113:       "org.sat4j.specs.Constr",
114:       "org.sat4j.minisat.core.ConflictTimerContainer",
115:       "org.sat4j.specs.ISolverService",
116:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
117:       "org.sat4j.minisat.core.LearningStrategy",
118:       "org.sat4j.opt.MaxSatDecorator",
119:       "org.sat4j.specs.IGroupSolver",
120:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
121:       "org.sat4j.specs.IteratorInt",
122:       "org.sat4j.specs.ISolver",
123:       "org.sat4j.specs.UnitClauseProvider$1",
124:       "org.sat4j.minisat.core.CircularBuffer",
125:       "org.sat4j.minisat.learning.LimitedLearning",
126:       "org.sat4j.minisat.core.VoidTracing",
127:       "org.sat4j.minisat.core.ActivityListener",
128:       "org.sat4j.minisat.restarts.Glucose21Restarts",
129:       "org.sat4j.minisat.core.GlucoseLCDS",
130:       "org.sat4j.tools.SubModelIterator",
131:       "org.sat4j.tools.AbstractClauseSelectorSolver$SelectorState",
132:       "org.sat4j.minisat.core.ILits",
133:       "org.sat4j.BasicLauncher",
134:       "org.sat4j.specs.ILogAble",
135:       "org.sat4j.specs.ContradictionException",
136:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
137:       "org.sat4j.specs.IConstr",
138:       "org.sat4j.specs.IVecInt",
139:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
140:       "org.sat4j.tools.SolutionFoundListener",
141:       "org.sat4j.minisat.core.PrimeImplicantStrategy",
142:       "org.sat4j.tools.DimacsStringSolver",
143:       "org.sat4j.minisat.core.Learner",
144:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
145:       "org.sat4j.minisat.core.ActivityComparator",
146:       "org.sat4j.specs.MandatoryLiteralListener",
147:       "org.sat4j.specs.IProblem",
148:       "org.sat4j.core.VecInt",
149:       "org.sat4j.minisat.core.Solver",
150:       "org.sat4j.tools.CheckMUSSolutionListener",
151:       "org.sat4j.minisat.constraints.cnf.Lits",
152:       "org.sat4j.minisat.core.Solver$2",
153:       "org.sat4j.specs.UnitClauseProvider",
154:       "org.sat4j.minisat.core.Solver$1",
155:       "org.sat4j.AbstractLauncher",
156:       "org.sat4j.minisat.learning.AbstractLearning",
157:       "org.sat4j.minisat.core.Solver$4",
158:       "org.sat4j.minisat.core.Solver$3",
159:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
160:       "org.sat4j.core.VecInt$1",
161:       "org.sat4j.core.ASolverFactory",
162:       "org.sat4j.minisat.core.DataStructureFactory",
163:       "org.sat4j.core.Vec",
164:       "org.sat4j.minisat.core.Glucose2LCDS",
165:       "org.sat4j.minisat.core.Solver$6",
166:       "org.sat4j.minisat.core.SolverStats",
167:       "org.sat4j.minisat.core.Solver$8",
168:       "org.sat4j.minisat.core.Solver$7",
169:       "org.sat4j.minisat.core.ConstrActivityListener",
170:       "org.sat4j.minisat.core.IPhaseSelectionStrategy",
171:       "org.sat4j.tools.ModelIteratorToSATAdapter",
172:       "org.sat4j.minisat.restarts.ArminRestarts",
173:       "org.sat4j.tools.GroupClauseSelectorSolver",
174:       "org.sat4j.specs.SearchListenerAdapter",
175:       "org.sat4j.tools.ModelIterator",
176:       "org.sat4j.reader.ParseFormatException",
177:       "org.sat4j.tools.SolutionFoundListener$1",
178:       "org.sat4j.tools.StatisticsSolver",
179:       "org.sat4j.tools.LexicoDecorator",
180:       "org.sat4j.tools.AbstractClauseSelectorSolver",
181:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
182:       "org.sat4j.tools.OutcomeListener",
183:       "org.sat4j.minisat.core.ActivityLCDS",
184:       "org.sat4j.tools.AbstractOutputSolver",
185:       "org.sat4j.minisat.orders.VarOrderHeap",
186:       "org.sat4j.tools.SingleSolutionDetector",
187:       "org.sat4j.LightFactory",
188:       "org.sat4j.minisat.core.ISimplifier",
189:       "org.sat4j.reader.InstanceReader",
190:       "org.sat4j.minisat.core.ConflictTimer",
191:       "org.sat4j.minisat.core.VarActivityListener",
192:       "org.sat4j.specs.VarMapper",
193:       "org.sat4j.specs.RandomAccessModel",
194:       "org.sat4j.minisat.SolverFactory",
195:       "org.sat4j.minisat.core.LBDConflictTimer",
196:       "org.sat4j.tools.DimacsOutputSolver",
197:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
198:       "org.sat4j.minisat.core.SizeLCDS",
199:       "org.sat4j.minisat.core.RestartStrategy",
200:       "org.sat4j.minisat.core.AgeLCDS",
201:       "org.sat4j.reader.Reader",
202:       "org.sat4j.minisat.core.IOrder",
203:       "org.sat4j.minisat.orders.VariableComparator",
204:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
205:       "org.sat4j.minisat.core.ICDCL",
206:       "org.sat4j.minisat.restarts.NoRestarts",
207:       "org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy",
208:       "org.sat4j.core.EmptyVecInt$1",
209:       "org.sat4j.minisat.core.MemoryBasedConflictTimer"
210:     );
211:   } 
212:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
213:     mock(Class.forName("org.sat4j.core.ASolverFactory", false, ModelIterator_30_tmp__ESTest_scaffolding.class.getClassLoader()));
214:     mock(Class.forName("org.sat4j.specs.ISolver", false, ModelIterator_30_tmp__ESTest_scaffolding.class.getClassLoader()));
215:     mock(Class.forName("org.sat4j.specs.IVecInt", false, ModelIterator_30_tmp__ESTest_scaffolding.class.getClassLoader()));
216:   }
217: 
218:   private static void resetClasses() {
219:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(ModelIterator_30_tmp__ESTest_scaffolding.class.getClassLoader()); 
220: 
221:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
222:       "org.sat4j.tools.SolverDecorator",
223:       "org.sat4j.tools.ModelIterator",
224:       "org.sat4j.tools.GroupClauseSelectorSolver",
225:       "org.sat4j.tools.CheckMUSSolutionListener",
226:       "org.sat4j.tools.ModelIteratorToSATAdapter",
227:       "org.sat4j.LightFactory",
228:       "org.sat4j.tools.DimacsStringSolver",
229:       "org.sat4j.tools.AbstractMinimalModel",
230:       "org.sat4j.tools.Minimal4InclusionModel",
231:       "org.sat4j.core.VecInt$1",
232:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
233:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
234:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
235:       "org.sat4j.tools.StatisticsSolver",
236:       "org.sat4j.tools.NegationDecorator",
237:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
238:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
239:       "org.sat4j.tools.SubModelIterator",
240:       "org.sat4j.core.Vec",
241:       "org.sat4j.minisat.core.Counter",
242:       "org.sat4j.tools.GateTranslator",
243:       "org.sat4j.minisat.core.ActivityComparator",
244:       "org.sat4j.minisat.core.VoidTracing",
245:       "org.sat4j.minisat.core.Solver$2",
246:       "org.sat4j.minisat.core.Solver$3",
247:       "org.sat4j.minisat.core.Solver$4",
248:       "org.sat4j.minisat.core.Pair",
249:       "org.sat4j.minisat.core.ConflictTimerAdapter",
250:       "org.sat4j.minisat.core.MemoryBasedConflictTimer",
251:       "org.sat4j.minisat.core.ActivityLCDS",
252:       "org.sat4j.minisat.core.LBDConflictTimer",
253:       "org.sat4j.minisat.core.GlucoseLCDS",
254:       "org.sat4j.minisat.core.Glucose2LCDS",
255:       "org.sat4j.minisat.core.AgeLCDS",
256:       "org.sat4j.minisat.core.SizeComparator",
257:       "org.sat4j.minisat.core.SizeLCDS",
258:       "org.sat4j.minisat.core.Solver$8",
259:       "org.sat4j.tools.LexicoDecorator",
260:       "org.sat4j.tools.SingleSolutionDetector",
261:       "org.sat4j.minisat.learning.LimitedLearning",
262:       "org.sat4j.minisat.learning.FixedLengthLearning",
263:       "org.sat4j.minisat.learning.AbstractLearning",
264:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
265:       "org.sat4j.minisat.learning.MiniSATLearning",
266:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
267:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
268:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
269:       "org.sat4j.minisat.orders.NaturalStaticOrder",
270:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
271:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
272:       "org.sat4j.tools.ClausalCardinalitiesDecorator",
273:       "org.sat4j.tools.encoding.Sequential",
274:       "org.sat4j.tools.encoding.Binary",
275:       "org.sat4j.tools.encoding.Product",
276:       "org.sat4j.tools.encoding.Commander",
277:       "org.sat4j.tools.encoding.Binomial",
278:       "org.sat4j.tools.encoding.Ladder",
279:       "org.sat4j.tools.encoding.Policy",
280:       "org.sat4j.core.ReadOnlyVecInt",
281:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
282:       "org.sat4j.minisat.constraints.cnf.Lits",
283:       "org.sat4j.tools.SolutionCounter",
284:       "org.sat4j.minisat.restarts.LubyRestarts",
285:       "org.sat4j.minisat.learning.ActiveLearning",
286:       "org.sat4j.MUSLauncher",
287:       "org.sat4j.AbstractLauncher$1",
288:       "org.sat4j.DecisionMode",
289:       "org.sat4j.ExitCode",
290:       "org.sat4j.OptimizationMode",
291:       "org.sat4j.ILauncherMode",
292:       "org.sat4j.minisat.orders.PureOrder",
293:       "org.sat4j.core.EmptyVecInt$1",
294:       "org.sat4j.tools.Minimal4CardinalityModel",
295:       "org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy",
296:       "org.sat4j.minisat.orders.RandomWalkDecorator",
297:       "org.sat4j.minisat.restarts.Glucose21Restarts",
298:       "org.sat4j.minisat.core.CircularBuffer",
299:       "org.sat4j.minisat.constraints.xor.Xor",
300:       "org.sat4j.minisat.learning.PercentLengthLearning",
301:       "org.sat4j.minisat.restarts.ArminRestarts",
302:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
303:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
304:       "org.sat4j.specs.Lbool",
305:       "org.sat4j.minisat.core.Heap",
306:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
307:       "org.sat4j.minisat.core.ConflictTimerContainer",
308:       "org.sat4j.minisat.core.Solver$7",
309:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
310:       "org.sat4j.minisat.core.Solver$6",
311:       "org.sat4j.specs.ContradictionException",
312:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
313:       "org.sat4j.minisat.orders.TabuListDecorator",
314:       "org.sat4j.minisat.restarts.EMARestarts",
315:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
316:       "org.sat4j.minisat.restarts.MiniSATRestarts",
317:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
318:       "org.sat4j.minisat.constraints.cnf.HTClause",
319:       "org.sat4j.minisat.constraints.cnf.LearntHTClause",
320:       "org.sat4j.minisat.constraints.card.MinWatchCard",
321:       "org.sat4j.minisat.constraints.cnf.BinaryClauses",
322:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
323:       "org.sat4j.minisat.constraints.cnf.LearntBinaryClause",
324:       "org.sat4j.minisat.orders.SubsetVarOrder",
325:       "org.sat4j.minisat.constraints.cnf.CBClause",
326:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
327:       "org.sat4j.minisat.constraints.cnf.WLClause",
328:       "org.sat4j.minisat.constraints.cnf.OriginalWLClause",
329:       "org.sat4j.minisat.constraints.card.AtLeast",
330:       "org.sat4j.minisat.restarts.NoRestarts",
331:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
332:       "org.sat4j.core.LiteralsUtils",
333:       "org.sat4j.minisat.constraints.cnf.OriginalBinaryClause",
334:       "org.sat4j.specs.FakeConstr",
335:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
336:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
337:       "org.sat4j.minisat.constraints.cnf.UnitClause",
338:       "org.sat4j.core.ConstrGroup",
339:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
340:       "org.sat4j.minisat.constraints.cnf.Clauses",
341:       "org.sat4j.minisat.constraints.cnf.OriginalHTClause",
342:       "org.sat4j.specs.TimeoutException",
343:       "org.sat4j.tools.OptToSatAdapter",
344:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
345:       "org.sat4j.core.ASolverFactory",
346:       "org.sat4j.core.EmptyVecInt",
347:       "org.sat4j.core.VecInt",
348:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
349:       "org.sat4j.opt.MaxSatDecorator",
350:       "org.sat4j.minisat.core.Solver$1",
351:       "org.sat4j.minisat.core.Solver",
352:       "org.sat4j.minisat.orders.VarOrderHeap",
353:       "org.sat4j.minisat.core.SearchParams",
354:       "org.sat4j.specs.ILogAble$1",
355:       "org.sat4j.specs.ILogAble",
356:       "org.sat4j.minisat.core.SolverStats",
357:       "org.sat4j.specs.SearchListenerAdapter",
358:       "org.sat4j.specs.UnitClauseProvider$1",
359:       "org.sat4j.specs.UnitClauseProvider",
360:       "org.sat4j.tools.AbstractOutputSolver",
361:       "org.sat4j.tools.SolutionFoundListener$1",
362:       "org.sat4j.tools.SolutionFoundListener"
363:     );
364:   }
365: }

[MASTER] 13:55:47.379 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
int[] intArray0 = new int[0];
ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
doReturn(false, true, false, false, true).when(iSolver0).isSatisfiable(anyBoolean());
doReturn((Object) intArray0, (Object) null, (Object) null, (Object) null, (Object) null).when(iSolver0).model();
doReturn(16384).when(iSolver0).nVars();
doReturn(intArray0).when(iSolver0).primeImplicant();
doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(iSolver0).discardCurrentModel();
ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, 2107L, checkMUSSolutionListener0);
modelIteratorToSATAdapter0.primeImplicant();
modelIteratorToSATAdapter0.isSatisfiable(true);
modelIteratorToSATAdapter0.setExpectedNumberOfClauses((-1));
modelIteratorToSATAdapter0.reset();
modelIteratorToSATAdapter0.isSatisfiable(true);
modelIteratorToSATAdapter0.isSatisfiable(false);
modelIteratorToSATAdapter0.model();
ModelIteratorToSATAdapter modelIteratorToSATAdapter1 = new ModelIteratorToSATAdapter(modelIteratorToSATAdapter0, checkMUSSolutionListener0);
modelIteratorToSATAdapter1.isSatisfiable(false);
VecInt vecInt0 = new VecInt();
VecInt.access$000(vecInt0);
VecInt.access$100(vecInt0);
vecInt0.moveTo(intArray0);
boolean boolean0 = false;
modelIteratorToSATAdapter0.isSatisfiable(boolean0);
ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
doReturn(false).when(iSolver1).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
doReturn(false).when(iSolver1).isSatisfiable(anyBoolean());
doReturn((IConstr) null).when(iSolver1).addClause(any(org.sat4j.specs.IVecInt.class));
ModelIterator modelIterator0 = new ModelIterator(iSolver1);
int int0 = 2106;
modelIterator0.setExpectedNumberOfClauses(int0);
IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
modelIterator0.addClause(iVecInt0);
modelIterator0.setTimeout(int0);
modelIterator0.isSatisfiable();
modelIterator0.isSatisfiable((IVecInt) vecInt0);

