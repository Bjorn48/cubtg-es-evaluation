/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 16:08:00 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      StringReader stringReader1 = new StringReader("\"{\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      javaCharStream0.ReInit((Reader) stringReader1, 43, 83, 83);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(83, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals("\"{\"", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(73, token0.kind);
      assertEquals(83, token0.beginColumn);
      assertEquals(43, token0.endLine);
      assertEquals(85, token0.endColumn);
      assertEquals(43, token0.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}Y~\"W9");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[0];
      int int0 = stringReader0.read(charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      int int1 = stringReader0.read();
      assertEquals(125, int1);
      assertFalse(int1 == int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("Y", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d KWIex[oh[ ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("d", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-67), (byte) (-67), (byte) (-67));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      int int0 = stringReader0.read(charArray0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertEquals(1, charArray0.length);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("w", charBuffer0.toString());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(charBuffer0);
      
      int int1 = stringReader0.read(charBuffer0);
      assertEquals(1, int1);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertArrayEquals(new char[] {'h'}, charArray0);
      assertTrue(int1 == int0);
      assertEquals(1, charArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("ile", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("while", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(65, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1307));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1307. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('*').when(javaCharStream0).BeginToken();
      doReturn(40).when(javaCharStream0).getBeginColumn();
      doReturn(40).when(javaCharStream0).getBeginLine();
      doReturn(40).when(javaCharStream0).getEndColumn();
      doReturn(3420).when(javaCharStream0).getEndLine();
      doReturn('*').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader0 = new StringReader("gg|h6{+^3d/o/o");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1462, 40);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1462, javaCharStream1.getBeginLine());
      assertEquals(1462, javaCharStream1.getEndLine());
      assertEquals(41, javaCharStream1.getColumn());
      assertEquals(40, javaCharStream1.getBeginColumn());
      assertEquals(1462, javaCharStream1.getLine());
      assertEquals(41, javaCharStream1.getEndColumn());
      assertEquals("gg", token0.toString());
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1462, token0.beginLine);
      assertEquals(1462, token0.endLine);
      assertEquals(40, token0.beginColumn);
      assertEquals(41, token0.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("*", token1.toString());
      assertEquals(40, token1.beginColumn);
      assertEquals(40, token1.endColumn);
      assertEquals(103, token1.kind);
      assertEquals(40, token1.beginLine);
      assertEquals(3420, token1.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[AUN&zLo");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("[", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(81, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("[", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(81, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<STS2RING_LITERALA>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("<", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals("STS2RING_LITERALA", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(18, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)68;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)1, (byte)68}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("final");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjimageLen = 27;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      stringReader0.reset();
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      stringReader0.reset();
      javaParserTokenManager0.defaultLexState = (int) (byte)1;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      byteArray1[0] = (byte)56;
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)56}, byteArray1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("final", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(5, token0.endColumn);
      assertEquals(31, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("", token1.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(5, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      token1.beginColumn = 0;
      assertEquals("", token1.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals("", token1.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(5, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(5, token2.beginColumn);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token3.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(5, token3.beginColumn);
      assertEquals(5, token3.endColumn);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals("final", token0.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, token0.endColumn);
      assertEquals(31, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token1));
      assertNotSame(token0, token2);
      assertNotSame(token0, token3);
      assertNotSame(token0, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(5, token2.beginColumn);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token3));
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token3);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals("", token1.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(5, token1.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token3));
      assertFalse(token1.equals((Object)token2));
      assertNotSame(token1, token0);
      assertNotSame(token1, token3);
      assertNotSame(token1, token2);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('-').when(javaCharStream0).BeginToken();
      doReturn((int)'-').when(javaCharStream0).getBeginColumn();
      doReturn((int)'-').when(javaCharStream0).getBeginLine();
      doReturn((int)'-').when(javaCharStream0).getEndColumn();
      doReturn(3420).when(javaCharStream0).getEndLine();
      doReturn('-').when(javaCharStream0).readChar();
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 3420, '-', '-');
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("--", token0.toString());
      assertEquals(100, token0.kind);
      assertEquals(45, token0.endColumn);
      assertEquals(45, token0.beginColumn);
      assertEquals(45, token0.beginLine);
      assertEquals(3420, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-125), (byte)105);
      assertEquals(105, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-86), (byte)105, (byte) (-125)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(105, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-86), (byte)105, (byte) (-125)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      assertEquals(105, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-86), (byte)105, (byte) (-125)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 7, (byte) (-125));
      assertEquals(105, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)105, (byte) (-125)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("4eO");
      assertNotNull(stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 24, (int) (byte)105);
      assertEquals(105, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)105, (byte) (-125)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(105, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)105, (byte) (-125)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(105, byteArrayInputStream0.available());
      assertEquals(24, javaCharStream0.getEndLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(24, javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getLine());
      assertEquals("4", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(24, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(105, token0.beginColumn);
      assertEquals(24, token0.endLine);
      assertEquals(105, token0.endColumn);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)105, (byte) (-125)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(105, byteArrayInputStream0.available());
      assertEquals(24, javaCharStream0.getEndLine());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getBeginColumn());
      assertEquals(24, javaCharStream0.getBeginLine());
      assertEquals(24, javaCharStream0.getLine());
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals("eO", token1.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(106, token1.beginColumn);
      assertEquals(24, token1.beginLine);
      assertEquals(24, token1.endLine);
      assertEquals(107, token1.endColumn);
      assertArrayEquals(new byte[] {(byte) (-86), (byte)105, (byte) (-125)}, byteArray0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, byteArray0.length);
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".T|.a0nk");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader1 = new StringReader(".T|.a0nk");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(".", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("whie");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("whie", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('U', 'a').when(javaCharStream0).BeginToken();
      doReturn("8r").when(javaCharStream0).GetImage();
      doReturn(114).when(javaCharStream0).getBeginColumn();
      doReturn(31).when(javaCharStream0).getBeginLine();
      doReturn(31).when(javaCharStream0).getEndColumn();
      doReturn(114).when(javaCharStream0).getEndLine();
      doReturn('=', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("8r", token0.toString());
      assertEquals(31, token0.beginLine);
      assertEquals(114, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(114, token0.endLine);
      assertEquals(31, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("8r", token1.toString());
      assertEquals(31, token1.beginLine);
      assertEquals(114, token1.endLine);
      assertEquals(114, token1.beginColumn);
      assertEquals(31, token1.endColumn);
      assertEquals(74, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals("8r", token2.toString());
      assertEquals(31, token2.endColumn);
      assertEquals(31, token2.beginLine);
      assertEquals(114, token2.beginColumn);
      assertEquals(114, token2.endLine);
      assertEquals(74, token2.kind);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("89!;$8Z_w*O)5%_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("89", token0.toString());
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("!", token1.toString());
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(89, token1.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals(3, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(3, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("!", token2.toString());
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.endColumn);
      assertEquals(89, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('a').when(javaCharStream0).BeginToken();
      doReturn(6).when(javaCharStream0).getBeginColumn();
      doReturn(6).when(javaCharStream0).getBeginLine();
      doReturn(6).when(javaCharStream0).getEndColumn();
      doReturn(6).when(javaCharStream0).getEndLine();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.curLexState = 6;
      javaParserTokenManager0.jjmatchedKind = 0;
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("", token0.toString());
      assertEquals(6, token0.endColumn);
      assertEquals(6, token0.beginLine);
      assertEquals(6, token0.beginColumn);
      assertEquals(6, token0.endLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("implements");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals("implements", token0.toString());
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(10, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(37, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("/7K35a<\"]");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("/7K35a<\"]");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      StringReader stringReader3 = new StringReader("while");
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertNotNull(stringReader3);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("/", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("7", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("7", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token2.beginColumn);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("K35a", token3.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token3.kind);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(6, token3.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-27), 65);
      assertEquals(29, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-27), (byte)37}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.close();
      assertEquals(29, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-27), (byte)37}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals(29, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)37}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(29, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-27), (byte)37}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$N<lcz?GQJF");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("$N", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[ejOgLnmn#5gU=9;I)c");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("[", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(81, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals("ejOgLnmn", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(9, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader0 = new StringReader("JY$b6',q\u0002=':YyQ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("JY$b6',q\u0002=':YyQ");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = stringReader1.read();
      assertEquals(74, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "final");
      assertFalse(boolean0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(4, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(4, javaCharStream2.getColumn());
      assertEquals("Y$b6", token0.toString());
      assertEquals(3, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream2);
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(4, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(4, javaCharStream2.getColumn());
      assertEquals(3, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: \"q\" (113), after : \"\\',\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)0;
      StringReader stringReader0 = new StringReader("I>-&'");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken(1741);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("package");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("package", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(46, token0.kind);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("89!;$8Z_w*O)5%_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("89!;$8Z_w*O)5%_");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("89", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("!", token1.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(89, token1.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(";", token2.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token2.endColumn);
      assertEquals(4, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(83, token2.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|.Yh_d^Uu");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 18, 97, 18);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals("|", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(106, token0.kind);
      assertEquals(18, token0.beginLine);
      assertEquals(18, token0.endLine);
      assertEquals(97, token0.endColumn);
      assertEquals(97, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(98, javaCharStream0.getColumn());
      assertEquals(98, javaCharStream0.getEndColumn());
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(".", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(18, token1.endLine);
      assertEquals(18, token1.beginLine);
      assertEquals(85, token1.kind);
      assertEquals(98, token1.beginColumn);
      assertEquals(98, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(98, javaCharStream0.getColumn());
      assertEquals(98, javaCharStream0.getEndColumn());
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals("|", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(106, token0.kind);
      assertEquals(18, token0.beginLine);
      assertEquals(18, token0.endLine);
      assertEquals(97, token0.endColumn);
      assertEquals(97, token0.beginColumn);
      assertFalse(token0.equals((Object)token1));
      assertNotSame(token0, token1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[ejOgLnmn#5gU=9;I)c");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("[", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(81, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("ejOgLnmn", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(9, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 10.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[AUN&zLo");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("[", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(81, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("AUN", token1.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(4, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a8Wr6!NCbb[.X\"E");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-26), 46);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-26), javaCharStream0.getEndLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals((-26), javaCharStream0.getBeginLine());
      assertEquals((-26), javaCharStream0.getLine());
      assertEquals("a8Wr6", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-26), token0.endLine);
      assertEquals(46, token0.beginColumn);
      assertEquals((-26), token0.beginLine);
      assertEquals(50, token0.endColumn);
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals((-26), javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals((-26), javaCharStream0.getBeginLine());
      assertEquals((-26), javaCharStream0.getLine());
      assertEquals("!", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals((-26), token1.beginLine);
      assertEquals(51, token1.beginColumn);
      assertEquals((-26), token1.endLine);
      assertEquals(51, token1.endColumn);
      assertEquals(89, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals((-26), javaCharStream0.getEndLine());
      assertEquals(55, javaCharStream0.getColumn());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals((-26), javaCharStream0.getBeginLine());
      assertEquals((-26), javaCharStream0.getLine());
      assertEquals(55, javaCharStream0.getEndColumn());
      assertEquals("NCbb", token2.toString());
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(55, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals((-26), token2.beginLine);
      assertEquals(52, token2.beginColumn);
      assertEquals((-26), token2.endLine);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-26), javaCharStream0.getEndLine());
      assertEquals(55, javaCharStream0.getColumn());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals((-26), javaCharStream0.getBeginLine());
      assertEquals((-26), javaCharStream0.getLine());
      assertEquals(55, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('T').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn((-393)).when(javaCharStream0).getEndColumn();
      doReturn((-393)).when(javaCharStream0).getEndLine();
      doReturn('[').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-393), token0.endLine);
      assertEquals((-393), token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("89!;$8Z_w*O)5%_");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("89!;$8Z_w*O)5%_");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("89", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QV9++");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(81, int0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 108, 81);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      StringReader stringReader0 = new StringReader("<OCTAL_LITERAL>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      stringReader0.reset();
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      stringReader0.reset();
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 38, 38, 1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6ipU(HQHuBZ1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-393), (-17));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-393), javaCharStream0.getBeginLine());
      assertEquals((-17), javaCharStream0.getBeginColumn());
      assertEquals((-17), javaCharStream0.getEndColumn());
      assertEquals((-17), javaCharStream0.getColumn());
      assertEquals((-393), javaCharStream0.getEndLine());
      assertEquals((-393), javaCharStream0.getLine());
      assertEquals("6", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals((-17), token0.beginColumn);
      assertEquals((-393), token0.endLine);
      assertEquals((-393), token0.beginLine);
      assertEquals((-17), token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('2').when(javaCharStream0).BeginToken();
      doReturn("").when(javaCharStream0).GetImage();
      doReturn((-2327)).when(javaCharStream0).getBeginColumn();
      doReturn((-2327)).when(javaCharStream0).getBeginLine();
      doReturn(6).when(javaCharStream0).getEndColumn();
      doReturn(6).when(javaCharStream0).getEndLine();
      doReturn('V').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjmatchedKind = 0;
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("", token0.toString());
      assertEquals(6, token0.endLine);
      assertEquals((-2327), token0.beginColumn);
      assertEquals((-2327), token0.beginLine);
      assertEquals(6, token0.endColumn);
      assertEquals(66, token0.kind);
      assertNotNull(token0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(15, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 108);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(15, byteArray0.length);
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedInputStream0);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(15, byteArray0.length);
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, (byte)2);
      assertEquals(15, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(15, byteArray0.length);
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 16.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(0).when(javaCharStream0).getEndColumn();
      doReturn(0).when(javaCharStream0).getEndLine();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals("", token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"float\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("\"float\"", token0.toString());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(73, token0.kind);
      assertEquals(7, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eC]|V!TERX0EFRd");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-17), (-17));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-17), javaCharStream0.getBeginLine());
      assertEquals((-17), javaCharStream0.getLine());
      assertEquals((-17), javaCharStream0.getBeginColumn());
      assertEquals((-16), javaCharStream0.getEndColumn());
      assertEquals((-17), javaCharStream0.getEndLine());
      assertEquals((-16), javaCharStream0.getColumn());
      assertEquals("eC", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-17), token0.endLine);
      assertEquals((-17), token0.beginColumn);
      assertEquals((-17), token0.beginLine);
      assertEquals((-16), token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals((-17), javaCharStream0.getBeginLine());
      assertEquals((-15), javaCharStream0.getBeginColumn());
      assertEquals((-17), javaCharStream0.getLine());
      assertEquals((-15), javaCharStream0.getEndColumn());
      assertEquals((-17), javaCharStream0.getEndLine());
      assertEquals((-15), javaCharStream0.getColumn());
      assertEquals("]", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-15), token1.beginColumn);
      assertEquals(82, token1.kind);
      assertEquals((-17), token1.beginLine);
      assertEquals((-15), token1.endColumn);
      assertEquals((-17), token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals((-17), javaCharStream0.getBeginLine());
      assertEquals((-15), javaCharStream0.getBeginColumn());
      assertEquals((-17), javaCharStream0.getLine());
      assertEquals((-15), javaCharStream0.getEndColumn());
      assertEquals((-17), javaCharStream0.getEndLine());
      assertEquals((-15), javaCharStream0.getColumn());
      assertEquals("]", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-15), token1.beginColumn);
      assertEquals(82, token1.kind);
      assertEquals((-17), token1.beginLine);
      assertEquals((-15), token1.endColumn);
      assertEquals((-17), token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)68;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)1, (byte)68}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("final");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjimageLen = 27;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      stringReader0.reset();
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("final", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token0.endColumn);
      assertEquals(31, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(5, token1.endColumn);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finally");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-67), (byte) (-67), (byte) (-67));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      Token token0 = Token.newToken(86);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -67, column -67.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V]XVE:F=jN]\u0004h");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjmatchedKind = 2806;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("V", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("V", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-40), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte) (-67), (byte) (-67), (byte) (-67));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-40), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      long long0 = byteArrayInputStream0.skip(0);
      assertEquals(0L, long0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-40), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-40), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      PrintStream printStream0 = javaParserTokenManager0.debugStream;
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-40), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(printStream0);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-67), (byte) (-40), (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8r");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("8", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("r", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)0, (byte) (-86), (byte) (-86));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byteArrayInputStream0.reset();
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column -86.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|.Yh_d^Uu");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("|.Yh_d^Uu");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("native");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("native", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(43, token0.kind);
      assertEquals(6, token0.endColumn);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(token0);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eC]|V!TERX0EFRd");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = 'F';
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'e', 'C'}, charArray0);
      assertEquals(2, charArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      int int1 = stringReader0.read();
      assertEquals(93, int1);
      assertFalse(int1 == int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("|", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(106, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("|", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endColumn);
      assertEquals(106, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("|", token2.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(106, token2.kind);
      assertEquals(1, token2.beginColumn);
      assertEquals(1, token2.endColumn);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0YgZo9W)8zSa5u`zb2");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("0", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[ejOgLnmn#5gU=9;I)c");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("[", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(81, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals("ejOgLnmn", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(9, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals("ejOgLnmn", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(9, token2.endColumn);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("/7K35a<\"]");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("/", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XK`m8RY-5&T[tX_7prq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("volatile");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("native");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("volatile", token0.toString());
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(8, token0.endColumn);
      assertEquals(64, token0.kind);
      assertEquals(1, token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('Q', 'a').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn((-393)).when(javaCharStream0).getEndColumn();
      doReturn((-393)).when(javaCharStream0).getEndLine();
      doReturn(';', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNull(token0.toString());
      assertEquals((-393), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals((-393), token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNull(token1.toString());
      assertEquals(74, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals((-393), token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals((-393), token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (-491), (-1156), 2996);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)79;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 12, (byte) (-107));
      assertEquals((-107), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte)79}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertTrue(boolean0);
      assertEquals((-107), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte)79}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      byteArrayInputStream0.reset();
      assertEquals((-107), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-107), (byte) (-107), (byte)79}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-491), javaCharStream0.getEndLine());
      assertEquals((-1157), javaCharStream0.getBeginColumn());
      assertEquals((-1157), javaCharStream0.getColumn());
      assertEquals((-1157), javaCharStream0.getEndColumn());
      assertEquals((-491), javaCharStream0.getBeginLine());
      assertEquals((-491), javaCharStream0.getLine());
      assertEquals("", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-491), token0.endLine);
      assertEquals((-491), token0.beginLine);
      assertEquals((-1157), token0.endColumn);
      assertEquals((-1157), token0.beginColumn);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals((-491), javaCharStream0.getEndLine());
      assertEquals((-1157), javaCharStream0.getBeginColumn());
      assertEquals((-1157), javaCharStream0.getColumn());
      assertEquals((-1157), javaCharStream0.getEndColumn());
      assertEquals((-491), javaCharStream0.getBeginLine());
      assertEquals((-491), javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1157), token1.beginColumn);
      assertEquals((-491), token1.endLine);
      assertEquals((-491), token1.beginLine);
      assertEquals((-1157), token1.endColumn);
      assertEquals(0, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-275));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -275. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('U', 'D').when(javaCharStream0).BeginToken();
      doReturn("8r", "8r").when(javaCharStream0).GetImage();
      doReturn(114, 31).when(javaCharStream0).getBeginColumn();
      doReturn(31, 12).when(javaCharStream0).getBeginLine();
      doReturn(31, 3655).when(javaCharStream0).getEndColumn();
      doReturn(114, 30).when(javaCharStream0).getEndLine();
      doReturn('=', '*').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("8r", token0.toString());
      assertEquals(74, token0.kind);
      assertEquals(114, token0.beginColumn);
      assertEquals(31, token0.endColumn);
      assertEquals(31, token0.beginLine);
      assertEquals(114, token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("8r", token1.toString());
      assertEquals(12, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(3655, token1.endColumn);
      assertEquals(30, token1.endLine);
      assertEquals(31, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("O\"42+8e");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("O", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('*', '*').when(javaCharStream0).BeginToken();
      doReturn(40, 3420).when(javaCharStream0).getBeginColumn();
      doReturn(40, 3420).when(javaCharStream0).getBeginLine();
      doReturn(40, 40).when(javaCharStream0).getEndColumn();
      doReturn(3420, 40).when(javaCharStream0).getEndLine();
      doReturn('*', 'E').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("*", token0.toString());
      assertEquals(40, token0.beginLine);
      assertEquals(40, token0.beginColumn);
      assertEquals(40, token0.endColumn);
      assertEquals(3420, token0.endLine);
      assertEquals(103, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("*", token1.toString());
      assertEquals(3420, token1.beginColumn);
      assertEquals(103, token1.kind);
      assertEquals(40, token1.endLine);
      assertEquals(40, token1.endColumn);
      assertEquals(3420, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      javaCharStream0.inBuf = (-362);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)115;
      pipedOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)105, (byte)0, (byte)110, (byte)49, (byte)0, (byte)0, (byte)0, (byte)6, (byte)115}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals(9, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(9, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1341));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1341. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IN_SINGLE_LINE_COMMENT");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("IN_SINGLE_LINE_COMMENT", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(21, javaCharStream0.bufpos);
      assertEquals(22, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[ejOgLnmn#5gU=9;I)c");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("iM{8");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      javaCharStream0.ReInit((Reader) stringReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("iM", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("{", token1.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(79, token1.kind);
      assertEquals(1, token1.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("8", token2.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.endColumn);
      assertEquals(4, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("/7K35a<\"]");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      javaCharStream0.inputStream = (Reader) stringReader1;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("/", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("7", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('?').when(javaCharStream0).BeginToken();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn((-393)).when(javaCharStream0).getEndColumn();
      doReturn((-393)).when(javaCharStream0).getEndLine();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("?", token0.toString());
      assertEquals((-393), token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals((-393), token0.endColumn);
      assertEquals(91, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XK`m8RY-5&T[tX_7prq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("XK", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("XK", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      StringReader stringReader0 = new StringReader("vg-,;c),N");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken(1741);
      assertNull(token0.toString());
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("vg", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(74, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-19);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)23, (byte)0);
      assertEquals((-15), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-103), (byte) (-32), (byte)0, (byte)23, (byte)72, (byte)0, (byte) (-19)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-3694), (byte)0);
      assertEquals((-15), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-103), (byte) (-32), (byte)0, (byte)23, (byte)72, (byte)0, (byte) (-19)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-15), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-103), (byte) (-32), (byte)0, (byte)23, (byte)72, (byte)0, (byte) (-19)}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals((-15), byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-30), (byte) (-103), (byte) (-32), (byte)0, (byte)23, (byte)72, (byte)0, (byte) (-19)}, byteArray0);
      assertEquals(8, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('@', 'a').when(javaCharStream0).BeginToken();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn((-393)).when(javaCharStream0).getEndColumn();
      doReturn((-393)).when(javaCharStream0).getEndLine();
      doReturn('a', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("@", token0.toString());
      assertEquals(86, token0.kind);
      assertEquals((-393), token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals((-393), token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("@", token1.toString());
      assertEquals((-393), token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals((-393), token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(86, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals("@", token1.toString());
      assertEquals((-393), token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals((-393), token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(86, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)17;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)27, (byte)65, (byte)17}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)27, (byte)65, (byte)17}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, (byte)27, (byte)65, 100);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)27, (byte)65, (byte)17}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)27, (byte)65, (byte)17}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 27, column 65.  Encountered: \"\\u001b\" (27), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("89!;$8Z_w*O)5%_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("8", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("9", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader0 = new StringReader("JY$b6',q\u0002=':YyQ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("JY$b6',q\u0002=':YyQ");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(5, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(5, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals("JY$b6", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream2.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 8.  Encountered: \"q\" (113), after : \"\\',\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("89!;$8Z_w*O)5%_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("89!;$8Z_w*O)5%_");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("89", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("!", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(89, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JaCr)ejZ'U");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("JaCr", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('-').when(javaCharStream0).BeginToken();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(40).when(javaCharStream0).getEndColumn();
      doReturn(3420).when(javaCharStream0).getEndLine();
      doReturn('-').when(javaCharStream0).readChar();
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 3420, 40, 40);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("--", token0.toString());
      assertEquals(40, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(3420, token0.endLine);
      assertEquals(100, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('Q', '.').when(javaCharStream0).BeginToken();
      doReturn("").when(javaCharStream0).GetImage();
      doReturn(113, 71).when(javaCharStream0).getBeginColumn();
      doReturn(34, 6).when(javaCharStream0).getBeginLine();
      doReturn((-393), 113).when(javaCharStream0).getEndColumn();
      doReturn((-393), (-2123)).when(javaCharStream0).getEndLine();
      doReturn(';', 'Q').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("", token0.toString());
      assertEquals((-393), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(34, token0.beginLine);
      assertEquals(113, token0.beginColumn);
      assertEquals((-393), token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(".", token1.toString());
      assertEquals(6, token1.beginLine);
      assertEquals(85, token1.kind);
      assertEquals(113, token1.endColumn);
      assertEquals((-2123), token1.endLine);
      assertEquals(71, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals("", token0.toString());
      assertEquals((-393), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(34, token0.beginLine);
      assertEquals(113, token0.beginColumn);
      assertEquals((-393), token0.endLine);
      assertFalse(token0.equals((Object)token1));
      assertNotSame(token0, token1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("4'-$2");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader(":6w1AO$!5C");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      javaCharStream0.tokenBegin = 45;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(":", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(92, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(token0);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("6", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("^=", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(116, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eC]|V!TERX0EFRd");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-17), (-17));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-17), javaCharStream0.getBeginLine());
      assertEquals((-16), javaCharStream0.getEndColumn());
      assertEquals((-17), javaCharStream0.getLine());
      assertEquals((-17), javaCharStream0.getBeginColumn());
      assertEquals((-16), javaCharStream0.getColumn());
      assertEquals((-17), javaCharStream0.getEndLine());
      assertEquals("eC", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-16), token0.endColumn);
      assertEquals((-17), token0.endLine);
      assertEquals((-17), token0.beginLine);
      assertEquals((-17), token0.beginColumn);
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals((-17), javaCharStream0.getBeginLine());
      assertEquals((-16), javaCharStream0.getEndColumn());
      assertEquals((-17), javaCharStream0.getLine());
      assertEquals((-17), javaCharStream0.getBeginColumn());
      assertEquals((-16), javaCharStream0.getColumn());
      assertEquals((-17), javaCharStream0.getEndLine());
      assertEquals("eC", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-16), token0.endColumn);
      assertEquals((-17), token0.endLine);
      assertEquals((-17), token0.beginLine);
      assertEquals((-17), token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XK`m8RY-5&T[tX_7prq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("XK", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pbPPeAJL#@xYs@Ngb");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = '7';
      charArray0[2] = 'o';
      charArray0[3] = '/';
      charArray0[4] = 'J';
      charArray0[5] = '|';
      charArray0[6] = '9';
      charArray0[7] = 'H';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("i7o/J|9H", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.remaining());
      assertArrayEquals(new char[] {'i', '7', 'o', '/', 'J', '|', '9', 'H'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(charBuffer0);
      
      int int0 = stringReader0.read(charBuffer0);
      assertEquals(8, int0);
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(8, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertArrayEquals(new char[] {'p', 'b', '', 'P', 'P', 'e', 'A', 'J'}, charArray0);
      assertEquals(8, charArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals("L", token0.toString());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('2').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(6).when(javaCharStream0).getEndColumn();
      doReturn(6).when(javaCharStream0).getEndLine();
      doReturn('V').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjmatchedKind = 0;
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(6, token0.endColumn);
      assertEquals(6, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&=");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("&=");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      javaCharStream0.ReInit((Reader) stringReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("&=", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(114, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[AUN&zLo");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken((-1));
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("[", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(81, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("AUN", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(4, token2.endColumn);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("&", token3.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(5, token3.endColumn);
      assertEquals(105, token3.kind);
      assertEquals(5, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("zLo", token4.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(8, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(6, token4.beginColumn);
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertNotNull(token4);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.prevCharIsCR = false;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.inputStream = null;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = Token.newToken(33);
      assertNull(token0.toString());
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      
      javaParserTokenManager0.jjnewStateCnt = 107;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('U', 'D', '*').when(javaCharStream0).BeginToken();
      doReturn("8r", "8r").when(javaCharStream0).GetImage();
      doReturn(114, 31, 12).when(javaCharStream0).getBeginColumn();
      doReturn(31, 12, 31).when(javaCharStream0).getBeginLine();
      doReturn(31, 3655, 114).when(javaCharStream0).getEndColumn();
      doReturn(114, 30, 77).when(javaCharStream0).getEndLine();
      doReturn('=', '*', '=').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("8r", token0.toString());
      assertEquals(74, token0.kind);
      assertEquals(31, token0.beginLine);
      assertEquals(114, token0.endLine);
      assertEquals(31, token0.endColumn);
      assertEquals(114, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("8r", token1.toString());
      assertEquals(3655, token1.endColumn);
      assertEquals(12, token1.beginLine);
      assertEquals(30, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(31, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals("*=", token2.toString());
      assertEquals(112, token2.kind);
      assertEquals(31, token2.beginLine);
      assertEquals(77, token2.endLine);
      assertEquals(12, token2.beginColumn);
      assertEquals(114, token2.endColumn);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      int int0 = stringReader0.read(charArray0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertEquals(1, charArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("hile", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7fj{e(zkHdCL");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      stringReader0.reset();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      stringReader0.reset();
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)56}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("7f", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(70, token0.kind);
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("7f", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(70, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("j", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals("j", token2.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNull(token_GTToken0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNull(token_GTToken0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("j", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)68;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)1, (byte)68}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("<OCTAL_LITERAL>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjimageLen = 27;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      stringReader0.reset();
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      stringReader0.reset();
      javaParserTokenManager0.defaultLexState = (int) (byte)1;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byteArray1[0] = (byte)56;
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)56}, byteArray1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(1, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("<", token0.toString());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("OCTAL_LITERAL", token1.toString());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(14, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      token1.beginColumn = 0;
      assertEquals("OCTAL_LITERAL", token1.toString());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getColumn());
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals("OCTAL_LITERAL", token1.toString());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(14, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream0.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(">", token2.toString());
      assertEquals(14, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(15, token2.endColumn);
      assertEquals(15, token2.beginColumn);
      assertNotNull(token2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(14, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(">", token3.toString());
      assertEquals(14, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(15, token3.endColumn);
      assertEquals(15, token3.beginColumn);
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertNotSame(token3, token2);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals("<", token0.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(14, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token0.equals((Object)token1));
      assertNotSame(token0, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(">", token2.toString());
      assertEquals(14, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(15, token2.endColumn);
      assertEquals(15, token2.beginColumn);
      assertFalse(token2.equals((Object)token3));
      assertNotSame(token2, token3);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals("OCTAL_LITERAL", token1.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(14, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(14, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals("", token4.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.beginLine);
      assertEquals(0, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(15, token4.endColumn);
      assertEquals(15, token4.beginColumn);
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertNotNull(token4);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      
      Token token5 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals("", token5.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token5.kind);
      assertEquals(1, token5.endLine);
      assertEquals(1, token5.beginLine);
      assertEquals(15, token5.beginColumn);
      assertEquals(15, token5.endColumn);
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertNotNull(token5);
      assertNotSame(token5, token4);
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("implements");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("<<=");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = stringReader1.read();
      assertEquals(60, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      javaCharStream0.ReInit((Reader) stringReader1, 60, 60, 94);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(60, javaCharStream0.getBeginLine());
      assertEquals(60, javaCharStream0.getEndLine());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(60, javaCharStream0.getLine());
      assertEquals("<=", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(94, token0.kind);
      assertEquals(60, token0.beginLine);
      assertEquals(60, token0.endLine);
      assertEquals(60, token0.beginColumn);
      assertEquals(61, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(60, javaCharStream0.getBeginLine());
      assertEquals(60, javaCharStream0.getEndLine());
      assertEquals(60, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(60, javaCharStream0.getLine());
      assertEquals("<=", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(94, token0.kind);
      assertEquals(60, token0.beginLine);
      assertEquals(60, token0.endLine);
      assertEquals(60, token0.beginColumn);
      assertEquals(61, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      long long0 = pipedInputStream0.skip((-1L));
      assertEquals(0L, long0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 1, (byte)16);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(15, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(15, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(0, token0.kind);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a8Wr6!NCbb[.X\"E");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-26), 46);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-26), javaCharStream0.getEndLine());
      assertEquals((-26), javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals((-26), javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals("a8Wr6", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token0.beginColumn);
      assertEquals((-26), token0.beginLine);
      assertEquals(50, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-26), token0.endLine);
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-26), javaCharStream0.getEndLine());
      assertEquals((-26), javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals((-26), javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals((-26), javaCharStream0.getEndLine());
      assertEquals((-26), javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals((-26), javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals("!", token1.toString());
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token1.kind);
      assertEquals(51, token1.endColumn);
      assertEquals(51, token1.beginColumn);
      assertEquals((-26), token1.beginLine);
      assertEquals((-26), token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)68;
      StringReader stringReader0 = new StringReader("<OCTAL_LITERAL>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      stringReader0.reset();
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      stringReader0.reset();
      javaCharStream0.FillBuff();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("<", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("OCTAL_LITERAL", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(14, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("<", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endColumn);
      assertFalse(token0.equals((Object)token1));
      assertNotSame(token0, token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(">", token2.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, javaCharStream0.bufpos);
      assertEquals(15, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(15, token2.endColumn);
      assertEquals(124, token2.kind);
      assertNotNull(token2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, javaCharStream0.bufpos);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token3.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(15, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(15, token3.beginColumn);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.endLine);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jc[:aju^U+=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      StringReader stringReader1 = new StringReader("m\"{\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("jc", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pbPPeAJL#@xYs@Ngb");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("pb", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vg-,;c),N");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = Token.newToken(31);
      assertNull(token0.toString());
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("vg", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pbPPeAJL#@xYs@Ngb");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.tokenBegin = 33;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = stringReader0.read();
      assertEquals(112, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("b", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^=");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("^=", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(116, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("<", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 0, 0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)0;
      StringReader stringReader0 = new StringReader("XK`m8RY-5&T[tX_7prq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("XK", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1809));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1809. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-19);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-19)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1466);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-19)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(pushbackInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-19)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-19)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.bufcolumn = javaParserTokenManager0.jjnewLexState;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[ejOgLnmn#5gU=9;I)c");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("iM{8");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = stringReader1.read();
      assertEquals(105, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("M", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("short");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      int int1 = 270;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(270);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 270. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("implmens");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("implmens", token0.toString());
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jc[:aju^U+=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("jc", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eC]|V!TERX0EFRd");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      javaCharStream0.maxNextCharInd = (-2985);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JavaCharStream javaCharStream0 = null;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit((JavaCharStream) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#.tvog1:CMDe#");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#.tvog1:CMDe#");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('U').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn(31).when(javaCharStream0).getEndColumn();
      doReturn(114).when(javaCharStream0).getEndLine();
      doReturn('=').when(javaCharStream0).readChar();
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNull(token0.toString());
      assertEquals(74, token0.kind);
      assertEquals(114, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(31, token0.endColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|.Yh_d^Uu");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 68, 68);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals(68, javaCharStream0.getLine());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(68, javaCharStream0.getBeginColumn());
      assertEquals(68, javaCharStream0.getEndLine());
      assertEquals(68, javaCharStream0.getBeginLine());
      assertEquals("|", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(68, token0.beginLine);
      assertEquals(68, token0.endLine);
      assertEquals(68, token0.endColumn);
      assertEquals(106, token0.kind);
      assertEquals(68, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eC]|V!TERX0EFRd");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = 'F';
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'e', 'C'}, charArray0);
      assertEquals(2, charArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      int int1 = stringReader0.read();
      assertEquals(93, int1);
      assertFalse(int1 == int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[");
      assertFalse(boolean0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("|", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(106, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("V", token1.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('0').when(javaCharStream0).BeginToken();
      doReturn((String) null).when(javaCharStream0).GetImage();
      doReturn(0).when(javaCharStream0).getBeginColumn();
      doReturn(0).when(javaCharStream0).getBeginLine();
      doReturn((-393)).when(javaCharStream0).getEndColumn();
      doReturn((-393)).when(javaCharStream0).getEndLine();
      doReturn('.', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNull(token0.toString());
      assertEquals(70, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals((-393), token0.endColumn);
      assertEquals((-393), token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("4'-$2");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      javaCharStream0.inputStream = (Reader) stringReader1;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("4", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w[7~dlE");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("w", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SkN\"ak&%5wS#0>q9k");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 18, 18, 1116);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals("SkN", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(20, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(18, token0.beginColumn);
      assertEquals(18, token0.endLine);
      assertEquals(18, token0.beginLine);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 18, column 36.  Encountered: <EOF> after : \"\\\"ak&%5wS#0>\\u007fq9k\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(",", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(84, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader0 = new StringReader("JY$b6',q\u0002=':YyQ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      
      Token token0 = null;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(5, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(5, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals("JY$b6", token1.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream2.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token1);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 8.  Encountered: \"q\" (113), after : \"\\',\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'q';
      int int0 = stringReader0.read(charArray0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'w'}, charArray0);
      assertEquals(1, charArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("hile", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|.Yh_d^Uu");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("volatile");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("native");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("native", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(43, token0.kind);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(token0);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('Q', ';').when(javaCharStream0).BeginToken();
      doReturn("'").when(javaCharStream0).GetImage();
      doReturn((-393), (-393)).when(javaCharStream0).getBeginColumn();
      doReturn((-393), (-393)).when(javaCharStream0).getBeginLine();
      doReturn((-393), (-393)).when(javaCharStream0).getEndColumn();
      doReturn((-393), (-255)).when(javaCharStream0).getEndLine();
      doReturn(';').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("'", token0.toString());
      assertEquals((-393), token0.endColumn);
      assertEquals((-393), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-393), token0.beginColumn);
      assertEquals((-393), token0.endLine);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(";", token1.toString());
      assertEquals((-255), token1.endLine);
      assertEquals(83, token1.kind);
      assertEquals((-393), token1.beginLine);
      assertEquals((-393), token1.beginColumn);
      assertEquals((-393), token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6ipU(HQHuBZ1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-393), (-17));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals((-393), javaCharStream0.getEndLine());
      assertEquals((-393), javaCharStream0.getLine());
      assertEquals((-17), javaCharStream0.getBeginColumn());
      assertEquals((-17), javaCharStream0.getColumn());
      assertEquals((-393), javaCharStream0.getBeginLine());
      assertEquals((-17), javaCharStream0.getEndColumn());
      assertEquals("6", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals((-17), token0.beginColumn);
      assertEquals((-393), token0.endLine);
      assertEquals((-17), token0.endColumn);
      assertEquals((-393), token0.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertEquals((-393), javaCharStream0.getEndLine());
      assertEquals((-393), javaCharStream0.getLine());
      assertEquals((-17), javaCharStream0.getBeginColumn());
      assertEquals((-17), javaCharStream0.getColumn());
      assertEquals((-393), javaCharStream0.getBeginLine());
      assertEquals((-17), javaCharStream0.getEndColumn());
      assertEquals("6", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals((-17), token0.beginColumn);
      assertEquals((-393), token0.endLine);
      assertEquals((-17), token0.endColumn);
      assertEquals((-393), token0.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7fj{e(zkHdCL");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("7f", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(70, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("7f", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(70, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('*').when(javaCharStream0).BeginToken();
      doReturn(40, 0).when(javaCharStream0).getBeginColumn();
      doReturn(40, 0).when(javaCharStream0).getBeginLine();
      doReturn(40, 0).when(javaCharStream0).getEndColumn();
      doReturn(3420, 0).when(javaCharStream0).getEndLine();
      doReturn('*').when(javaCharStream0).readChar();
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 87, '*');
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertEquals("", token0.toString());
      assertEquals(40, token0.endColumn);
      assertEquals(3420, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(40, token0.beginColumn);
      assertEquals(40, token0.beginLine);
      assertNotNull(token0);
      
      Token token1 = Token.newToken(21);
      assertNull(token1.toString());
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals("*", token2.toString());
      assertEquals(103, token2.kind);
      assertEquals(40, token2.beginLine);
      assertEquals(3420, token2.endLine);
      assertEquals(40, token2.beginColumn);
      assertEquals(40, token2.endColumn);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("implements");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("implements");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals("implements", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(37, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(10, token0.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eC]|V!TERX0EFRd");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      int int0 = stringReader0.read();
      assertEquals(101, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("C", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XK`m8RY-5&T[tX_7prq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("XK", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 20.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("|UbyE|o=}5gB<e:1vW");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("|", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(106, token0.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-17), (-17));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-17), javaCharStream0.getBeginColumn());
      assertEquals((-17), javaCharStream0.getEndLine());
      assertEquals((-17), javaCharStream0.getLine());
      assertEquals((-17), javaCharStream0.getEndColumn());
      assertEquals((-17), javaCharStream0.getBeginLine());
      assertEquals((-17), javaCharStream0.getColumn());
      assertEquals(".", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-17), token0.endColumn);
      assertEquals((-17), token0.beginColumn);
      assertEquals((-17), token0.beginLine);
      assertEquals(85, token0.kind);
      assertEquals((-17), token0.endLine);
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals((-17), javaCharStream0.getBeginColumn());
      assertEquals((-17), javaCharStream0.getEndLine());
      assertEquals((-17), javaCharStream0.getLine());
      assertEquals((-17), javaCharStream0.getEndColumn());
      assertEquals((-17), javaCharStream0.getBeginLine());
      assertEquals((-17), javaCharStream0.getColumn());
      assertEquals(".", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-17), token0.endColumn);
      assertEquals((-17), token0.beginColumn);
      assertEquals((-17), token0.beginLine);
      assertEquals(85, token0.kind);
      assertEquals((-17), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a8Wr6!NCbb[.X\"E");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-26), 46);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-26), javaCharStream0.getBeginLine());
      assertEquals((-26), javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals((-26), javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals("a8Wr6", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-26), token0.endLine);
      assertEquals(46, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-26), token0.beginLine);
      assertEquals(50, token0.endColumn);
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals((-26), javaCharStream0.getBeginLine());
      assertEquals((-26), javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals((-26), javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals((-26), javaCharStream0.getBeginLine());
      assertEquals((-26), javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals((-26), javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals("a8Wr6", token1.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-26), token1.endLine);
      assertEquals((-26), token1.beginLine);
      assertEquals(50, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(46, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(550);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 550. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('a').when(javaCharStream0).BeginToken();
      doReturn('a', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.getNextToken();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0, 55, 55);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JavaCharStream javaCharStream0 = mock(JavaCharStream.class, new ViolatedAssumptionAnswer());
      doReturn('*', 'a').when(javaCharStream0).BeginToken();
      doReturn(40).when(javaCharStream0).getBeginColumn();
      doReturn(40).when(javaCharStream0).getBeginLine();
      doReturn(40).when(javaCharStream0).getEndColumn();
      doReturn(3420).when(javaCharStream0).getEndLine();
      doReturn('*', 'a', 'a', 'a', 'a').when(javaCharStream0).readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("*", token0.toString());
      assertEquals(40, token0.endColumn);
      assertEquals(3420, token0.endLine);
      assertEquals(40, token0.beginColumn);
      assertEquals(40, token0.beginLine);
      assertEquals(103, token0.kind);
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("*", token1.toString());
      assertEquals(103, token1.kind);
      assertEquals(40, token1.endColumn);
      assertEquals(3420, token1.beginLine);
      assertEquals(40, token1.endLine);
      assertEquals(3420, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNotSame(token1, token0);
  }
}
