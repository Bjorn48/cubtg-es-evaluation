/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:27:44 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModelIterator_ESTest extends ModelIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ModelIterator modelIterator0 = new ModelIterator(statisticsSolver0, (-452L));
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(modelIterator0);
      boolean boolean0 = modelIterator0.isSatisfiable(iVecInt0);
      assertFalse(boolean0);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(9);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, vecInt0);
      subModelIterator0.isSatisfiable((IVecInt) vecInt0);
      subModelIterator0.model();
      long long0 = subModelIterator0.numberOfModelsFoundSoFar();
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>((MaxSatDecorator) null);
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(groupClauseSelectorSolver0, (-1492L), checkMUSSolutionListener0);
      modelIteratorToSATAdapter0.model();
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(1293, 1293);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, readOnlyVecInt0);
      subModelIterator0.isSatisfiable((IVecInt) vecInt0);
      subModelIterator0.model();
      assertEquals(2L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      // Undeclared exception!
      try { 
        modelIterator0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      // Undeclared exception!
      try { 
        modelIterator0.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(1293, 1293);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, readOnlyVecInt0);
      subModelIterator0.isSatisfiable((IVecInt) vecInt0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, (-5288L), checkMUSSolutionListener0);
      modelIteratorToSATAdapter0.reset();
      // Undeclared exception!
      try { 
        modelIteratorToSATAdapter0.primeImplicant();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1293
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      // Undeclared exception!
      try { 
        modelIterator0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(dimacsStringSolver0, (SolutionFoundListener) null);
      VecInt vecInt0 = new VecInt(87);
      SubModelIterator subModelIterator0 = new SubModelIterator(abstractMinimalModel0, vecInt0);
      try { 
        subModelIterator0.isSatisfiable(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ModelIterator modelIterator0 = new ModelIterator(statisticsSolver0, (-452L));
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(modelIterator0);
      SubModelIterator subModelIterator0 = new SubModelIterator(statisticsSolver0, iVecInt0, (-452L));
      // Undeclared exception!
      try { 
        subModelIterator0.isSatisfiable(false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      // Undeclared exception!
      try { 
        modelIterator0.isSatisfiable(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsStringSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsStringSolver0, iVecInt0);
      try { 
        subModelIterator0.isSatisfiable(iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, varOrderHeap0, lubyRestarts0);
      VecInt vecInt0 = new VecInt(0);
      VecInt vecInt1 = new VecInt(1, 1333);
      solver0.dimacs2internal(vecInt1);
      SubModelIterator subModelIterator0 = new SubModelIterator(solver0, vecInt0);
      // Undeclared exception!
      subModelIterator0.isSatisfiable((IVecInt) vecInt0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        modelIterator0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsOutputSolver0, vecInt0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(minimal4InclusionModel0, solutionFoundListener0);
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4CardinalityModel0, vecInt0, 608L);
      try { 
        subModelIterator0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts(1552);
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, varOrderHeap0, lubyRestarts0);
      VecInt vecInt0 = new VecInt(1552, 1552);
      IVecInt iVecInt0 = solver0.dimacs2internal(vecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(solver0, iVecInt0);
      subModelIterator0.isSatisfiable(iVecInt0);
      // Undeclared exception!
      subModelIterator0.isSatisfiable();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      // Undeclared exception!
      try { 
        modelIterator0.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(1293, 1293);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, readOnlyVecInt0);
      boolean boolean0 = subModelIterator0.isSatisfiable();
      assertTrue(boolean0);
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, vecInt0);
      subModelIterator0.isSatisfiable((IVecInt) vecInt0);
      subModelIterator0.model();
      boolean boolean0 = subModelIterator0.isSatisfiable();
      assertEquals(2L, subModelIterator0.numberOfModelsFoundSoFar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(1293, 1293);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, readOnlyVecInt0);
      subModelIterator0.isSatisfiable((IVecInt) vecInt0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, (-5288L), checkMUSSolutionListener0);
      modelIteratorToSATAdapter0.primeImplicant();
      assertEquals(9223372036854775807L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, varOrderHeap0, lubyRestarts0);
      VecInt vecInt0 = new VecInt(0);
      SubModelIterator subModelIterator0 = new SubModelIterator(solver0, vecInt0, 0);
      boolean boolean0 = subModelIterator0.isSatisfiable((IVecInt) vecInt0);
      assertFalse(boolean0);
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(iSolver0, checkMUSSolutionListener0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(abstractMinimalModel0, checkMUSSolutionListener0);
      modelIteratorToSATAdapter0.isSatisfiable((IVecInt) vecInt0);
      assertEquals(1L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, 0, checkMUSSolutionListener0);
      boolean boolean0 = modelIteratorToSATAdapter0.isSatisfiable();
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, vecInt0);
      subModelIterator0.isSatisfiable((IVecInt) vecInt0);
      subModelIterator0.model();
      boolean boolean0 = subModelIterator0.isSatisfiable(true);
      assertEquals(2L, subModelIterator0.numberOfModelsFoundSoFar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(1293, 1293);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, readOnlyVecInt0);
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ModelIterator modelIterator0 = new ModelIterator(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        modelIterator0.primeImplicant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, 0, checkMUSSolutionListener0);
      long long0 = modelIteratorToSATAdapter0.numberOfModelsFoundSoFar();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(1293, 1293);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, readOnlyVecInt0);
      boolean boolean0 = subModelIterator0.isSatisfiable(true);
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      assertTrue(boolean0);
  }
}
