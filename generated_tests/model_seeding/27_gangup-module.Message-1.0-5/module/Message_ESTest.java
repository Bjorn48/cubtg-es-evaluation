/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 19:53:39 GMT 2019
 */

package module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import javax.swing.plaf.synth.SynthRadioButtonMenuItemUI;
import module.Kernel;
import module.Message;
import module.MessageFactory;
import module.Module;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import state.Action;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Message_ESTest extends Message_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Message message0 = MessageFactory.createWarningMessage("", objectArray0);
      message0.sessionID = 112L;
      try { 
        message0.send();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // modnull,msg=Message[id=0,session=112,head=WARNING,recip=*,sender=null,state=1,ttl=3000,time=1392409281320,body=Reading string from locale failed: key=
         // This probably means that you have an old or otherwise
         // inaccurate locale file (maybe it's missing altogether)
         // or that the classpath does not contain the directory.]: no source module
         //
         verifyException("module.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Message message0 = new Message();
      message0.messageID = 637L;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Message message1 = message0.reply(locale_FilteringMode0);
      assertEquals(3000L, message1.getTTL());
      assertEquals(1, message1.getState());
      assertEquals(0L, message1.getSID());
      assertEquals(0L, message1.getID());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Message message0 = new Message();
      message0.setDelivered(false);
      assertEquals(0, message0.getState());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Message message0 = new Message();
      message0.setDelivered(true);
      message0.setDelivered(true);
      assertTrue(message0.delivered());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Message message0 = new Message();
      message0.messageID = 10L;
      long long0 = message0.getSID();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Message message0 = new Message();
      Action action0 = new Action(3000, (-5), (byte)79, (byte)0, (byte) (-120));
      message0.set("<", "T-", action0);
      assertEquals(1, message0.getState());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Message message0 = new Message();
      Kernel kernel0 = mock(Kernel.class, new ViolatedAssumptionAnswer());
      message0.send((Module) kernel0);
      assertEquals(0L, message0.getID());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2114, "");
      System.setCurrentTimeMillis(0);
      SynthRadioButtonMenuItemUI synthRadioButtonMenuItemUI0 = new SynthRadioButtonMenuItemUI();
      Message message1 = message0.reply(synthRadioButtonMenuItemUI0);
      assertEquals("*", message0.getRecipient());
      assertEquals(3000L, message1.getTTL());
      assertEquals(3000L, message0.getTTL());
      assertEquals(1, message0.getState());
      assertEquals("DROPPED", message1.getHeader());
      assertEquals(0L, message1.getSID());
      assertEquals(1, message1.getState());
      assertEquals(1L, message1.getID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis((-3850L));
      Message message0 = MessageFactory.createConnectionDroppedMessage((-1292), "");
      Message message1 = message0.reply("");
      assertEquals("*", message0.getRecipient());
      assertEquals(0L, message1.getSID());
      assertEquals(1, message1.getState());
      assertEquals("DROPPED", message1.getHeader());
      assertEquals(3000L, message1.getTTL());
      assertEquals(1, message0.getState());
      assertEquals(1L, message1.getID());
      assertEquals(3000L, message0.getTTL());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Message message0 = new Message();
      long long0 = message0.getTimeStamp();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2114, "");
      message0.timestamp = (-1L);
      long long0 = message0.getTimeStamp();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Message message0 = new Message();
      long long0 = message0.getTTL();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Message message0 = new Message();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Message message1 = message0.reply(locale_FilteringMode0);
      assertEquals(3000L, message1.getTTL());
      
      message1.timetolive = (-1L);
      long long0 = message1.getTTL();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage(",state=");
      int int0 = message0.getState();
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(1, int0);
      assertEquals("KERNEL", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Message message0 = new Message();
      message0.state = (-634);
      int int0 = message0.getState();
      assertEquals((-634), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Message message0 = new Message("SdpZy-s+ Q{$iWUGl", "Message[id=");
      message0.setSender("Message[id=");
      String string0 = message0.getSender();
      assertEquals(3000L, message0.getTTL());
      assertEquals("SdpZy-s+ Q{$iWUGl", message0.getHeader());
      assertEquals("Message[id=", string0);
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertNotNull(string0);
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Message message0 = new Message();
      message0.setSender("");
      String string0 = message0.getSender();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.createMessage();
      Message message0 = MessageFactory.createMessage("", "*", (Object) messageFactory0);
      long long0 = message0.getSID();
      assertEquals("*", message0.getRecipient());
      assertEquals(1L, long0);
      assertEquals(3000L, message0.getTTL());
      assertEquals(1, message0.getState());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage(",state=");
      String string0 = message0.getRecipient();
      assertEquals("KERNEL", message0.getHeader());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
      assertEquals("*", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Message message0 = MessageFactory.createMessage("", "", (Object) "");
      String string0 = message0.getRecipient();
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertNotNull(string0);
      assertEquals(1, message0.getState());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage(",state=");
      Message message1 = MessageFactory.createMessage(",state=", ",state=", (Object) message0);
      long long0 = message1.getID();
      assertEquals(2, message0.getRefCount());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Message message0 = new Message();
      message0.messageID = (-1382L);
      long long0 = message0.getID();
      assertEquals((-1382L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2114, "");
      message0.clone();
      assertEquals(3000L, message0.getTTL());
      assertEquals("*", message0.getRecipient());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Message message0 = new Message();
      Message message1 = message0.clone();
      assertEquals("", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Message message0 = new Message();
      // Undeclared exception!
      try { 
        message0.send((Module) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage(",state=");
      Message message1 = MessageFactory.createMessage(",state=", ",state=", (Object) message0);
      assertEquals(2, message0.getRefCount());
      
      message1.unref();
      assertEquals(1L, message1.getID());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Message message0 = new Message();
      Action action0 = new Action(3000, 1, (byte)0, (byte) (-38), (byte)0);
      message0.setBody(action0);
      assertFalse(action0.getIsConsumed());
      assertEquals(1, action0.getRefCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Message message0 = new Message();
      message0.setBody("?|nm3Oq");
      assertEquals(1, Message.CREATED);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = new Message(messageFactory0);
      assertNull(message0.getSender());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2114, "");
      String string0 = message0.toString();
      assertEquals("Message[id=0,session=0,head=DROPPED,recip=*,sender=null,state=1,ttl=3000,time=1392409281320,body=ID: 2114 IP: ]", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Message message0 = new Message();
      try { 
        message0.send();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // modnull,msg=Message[id=0,session=0,head=null,recip=null,sender=null,state=0,ttl=0,time=0,body=null]: no source module
         //
         verifyException("module.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2114, "");
      message0.consume();
      assertEquals("*", message0.getRecipient());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals(3000L, message0.getTTL());
      assertEquals("DROPPED", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Message message0 = new Message();
      assertFalse(message0.received());
      
      message0.state = (-925);
      boolean boolean0 = message0.received();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2114, "");
      boolean boolean0 = message0.received();
      assertEquals("*", message0.getRecipient());
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals(1, message0.getState());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2114, "");
      boolean boolean0 = message0.delivered();
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("DROPPED", message0.getHeader());
      assertFalse(boolean0);
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Message message0 = new Message();
      message0.setDelivered(true);
      boolean boolean0 = message0.delivered();
      assertEquals(4, message0.getState());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2114, "");
      message0.setDelivered(false);
      assertEquals(1, message0.getState());
      assertEquals(0L, message0.getSID());
      assertEquals(3000L, message0.getTTL());
      assertEquals("DROPPED", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Message message0 = new Message();
      Object object0 = message0.getBody();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Message message0 = MessageFactory.createUnloadMessage("_GUI_CHAT_GANGTAB");
      Object object0 = message0.getBody();
      assertEquals("UNLOAD _GUI_CHAT_GANGTAB", object0);
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("KERNEL", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Message message0 = new Message();
      String string0 = message0.getHeader();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2114, "");
      String string0 = message0.getHeader();
      assertEquals("*", message0.getRecipient());
      assertNotNull(string0);
      assertEquals("DROPPED", string0);
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2114, "");
      long long0 = message0.getTTL();
      assertEquals("DROPPED", message0.getHeader());
      assertEquals("*", message0.getRecipient());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals(3000L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2114, "");
      assertEquals("*", message0.getRecipient());
      
      message0.setRecipient("");
      assertEquals("", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Message message0 = new Message((String) null, (Object) null);
      assertEquals(0L, message0.getSID());
      
      Message message1 = MessageFactory.createMessage("SaENPmO>(NL1]", (Object) null);
      Object object0 = new Object();
      Message message2 = message1.reply(object0);
      assertEquals("*", message1.getRecipient());
      assertEquals(2L, message2.getID());
      assertEquals(1, message1.getState());
      assertEquals("SaENPmO>(NL1]", message2.getHeader());
      assertEquals(3000L, message1.getTTL());
      assertEquals(3000L, message2.getTTL());
      assertEquals(1L, message2.getSID());
      assertEquals(1, message2.getState());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Message message0 = new Message();
      String string0 = message0.getRecipient();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Kernel kernel0 = new Kernel();
      Message message0 = new Message("GETS GameModule mintimemove,warmuptime,strengthpow,moneyval,moneytype,minstrength,maxstrength,rounds", "Z-8' (&xQP.0 Va4", kernel0);
      try { 
        message0.send((Module) kernel0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: modnull,msg=Message[id=0,session=0,head=GETS GameModule mintimemove,warmuptime,strengthpow,moneyval,moneytype,minstrength,maxstrength,rounds,recip=Z-8' (&xQP.0 Va4,sender=null,state=1,ttl=3000,time=1392409281320,body=module.Kernel@2]
         //
         verifyException("module.Kernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Message message0 = new Message("6*%4", "6*%4", "6*%4");
      message0.setHeader("6*%4");
      assertEquals("6*%4", message0.getHeader());
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Message message0 = new Message();
      long long0 = message0.getID();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Message message0 = new Message();
      // Undeclared exception!
      try { 
        message0.sendTo((Module) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Message", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Message message0 = new Message();
      int int0 = message0.getState();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Message message0 = new Message();
      String string0 = message0.getSender();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2114, "");
      long long0 = message0.getTimeStamp();
      assertEquals(1392409281320L, long0);
      assertEquals("DROPPED", message0.getHeader());
      assertEquals(3000L, message0.getTTL());
      assertEquals(0L, message0.getSID());
      assertEquals(1, message0.getState());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Message message0 = MessageFactory.createConnectionDroppedMessage(2114, "");
      // Undeclared exception!
      try { 
        message0.sendFrom((Module) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("module.Message", e);
      }
  }
}
