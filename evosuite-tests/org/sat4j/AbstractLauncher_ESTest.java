/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:38:10 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.ExitCode;
import org.sat4j.ILauncherMode;
import org.sat4j.MUSLauncher;
import org.sat4j.OptimizationMode;
import org.sat4j.core.ASolverFactory;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.core.Solver;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IProblem;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SolutionCounter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractLauncher_ESTest extends AbstractLauncher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.setDisplaySolutionLine(true);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BasicLauncher<Minimal4CardinalityModel> basicLauncher0 = new BasicLauncher<Minimal4CardinalityModel>((ASolverFactory<Minimal4CardinalityModel>) null);
      basicLauncher0.showAvailableSolvers((ASolverFactory<ModelIteratorToSATAdapter>) null, "");
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[7];
      stringArray0[6] = "c ";
      mUSLauncher0.run(stringArray0);
      assertEquals(1392409281320L, mUSLauncher0.getBeginTime());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Minimal4CardinalityModel> basicLauncher0 = new BasicLauncher<Minimal4CardinalityModel>(aSolverFactory0);
      basicLauncher0.usage();
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.log("Cb[");
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.configureLauncher();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.addHook();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[5];
      stringArray0[4] = "c ";
      mUSLauncher0.run(stringArray0);
      mUSLauncher0.getReader();
      assertEquals(1392409281320L, mUSLauncher0.getBeginTime());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.getExitCode();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "c ";
      mUSLauncher0.run(stringArray0);
      long long0 = mUSLauncher0.getBeginTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      // Undeclared exception!
      try { 
        mUSLauncher0.solve((IProblem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(aSolverFactory0).solverNames();
      // Undeclared exception!
      try { 
        mUSLauncher0.showAvailableSolvers(aSolverFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>((ASolverFactory<MaxSatDecorator>) null);
      // Undeclared exception!
      try { 
        basicLauncher0.run((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.BasicLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        mUSLauncher0.run(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.MUSLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.out = null;
      // Undeclared exception!
      try { 
        mUSLauncher0.readProblem("c ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      // Undeclared exception!
      try { 
        mUSLauncher0.readProblem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      try { 
        mUSLauncher0.readProblem("c ");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.showAvailableSolvers((ASolverFactory<Solver<MixedDataStructureDanielWL>>) null);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BasicLauncher<Minimal4CardinalityModel> basicLauncher0 = new BasicLauncher<Minimal4CardinalityModel>((ASolverFactory<Minimal4CardinalityModel>) null);
      basicLauncher0.bufferizeLog();
      basicLauncher0.usage();
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[6];
      mUSLauncher0.setSilent(true);
      stringArray0[5] = "%Rs-s";
      mUSLauncher0.run(stringArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.setIncomplete(true);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>((ASolverFactory<MaxSatDecorator>) null);
      basicLauncher0.getLogWriter();
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Minimal4CardinalityModel> basicLauncher0 = new BasicLauncher<Minimal4CardinalityModel>(aSolverFactory0);
      boolean boolean0 = basicLauncher0.isSilent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.displayLicense();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Minimal4CardinalityModel> basicLauncher0 = new BasicLauncher<Minimal4CardinalityModel>(aSolverFactory0);
      assertFalse(basicLauncher0.isSilent());
      
      basicLauncher0.setSilent(true);
      boolean boolean0 = basicLauncher0.isSilent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.bufferizeLog();
      mUSLauncher0.flushLog();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.flushLog();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Minimal4CardinalityModel> basicLauncher0 = new BasicLauncher<Minimal4CardinalityModel>(aSolverFactory0);
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory1 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(aSolverFactory1).solverNames();
      // Undeclared exception!
      try { 
        basicLauncher0.showAvailableSolvers(aSolverFactory1, "uf8E<EF?E2f/F*D$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<GateTranslator> basicLauncher0 = new BasicLauncher<GateTranslator>(aSolverFactory0);
      String[] stringArray0 = new String[9];
      ASolverFactory<DimacsStringSolver> aSolverFactory1 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(aSolverFactory1).solverNames();
      basicLauncher0.showAvailableSolvers(aSolverFactory1);
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[7];
      mUSLauncher0.feedWithDecorated = true;
      stringArray0[6] = "c ";
      mUSLauncher0.run(stringArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.getLauncherMode();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.setLogWriter((PrintWriter) null);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(solutionCounter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      FullClauseSelectorSolver<SolutionCounter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SolutionCounter>(solutionCounter0, true);
      mUSLauncher0.solve(fullClauseSelectorSolver0);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Minimal4CardinalityModel> basicLauncher0 = new BasicLauncher<Minimal4CardinalityModel>(aSolverFactory0);
      basicLauncher0.bufferizeLog();
      basicLauncher0.displayHeader();
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      mUSLauncher0.setLauncherMode(optimizationMode0);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ExitCode exitCode0 = ExitCode.UPPER_BOUND;
      // Undeclared exception!
      try { 
        mUSLauncher0.setExitCode(exitCode0);
       //  fail("Expecting exception: NoSuchFieldError");
       // Unstable assertion
      } catch(NoSuchFieldError e) {
         //
         // exitCode
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.getReader();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.getBeginTime();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>((ASolverFactory<MaxSatDecorator>) null);
      basicLauncher0.displayResult();
      assertFalse(basicLauncher0.isSilent());
  }
}
