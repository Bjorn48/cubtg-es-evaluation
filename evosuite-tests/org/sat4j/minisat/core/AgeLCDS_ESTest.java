/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:39:44 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.core.AgeLCDS;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AgeLCDS_ESTest extends AgeLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, eMARestarts0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, eMARestarts0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      IVecInt iVecInt0 = VecInt.EMPTY;
      Constr constr0 = cardinalityDataStructureYanMin0.createUnregisteredClause(iVecInt0);
      percentLengthLearning0.learns(constr0);
      Vec<Constr> vec0 = new Vec<Constr>();
      ageLCDS0.reduce(vec0);
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, eMARestarts0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, eMARestarts0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      VecInt vecInt0 = new VecInt();
      Constr constr0 = Constr.TAUTOLOGY;
      percentLengthLearning0.learns(constr0);
      Constr constr1 = cardinalityDataStructureYanMin0.createUnregisteredClause(vecInt0);
      percentLengthLearning0.learns(constr1);
      Vec<Constr> vec0 = new Vec<Constr>();
      percentLengthLearning0.learns(constr1);
      percentLengthLearning0.learns(constr1);
      // Undeclared exception!
      try { 
        ageLCDS0.reduce(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AgeLCDS ageLCDS0 = new AgeLCDS((Solver<? extends DataStructureFactory>) null, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = ageLCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vec<Constr> vec0 = new Vec<Constr>();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      AgeLCDS ageLCDS0 = new AgeLCDS((Solver<? extends DataStructureFactory>) null, glucose21Restarts0);
      // Undeclared exception!
      try { 
        ageLCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.AgeLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, eMARestarts0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, eMARestarts0);
      Constr constr0 = Constr.TAUTOLOGY;
      percentLengthLearning0.learns(constr0);
      Vec<Constr> vec0 = new Vec<Constr>();
      percentLengthLearning0.learns(constr0);
      ageLCDS0.reduce(vec0);
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NoRestarts noRestarts0 = new NoRestarts();
      AgeLCDS ageLCDS0 = new AgeLCDS((Solver<? extends DataStructureFactory>) null, noRestarts0);
      ConflictTimer conflictTimer0 = ageLCDS0.getTimer();
      assertSame(noRestarts0, conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoRestarts noRestarts0 = new NoRestarts();
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, noRestarts0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, noRestarts0);
      ageLCDS0.onPropagation((Constr) null);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NoRestarts noRestarts0 = new NoRestarts();
      AgeLCDS ageLCDS0 = new AgeLCDS((Solver<? extends DataStructureFactory>) null, noRestarts0);
      ageLCDS0.init();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NoRestarts noRestarts0 = new NoRestarts();
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, noRestarts0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, noRestarts0);
      ageLCDS0.onClauseLearning((Constr) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NoRestarts noRestarts0 = new NoRestarts();
      AgeLCDS ageLCDS0 = new AgeLCDS((Solver<? extends DataStructureFactory>) null, noRestarts0);
      String string0 = ageLCDS0.toString();
      assertEquals("Age based learned constraints deletion strategy with timer NoRestarts", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, arminRestarts0);
      AgeLCDS ageLCDS0 = new AgeLCDS(solver0, arminRestarts0);
      ageLCDS0.onConflictAnalysis((Constr) null);
  }
}
