/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 16:51:52 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.FilterOutputStream;
import java.io.PrintWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.ExitCode;
import org.sat4j.ILauncherMode;
import org.sat4j.MUSLauncher;
import org.sat4j.OptimizationMode;
import org.sat4j.core.ASolverFactory;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.SingleSolutionDetector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractLauncher_ESTest extends AbstractLauncher_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(48);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mUSLauncher0.setLogWriter(mockPrintWriter0);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.usage();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SingleSolutionDetector> basicLauncher0 = new BasicLauncher<SingleSolutionDetector>(aSolverFactory0);
      basicLauncher0.log("org.sat4j.tools.MultiTracing");
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.displayHeader();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.configureLauncher();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "c ";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("c ");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "c ");
      mUSLauncher0.run(stringArray0);
      assertEquals(1392409281320L, mUSLauncher0.getBeginTime());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("c ");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[0] = "c ";
      // Undeclared exception!
      try { 
        MUSLauncher.main(stringArray0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[8];
      stringArray0[7] = "c ";
      mUSLauncher0.run(stringArray0);
      mUSLauncher0.getReader();
      assertEquals(1392409281320L, mUSLauncher0.getBeginTime());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.getExitCode();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "c ";
      mUSLauncher0.run(stringArray0);
      long long0 = mUSLauncher0.getBeginTime();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SingleSolutionDetector> basicLauncher0 = new BasicLauncher<SingleSolutionDetector>(aSolverFactory0);
      basicLauncher0.beginTime = (-1391L);
      long long0 = basicLauncher0.getBeginTime();
      assertEquals((-1391L), long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      // Undeclared exception!
      try { 
        mUSLauncher0.solve((IProblem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ASolverFactory<ClausalCardinalitiesDecorator<DimacsOutputSolver>> aSolverFactory0 = (ASolverFactory<ClausalCardinalitiesDecorator<DimacsOutputSolver>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(aSolverFactory0).solverNames();
      // Undeclared exception!
      try { 
        mUSLauncher0.showAvailableSolvers(aSolverFactory0, "8io; 7wMiS?v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SingleSolutionDetector> basicLauncher0 = new BasicLauncher<SingleSolutionDetector>(aSolverFactory0);
      ASolverFactory<MaxSatDecorator> aSolverFactory1 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((String[]) null).when(aSolverFactory1).solverNames();
      // Undeclared exception!
      try { 
        basicLauncher0.showAvailableSolvers(aSolverFactory1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      BasicLauncher<SingleSolutionDetector> basicLauncher0 = new BasicLauncher<SingleSolutionDetector>(aSolverFactory0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        basicLauncher0.run(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.BasicLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        mUSLauncher0.run(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.MUSLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SingleSolutionDetector> basicLauncher0 = new BasicLauncher<SingleSolutionDetector>(aSolverFactory0);
      // Undeclared exception!
      try { 
        basicLauncher0.readProblem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      // Undeclared exception!
      try { 
        mUSLauncher0.readProblem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.shutdownHook = null;
      // Undeclared exception!
      try { 
        mUSLauncher0.addHook();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.ApplicationShutdownHooks", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SingleSolutionDetector> basicLauncher0 = new BasicLauncher<SingleSolutionDetector>(aSolverFactory0);
      basicLauncher0.addHook();
      // Undeclared exception!
      try { 
        basicLauncher0.addHook();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hook previously registered
         //
         verifyException("java.lang.ApplicationShutdownHooks", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SingleSolutionDetector> basicLauncher0 = new BasicLauncher<SingleSolutionDetector>(aSolverFactory0);
      assertFalse(basicLauncher0.isSilent());
      
      basicLauncher0.setSilent(true);
      basicLauncher0.usage();
      assertTrue(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SingleSolutionDetector> basicLauncher0 = new BasicLauncher<SingleSolutionDetector>(aSolverFactory0);
      boolean boolean0 = basicLauncher0.isSilent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.displayLicense();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.bufferizeLog();
      mUSLauncher0.flushLog();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.flushLog();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[6];
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(aSolverFactory0).solverNames();
      mUSLauncher0.showAvailableSolvers(aSolverFactory0, "c ");
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SingleSolutionDetector> basicLauncher0 = new BasicLauncher<SingleSolutionDetector>(aSolverFactory0);
      basicLauncher0.showAvailableSolvers((ASolverFactory<MaxSatDecorator>) null);
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SingleSolutionDetector> basicLauncher0 = new BasicLauncher<SingleSolutionDetector>(aSolverFactory0);
      basicLauncher0.setSilent(true);
      try { 
        basicLauncher0.readProblem("c ");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String[] stringArray0 = new String[9];
      mUSLauncher0.feedWithDecorated = true;
      stringArray0[8] = "c ";
      mUSLauncher0.run(stringArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SingleSolutionDetector> basicLauncher0 = new BasicLauncher<SingleSolutionDetector>(aSolverFactory0);
      basicLauncher0.setDisplaySolutionLine(true);
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.setIncomplete(true);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.getLauncherMode();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      PrintWriter printWriter0 = mUSLauncher0.getLogWriter();
      mUSLauncher0.setLogWriter(printWriter0);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      IProblem iProblem0 = mock(IProblem.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iProblem0).isSatisfiable();
      mUSLauncher0.solve(iProblem0);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.bufferizeLog();
      mUSLauncher0.usage();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      mUSLauncher0.setLauncherMode(optimizationMode0);
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SingleSolutionDetector> basicLauncher0 = new BasicLauncher<SingleSolutionDetector>(aSolverFactory0);
      ExitCode exitCode0 = ExitCode.SATISFIABLE;
      // Undeclared exception!
      try { 
        basicLauncher0.setExitCode(exitCode0);
       //  fail("Expecting exception: NoSuchFieldError");
       // Unstable assertion
      } catch(NoSuchFieldError e) {
         //
         // exitCode
         //
         verifyException("org.sat4j.AbstractLauncher", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.getReader();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.getBeginTime();
      assertFalse(mUSLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SingleSolutionDetector> basicLauncher0 = new BasicLauncher<SingleSolutionDetector>(aSolverFactory0);
      basicLauncher0.displayResult();
      assertFalse(basicLauncher0.isSilent());
  }
}
