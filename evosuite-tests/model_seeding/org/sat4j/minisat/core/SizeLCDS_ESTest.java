/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:03:19 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.constraints.cnf.BinaryClauses;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.xor.Xor;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.SizeLCDS;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SizeLCDS_ESTest extends SizeLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      SearchParams searchParams0 = new SearchParams();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, noRestarts0);
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, 2988);
      binaryClauses0.addBinaryClause(2988);
      binaryClauses0.addBinaryClause((-2412));
      binaryClauses0.addBinaryClause((-2690));
      Vec<Constr> vec0 = new Vec<Constr>(1, binaryClauses0);
      // Undeclared exception!
      try { 
        sizeLCDS0.reduce(vec0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot remove all the binary clauses at once!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SizeLCDS sizeLCDS0 = new SizeLCDS((Solver<? extends DataStructureFactory>) null, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = sizeLCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, noRestarts0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, glucose21Restarts0);
      Constr[] constrArray0 = new Constr[1];
      Vec<Constr> vec0 = new Vec<Constr>(constrArray0);
      // Undeclared exception!
      try { 
        sizeLCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.SizeLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, noRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, noRestarts0);
      // Undeclared exception!
      try { 
        sizeLCDS0.onConflictAnalysis((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.SizeLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, noRestarts0);
      SearchParams searchParams0 = solver0.getSearchParams();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver1, miniSATRestarts0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredClause(iVecInt0);
      sizeLCDS0.onConflictAnalysis(constr0);
      assertTrue(constr0.learnt());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, noRestarts0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, fixedPeriodRestarts0);
      VecInt vecInt0 = new VecInt(2741, 2741);
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = new Xor(vecInt0, true, iLits0);
      sizeLCDS0.onConflictAnalysis(xor0);
      assertTrue(xor0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      solver0.verbose = true;
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, noRestarts0);
      IVec<Constr> iVec0 = solver0.constrs;
      sizeLCDS0.reduce(iVec0);
      assertTrue(iVec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      SearchParams searchParams0 = new SearchParams();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, noRestarts0);
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, 2988);
      binaryClauses0.addBinaryClause(2988);
      binaryClauses0.addBinaryClause((-2412));
      Vec<Constr> vec0 = new Vec<Constr>(1, binaryClauses0);
      sizeLCDS0.reduce(vec0);
      assertEquals(1, vec0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      SearchParams searchParams0 = new SearchParams();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, noRestarts0);
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, false, 1975);
      Vec<Constr> vec0 = new Vec<Constr>(1975, minWatchCard0);
      // Undeclared exception!
      try { 
        sizeLCDS0.reduce(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 987
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      SearchParams searchParams0 = new SearchParams();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, noRestarts0);
      Lits lits0 = new Lits();
      BinaryClauses binaryClauses0 = new BinaryClauses(lits0, 2988);
      Vec<Constr> vec0 = new Vec<Constr>(1, binaryClauses0);
      // Undeclared exception!
      try { 
        sizeLCDS0.reduce(vec0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot remove all the binary clauses at once!
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, noRestarts0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, glucose21Restarts0);
      sizeLCDS0.init();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SizeLCDS sizeLCDS0 = new SizeLCDS((Solver<? extends DataStructureFactory>) null, (ConflictTimer) null);
      String string0 = sizeLCDS0.toString();
      assertEquals("Sized based learned constraints deletion strategy with timer null", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1.0));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 2197);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, glucose21Restarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, glucose21Restarts0);
      Glucose21Restarts glucose21Restarts1 = (Glucose21Restarts)sizeLCDS0.getTimer();
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, noRestarts0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, glucose21Restarts0);
      sizeLCDS0.onClauseLearning((Constr) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, noRestarts0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, glucose21Restarts0);
      sizeLCDS0.onPropagation((Constr) null);
  }
}
