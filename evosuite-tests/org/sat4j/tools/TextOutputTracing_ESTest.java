/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:38:31 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.FakeConstr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.Lbool;
import org.sat4j.specs.RandomAccessModel;
import org.sat4j.tools.TextOutputTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextOutputTracing_ESTest extends TextOutputTracing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, "propagating ");
      textOutputTracing0.assuming(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>((Map<Integer, Object>) null);
      VecInt vecInt0 = new VecInt(102);
      vecInt0.unsafePush(2635);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-952));
      // Undeclared exception!
      try { 
        textOutputTracing0.learn(atLeast0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>((Map<Integer, Object>) null);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = Integer.getInteger((String) null, 1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, textOutputTracing0, biFunction0);
      TextOutputTracing<Object> textOutputTracing1 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing1.adding((-1));
      assertFalse(textOutputTracing1.equals((Object)textOutputTracing0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>((Map<Integer, Object>) null);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Integer integer0 = Integer.getInteger((String) null, 1);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(integer0, textOutputTracing0, biFunction0);
      TextOutputTracing<Object> textOutputTracing1 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing1.adding(1);
      assertFalse(textOutputTracing1.equals((Object)textOutputTracing0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>(hashMap0);
      textOutputTracing0.learnUnit((-1852));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      IConstr iConstr0 = FakeConstr.instance();
      textOutputTracing0.delete(iConstr0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>((Map<Integer, Object>) null);
      textOutputTracing0.restarting();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Lbool lbool0 = Lbool.FALSE;
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing0.end(lbool0);
      assertEquals("F", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>((Map<Integer, Object>) null);
      textOutputTracing0.backtracking(591);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, MixedDataStructureDanielWLConciseBinary> hashMap0 = new HashMap<Integer, MixedDataStructureDanielWLConciseBinary>();
      TextOutputTracing<MixedDataStructureDanielWLConciseBinary> textOutputTracing0 = new TextOutputTracing<MixedDataStructureDanielWLConciseBinary>(hashMap0);
      int[] intArray0 = new int[0];
      textOutputTracing0.solutionFound(intArray0, (RandomAccessModel) null);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>(hashMap0);
      textOutputTracing0.enqueueing(538, (IConstr) null);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextOutputTracing<MixedDataStructureDanielWLConciseBinary> textOutputTracing0 = new TextOutputTracing<MixedDataStructureDanielWLConciseBinary>((Map<Integer, MixedDataStructureDanielWLConciseBinary>) null);
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, iLogAble0);
      textOutputTracing0.init(solver0);
      assertFalse(solver0.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>((Map<Integer, Object>) null);
      textOutputTracing0.conflictFound(605);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, MixedDataStructureDanielWLConciseBinary> hashMap0 = new HashMap<Integer, MixedDataStructureDanielWLConciseBinary>();
      TextOutputTracing<MixedDataStructureDanielWLConciseBinary> textOutputTracing0 = new TextOutputTracing<MixedDataStructureDanielWLConciseBinary>(hashMap0);
      textOutputTracing0.start();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, MixedDataStructureDanielWLConciseBinary> hashMap0 = new HashMap<Integer, MixedDataStructureDanielWLConciseBinary>();
      TextOutputTracing<MixedDataStructureDanielWLConciseBinary> textOutputTracing0 = new TextOutputTracing<MixedDataStructureDanielWLConciseBinary>(hashMap0);
      textOutputTracing0.beginLoop();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing0.conflictFound((IConstr) null, 0, (-1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>((Map<Integer, Object>) null);
      VecInt vecInt0 = new VecInt(102);
      AtLeast atLeast0 = new AtLeast((ILits) null, vecInt0, (-952));
      textOutputTracing0.learn(atLeast0);
      assertFalse(atLeast0.simplify());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing0.cleaning();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing0.backjump(2452);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, MixedDataStructureDanielWLConciseBinary> hashMap0 = new HashMap<Integer, MixedDataStructureDanielWLConciseBinary>();
      TextOutputTracing<MixedDataStructureDanielWLConciseBinary> textOutputTracing0 = new TextOutputTracing<MixedDataStructureDanielWLConciseBinary>(hashMap0);
      textOutputTracing0.propagating((-1));
  }
}
