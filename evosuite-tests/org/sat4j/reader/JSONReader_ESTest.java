/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:22:00 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.PushbackInputStream;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.reader.JSONReader;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReader_ESTest extends JSONReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONReader<SolutionCounter> jSONReader0 = new JSONReader<SolutionCounter>((SolutionCounter) null);
      IVecInt iVecInt0 = jSONReader0.getLiterals("==");
      assertEquals(0, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONReader<ClausalCardinalitiesDecorator<GateTranslator>> jSONReader0 = new JSONReader<ClausalCardinalitiesDecorator<GateTranslator>>((ClausalCardinalitiesDecorator<GateTranslator>) null);
      int[] intArray0 = new int[4];
      String string0 = jSONReader0.decode(intArray0);
      assertEquals("[0,0,0,0]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      JSONReader<ModelIterator> jSONReader0 = new JSONReader<ModelIterator>(modelIterator0);
      String string0 = jSONReader0.constraintRegexp();
      assertEquals("((\\[(-?(\\d+)(,-?(\\d+))*)?\\])|(\\[(\\[(-?(\\d+)(,-?(\\d+))*)?\\]),'[=<>]=?',-?\\d+\\]))", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONReader<StatisticsSolver> jSONReader0 = new JSONReader<StatisticsSolver>((StatisticsSolver) null);
      // Undeclared exception!
      try { 
        jSONReader0.parseString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONReader<GateTranslator> jSONReader0 = new JSONReader<GateTranslator>((GateTranslator) null);
      // Undeclared exception!
      try { 
        jSONReader0.parseInstance((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      JSONReader<ModelIterator> jSONReader0 = new JSONReader<ModelIterator>(modelIterator0);
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(inputStream0);
      try { 
        jSONReader0.parseInstance((InputStream) pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        jSONReader0.handleCard("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        jSONReader0.handleCard((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      JSONReader<SolutionCounter> jSONReader0 = new JSONReader<SolutionCounter>(solutionCounter0);
      // Undeclared exception!
      try { 
        jSONReader0.handleCard("[[],''v0]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONReader<SolutionCounter> jSONReader0 = new JSONReader<SolutionCounter>((SolutionCounter) null);
      // Undeclared exception!
      try { 
        jSONReader0.getLiterals("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ModelIterator modelIterator0 = new ModelIterator(statisticsSolver0);
      JSONReader<ModelIterator> jSONReader0 = new JSONReader<ModelIterator>(modelIterator0);
      // Undeclared exception!
      try { 
        jSONReader0.getLiterals((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<Minimal4CardinalityModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      JSONReader<FullClauseSelectorSolver<Minimal4CardinalityModel>> jSONReader0 = new JSONReader<FullClauseSelectorSolver<Minimal4CardinalityModel>>(fullClauseSelectorSolver0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("g6[dq4?P4e@?))rcx2");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      // Undeclared exception!
      try { 
        jSONReader0.decode((int[]) null, (PrintWriter) mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONReader<StatisticsSolver> jSONReader0 = new JSONReader<StatisticsSolver>((StatisticsSolver) null);
      try { 
        jSONReader0.parseString("([(-?(d+)(,-?(d+))*)?])");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorWrong input ([(-?(d+)(,-?(d+))*)?])
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONReader<ClausalCardinalitiesDecorator<MaxSatDecorator>> jSONReader0 = new JSONReader<ClausalCardinalitiesDecorator<MaxSatDecorator>>((ClausalCardinalitiesDecorator<MaxSatDecorator>) null);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 3561);
      try { 
        jSONReader0.parseInstance((InputStream) pushbackInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorWrong input \u0000\u0000\u0000
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(iSolver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      JSONReader<SolutionCounter> jSONReader0 = new JSONReader<SolutionCounter>(solutionCounter0);
      jSONReader0.handleCard("[[],'<',0]");
      assertFalse(jSONReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<Minimal4CardinalityModel>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      JSONReader<FullClauseSelectorSolver<Minimal4CardinalityModel>> jSONReader0 = new JSONReader<FullClauseSelectorSolver<Minimal4CardinalityModel>>(fullClauseSelectorSolver0);
      jSONReader0.handleCard("w#>U0^0ub[E!#A_");
      assertFalse(jSONReader0.hasAMapping());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONReader<SolutionCounter> jSONReader0 = new JSONReader<SolutionCounter>((SolutionCounter) null);
      // Undeclared exception!
      try { 
        jSONReader0.getLiterals("([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+])");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[([(-?(d+)(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      JSONReader<StatisticsSolver> jSONReader0 = new JSONReader<StatisticsSolver>(statisticsSolver0);
      ISolver iSolver0 = jSONReader0.parseString("[]");
      assertSame(statisticsSolver0, iSolver0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONReader<SingleSolutionDetector> jSONReader0 = new JSONReader<SingleSolutionDetector>((SingleSolutionDetector) null);
      // Undeclared exception!
      try { 
        jSONReader0.decode((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = (LexicoDecorator<DimacsOutputSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      JSONReader<LexicoDecorator<DimacsOutputSolver>> jSONReader0 = new JSONReader<LexicoDecorator<DimacsOutputSolver>>(lexicoDecorator0);
      int[] intArray0 = new int[7];
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      jSONReader0.decode(intArray0, printWriter0);
      assertFalse(jSONReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONReader<DimacsStringSolver> jSONReader0 = new JSONReader<DimacsStringSolver>((DimacsStringSolver) null);
      try { 
        jSONReader0.handleNotHandled("^[((([(-?(d+)(,-?(d+))*)?])|([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+]))(,(([(-?(d+)(,-?(d+))*)?])|([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+])))*)?]$");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorUnknown constraint: ^[((([(-?(d+)(,-?(d+))*)?])|([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+]))(,(([(-?(d+)(,-?(d+))*)?])|([([(-?(d+)(,-?(d+))*)?]),'[=<>]=?',-?d+])))*)?]$
         //
         verifyException("org.sat4j.reader.JSONReader", e);
      }
  }
}
