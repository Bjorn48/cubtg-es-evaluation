/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 02:27:54 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import javax.swing.JLayeredPane;
import jigl.image.ColorModel;
import jigl.image.Image;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GrayImage_ESTest extends GrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[6] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 4;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(3, 0, 4);
      grayImage1.copy();
      int int0 = 3;
      ROI rOI0 = new ROI(3, 0, 3, 3);
      rOI0.ux();
      // Undeclared exception!
      try { 
        grayImage1.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(16, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      
      GrayImage grayImage1 = grayImage0.addbuffer(0, 645, 645, 0, (-684));
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(16, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(645, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      
      GrayImage grayImage2 = grayImage0.diff(grayImage1);
      assertNotNull(grayImage2);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(16, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(645, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(16, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      
      int int0 = grayImage2.absSum();
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertEquals(0, int0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(16, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(645, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(16, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      
      GrayImage grayImage3 = grayImage2.clear();
      assertNotNull(grayImage3);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage3);
      assertSame(grayImage3, grayImage0);
      assertSame(grayImage3, grayImage2);
      assertNotSame(grayImage3, grayImage1);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(16, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(645, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(16, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage3.addSum());
      assertEquals(16, grayImage3.X());
      assertEquals(0, grayImage3.Y());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.absSum());
      
      ROI rOI0 = new ROI(255, 2918, 3, 3);
      assertNotNull(rOI0);
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(253, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(255, rOI0.lx());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(253, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(255, rOI0.lx());
      
      int int2 = rOI0.ly();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2918, int2);
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(253, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(255, rOI0.lx());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(3, int3);
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(253, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(255, rOI0.lx());
      
      int int4 = rOI0.ux();
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(3, int4);
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(253, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(255, rOI0.lx());
      
      int int5 = rOI0.lx();
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertEquals(255, int5);
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(253, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(255, rOI0.lx());
      
      int int6 = rOI0.ux();
      assertTrue(int6 == int3);
      assertFalse(int6 == int5);
      assertTrue(int6 == int1);
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int0);
      assertEquals(3, int6);
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(253, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(255, rOI0.lx());
      
      int int7 = rOI0.ux();
      assertTrue(int7 == int1);
      assertFalse(int7 == int5);
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertTrue(int7 == int3);
      assertEquals(3, int7);
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(253, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(255, rOI0.lx());
      
      int int8 = rOI0.uy();
      assertTrue(int8 == int3);
      assertTrue(int8 == int7);
      assertFalse(int8 == int0);
      assertFalse(int8 == int5);
      assertTrue(int8 == int1);
      assertFalse(int8 == int2);
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertEquals(3, int8);
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(253, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(255, rOI0.lx());
      
      int int9 = rOI0.ux();
      assertFalse(int9 == int5);
      assertTrue(int9 == int1);
      assertFalse(int9 == int2);
      assertTrue(int9 == int6);
      assertTrue(int9 == int4);
      assertTrue(int9 == int8);
      assertTrue(int9 == int7);
      assertFalse(int9 == int0);
      assertTrue(int9 == int3);
      assertEquals(3, int9);
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(253, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(255, rOI0.lx());
      
      int int10 = rOI0.ly();
      assertFalse(int10 == int9);
      assertFalse(int10 == int7);
      assertFalse(int10 == int1);
      assertFalse(int10 == int5);
      assertFalse(int10 == int0);
      assertFalse(int10 == int6);
      assertTrue(int10 == int2);
      assertFalse(int10 == int3);
      assertFalse(int10 == int4);
      assertFalse(int10 == int8);
      assertEquals(2918, int10);
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(253, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(255, rOI0.lx());
      
      int int11 = rOI0.ux();
      assertTrue(int11 == int3);
      assertFalse(int11 == int10);
      assertTrue(int11 == int4);
      assertFalse(int11 == int0);
      assertFalse(int11 == int5);
      assertTrue(int11 == int8);
      assertTrue(int11 == int6);
      assertTrue(int11 == int9);
      assertFalse(int11 == int2);
      assertTrue(int11 == int1);
      assertTrue(int11 == int7);
      assertEquals(3, int11);
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(253, rOI0.X());
      assertEquals(3, rOI0.ux());
      assertEquals(255, rOI0.lx());
      
      // Undeclared exception!
      try { 
        grayImage1.divide(255, 645, 569, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 648
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      GrayImage grayImage1 = grayImage0.addbuffer(0, 0, 0, 768, 768);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(768, 768);
      grayImage1.subtract((Image<Integer>) interpolatedGrayImage0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      interpolatedGrayImage0.addbuffer(10, 10, (-1356), (-1356), 6);
      interpolatedGrayImage0.toString();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((Image<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      grayImage0.add(0);
      GrayImage grayImage1 = new GrayImage(grayImage0);
      grayImage1.toString();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(16, 16);
      GrayImage grayImage2 = grayImage0.subtract((Image<Integer>) grayImage1);
      // Undeclared exception!
      try { 
        grayImage2.min((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      short[][] shortArray0 = new short[2][8];
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short)198;
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[3];
      shortArray2[0] = (short)198;
      shortArray2[1] = (short)198;
      shortArray2[2] = (short)198;
      shortArray0[1] = shortArray2;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      interpolatedGrayImage0.copy(rOI0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(10, 2);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((Image<Integer>) interpolatedGrayImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(9, 9);
      int int0 = 16;
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(255, 1, 16);
      int int1 = (-135);
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      grayImage0.copy();
      grayImage0.addbuffer(16, 4, 0, (-3036), 626);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      GrayImage grayImage1 = grayImage0.addbuffer(0, 0, 0, 768, 768);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(768, 768);
      // Undeclared exception!
      interpolatedGrayImage0.subtract((Image<Integer>) grayImage1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 10);
      Integer integer0 = Integer.valueOf((-830));
      integer0.byteValue();
      interpolatedGrayImage0.clear(integer0);
      ROI rOI0 = new ROI(255, 2918, 3, 3);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.X();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      short[][] shortArray0 = new short[0][0];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      ROI rOI0 = new ROI(255, 2918, 3, 3);
      rOI0.ux();
      rOI0.ly();
      rOI0.setROI(2918, 1865, (-3046), 10);
      rOI0.setROI((-3046), 3, 255, 2981);
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        grayImage0.median(7, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2773;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)138;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short)0;
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      ROI rOI0 = new ROI(255, 2918, 3, 3);
      rOI0.ux();
      rOI0.ly();
      rOI0.Y();
      rOI0.X();
      rOI0.X();
      GrayImage grayImage1 = new GrayImage(grayImage0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(253, 2918);
      grayImage1.divide((Image<Integer>) interpolatedGrayImage0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      Integer.valueOf(16);
      Integer integer0 = Integer.valueOf((-16777216));
      grayImage0.clear(integer0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(10, 10);
      // Undeclared exception!
      try { 
        grayImage0.multiply((Image<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedGrayImage0.addbuffer(637, 0, 637, 521, 637);
      interpolatedGrayImage0.interpolationMethod = interpolationMethod0;
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.addbuffer(0, (-2415), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      GrayImage grayImage1 = grayImage0.copy();
      String[] stringArray0 = new String[3];
      grayImage0.addbuffer(0, 0, 0, 0, 0);
      stringArray0[0] = "@D`1B";
      GrayImage grayImage2 = grayImage0.divide((Image<Integer>) grayImage1);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        grayImage1.add((Image<Integer>) grayImage2, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(16, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) null);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(16, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(16, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      
      GrayImage grayImage2 = grayImage0.divide((Image<Integer>) null);
      assertNotNull(grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(16, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(16, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.ux();
      rOI0.ly();
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      rOI1.X();
      rOI0.ux();
      rOI1.lx();
      rOI1.ux();
      rOI1.ux();
      rOI1.uy();
      Integer integer0 = new Integer(0);
      rOI1.ux();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(0, 0, 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      interpolatedGrayImage0.toString();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.clip(10, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 10);
      Integer integer0 = Integer.valueOf((-830));
      integer0.byteValue();
      interpolatedGrayImage0.clear(integer0);
      ROI rOI0 = new ROI(255, 2918, 3, 3);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(32767, 32767, 125, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32770
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      grayImage0.toString();
      grayImage0.clip(3363, 3363);
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(1, 737, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      short[][] shortArray0 = new short[0][0];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) null);
      grayImage0.addbuffer(606, 4, 645, (-5739), (-779));
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        grayImage1.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      grayImage0.addbuffer(0, 645, 645, 0, (-684));
      ROI rOI0 = new ROI();
      grayImage0.divide(16);
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        grayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(7, 7);
      ROI rOI0 = new ROI();
      rOI0.Y();
      grayImage0.min();
      rOI0.X();
      grayImage0.toString(rOI0);
      grayImage0.min();
      rOI0.uy();
      rOI0.ux();
      rOI0.setROI((-3667), 1, (-1049), 128);
      Integer integer0 = new Integer(1);
      // Undeclared exception!
      try { 
        grayImage0.median(9, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3667
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      GrayImage grayImage1 = grayImage0.copy();
      String[] stringArray0 = new String[3];
      grayImage0.addbuffer(0, 0, 0, 768, 768);
      stringArray0[0] = "@D`1B";
      GrayImage grayImage2 = grayImage1.addbuffer(5, 768, 0, 0, 1);
      grayImage0.clear();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.uy();
      rOI0.ux();
      Integer integer0 = new Integer(5);
      rOI0.ux();
      // Undeclared exception!
      try { 
        grayImage2.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 10;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2747, 2747);
      interpolatedGrayImage0.toString();
      int int1 = 1;
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(int0, int1);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage0);
      interpolatedGrayImage2.multiply((Image<Integer>) interpolatedGrayImage0);
      interpolatedGrayImage2.min();
      interpolatedGrayImage1.absSum();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(9, 9);
      interpolatedGrayImage0.addbuffer(255, 1, 16);
      InterpolatedGrayImage interpolatedGrayImage1 = null;
      try {
        interpolatedGrayImage1 = new InterpolatedGrayImage(16, (-135));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      int int0 = (-1650);
      ROI rOI0 = new ROI(255, 2918, 3, 3);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      rOI0.ux();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply((-1650), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)128;
      shortArray0[1] = (short)976;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)6;
      shortArray0[4] = (short)3238;
      short short0 = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-2447);
      shortArray0[7] = (short) (-67);
      shortArray0[8] = (short) (-2624);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      // Undeclared exception!
      try { 
        grayImage0.multiply(0, 255, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      interpolatedGrayImage0.toString();
      Integer integer0 = new Integer(10);
      Integer integer1 = new Integer(10);
      Integer integer2 = new Integer(128);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      interpolatedGrayImage0.median((-507), rOI0);
      interpolatedGrayImage0.min(rOI0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      grayImage0.addbuffer(14, 14, (-630), 756, (-630));
      GrayImage grayImage1 = grayImage0.clear();
      grayImage1.byteSize();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        grayImage0.subtract(14, 14, (-630), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 761);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      grayImage0.subtract((Image<Integer>) interpolatedGrayImage1);
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage((-26), 761, (int[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      grayImage0.max();
      grayImage0.copy();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      GrayImage grayImage1 = grayImage0.addbuffer(0, 645, 645, 0, (-684));
      GrayImage grayImage2 = grayImage0.diff(grayImage1);
      grayImage2.add((Image<Integer>) grayImage1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      interpolatedGrayImage0.toString();
      interpolatedGrayImage0.clear();
      ROI rOI0 = new ROI(255, 2950, 3, 3);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.X();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(1167, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 10);
      Integer integer0 = Integer.valueOf((-830));
      integer0.byteValue();
      interpolatedGrayImage0.clear(integer0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      ROI rOI1 = new ROI(255, 2918, 3, 3);
      rOI1.ux();
      rOI1.ly();
      rOI1.ux();
      rOI1.ux();
      rOI1.lx();
      rOI1.ux();
      rOI1.ux();
      rOI1.uy();
      rOI1.ux();
      rOI1.ly();
      rOI1.ux();
      rOI1.ly();
      int int0 = new Byte((byte) (-62));
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply((-129), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(7, 7);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals("10:10\nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \n", string0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(10, 10);
      assertNotNull(interpolatedGrayImage1);
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage1.X());
      assertEquals(10, interpolatedGrayImage1.Y());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract((Image<Integer>) interpolatedGrayImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.ux();
      rOI0.ly();
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      rOI1.X();
      rOI0.ux();
      rOI1.lx();
      rOI1.ux();
      rOI1.ux();
      rOI1.uy();
      rOI0.ux();
      rOI0.ly();
      rOI1.ux();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(0, 0, 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((java.awt.Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 14;
      GrayImage grayImage0 = new GrayImage(14, 14);
      ROI rOI0 = new ROI(255, 2918, 3, 3);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ux();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-$SW !";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        grayImage0.clip(255, 34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2773;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)138;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short)0;
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      ROI rOI0 = new ROI((short)2773, 2918, 3, 3);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        grayImage0.median((int) (short)2773, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractArrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      GrayImage grayImage1 = grayImage0.copy();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 3);
      grayImage1.subtract((Image<Integer>) interpolatedGrayImage0);
      // Undeclared exception!
      try { 
        grayImage1.multiply((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      interpolatedGrayImage0.toString();
      ROI rOI0 = new ROI(178, 10, 5, 34);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(219, 756);
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.add((-2983), (-150), 603);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -150
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      interpolatedGrayImage0.toString();
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(34, 2, 2, (-684), 233);
      // Undeclared exception!
      try { 
        grayImage0.diff(interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)2773;
      shortArray0[2] = (short)2773;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(16, 16, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2308;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(1, (-64), shortArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 3);
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(Integer.MIN_VALUE, 91, 4880, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 91
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      GrayImage grayImage1 = grayImage0.addbuffer(16, 4, 0, (-3036), 626);
      GrayImage grayImage2 = grayImage1.divide((Image<Integer>) grayImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      grayImage2.add((Image<Integer>) grayImage1, rOI0, rOI0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2773;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)138;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short)0;
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2773, (short)0, (short)138, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) null);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2773, (short)0, (short)138, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      
      Integer integer0 = grayImage1.max();
      assertNull(integer0);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2773, (short)0, (short)138, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(7, 7);
      ROI rOI0 = new ROI();
      rOI0.Y();
      grayImage0.min();
      rOI0.X();
      grayImage0.min();
      rOI0.setROI(1, 1, Integer.MAX_VALUE, 7);
      // Undeclared exception!
      try { 
        grayImage0.add(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 4;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(3, 0, 4);
      int int0 = 255;
      ROI rOI0 = new ROI(255, 2918, 3, 3);
      rOI0.ux();
      // Undeclared exception!
      try { 
        grayImage1.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      ROI rOI0 = new ROI(3844, 3844, 3844, 3844);
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        grayImage0.subtract(3844, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3844
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      short[][] shortArray0 = new short[4][8];
      short[] shortArray1 = new short[0];
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[8];
      shortArray2[0] = (short)0;
      shortArray2[1] = (short)10;
      shortArray2[2] = (short)0;
      shortArray2[3] = (short)3;
      shortArray2[4] = (short)128;
      shortArray2[5] = (short) (-718);
      shortArray2[6] = (short) (-2173);
      shortArray2[7] = (short)2624;
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[4];
      shortArray3[0] = (short)2767;
      shortArray3[1] = (short)128;
      shortArray3[2] = (short)3;
      shortArray3[3] = (short)10;
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[3];
      shortArray4[0] = (short)10;
      shortArray4[1] = (short) (-2173);
      shortArray4[2] = (short)0;
      shortArray0[3] = shortArray4;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      grayImage0.addbuffer(14, 14, (-630), 756, (-630));
      grayImage0.clear();
      grayImage0.byteSize();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.uy();
      rOI0.ux();
      Integer integer0 = new Integer(14);
      // Undeclared exception!
      grayImage0.median(14, rOI0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      int int0 = new Integer(10);
      interpolatedGrayImage1.median(1, rOI0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[][] intArray0 = new int[3][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 2925;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      // Undeclared exception!
      try { 
        GrayImage.main((String[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      int int0 = (-1650);
      ROI rOI0 = new ROI(3, 2918, 3, 3);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedGrayImage0.setInterpolationMethod(interpolationMethod0);
      rOI0.ux();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply((-1650), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      GrayImage grayImage1 = grayImage0.addbuffer(0, 643, 643, 0, (-684));
      ROI rOI0 = new ROI();
      grayImage0.divide(16);
      rOI0.X();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(16, 949);
      grayImage1.subtract((Image<Integer>) interpolatedGrayImage0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      GrayImage grayImage1 = grayImage0.addbuffer(16, 4, 0, (-3031), 626);
      GrayImage grayImage2 = grayImage1.divide((Image<Integer>) grayImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      GrayImage grayImage3 = grayImage2.add((Image<Integer>) grayImage1, rOI0, rOI0);
      grayImage3.max();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2773;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(0, 231, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(9, 9);
      interpolatedGrayImage0.toString();
      int int0 = 466;
      // Undeclared exception!
      interpolatedGrayImage0.addbuffer(253, 253, 9);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(1508, (-1334), (int[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 14;
      GrayImage grayImage0 = new GrayImage(14, 14);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "P5_mq>[;";
      // Undeclared exception!
      try { 
        grayImage0.divide(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      interpolatedGrayImage0.toString();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(34, 34);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.multiply((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 2);
      interpolatedGrayImage0.toString();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(0, 34);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      GrayImage grayImage0 = interpolatedGrayImage2.multiply((Image<Integer>) interpolatedGrayImage1);
      grayImage0.min();
      interpolatedGrayImage2.absSum();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      short[][] shortArray0 = new short[0][0];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      GrayImage grayImage1 = grayImage0.multiply((Image<Integer>) null);
      int int0 = 4;
      int int1 = 645;
      grayImage0.addbuffer(606, 4, 645, (-5739), (-779));
      grayImage1.min();
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        grayImage1.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(768, 768);
      // Undeclared exception!
      interpolatedGrayImage0.byteSize();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage0.absSum();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      grayImage0.max();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(14, 756);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = (-1965);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(0, (-1965));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      GrayImage grayImage1 = grayImage0.copy();
      GrayImage grayImage2 = new GrayImage(grayImage1);
      grayImage1.diff(grayImage2);
      grayImage1.absSum();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2773;
      short short0 = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)138;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)0;
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      grayImage0.toString();
      // Undeclared exception!
      try { 
        grayImage0.addbuffer(7, (-1683), (-290));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      GrayImage grayImage1 = grayImage0.addbuffer(14, 14, (-630), 756, (-630));
      grayImage0.clear();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      grayImage1.byteSize();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(14, 756);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((Image<Integer>) grayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      interpolatedGrayImage0.toString();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(34, 34);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 10);
      ROI rOI0 = new ROI(255, 2918, 3, 3);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      interpolatedGrayImage0.toString();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      short[][] shortArray0 = new short[0][0];
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(4, 645);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(4, (-2606), 0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      grayImage0.addbuffer(0, 643, 643, 0, (-684));
      ROI rOI0 = new ROI();
      grayImage0.divide(16);
      rOI0.X();
      rOI0.ux();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(16, 949);
      grayImage0.subtract((Image<Integer>) interpolatedGrayImage0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedGrayImage0.interpolationMethod = interpolationMethod0;
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      int int0 = 0;
      interpolatedGrayImage1.min();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      // Undeclared exception!
      interpolatedGrayImage0.addbuffer(768, 2298, 768, 2293, 14);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      int int0 = (-630);
      grayImage0.addbuffer(14, 14, (-630), 756, (-630));
      grayImage0.clear();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.uy();
      grayImage0.copy(rOI0);
      rOI0.ux();
      Integer integer0 = new Integer(14);
      // Undeclared exception!
      grayImage0.median(14, rOI0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      grayImage0.copy();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      grayImage0.clip(34, 1);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(16, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      
      GrayImage grayImage1 = grayImage0.add(0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(16, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(16, grayImage1.X());
      
      GrayImage grayImage2 = grayImage0.clear();
      assertNotNull(grayImage2);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(16, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(16, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      
      // Undeclared exception!
      try { 
        grayImage1.set(0, 0, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 10);
      ROI rOI0 = new ROI(255, 2918, 3, 3);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(32767, 32767, 125, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32770
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 4;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(3, 0, 4);
      int int0 = 255;
      ROI rOI0 = new ROI(255, 2918, 3, 3);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ux();
      rOI0.uy();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        grayImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      interpolatedGrayImage0.clear();
      int int0 = new Integer(1);
      rOI0.ly();
      ROI rOI1 = new ROI();
      rOI1.X();
      rOI1.Y();
      rOI0.ux();
      rOI1.lx();
      rOI1.ux();
      rOI1.uy();
      rOI0.ux();
      rOI0.ly();
      rOI1.ux();
      // Undeclared exception!
      interpolatedGrayImage0.median(3124, rOI0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      GrayImage grayImage1 = grayImage0.copy();
      String[] stringArray0 = new String[3];
      grayImage0.addbuffer(0, 0, 0, 768, 768);
      stringArray0[0] = "@D`1B";
      grayImage1.addbuffer(5, 768, 0, 0, 1);
      GrayImage grayImage2 = grayImage0.clear();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        grayImage2.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(9, 9);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(255, 1, 16);
      ROI rOI0 = new ROI(3, 938, Integer.MIN_VALUE, 3);
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(9, 9);
      interpolatedGrayImage0.toString();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add((-1811), 9, 466);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      grayImage0.addbuffer(14, 14, (-630), 756, (-630));
      grayImage0.clear();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.uy();
      rOI0.ux();
      Integer integer0 = new Integer(14);
      // Undeclared exception!
      grayImage0.median(14, rOI0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(7, 7);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      grayImage0.min();
      rOI0.X();
      grayImage0.toString(rOI0);
      grayImage0.min();
      int int0 = 9;
      int int1 = Integer.MAX_VALUE;
      rOI0.setROI(1, 1, Integer.MAX_VALUE, 7);
      // Undeclared exception!
      try { 
        grayImage0.add(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      grayImage0.addbuffer(14, 14, (-630), 756, (-630));
      grayImage0.clear();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.uy();
      rOI0.ux();
      Integer integer0 = new Integer(14);
      rOI0.ux();
      // Undeclared exception!
      grayImage0.median(14, rOI0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      GrayImage grayImage1 = grayImage0.add(0);
      GrayImage grayImage2 = new GrayImage(grayImage0);
      // Undeclared exception!
      try { 
        grayImage1.set(0, 0, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(9, 9);
      GrayImage grayImage0 = interpolatedGrayImage0.addbuffer(255, 1, 16);
      grayImage0.min();
      int int0 = (-1811);
      int int1 = 638;
      int int2 = 8;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      GrayImage grayImage1 = grayImage0.copy();
      String[] stringArray0 = new String[3];
      grayImage0.addbuffer(0, 0, 0, 768, 768);
      stringArray0[0] = "@D`1B";
      grayImage0.divide((Image<Integer>) grayImage1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = 14;
      GrayImage grayImage0 = new GrayImage(14, 14);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      int int1 = new Integer(3844);
      rOI0.setROI(927, 255, 927, (-473));
      rOI0.X();
      // Undeclared exception!
      try { 
        grayImage0.subtract(3844, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -473
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 1570;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1570, 1570);
      // Undeclared exception!
      interpolatedGrayImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = grayImage0.clear();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.setROI(736, 1, 736, 1);
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        grayImage0.add((Image<Integer>) grayImage1, rOI0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 8;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 8;
      intArray0[6] = 8;
      intArray0[7] = 0;
      intArray0[8] = 8;
      GrayImage grayImage0 = new GrayImage(8, 0, intArray0);
      grayImage0.X();
      grayImage0.Y();
      int int0 = 0;
      // Undeclared exception!
      try { 
        grayImage0.get(8, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      
      GrayImage grayImage1 = grayImage0.copy();
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      
      String[] stringArray0 = new String[3];
      GrayImage grayImage2 = grayImage0.addbuffer(0, 0, 0, 768, 768);
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      
      stringArray0[0] = "@D`1B";
      GrayImage grayImage3 = grayImage1.addbuffer(5, 768, 0, 1156, 1);
      assertNotNull(grayImage3);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage2);
      assertNotSame(grayImage3, grayImage0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(5, grayImage3.X());
      assertEquals(3840, grayImage3.addSum());
      assertEquals(3840L, grayImage3.sqrSum());
      assertEquals(3840, grayImage3.absSum());
      assertEquals(768, grayImage3.Y());
      
      GrayImage grayImage4 = grayImage0.clear();
      assertNotNull(grayImage4);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage4, grayImage1);
      assertSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage2);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0, grayImage4.X());
      assertEquals(0, grayImage4.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.X();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        grayImage4.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 16;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(16, 16, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.X();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      int int3 = rOI0.Y();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(1, int3);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      int int4 = rOI0.X();
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(1, int4);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 6;
      GrayImage grayImage0 = new GrayImage(6, 6);
      assertNotNull(grayImage0);
      assertEquals(6, grayImage0.X());
      assertEquals(6, grayImage0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(6, grayImage0.X());
      assertEquals(6, grayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(6, interpolatedGrayImage0.Y());
      assertEquals(6, interpolatedGrayImage0.X());
      
      GrayImage grayImage1 = grayImage0.copy();
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(6, grayImage0.X());
      assertEquals(6, grayImage0.Y());
      assertEquals(6, grayImage1.Y());
      assertEquals(6, grayImage1.X());
      
      ROI rOI0 = new ROI(3844, 3844, 3844, 3844);
      assertNotNull(rOI0);
      assertEquals(3844, rOI0.ly());
      assertEquals(3844, rOI0.lx());
      assertEquals(3844, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(3844, rOI0.uy());
      
      // Undeclared exception!
      interpolatedGrayImage0.addbuffer(3844, 6, 6);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      
      GrayImage grayImage1 = grayImage0.copy();
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@D`1B";
      stringArray0[1] = "CUBIC";
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int4 = rOI0.uy();
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int5 = rOI0.ux();
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertEquals(0, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int6 = rOI0.ly();
      assertTrue(int6 == int5);
      assertFalse(int6 == int1);
      assertTrue(int6 == int4);
      assertFalse(int6 == int0);
      assertTrue(int6 == int3);
      assertFalse(int6 == int2);
      assertEquals(0, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int7 = rOI0.ux();
      assertFalse(int7 == int1);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertFalse(int7 == int2);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertFalse(int7 == int0);
      assertEquals(0, int7);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        grayImage1.multiply(3043, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-425), (-425));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = 4;
      intArray0[3] = 16;
      intArray0[4] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {16, 16, 4, 16, 0}, intArray0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      
      GrayImage grayImage1 = grayImage0.addbuffer(4, 3, 744);
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(5, intArray0.length);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertArrayEquals(new int[] {16, 16, 4, 16, 0}, intArray0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(8928, grayImage1.absSum());
      assertEquals(8928, grayImage1.addSum());
      assertEquals(4, grayImage1.X());
      assertEquals(6642432L, grayImage1.sqrSum());
      assertEquals(3, grayImage1.Y());
      
      ROI rOI0 = new ROI(2113, 16, 0, 3031);
      assertNotNull(rOI0);
      assertEquals(16, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(3031, rOI0.ly());
      assertEquals(2114, rOI0.X());
      assertEquals(2113, rOI0.lx());
      assertEquals(3016, rOI0.Y());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(16, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(3031, rOI0.ly());
      assertEquals(2114, rOI0.X());
      assertEquals(2113, rOI0.lx());
      assertEquals(3016, rOI0.Y());
      
      // Undeclared exception!
      try { 
        grayImage1.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      assertNotNull(grayImage0);
      assertEquals(14, grayImage0.X());
      assertEquals(14, grayImage0.Y());
      
      GrayImage grayImage1 = grayImage0.addbuffer(14, 14, (-645), 756, (-645));
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(14, grayImage0.X());
      assertEquals(14, grayImage0.Y());
      assertEquals(14, grayImage1.Y());
      assertEquals((-126420), grayImage1.addSum());
      assertEquals(126420, grayImage1.absSum());
      assertEquals(14, grayImage1.X());
      assertEquals(81540900L, grayImage1.sqrSum());
      
      GrayImage grayImage2 = grayImage0.clear();
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertEquals(14, grayImage0.X());
      assertEquals(14, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(14, grayImage2.X());
      assertEquals(14, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI((-645), 14, 62, 62);
      assertEquals(14, rOI0.uy());
      assertEquals((-645), rOI0.ux());
      assertEquals(62, rOI0.ly());
      assertEquals(708, rOI0.X());
      assertEquals(49, rOI0.Y());
      assertEquals(62, rOI0.lx());
      
      GrayImage grayImage3 = grayImage0.add((-14));
      assertNotNull(grayImage3);
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage3, grayImage1);
      assertSame(grayImage3, grayImage2);
      assertSame(grayImage3, grayImage0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertEquals(14, grayImage0.X());
      assertEquals(14, grayImage0.Y());
      assertEquals(2744, grayImage0.absSum());
      assertEquals((-2744), grayImage0.addSum());
      assertEquals(38416L, grayImage0.sqrSum());
      assertEquals(14, grayImage3.X());
      assertEquals(14, grayImage3.Y());
      assertEquals((-2744), grayImage3.addSum());
      assertEquals(2744, grayImage3.absSum());
      assertEquals(38416L, grayImage3.sqrSum());
      
      // Undeclared exception!
      try { 
        grayImage2.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(35, 35);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(35, interpolatedGrayImage0.X());
      assertEquals(35, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals(35, interpolatedGrayImage0.X());
      assertEquals(35, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(35, 35);
      assertNotNull(interpolatedGrayImage1);
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertEquals(35, interpolatedGrayImage1.Y());
      assertEquals(35, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      assertNotNull(grayImage0);
      assertEquals(14, grayImage0.Y());
      assertEquals(14, grayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(14, grayImage0.Y());
      assertEquals(14, grayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(14, interpolatedGrayImage0.Y());
      assertEquals(14, interpolatedGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.X();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        grayImage0.subtract(3844, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      
      int int1 = (-32768);
      // Undeclared exception!
      try { 
        interpolatedColorImage1.plane((-32768));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32768
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      short[][] shortArray0 = new short[4][7];
      short[] shortArray1 = new short[6];
      shortArray1[0] = (short) (-2343);
      shortArray1[1] = (short)0;
      shortArray1[2] = (short)16;
      shortArray1[3] = (short) (-12);
      shortArray1[4] = (short) (-3647);
      short short0 = (short)1731;
      shortArray1[5] = (short)1731;
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[8];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)0;
      shortArray2[1] = (short)16;
      shortArray2[2] = (short) (-2343);
      shortArray2[3] = (short)0;
      shortArray2[4] = (short)1731;
      shortArray2[5] = (short) (-2343);
      shortArray2[6] = (short)1731;
      shortArray2[7] = (short) (-12);
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[3];
      assertFalse(shortArray3.equals((Object)shortArray1));
      assertFalse(shortArray3.equals((Object)shortArray2));
      
      shortArray3[0] = (short)1731;
      shortArray3[1] = (short)16;
      shortArray3[2] = (short)16;
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[2];
      assertFalse(shortArray4.equals((Object)shortArray1));
      assertFalse(shortArray4.equals((Object)shortArray3));
      assertFalse(shortArray4.equals((Object)shortArray2));
      
      shortArray4[0] = (short) (-3647);
      shortArray4[1] = (short) (-4417);
      shortArray0[3] = shortArray4;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      
      int int0 = 768;
      GrayImage grayImage1 = new GrayImage(0, 0, (int[]) null);
      assertNotNull(grayImage1);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      
      // Undeclared exception!
      try { 
        grayImage1.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 10);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(255, interpolatedGrayImage0.X());
      assertEquals(10, interpolatedGrayImage0.Y());
      
      Integer integer0 = Integer.valueOf((-830));
      assertNotNull(integer0);
      assertEquals((-830), (int)integer0);
      
      byte byte0 = integer0.byteValue();
      assertEquals((byte) (-62), byte0);
      
      Image<Integer> image0 = interpolatedGrayImage0.clear(integer0);
      assertNotNull(image0);
      assertSame(interpolatedGrayImage0, image0);
      assertEquals(1756695000L, interpolatedGrayImage0.sqrSum());
      assertEquals(2116500, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals((-2116500), interpolatedGrayImage0.addSum());
      assertEquals(255, interpolatedGrayImage0.X());
      assertEquals(10, interpolatedGrayImage0.Y());
      assertEquals(255, image0.X());
      assertEquals(10, image0.Y());
      
      Image<Integer> image1 = interpolatedGrayImage0.clear();
      assertNotNull(image1);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, image1);
      assertSame(image1, image0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(255, interpolatedGrayImage0.X());
      assertEquals(10, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(255, image1.X());
      assertEquals(10, image1.Y());
      
      ROI rOI0 = new ROI(255, 2918, 3, 3);
      assertNotNull(rOI0);
      assertEquals(255, rOI0.lx());
      assertEquals(3, rOI0.ux());
      assertEquals(3, rOI0.uy());
      assertEquals(2916, rOI0.Y());
      assertEquals(253, rOI0.X());
      assertEquals(2918, rOI0.ly());
      
      int int0 = rOI0.ux();
      assertEquals(3, int0);
      assertEquals(255, rOI0.lx());
      assertEquals(3, rOI0.ux());
      assertEquals(3, rOI0.uy());
      assertEquals(2916, rOI0.Y());
      assertEquals(253, rOI0.X());
      assertEquals(2918, rOI0.ly());
      
      int int1 = rOI0.ly();
      assertFalse(int1 == int0);
      assertEquals(2918, int1);
      assertEquals(255, rOI0.lx());
      assertEquals(3, rOI0.ux());
      assertEquals(3, rOI0.uy());
      assertEquals(2916, rOI0.Y());
      assertEquals(253, rOI0.X());
      assertEquals(2918, rOI0.ly());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3, int2);
      assertEquals(255, rOI0.lx());
      assertEquals(3, rOI0.ux());
      assertEquals(3, rOI0.uy());
      assertEquals(2916, rOI0.Y());
      assertEquals(253, rOI0.X());
      assertEquals(2918, rOI0.ly());
      
      int int3 = rOI0.ux();
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(3, int3);
      assertEquals(255, rOI0.lx());
      assertEquals(3, rOI0.ux());
      assertEquals(3, rOI0.uy());
      assertEquals(2916, rOI0.Y());
      assertEquals(253, rOI0.X());
      assertEquals(2918, rOI0.ly());
      
      int int4 = rOI0.lx();
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(255, int4);
      assertEquals(255, rOI0.lx());
      assertEquals(3, rOI0.ux());
      assertEquals(3, rOI0.uy());
      assertEquals(2916, rOI0.Y());
      assertEquals(253, rOI0.X());
      assertEquals(2918, rOI0.ly());
      
      int int5 = rOI0.ux();
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertEquals(3, int5);
      assertEquals(255, rOI0.lx());
      assertEquals(3, rOI0.ux());
      assertEquals(3, rOI0.uy());
      assertEquals(2916, rOI0.Y());
      assertEquals(253, rOI0.X());
      assertEquals(2918, rOI0.ly());
      
      int int6 = rOI0.ux();
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertEquals(3, int6);
      assertEquals(255, rOI0.lx());
      assertEquals(3, rOI0.ux());
      assertEquals(3, rOI0.uy());
      assertEquals(2916, rOI0.Y());
      assertEquals(253, rOI0.X());
      assertEquals(2918, rOI0.ly());
      
      int int7 = rOI0.uy();
      assertFalse(int7 == int1);
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      assertFalse(int7 == int4);
      assertTrue(int7 == int0);
      assertEquals(3, int7);
      assertEquals(255, rOI0.lx());
      assertEquals(3, rOI0.ux());
      assertEquals(3, rOI0.uy());
      assertEquals(2916, rOI0.Y());
      assertEquals(253, rOI0.X());
      assertEquals(2918, rOI0.ly());
      
      int int8 = rOI0.ux();
      assertTrue(int8 == int5);
      assertTrue(int8 == int0);
      assertFalse(int8 == int1);
      assertFalse(int8 == int4);
      assertTrue(int8 == int7);
      assertTrue(int8 == int2);
      assertTrue(int8 == int6);
      assertTrue(int8 == int3);
      assertEquals(3, int8);
      assertEquals(255, rOI0.lx());
      assertEquals(3, rOI0.ux());
      assertEquals(3, rOI0.uy());
      assertEquals(2916, rOI0.Y());
      assertEquals(253, rOI0.X());
      assertEquals(2918, rOI0.ly());
      
      int int9 = rOI0.ly();
      assertFalse(int9 == int5);
      assertFalse(int9 == int4);
      assertFalse(int9 == int6);
      assertFalse(int9 == int3);
      assertFalse(int9 == int8);
      assertFalse(int9 == int7);
      assertTrue(int9 == int1);
      assertFalse(int9 == int2);
      assertFalse(int9 == int0);
      assertEquals(2918, int9);
      assertEquals(255, rOI0.lx());
      assertEquals(3, rOI0.ux());
      assertEquals(3, rOI0.uy());
      assertEquals(2916, rOI0.Y());
      assertEquals(253, rOI0.X());
      assertEquals(2918, rOI0.ly());
      
      int int10 = rOI0.ux();
      assertFalse(int10 == int9);
      assertFalse(int10 == int1);
      assertTrue(int10 == int5);
      assertTrue(int10 == int6);
      assertTrue(int10 == int7);
      assertTrue(int10 == int2);
      assertTrue(int10 == int8);
      assertTrue(int10 == int0);
      assertFalse(int10 == int4);
      assertTrue(int10 == int3);
      assertEquals(3, int10);
      assertEquals(255, rOI0.lx());
      assertEquals(3, rOI0.ux());
      assertEquals(3, rOI0.uy());
      assertEquals(2916, rOI0.Y());
      assertEquals(253, rOI0.X());
      assertEquals(2918, rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(32767, 32767, 125, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32770
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(16, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      
      GrayImage grayImage1 = grayImage0.addbuffer(0, 645, 645, 0, (-684));
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(16, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(645, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      GrayImage grayImage2 = grayImage0.divide(16);
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(16, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(16, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage(1, (-3932));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      
      GrayImage grayImage1 = grayImage0.addbuffer(0, 0, 0, 768, 768);
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(768, 768);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(768, interpolatedGrayImage0.X());
      assertEquals(768, interpolatedGrayImage0.Y());
      
      // Undeclared exception!
      interpolatedGrayImage0.min();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 4295;
      int[] intArray0 = new int[3];
      intArray0[0] = 4295;
      intArray0[1] = 4295;
      intArray0[2] = 4295;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(4295, 4295, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals("0:0\n", string0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      
      GrayImage grayImage1 = grayImage0.addbuffer(0, 5, 0, (-1), 960);
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(5, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      
      GrayImage grayImage2 = grayImage1.clear();
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(5, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(5, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.ux();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      
      // Undeclared exception!
      try { 
        grayImage1.median((-14), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedGrayImage0.interpolationMethod = interpolationMethod0;
      assertEquals(InterpolationMethod.LINEAR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertEquals(InterpolationMethod.LINEAR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.LINEAR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      
      Integer integer0 = interpolatedGrayImage1.min();
      assertNull(integer0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertEquals(InterpolationMethod.LINEAR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.LINEAR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      
      ROI rOI0 = new ROI(3, 2679, 0, 2679);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(2679, rOI0.ly());
      assertEquals(3, rOI0.lx());
      assertEquals(2679, rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.ly();
      assertEquals(2679, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(2679, rOI0.ly());
      assertEquals(3, rOI0.lx());
      assertEquals(2679, rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(2679, rOI0.ly());
      assertEquals(3, rOI0.lx());
      assertEquals(2679, rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(2679, rOI0.ly());
      assertEquals(3, rOI0.lx());
      assertEquals(2679, rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int3 = new Integer(0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = rOI0.ux();
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(2679, rOI0.ly());
      assertEquals(3, rOI0.lx());
      assertEquals(2679, rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int5 = rOI0.ux();
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(2679, rOI0.ly());
      assertEquals(3, rOI0.lx());
      assertEquals(2679, rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int6 = rOI0.uy();
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertTrue(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertEquals(2679, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(2679, rOI0.ly());
      assertEquals(3, rOI0.lx());
      assertEquals(2679, rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int7 = rOI0.ux();
      assertTrue(int7 == int1);
      assertFalse(int7 == int0);
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      assertFalse(int7 == int6);
      assertTrue(int7 == int4);
      assertTrue(int7 == int5);
      assertEquals(0, int7);
      assertEquals(0, rOI0.ux());
      assertEquals(2679, rOI0.ly());
      assertEquals(3, rOI0.lx());
      assertEquals(2679, rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int8 = rOI0.ly();
      assertFalse(int8 == int4);
      assertFalse(int8 == int5);
      assertTrue(int8 == int6);
      assertFalse(int8 == int7);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      assertTrue(int8 == int0);
      assertFalse(int8 == int2);
      assertEquals(2679, int8);
      assertEquals(0, rOI0.ux());
      assertEquals(2679, rOI0.ly());
      assertEquals(3, rOI0.lx());
      assertEquals(2679, rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int9 = rOI0.ux();
      assertFalse(int9 == int0);
      assertTrue(int9 == int3);
      assertFalse(int9 == int8);
      assertTrue(int9 == int1);
      assertTrue(int9 == int2);
      assertTrue(int9 == int7);
      assertTrue(int9 == int4);
      assertFalse(int9 == int6);
      assertTrue(int9 == int5);
      assertEquals(0, int9);
      assertEquals(0, rOI0.ux());
      assertEquals(2679, rOI0.ly());
      assertEquals(3, rOI0.lx());
      assertEquals(2679, rOI0.uy());
      assertEquals(4, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.median(2679, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(7, 7);
      assertNotNull(grayImage0);
      assertEquals(7, grayImage0.X());
      assertEquals(7, grayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(7, grayImage0.X());
      assertEquals(7, grayImage0.Y());
      
      int int1 = rOI0.X();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      String string0 = grayImage0.toString(rOI0);
      assertNotNull(string0);
      assertEquals("7:7\nnull \n", string0);
      assertEquals(7, grayImage0.X());
      assertEquals(7, grayImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      Integer integer1 = grayImage0.min();
      assertNull(integer1);
      assertEquals(7, grayImage0.X());
      assertEquals(7, grayImage0.Y());
      
      rOI0.setROI(1, 1, Integer.MAX_VALUE, 7);
      assertEquals(7, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(7, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(9, 1);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1, interpolatedGrayImage0.Y());
      assertEquals(9, interpolatedGrayImage0.X());
      
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      short[][] shortArray0 = new short[0][0];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      
      GrayImage grayImage1 = grayImage0.multiply(2515);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, shortArray0.length);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)128;
      shortArray0[1] = (short)976;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)6;
      shortArray0[4] = (short)3238;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short) (-2447);
      short short0 = (short) (-67);
      shortArray0[7] = (short) (-67);
      shortArray0[8] = (short) (-2624);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(9, shortArray0.length);
      assertArrayEquals(new short[] {(short)128, (short)976, (short)0, (short)6, (short)3238, (short)0, (short) (-2447), (short) (-67), (short) (-2624)}, shortArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      
      int int0 = 0;
      int int1 = 255;
      int int2 = 3;
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(16, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      int int1 = rOI0.Y();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.X();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2906, 1209);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(2906, interpolatedGrayImage0.X());
      assertEquals(1209, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      // Undeclared exception!
      interpolatedGrayImage0.subtract((Image<Integer>) grayImage0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[][] intArray0 = new int[4][8];
      int[] intArray1 = new int[9];
      intArray1[0] = 3;
      intArray1[1] = 2652;
      intArray1[2] = (-1847);
      intArray1[3] = 0;
      intArray1[4] = 1452;
      intArray1[5] = (-16777216);
      intArray1[6] = (-373);
      intArray1[7] = 5;
      intArray1[8] = 3203;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = (-1847);
      intArray2[1] = 3;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 5;
      intArray3[1] = (-1847);
      intArray3[2] = (-16777216);
      intArray3[3] = 0;
      intArray3[4] = (-1847);
      intArray3[5] = (-373);
      intArray3[6] = (-1451);
      intArray3[7] = 1452;
      intArray3[8] = 3;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray0[3] = intArray4;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(16, grayImage0.X());
      
      GrayImage grayImage1 = grayImage0.addbuffer(0, 645, 645, 0, (-684));
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(16, grayImage0.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(645, grayImage1.Y());
      
      GrayImage grayImage2 = null;
      try {
        grayImage2 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractArrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)2773;
      short short0 = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)138;
      shortArray0[4] = (short)0;
      shortArray0[6] = (short)0;
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)0, (short)2773, (short)0, (short)138, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      
      int int0 = 7;
      int int1 = (-1683);
      int int2 = 11;
      int int3 = 5;
      int int4 = 885;
      int int5 = (-487);
      ROI rOI0 = new ROI(255, 2918, 3, 3);
      assertNotNull(rOI0);
      assertEquals(255, rOI0.lx());
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(3, rOI0.ux());
      assertEquals(253, rOI0.X());
      
      int int6 = rOI0.ux();
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertEquals(3, int6);
      assertEquals(255, rOI0.lx());
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(3, rOI0.ux());
      assertEquals(253, rOI0.X());
      
      int int7 = rOI0.ly();
      assertFalse(int7 == int0);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int3);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertEquals(2918, int7);
      assertEquals(255, rOI0.lx());
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(3, rOI0.ux());
      assertEquals(253, rOI0.X());
      
      int int8 = rOI0.ux();
      assertFalse(int8 == int4);
      assertFalse(int8 == int0);
      assertFalse(int8 == int5);
      assertTrue(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int2);
      assertFalse(int8 == int7);
      assertFalse(int8 == int1);
      assertEquals(3, int8);
      assertEquals(255, rOI0.lx());
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(3, rOI0.ux());
      assertEquals(253, rOI0.X());
      
      int int9 = rOI0.ux();
      assertFalse(int9 == int1);
      assertFalse(int9 == int7);
      assertFalse(int9 == int5);
      assertFalse(int9 == int0);
      assertTrue(int9 == int6);
      assertFalse(int9 == int4);
      assertTrue(int9 == int8);
      assertFalse(int9 == int2);
      assertFalse(int9 == int3);
      assertEquals(3, int9);
      assertEquals(255, rOI0.lx());
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(3, rOI0.ux());
      assertEquals(253, rOI0.X());
      
      int int10 = rOI0.lx();
      assertFalse(int10 == int0);
      assertFalse(int10 == int2);
      assertFalse(int10 == int9);
      assertFalse(int10 == int1);
      assertFalse(int10 == int6);
      assertFalse(int10 == int7);
      assertFalse(int10 == int5);
      assertFalse(int10 == int4);
      assertFalse(int10 == int3);
      assertFalse(int10 == int8);
      assertEquals(255, int10);
      assertEquals(255, rOI0.lx());
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(3, rOI0.ux());
      assertEquals(253, rOI0.X());
      
      int int11 = rOI0.ux();
      assertFalse(int11 == int1);
      assertFalse(int11 == int2);
      assertTrue(int11 == int8);
      assertFalse(int11 == int4);
      assertFalse(int11 == int10);
      assertFalse(int11 == int7);
      assertFalse(int11 == int3);
      assertTrue(int11 == int9);
      assertFalse(int11 == int0);
      assertFalse(int11 == int5);
      assertTrue(int11 == int6);
      assertEquals(3, int11);
      assertEquals(255, rOI0.lx());
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(3, rOI0.ux());
      assertEquals(253, rOI0.X());
      
      int int12 = rOI0.ux();
      assertTrue(int12 == int11);
      assertFalse(int12 == int1);
      assertTrue(int12 == int8);
      assertFalse(int12 == int0);
      assertFalse(int12 == int10);
      assertTrue(int12 == int9);
      assertFalse(int12 == int7);
      assertFalse(int12 == int4);
      assertFalse(int12 == int5);
      assertTrue(int12 == int6);
      assertFalse(int12 == int3);
      assertFalse(int12 == int2);
      assertEquals(3, int12);
      assertEquals(255, rOI0.lx());
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(3, rOI0.ux());
      assertEquals(253, rOI0.X());
      
      int int13 = rOI0.uy();
      assertFalse(int13 == int1);
      assertTrue(int13 == int11);
      assertFalse(int13 == int10);
      assertTrue(int13 == int8);
      assertTrue(int13 == int6);
      assertTrue(int13 == int12);
      assertFalse(int13 == int2);
      assertFalse(int13 == int7);
      assertFalse(int13 == int3);
      assertTrue(int13 == int9);
      assertFalse(int13 == int4);
      assertFalse(int13 == int0);
      assertFalse(int13 == int5);
      assertEquals(3, int13);
      assertEquals(255, rOI0.lx());
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(3, rOI0.ux());
      assertEquals(253, rOI0.X());
      
      int int14 = rOI0.ux();
      assertTrue(int14 == int8);
      assertTrue(int14 == int13);
      assertFalse(int14 == int7);
      assertFalse(int14 == int0);
      assertFalse(int14 == int5);
      assertTrue(int14 == int9);
      assertFalse(int14 == int4);
      assertTrue(int14 == int12);
      assertFalse(int14 == int2);
      assertFalse(int14 == int10);
      assertFalse(int14 == int3);
      assertFalse(int14 == int1);
      assertTrue(int14 == int11);
      assertTrue(int14 == int6);
      assertEquals(3, int14);
      assertEquals(255, rOI0.lx());
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(3, rOI0.ux());
      assertEquals(253, rOI0.X());
      
      int int15 = rOI0.ly();
      assertFalse(int15 == int12);
      assertFalse(int15 == int10);
      assertFalse(int15 == int4);
      assertFalse(int15 == int9);
      assertFalse(int15 == int13);
      assertFalse(int15 == int5);
      assertFalse(int15 == int8);
      assertFalse(int15 == int11);
      assertTrue(int15 == int7);
      assertFalse(int15 == int14);
      assertFalse(int15 == int0);
      assertFalse(int15 == int6);
      assertFalse(int15 == int1);
      assertFalse(int15 == int3);
      assertFalse(int15 == int2);
      assertEquals(2918, int15);
      assertEquals(255, rOI0.lx());
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(3, rOI0.ux());
      assertEquals(253, rOI0.X());
      
      int int16 = rOI0.ux();
      assertFalse(int16 == int15);
      assertFalse(int16 == int4);
      assertTrue(int16 == int9);
      assertFalse(int16 == int7);
      assertTrue(int16 == int12);
      assertTrue(int16 == int13);
      assertTrue(int16 == int14);
      assertFalse(int16 == int0);
      assertFalse(int16 == int5);
      assertTrue(int16 == int6);
      assertTrue(int16 == int11);
      assertFalse(int16 == int10);
      assertFalse(int16 == int1);
      assertFalse(int16 == int2);
      assertTrue(int16 == int8);
      assertFalse(int16 == int3);
      assertEquals(3, int16);
      assertEquals(255, rOI0.lx());
      assertEquals(2916, rOI0.Y());
      assertEquals(2918, rOI0.ly());
      assertEquals(3, rOI0.uy());
      assertEquals(3, rOI0.ux());
      assertEquals(253, rOI0.X());
      
      // Undeclared exception!
      try { 
        grayImage0.median((int) (short)0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      short[][] shortArray0 = new short[0][0];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0, shortArray0.length);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      
      GrayImage grayImage1 = grayImage0.addbuffer(12, 3, 582, 3, (-1356));
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(0, shortArray0.length);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals((-48816), grayImage1.addSum());
      assertEquals(3, grayImage1.Y());
      assertEquals(66194496L, grayImage1.sqrSum());
      assertEquals(12, grayImage1.X());
      assertEquals(48816, grayImage1.absSum());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(10, 10);
      assertNotNull(grayImage0);
      assertEquals(10, grayImage0.X());
      assertEquals(10, grayImage0.Y());
      
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(16, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(16, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      
      GrayImage grayImage1 = grayImage0.addbuffer(16, 4, 0, (-3036), 626);
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(16, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(16, grayImage1.X());
      assertEquals(4, grayImage1.Y());
      assertEquals(40064, grayImage1.addSum());
      assertEquals(25080064L, grayImage1.sqrSum());
      assertEquals(40064, grayImage1.absSum());
      
      GrayImage grayImage2 = grayImage1.divide((Image<Integer>) grayImage0);
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(16, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(16, grayImage1.X());
      assertEquals(4, grayImage1.Y());
      assertEquals(40064, grayImage1.addSum());
      assertEquals(25080064L, grayImage1.sqrSum());
      assertEquals(40064, grayImage1.absSum());
      assertEquals(25080064L, grayImage2.sqrSum());
      assertEquals(4, grayImage2.Y());
      assertEquals(40064, grayImage2.addSum());
      assertEquals(40064, grayImage2.absSum());
      assertEquals(16, grayImage2.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI(1, 0, (-2094), (-1948));
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2096, rOI0.X());
      assertEquals((-1948), rOI0.uy());
      assertEquals(1949, rOI0.Y());
      assertEquals((-2094), rOI0.ux());
      
      int int1 = rOI0.Y();
      assertFalse(int1 == int0);
      assertEquals(1949, int1);
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2096, rOI0.X());
      assertEquals((-1948), rOI0.uy());
      assertEquals(1949, rOI0.Y());
      assertEquals((-2094), rOI0.ux());
      
      int int2 = rOI0.X();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2096, int2);
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2096, rOI0.X());
      assertEquals((-1948), rOI0.uy());
      assertEquals(1949, rOI0.Y());
      assertEquals((-2094), rOI0.ux());
      
      // Undeclared exception!
      try { 
        grayImage2.add((Image<Integer>) grayImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2094
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      
      GrayImage grayImage1 = grayImage0.copy();
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@D`1B";
      stringArray0[1] = "CUBIC";
      stringArray0[2] = "{RGbmgx^o ?.&=";
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals("0:0\n", string0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      
      grayImage0.clip(3363, 3363);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(3363, 232, 3363);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 232
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(14, 14);
      assertNotNull(grayImage0);
      assertEquals(14, grayImage0.X());
      assertEquals(14, grayImage0.Y());
      
      GrayImage grayImage1 = grayImage0.addbuffer(14, 14, (-634), 756, (-634));
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(14, grayImage0.X());
      assertEquals(14, grayImage0.Y());
      assertEquals(14, grayImage1.Y());
      assertEquals((-124264), grayImage1.addSum());
      assertEquals(78783376L, grayImage1.sqrSum());
      assertEquals(124264, grayImage1.absSum());
      assertEquals(14, grayImage1.X());
      
      GrayImage grayImage2 = new GrayImage(grayImage1);
      assertNotNull(grayImage2);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertEquals(14, grayImage0.X());
      assertEquals(14, grayImage0.Y());
      assertEquals(14, grayImage1.Y());
      assertEquals((-124264), grayImage1.addSum());
      assertEquals(78783376L, grayImage1.sqrSum());
      assertEquals(124264, grayImage1.absSum());
      assertEquals(14, grayImage1.X());
      assertEquals(124264, grayImage2.absSum());
      assertEquals(14, grayImage2.Y());
      assertEquals(14, grayImage2.X());
      assertEquals((-124264), grayImage2.addSum());
      assertEquals(78783376L, grayImage2.sqrSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = new Integer(756);
      assertEquals(756, int0);
      
      int int1 = rOI0.uy();
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.ux();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(400, (int)integer0);
      
      int int3 = rOI0.ux();
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        grayImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int[][] intArray0 = new int[3][9];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(3, intArray0.length);
      assertEquals(9, grayImage0.X());
      assertEquals(3, grayImage0.Y());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      Integer integer0 = interpolatedGrayImage0.min();
      assertNull(integer0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      interpolatedGrayImage0.interpolationMethod = interpolationMethod0;
      assertEquals(InterpolationMethod.LINEAR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(10, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.X());
      
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals("10:10\nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \n", string0);
      assertEquals(10, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.addbuffer((-684), (-684), 10, 378, 378);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      short[][] shortArray0 = new short[2][8];
      short[] shortArray1 = new short[1];
      shortArray1[0] = (short)198;
      shortArray0[1] = shortArray1;
      short[] shortArray2 = new short[3];
      assertFalse(shortArray2.equals((Object)shortArray1));
      
      shortArray2[0] = (short)198;
      shortArray2[1] = (short)198;
      shortArray2[2] = (short)198;
      shortArray0[1] = shortArray2;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10, interpolatedGrayImage0.Y());
      
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals("10:10\nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \nnull null null null null null null null null null \n", string0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10, interpolatedGrayImage0.Y());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertSame(interpolatedGrayImage0, image0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(10, interpolatedGrayImage0.X());
      assertEquals(10, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(10, image0.Y());
      assertEquals(10, image0.X());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      int int0 = integer0.intValue();
      assertEquals(300, int0);
      
      float float0 = integer0.floatValue();
      assertTrue(integer0.equals((Object)int0));
      assertEquals(300.0F, float0, 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.X();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.X();
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.set(10, 10, (Integer) 300, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 6);
      assertNotNull(grayImage0);
      assertEquals(6, grayImage0.Y());
      assertEquals(6, grayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(6, grayImage0.Y());
      assertEquals(6, grayImage0.X());
      assertEquals(6, interpolatedGrayImage0.X());
      assertEquals(6, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.copy();
      assertNotNull(interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertEquals(6, grayImage0.Y());
      assertEquals(6, grayImage0.X());
      assertEquals(6, interpolatedGrayImage0.X());
      assertEquals(6, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(6, interpolatedGrayImage1.X());
      assertEquals(6, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      
      ROI rOI0 = new ROI(6, 6, 6, 213);
      assertNotNull(rOI0);
      assertEquals(6, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(208, rOI0.Y());
      assertEquals(6, rOI0.uy());
      assertEquals(6, rOI0.lx());
      assertEquals(213, rOI0.ly());
      
      int int0 = 220;
      GrayImage grayImage1 = interpolatedGrayImage0.addbuffer(0, 0, 220);
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(6, grayImage0.Y());
      assertEquals(6, grayImage0.X());
      assertEquals(6, interpolatedGrayImage0.X());
      assertEquals(6, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      int int1 = rOI0.Y();
      assertFalse(int1 == int0);
      assertEquals(208, int1);
      assertEquals(6, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(208, rOI0.Y());
      assertEquals(6, rOI0.uy());
      assertEquals(6, rOI0.lx());
      assertEquals(213, rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract((-208), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(10, 10);
      interpolatedGrayImage0.toString();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(10, 10);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      int int0 = new Integer(1);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(3);
      interpolatedGrayImage1.median(1, rOI0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 4;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(3, 0, 4);
      // Undeclared exception!
      try { 
        grayImage1.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }
}
