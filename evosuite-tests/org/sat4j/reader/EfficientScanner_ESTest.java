/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:06:21 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.math.BigInteger;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import org.sat4j.reader.EfficientScanner;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EfficientScanner_ESTest extends EfficientScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      EfficientScanner efficientScanner0 = new EfficientScanner(sequenceInputStream0);
      efficientScanner0.skipComments();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.read();
      byteArrayInputStream0.read();
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      efficientScanner0.skipSpaces();
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)87;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.read();
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      efficientScanner0.skipSpaces();
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.read();
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0, '[');
      char char0 = efficientScanner0.currentChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals('I', char0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      EfficientScanner efficientScanner0 = new EfficientScanner(pipedInputStream0);
      try { 
        efficientScanner0.skipSpaces();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(89, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      EfficientScanner efficientScanner0 = new EfficientScanner(inputStream0, '/');
      efficientScanner0.skipRestOfLine();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EfficientScanner efficientScanner0 = new EfficientScanner((InputStream) null);
      try { 
        efficientScanner0.skipComments();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InputStream inputStream0 = mock(InputStream.class, new ViolatedAssumptionAnswer());
      doReturn(116, 0).when(inputStream0).read(any(byte[].class) , anyInt() , anyInt());
      EfficientScanner efficientScanner0 = new EfficientScanner(inputStream0, '/');
      efficientScanner0.nextLine();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      EfficientScanner efficientScanner0 = new EfficientScanner(pipedInputStream0);
      try { 
        efficientScanner0.nextLine();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      EfficientScanner efficientScanner0 = new EfficientScanner(pipedInputStream0);
      try { 
        efficientScanner0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EfficientScanner efficientScanner0 = new EfficientScanner((InputStream) null, 'D');
      try { 
        efficientScanner0.nextBigInteger();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      EfficientScanner efficientScanner0 = new EfficientScanner(dataInputStream0);
      // Undeclared exception!
      try { 
        efficientScanner0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      EfficientScanner efficientScanner0 = new EfficientScanner(pipedInputStream0);
      try { 
        efficientScanner0.next();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      EfficientScanner efficientScanner0 = new EfficientScanner(bufferedInputStream0);
      try { 
        efficientScanner0.eof();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      EfficientScanner efficientScanner0 = new EfficientScanner(pipedInputStream0);
      try { 
        efficientScanner0.currentChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      EfficientScanner efficientScanner0 = new EfficientScanner(bufferedInputStream0);
      String string0 = efficientScanner0.nextLine();
      assertEquals("\u0000\u0000\u0000\u0000\uFFFF", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0, '[');
      char char0 = efficientScanner0.currentChar();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      EfficientScanner efficientScanner0 = new EfficientScanner(sequenceInputStream0, 'g');
      boolean boolean0 = efficientScanner0.eof();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      boolean boolean0 = efficientScanner0.eof();
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      efficientScanner0.skipRestOfLine();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0, '`');
      efficientScanner0.skipRestOfLine();
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      String string0 = efficientScanner0.nextLine();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      char char0 = efficientScanner0.skipSpaces();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals('\u0000', char0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0, 'W');
      // Undeclared exception!
      efficientScanner0.next();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.read();
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      efficientScanner0.nextBigInteger();
      assertEquals(0, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.read();
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      BigInteger bigInteger0 = efficientScanner0.nextBigInteger();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((short)0, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      try { 
        efficientScanner0.nextBigInteger();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorUnknown character \u009B
         //
         verifyException("org.sat4j.reader.EfficientScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0, 'h');
      efficientScanner0.skipSpaces();
      // Undeclared exception!
      try { 
        efficientScanner0.nextBigInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      try { 
        efficientScanner0.nextBigInteger();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorUnknown character \u0000
         //
         verifyException("org.sat4j.reader.EfficientScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.read();
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      int int0 = efficientScanner0.nextInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.read();
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      int int0 = efficientScanner0.nextInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      try { 
        efficientScanner0.nextInt();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorUnknown character \u009B
         //
         verifyException("org.sat4j.reader.EfficientScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.read();
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      int int0 = efficientScanner0.nextInt();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      try { 
        efficientScanner0.nextInt();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorUnknown character \u0000
         //
         verifyException("org.sat4j.reader.EfficientScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      EfficientScanner efficientScanner0 = new EfficientScanner(sequenceInputStream0, 'g');
      efficientScanner0.close();
      try { 
        efficientScanner0.skipRestOfLine();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      EfficientScanner efficientScanner0 = new EfficientScanner(byteArrayInputStream0);
      efficientScanner0.skipComments();
      assertEquals(0, byteArrayInputStream0.available());
  }
}
