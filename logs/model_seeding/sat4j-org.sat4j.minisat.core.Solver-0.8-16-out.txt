* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 17452
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550533444574
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.18150087260034903
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1009549795361528
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.06933333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.018796992481203006
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.10236220472440945
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.08661417322834646
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.05184174624829468
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
[MASTER] 00:45:24.223 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.ILits
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 276
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.19895287958115182
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.11323328785811733
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.09066666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.018796992481203006
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.11023622047244094
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.08661417322834646
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.058663028649386086
[MASTER] 00:45:40.522 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.Constr
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 354
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2181500872600349
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.12824010914051842
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.11466666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.041353383458646614
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.1732283464566929
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.13385826771653545
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.07366984993178717
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 428
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.2914485165794066
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.18281036834924966
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.21866666666666668
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.06015037593984962
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.2283464566929134
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.18110236220472442
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.11323328785811733
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 509
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.30715532286212915
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.19236016371077763
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.228
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.06766917293233082
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.2677165354330709
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2047244094488189
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.12005457025920874
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 587
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3263525305410122
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2073669849931787
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.24533333333333332
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.06766917293233082
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.2992125984251969
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2204724409448819
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.12824010914051842
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 645
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.343804537521815
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21828103683492497
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.264
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.07518796992481203
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.33070866141732286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2440944881889764
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1364256480218281
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.343804537521815
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21828103683492497
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.264
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.07518796992481203
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.33070866141732286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2440944881889764
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1364256480218281
* Search finished after 127s and 6 generations, 10242 statements, best individual has fitness: 2937.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.343804537521815
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21828103683492497
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.264
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.07518796992481203
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.33070866141732286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2440944881889764
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1364256480218281
* Minimizing test suite
[MASTER] 00:47:37.399 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 36%
* Total number of goals: 1146
* Number of covered goals: 415
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 22%
* Total number of goals: 733
* Number of covered goals: 160
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 21
* Number of covered goals: 21
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 28%
* Total number of goals: 750
* Number of covered goals: 207
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 8%
* Total number of goals: 266
* Number of covered goals: 20
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 35%
* Total number of goals: 127
* Number of covered goals: 44
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 24%
* Total number of goals: 127
* Number of covered goals: 31
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 14%
* Total number of goals: 733
* Number of covered goals: 100
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.343804537521815
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21828103683492497
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.264
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.07518796992481203
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.33070866141732286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2440944881889764
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1364256480218281
* Generated 75 tests with total length 1617
* Resulting test suite's coverage: 33% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 00:48:44.755 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8063333333333333% of time used, but only 12/75 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 1%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.343804537521815
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21828103683492497
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.264
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.07518796992481203
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.33070866141732286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2440944881889764
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1364256480218281
* Compiling and checking tests
[MASTER] 00:49:13.335 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 00:49:13.353 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 00:49:26.862 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:26.864 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams((-1));
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1), searchParams0.getInitConflictBound());

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1), searchParams0.getInitConflictBound());

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

mUSLauncher0.log("LBD2");
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning1 = new ClauseOnlyLearning<ClausalDataStructureWL>();
assertNotNull(clauseOnlyLearning1);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());

IVecInt iVecInt0 = VecInt.EMPTY;
assertNotNull(iVecInt0);
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

iVecInt0.clear();
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

IteratorInt iteratorInt0 = iVecInt0.iterator();
assertNotNull(iteratorInt0);
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

IteratorInt iteratorInt1 = iVecInt0.iterator();
assertNotNull(iteratorInt1);
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertNotSame(iteratorInt1, iteratorInt0);
assertFalse(iteratorInt1.equals((Object)iteratorInt0));

iVecInt0.clear();
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning1, clausalDataStructureWL0, searchParams0, varOrderHeap0, eMARestarts0, mUSLauncher0);
assertNotNull(solver0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1), searchParams0.getInitConflictBound());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());

solver0.addClause(iVecInt0);

[MASTER] 00:49:27.850 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:27.852 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[6];
intArray0[1] = 4;
intArray0[2] = 4;
intArray0[3] = 4;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertNotNull(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {0, 4, 4, 4, 0, 0}, intArray0);
assertEquals(6, intArray0.length);

LubyRestarts lubyRestarts0 = new LubyRestarts(8);
assertNotNull(lubyRestarts0);
assertEquals(8, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, subsetVarOrder0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertArrayEquals(new int[] {0, 4, 4, 4, 0, 0}, intArray0);
assertEquals(6, intArray0.length);

boolean boolean1 = solver0.simplifyDB();
assertTrue(boolean1);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertArrayEquals(new int[] {0, 4, 4, 4, 0, 0}, intArray0);
assertEquals(6, intArray0.length);
assertFalse(boolean1 == boolean0);


[MASTER] 00:49:28.942 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:49:28.953 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams(4);
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, double0, 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertNotNull(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.95);
assertNotNull(randomWalkDecorator0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy1 = (UserFixedPhaseSelectionStrategy)randomWalkDecorator0.getPhaseSelectionStrategy();
assertNotNull(userFixedPhaseSelectionStrategy1);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy1.toString());
assertSame(userFixedPhaseSelectionStrategy0, userFixedPhaseSelectionStrategy1);
assertSame(userFixedPhaseSelectionStrategy1, userFixedPhaseSelectionStrategy0);

userFixedPhaseSelectionStrategy1.updateVarAtDecisionLevel((-811));
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy1.toString());
assertSame(userFixedPhaseSelectionStrategy0, userFixedPhaseSelectionStrategy1);
assertSame(userFixedPhaseSelectionStrategy1, userFixedPhaseSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy1);
assertNotNull(levelBasedVarOrderHeap1);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy1.toString());
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));

LubyRestarts lubyRestarts0 = new LubyRestarts((-1186));
assertNotNull(lubyRestarts0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1186), lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1186), lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1186), lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, lubyRestarts0);
assertNotNull(solver0);
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1186), lubyRestarts0.getFactor());
assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ILogAble iLogAble0 = solver0.out;
assertNotNull(iLogAble0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap1, glucose21Restarts0, iLogAble0);
assertNotNull(solver1);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy1.toString());
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1186), lubyRestarts0.getFactor());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

VecInt vecInt0 = new VecInt(0, 32);
assertNotNull(vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

boolean boolean1 = solver1.isSatisfiable((IVecInt) vecInt0);
assertTrue(boolean1);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy1.toString());
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1186), lubyRestarts0.getFactor());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver0.getTimeout());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertSame(userFixedPhaseSelectionStrategy0, userFixedPhaseSelectionStrategy1);
assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
assertSame(userFixedPhaseSelectionStrategy1, userFixedPhaseSelectionStrategy0);
assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
assertTrue(boolean1 == boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 00:49:29.786 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:29.809 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertNotNull(lubyRestarts0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertTrue(boolean0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onBackjumpToRootLevel();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure1);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructure cardinalityDataStructure2 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure2);
assertFalse(cardinalityDataStructure2.equals((Object)cardinalityDataStructure1));
assertFalse(cardinalityDataStructure2.equals((Object)cardinalityDataStructure0));

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

int[] intArray0 = new int[1];
intArray0[0] = 878;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertNotNull(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {878}, intArray0);
assertEquals(1, intArray0.length);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertNotNull(fixedPeriodRestarts0);
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());

SearchParams searchParams1 = new SearchParams(2.0, 2926, 1.0, 500);
assertNotNull(searchParams1);
assertEquals(2.0, searchParams1.getVarDecay(), 0.01);
assertEquals(500, searchParams1.getInitConflictBound());
assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(2926.0, searchParams1.getClaDecay(), 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));

SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());

solverStats0.incInspects();
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(1L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());

fixedPeriodRestarts0.init(searchParams0, solverStats0);
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(1L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotSame(searchParams0, searchParams1);
assertFalse(searchParams0.equals((Object)searchParams1));

glucose21Restarts0.onRestart();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {878}, intArray0);
assertEquals(1, intArray0.length);
assertFalse(searchParams0.equals((Object)searchParams1));

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, subsetVarOrder0, glucose21Restarts0);
assertNotNull(solver1);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {878}, intArray0);
assertEquals(1, intArray0.length);
assertFalse(solver1.equals((Object)solver0));

boolean boolean1 = solver1.simplifyDB();
assertTrue(boolean1);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(2147483, solver1.getTimeout());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(6, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {878}, intArray0);
assertEquals(1, intArray0.length);
assertNotSame(solver1, solver0);
assertFalse(solver1.equals((Object)solver0));
assertTrue(boolean1 == boolean0);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>(500);
assertNotNull(percentLengthLearning1);
assertEquals(500, percentLengthLearning1.getLimit());
assertFalse(percentLengthLearning1.equals((Object)percentLengthLearning0));

CardinalityDataStructure cardinalityDataStructure3 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure3);
assertFalse(cardinalityDataStructure3.equals((Object)cardinalityDataStructure0));
assertFalse(cardinalityDataStructure3.equals((Object)cardinalityDataStructure2));
assertFalse(cardinalityDataStructure3.equals((Object)cardinalityDataStructure1));

CardinalityDataStructure cardinalityDataStructure4 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure4);
assertFalse(cardinalityDataStructure4.equals((Object)cardinalityDataStructure0));
assertFalse(cardinalityDataStructure4.equals((Object)cardinalityDataStructure2));
assertFalse(cardinalityDataStructure4.equals((Object)cardinalityDataStructure1));
assertFalse(cardinalityDataStructure4.equals((Object)cardinalityDataStructure3));

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure4, subsetVarOrder0, fixedPeriodRestarts0);
assertNotNull(solver2);
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {878}, intArray0);
assertEquals(1, intArray0.length);
assertFalse(percentLengthLearning0.equals((Object)percentLengthLearning1));
assertFalse(cardinalityDataStructure4.equals((Object)cardinalityDataStructure0));
assertFalse(cardinalityDataStructure4.equals((Object)cardinalityDataStructure2));
assertFalse(cardinalityDataStructure4.equals((Object)cardinalityDataStructure1));
assertFalse(cardinalityDataStructure4.equals((Object)cardinalityDataStructure3));

String string0 = solver2.getLogPrefix();
assertNotNull(string0);
assertEquals("c ", string0);
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(2147483, solver2.getTimeout());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {878}, intArray0);
assertEquals(1, intArray0.length);
assertNotSame(percentLengthLearning0, percentLengthLearning1);
assertNotSame(cardinalityDataStructure4, cardinalityDataStructure0);
assertNotSame(cardinalityDataStructure4, cardinalityDataStructure2);
assertNotSame(cardinalityDataStructure4, cardinalityDataStructure1);
assertNotSame(cardinalityDataStructure4, cardinalityDataStructure3);
assertFalse(percentLengthLearning0.equals((Object)percentLengthLearning1));
assertFalse(cardinalityDataStructure4.equals((Object)cardinalityDataStructure0));
assertFalse(cardinalityDataStructure4.equals((Object)cardinalityDataStructure2));
assertFalse(cardinalityDataStructure4.equals((Object)cardinalityDataStructure1));
assertFalse(cardinalityDataStructure4.equals((Object)cardinalityDataStructure3));

solver1.reset();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.nVars());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {878}, intArray0);
assertEquals(1, intArray0.length);
assertNotSame(solver1, solver0);
assertFalse(solver1.equals((Object)solver0));


[MASTER] 00:49:30.514 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:49:30.523 [logback-1] WARN  JUnitAnalyzer - Failing test:
 boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
assertFalse(boolean1);
assertTrue(boolean1 == boolean0);

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(3728);
assertNotNull(fixedLengthLearning0);
assertEquals(3728, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double1 = searchParams0.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotEquals(double1, double0, 0.01);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
assertNull(iLits0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

randomWalkDecorator0.setLits((ILits) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertNotNull(arminRestarts0);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());

VarActivityListener varActivityListener0 = mock(VarActivityListener.class, new ViolatedAssumptionAnswer());
fixedLengthLearning0.setVarActivityListener(varActivityListener0);
assertEquals(3728, fixedLengthLearning0.getMaxLength());

SearchParams searchParams1 = new SearchParams(0.0, (-672.3807590778948), 2.0, 2926);
assertNotNull(searchParams1);
assertEquals(2.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-672.3807590778948), searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(2926, searchParams1.getInitConflictBound());
assertFalse(searchParams1.equals((Object)searchParams0));

SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getDecisions());

arminRestarts0.init(searchParams1, solverStats0);
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(2.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-672.3807590778948), searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(2926, searchParams1.getInitConflictBound());
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));

arminRestarts0.onRestart();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
assertNotNull(solver0);
assertEquals(3728, fixedLengthLearning0.getMaxLength());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(searchParams0.equals((Object)searchParams1));

solver0.expireTimeout();
assertEquals(3728, fixedLengthLearning0.getMaxLength());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertNotSame(searchParams0, searchParams1);
assertFalse(searchParams0.equals((Object)searchParams1));

solver0.decayActivities();
assertEquals(3728, fixedLengthLearning0.getMaxLength());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertNotSame(searchParams0, searchParams1);
assertFalse(searchParams0.equals((Object)searchParams1));


[MASTER] 00:49:31.363 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:31.366 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[6];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertNotNull(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(6, intArray0.length);

LubyRestarts lubyRestarts0 = new LubyRestarts(8);
assertNotNull(lubyRestarts0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(8, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertTrue(boolean0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(8, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

VecInt vecInt0 = new VecInt(3741, (-541));
assertNotNull(vecInt0);
assertEquals(3741, vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertEquals((-541), vecInt0.last());

SearchParams searchParams0 = new SearchParams(4);
assertNotNull(searchParams0);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("LBD2");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, lubyRestarts0, mUSLauncher0);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(8, lubyRestarts0.getFactor());
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(6, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean1 = solver0.isSatisfiable((IVecInt) vecInt0);
assertTrue(boolean1);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(8L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(8, lubyRestarts0.getFactor());
assertEquals(3741, vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertEquals((-541), vecInt0.last());
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(542, solver0.nVars());
assertEquals(542, solver0.realNumberOfVariables());
assertEquals(543, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(6, intArray0.length);
assertTrue(boolean1 == boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, subsetVarOrder0, glucose21Restarts0);
assertNotNull(solver1);
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(6, intArray0.length);

solver1.toString("c ");

[MASTER] 00:49:31.950 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:31.957 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>((-2854.834213807364));
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2854.834213807364), activeLearning0.getActivityPercent(), 0.01);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());

MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

miniSATLearning0.setDataStructureFactory(mixedDataStructureSingleWL0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

ActiveLearning<MixedDataStructureDanielWL> activeLearning1 = new ActiveLearning<MixedDataStructureDanielWL>();
assertNotNull(activeLearning1);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ActiveLearning<ClausalDataStructureWL> activeLearning2 = new ActiveLearning<ClausalDataStructureWL>((-1.0));
assertNotNull(activeLearning2);
assertEquals((-1.0), activeLearning2.getActivityPercent(), 0.01);
assertEquals(0, activeLearning2.getLimit());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning2, clausalDataStructureWL0, pureOrder0, eMARestarts0);
assertNotNull(solver0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals((-1.0), activeLearning2.getActivityPercent(), 0.01);
assertEquals(0, activeLearning2.getLimit());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());

VecInt vecInt0 = new VecInt(0, 0);
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

int[] intArray0 = vecInt0.toArray();
assertNotNull(intArray0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);

vecInt0.clear();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

IteratorInt iteratorInt0 = vecInt0.iterator();
assertNotNull(iteratorInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

IteratorInt iteratorInt1 = vecInt0.iterator();
assertNotNull(iteratorInt1);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotSame(iteratorInt1, iteratorInt0);
assertFalse(iteratorInt1.equals((Object)iteratorInt0));

ArminRestarts arminRestarts0 = new ArminRestarts();
assertNotNull(arminRestarts0);
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());

SearchParams searchParams0 = new SearchParams(0.0, (-672.3807590778948), 2.0, 2926);
assertNotNull(searchParams0);
assertEquals(2926, searchParams0.getInitConflictBound());
assertEquals((-672.3807590778948), searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(2.0, searchParams0.getConflictBoundIncFactor(), 0.01);

SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());

arminRestarts0.init(searchParams0, solverStats0);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(2926, searchParams0.getInitConflictBound());
assertEquals((-672.3807590778948), searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(2.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());

arminRestarts0.onRestart();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(arminRestarts0.shouldRestart());

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, pureOrder0, arminRestarts0);
assertNotNull(solver1);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(arminRestarts0.shouldRestart());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());

LearntWLClause learntWLClause0 = (LearntWLClause)solver1.addClauseOnTheFly(intArray0);
assertNotNull(learntWLClause0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(arminRestarts0.shouldRestart());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertTrue(learntWLClause0.learnt());
assertFalse(learntWLClause0.simplify());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertFalse(learntWLClause0.isSatisfied());
assertEquals(0, learntWLClause0.size());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-1267));
assertNotNull(percentLengthLearning0);
assertEquals((-1267), percentLengthLearning0.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, pureOrder0, arminRestarts0);
assertNotNull(solver2);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(arminRestarts0.shouldRestart());
assertEquals((-1267), percentLengthLearning0.getLimit());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());

solver2.modelFound();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(arminRestarts0.shouldRestart());
assertEquals((-1267), percentLengthLearning0.getLimit());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(3, solver2.nVars());


[MASTER] 00:49:32.658 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:32.677 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

MixedDataStructureSingleWL mixedDataStructureSingleWL1 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL1);
assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL1, tabuListDecorator0, lubyRestarts0);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = solver0.enqueue(5);
assertTrue(boolean0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotSame(mixedDataStructureSingleWL1, mixedDataStructureSingleWL0);
assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
assertNotNull(solver1);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SearchParams searchParams0 = solver1.getSearchParams();
assertNotNull(searchParams0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("LBD2");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("LBD2");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

ActiveLearning<ClausalDataStructureWL> activeLearning1 = new ActiveLearning<ClausalDataStructureWL>(1460.4670166927626);
assertNotNull(activeLearning1);
assertEquals(0, activeLearning1.getLimit());
assertEquals(1460.4670166927626, activeLearning1.getActivityPercent(), 0.01);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning1, clausalDataStructureWL0, searchParams0, tabuListDecorator0, lubyRestarts0, mUSLauncher0);
assertNotNull(solver2);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, activeLearning1.getLimit());
assertEquals(1460.4670166927626, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(6, solver1.newVar());
assertEquals(5, solver1.nVars());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver2.modelFound();
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, activeLearning1.getLimit());
assertEquals(1460.4670166927626, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(4, solver2.newVar());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(7, solver1.nVars());
assertEquals(7, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(8, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver1.setTimeoutMs(0L);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver1.getTimeout());
assertEquals(9, solver1.realNumberOfVariables());
assertEquals(10, solver1.newVar());
assertEquals(9, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 00:49:33.594 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:49:33.597 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
assertNull(iLits0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

randomWalkDecorator0.setLits((ILits) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

mUSLauncher0.log("LBD2");
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
assertNotNull(solver0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());

int int0 = solver0.getTimeout();
assertEquals(2147483, int0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
assertNotNull(solver1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());

solver1.setRestartStrategy((RestartStrategy) null);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());


[MASTER] 00:49:35.298 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:49:35.302 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[6];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertNotNull(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(6, intArray0.length);

LubyRestarts lubyRestarts0 = new LubyRestarts(1);
assertNotNull(lubyRestarts0);
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

VecInt vecInt0 = new VecInt(3741, 32);
assertNotNull(vecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals(32, vecInt0.last());
assertEquals(3741, vecInt0.size());

SearchParams searchParams0 = new SearchParams(4);
assertNotNull(searchParams0);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("c ");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, lubyRestarts0, mUSLauncher0);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(6, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean1 = solver0.isSatisfiable((IVecInt) vecInt0);
assertTrue(boolean1);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, lubyRestarts0.getFactor());
assertEquals(1L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(vecInt0.isEmpty());
assertEquals(32, vecInt0.last());
assertEquals(3741, vecInt0.size());
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(34, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(33, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(33, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(6, intArray0.length);
assertTrue(boolean1 == boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, subsetVarOrder0, lubyRestarts0);
assertNotNull(solver1);
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, lubyRestarts0.getFactor());
assertEquals(1L, lubyRestarts0.nextRestartNumberOfConflict());
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(6, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver1.discardCurrentModel();

[MASTER] 00:49:36.121 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:36.130 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[6];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertNotNull(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(6, intArray0.length);

LubyRestarts lubyRestarts0 = new LubyRestarts(8);
assertNotNull(lubyRestarts0);
assertEquals(8, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals(8, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

VecInt vecInt0 = new VecInt(3731, (-541));
assertNotNull(vecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals((-541), vecInt0.last());
assertEquals(3731, vecInt0.size());

SubsetVarOrder subsetVarOrder1 = new SubsetVarOrder(intArray0);
assertNotNull(subsetVarOrder1);
assertEquals(0, subsetVarOrder1.numberOfInterestingVariables());
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(6, intArray0.length);
assertFalse(subsetVarOrder1.equals((Object)subsetVarOrder0));

LubyRestarts lubyRestarts1 = new LubyRestarts((-822));
assertNotNull(lubyRestarts1);
assertEquals((-822), lubyRestarts1.getFactor());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts1.luby());
assertTrue(lubyRestarts1.shouldRestart());
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean1 = lubyRestarts0.shouldRestart();
assertTrue(boolean1);
assertEquals(8, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertNotSame(lubyRestarts0, lubyRestarts1);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertTrue(boolean1 == boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts1.onBackjumpToRootLevel();
assertEquals((-822), lubyRestarts1.getFactor());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts1.luby());
assertTrue(lubyRestarts1.shouldRestart());
assertNotSame(lubyRestarts1, lubyRestarts0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Glucose21Restarts glucose21Restarts1 = new Glucose21Restarts();
assertNotNull(glucose21Restarts1);
assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure1);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, subsetVarOrder1, glucose21Restarts1);
assertNotNull(solver0);
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, subsetVarOrder1.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(6, intArray0.length);
assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
assertFalse(subsetVarOrder1.equals((Object)subsetVarOrder0));
assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));

solver0.addExactly(vecInt0, 8);

[MASTER] 00:49:36.628 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:36.632 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>((-2854.834213807364));
assertNotNull(activeLearning0);
assertEquals((-2854.834213807364), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

SearchParams searchParams0 = new SearchParams((-2854.834213807364), (-2693));
assertNotNull(searchParams0);
assertEquals((-2693), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2854.834213807364), searchParams0.getConflictBoundIncFactor(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());

MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, eMARestarts0);
assertNotNull(solver0);
assertEquals((-2693), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2854.834213807364), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());

ILogAble iLogAble0 = solver0.getLogger();
assertNotNull(iLogAble0);
assertEquals((-2693), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2854.834213807364), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());

miniSATLearning0.setDataStructureFactory(mixedDataStructureSingleWL0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, eMARestarts0, iLogAble0);
assertNotNull(solver1);
assertEquals((-2854.834213807364), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2693), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2854.834213807364), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(6, solver0.newVar());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());

LearningStrategy<MixedDataStructureSingleWL> learningStrategy0 = null;
FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(3790);
assertNotNull(fixedLengthLearning0);
assertEquals(3790, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, eMARestarts0);
assertNotNull(solver2);
assertEquals((-2693), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-2854.834213807364), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(3790, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());

solver2.cancelUntil((-2693));

[MASTER] 00:49:37.177 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:49:37.178 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

int[] intArray0 = new int[1];
intArray0[0] = 0;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertNotNull(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {0}, intArray0);
assertEquals(1, intArray0.length);

LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertNotNull(lubyRestarts0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, subsetVarOrder0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertArrayEquals(new int[] {0}, intArray0);
assertEquals(1, intArray0.length);

solver0.reduceDB();

[MASTER] 00:49:37.759 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:49:37.762 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>((-2890.945577692445));
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2890.945577692445), activeLearning0.getActivityPercent(), 0.01);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

SearchParams searchParams0 = new SearchParams((-2890.945577692445), (-2693));
assertNotNull(searchParams0);
assertEquals((-2890.945577692445), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2693), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

MixedDataStructureSingleWL mixedDataStructureSingleWL1 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL1);
assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
assertNotNull(tabuListDecorator0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.setFactor((-2693));
assertEquals((-2693), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL1, tabuListDecorator0, lubyRestarts0);
assertNotNull(solver0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals((-2693), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, lubyRestarts0);
assertNotNull(solver1);
assertEquals((-2890.945577692445), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2693), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2693), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = solver1.isSatisfiable((IVecInt) vecInt0);
assertTrue(boolean0);
assertEquals((-2890.945577692445), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-2693), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2693), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-2693L), lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 00:49:38.411 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:38.413 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
assertNull(iLits0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

randomWalkDecorator0.setLits((ILits) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

mUSLauncher0.log("LBD2");
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
assertNotNull(solver0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());

int int0 = solver0.getTimeout();
assertEquals(2147483, int0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());


[MASTER] 00:49:38.978 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:38.981 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

int[] intArray0 = new int[1];
intArray0[0] = 0;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertNotNull(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {0}, intArray0);
assertEquals(1, intArray0.length);

LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertNotNull(lubyRestarts0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertTrue(boolean0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onBackjumpToRootLevel();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure1);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure1, subsetVarOrder0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertArrayEquals(new int[] {0}, intArray0);
assertEquals(1, intArray0.length);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

solver0.addClauseOnTheFly(intArray0);

[MASTER] 00:49:39.857 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:49:39.859 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

int[] intArray0 = new int[6];
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertNotNull(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(6, intArray0.length);

LubyRestarts lubyRestarts0 = new LubyRestarts(1);
assertNotNull(lubyRestarts0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertTrue(boolean0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

VecInt vecInt0 = new VecInt(3741, 32);
assertNotNull(vecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals(3741, vecInt0.size());
assertEquals(32, vecInt0.last());

SearchParams searchParams0 = new SearchParams(4);
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("LBD2");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, lubyRestarts0, mUSLauncher0);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, lubyRestarts0.getFactor());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(6, intArray0.length);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean1 = solver0.isSatisfiable((IVecInt) vecInt0);
assertTrue(boolean1);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(1L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.getFactor());
assertFalse(vecInt0.isEmpty());
assertEquals(3741, vecInt0.size());
assertEquals(32, vecInt0.last());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(34, solver0.newVar());
assertEquals(33, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(33, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
assertEquals(6, intArray0.length);
assertTrue(boolean1 == boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());


[MASTER] 00:49:40.474 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:49:40.476 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(0.0, 1);
assertNotNull(searchParams0);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double0, 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(1, int0);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
assertNull(iLits0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

randomWalkDecorator0.setLits((ILits) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());

Map<String, Number> map0 = solver0.getStat();
assertNotNull(map0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertFalse(map0.isEmpty());
assertEquals(17, map0.size());


[MASTER] 00:49:41.110 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:49:41.117 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams(4, (-3426.908898233519), 4, 4);
assertNotNull(searchParams0);
assertEquals(4.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4.0, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals((-3426.908898233519), searchParams0.getClaDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(4.0, double0, 0.01);
assertEquals(4.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4.0, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals((-3426.908898233519), searchParams0.getClaDecay(), 0.01);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertNotNull(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

PureOrder pureOrder0 = new PureOrder(920);
assertNotNull(pureOrder0);
assertEquals(920, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)pureOrder0.getPhaseSelectionStrategy();
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals(920, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 1.0);
assertNotNull(randomWalkDecorator0);
assertEquals(920, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);

RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
assertNotNull(randomWalkDecorator1);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy1 = (UserFixedPhaseSelectionStrategy)randomWalkDecorator1.getPhaseSelectionStrategy();
assertNotNull(userFixedPhaseSelectionStrategy1);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy1.toString());
assertSame(userFixedPhaseSelectionStrategy0, userFixedPhaseSelectionStrategy1);
assertNotSame(randomWalkDecorator1, randomWalkDecorator0);
assertSame(userFixedPhaseSelectionStrategy1, userFixedPhaseSelectionStrategy0);
assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));

userFixedPhaseSelectionStrategy0.updateVarAtDecisionLevel(0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertSame(userFixedPhaseSelectionStrategy0, userFixedPhaseSelectionStrategy1);

LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
assertNotNull(levelBasedVarOrderHeap1);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));

LubyRestarts lubyRestarts0 = new LubyRestarts(99);
assertNotNull(lubyRestarts0);
assertEquals(99, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertTrue(boolean0);
assertEquals(99, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(99, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>((-362));
assertNotNull(percentLengthLearning0);
assertEquals((-362), percentLengthLearning0.getLimit());

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, randomWalkDecorator1, glucose21Restarts0);
assertNotNull(solver0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals((-362), percentLengthLearning0.getLimit());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));

ILogAble iLogAble0 = solver0.out;
assertNotNull(iLogAble0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax1);
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax1, searchParams0, levelBasedVarOrderHeap1, glucose21Restarts0, iLogAble0);
assertNotNull(solver1);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(4.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4.0, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals((-3426.908898233519), searchParams0.getClaDecay(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals((-362), percentLengthLearning0.getLimit());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));

VecInt vecInt0 = new VecInt(4, 1000);
assertNotNull(vecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals(1000, vecInt0.last());
assertEquals(4, vecInt0.size());

boolean boolean1 = solver1.isSatisfiable((IVecInt) vecInt0);
assertTrue(boolean1);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(4.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4.0, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals((-3426.908898233519), searchParams0.getClaDecay(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals((-362), percentLengthLearning0.getLimit());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1001, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1002, solver1.newVar());
assertEquals(1001, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(vecInt0.isEmpty());
assertEquals(1000, vecInt0.last());
assertEquals(4, vecInt0.size());
assertSame(userFixedPhaseSelectionStrategy0, userFixedPhaseSelectionStrategy1);
assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
assertNotSame(randomWalkDecorator1, randomWalkDecorator0);
assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
assertTrue(boolean1 == boolean0);


[MASTER] 00:49:42.606 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:49:42.611 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(3728);
assertNotNull(fixedLengthLearning0);
assertEquals(3728, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, double0, 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double1 = searchParams0.getClaDecay();
assertEquals(0.999, double1, 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotEquals(double1, double0, 0.01);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
assertNull(iLits0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

randomWalkDecorator0.setLits((ILits) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertNotNull(arminRestarts0);
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());

SearchParams searchParams1 = new SearchParams(0.0, (-672.3807590778948), 2.0, 2926);
assertNotNull(searchParams1);
assertEquals((-672.3807590778948), searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(2.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(2926, searchParams1.getInitConflictBound());
assertFalse(searchParams1.equals((Object)searchParams0));

SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());

arminRestarts0.init(searchParams1, solverStats0);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(arminRestarts0.shouldRestart());
assertEquals((-672.3807590778948), searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(2.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(2926, searchParams1.getInitConflictBound());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

arminRestarts0.onRestart();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(arminRestarts0.shouldRestart());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
assertNotNull(solver0);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(3728, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(arminRestarts0.shouldRestart());
assertFalse(searchParams0.equals((Object)searchParams1));

solver0.expireTimeout();
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(3728, fixedLengthLearning0.getMaxLength());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(arminRestarts0.shouldRestart());
assertNotSame(searchParams0, searchParams1);
assertFalse(searchParams0.equals((Object)searchParams1));

ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1872.76405389557));
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-1872.76405389557), activeLearning0.getActivityPercent(), 0.01);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams1, levelBasedVarOrderHeap0, arminRestarts0);
assertNotNull(solver1);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-1872.76405389557), activeLearning0.getActivityPercent(), 0.01);
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(arminRestarts0.shouldRestart());
assertEquals((-672.3807590778948), searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(2.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(2926, searchParams1.getInitConflictBound());
assertFalse(searchParams1.equals((Object)searchParams0));

int int0 = solver1.newVar();
assertEquals(3, int0);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-1872.76405389557), activeLearning0.getActivityPercent(), 0.01);
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(4, solver1.realNumberOfVariables());
assertEquals(5, solver1.newVar());
assertEquals(4, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(arminRestarts0.shouldRestart());
assertEquals((-672.3807590778948), searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(2.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(2926, searchParams1.getInitConflictBound());
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));


[MASTER] 00:49:43.506 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:43.508 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>((-664.457934703));
assertNotNull(activeLearning0);
assertEquals((-664.457934703), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

SearchParams searchParams0 = new SearchParams(4);
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

varOrderHeap0.assignLiteral(4);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

randomWalkDecorator0.setLits(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

mUSLauncher0.log("LBD2");
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, eMARestarts0, mUSLauncher0);
assertNotNull(solver0);
assertEquals((-664.457934703), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());

NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, eMARestarts0, mUSLauncher0);
assertNotNull(solver1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());

solver1.isSatisfiable();

[MASTER] 00:49:44.186 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:44.188 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(65535);
assertNotNull(percentLengthLearning0);
assertEquals(65535, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams(4);
assertNotNull(searchParams0);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, double0, 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
assertNull(iLits0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

randomWalkDecorator0.setLits((ILits) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts((-1186));
assertNotNull(lubyRestarts0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1186), lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = lubyRestarts0.shouldRestart();
assertTrue(boolean0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1186), lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onBackjumpToRootLevel();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1186), lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("LBD2");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0, mUSLauncher0);
assertNotNull(solver0);
assertEquals(65535, percentLengthLearning0.getLimit());
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());

SearchListener<Solver<CardinalityDataStructureYanMin>> searchListener0 = (SearchListener<Solver<CardinalityDataStructureYanMin>>) mock(SearchListener.class, new ViolatedAssumptionAnswer());
solver0.setSearchListener(searchListener0);
assertEquals(65535, percentLengthLearning0.getLimit());
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());


[MASTER] 00:49:45.202 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 00:49:45.214 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());

SearchParams searchParams0 = new SearchParams(0.0, 1);
assertNotNull(searchParams0);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double0, 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());

Integer integer0 = new Integer(1);
assertNotNull(integer0);
assertEquals(1, (int)integer0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

MockFile mockFile0 = new MockFile((String) null, ";rF#N5F(9BZ_");
assertNotNull(mockFile0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
assertNotNull(mockPrintWriter0);

naturalStaticOrder0.printStat(mockPrintWriter0, ";rF#N5F(9BZ_");
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(mockFile0.canExecute());
assertEquals(";rF#N5F(9BZ_", mockFile0.getName());
assertTrue(mockFile0.canWrite());
assertTrue(mockFile0.canRead());
assertTrue(mockFile0.isFile());
assertNull(mockFile0.getParent());
assertEquals(0L, mockFile0.getUsableSpace());
assertFalse(mockFile0.isHidden());
assertEquals(";rF#N5F(9BZ_", mockFile0.toString());
assertTrue(mockFile0.exists());
assertEquals(0L, mockFile0.getFreeSpace());
assertFalse(mockFile0.isDirectory());
assertEquals(1392409281320L, mockFile0.lastModified());
assertEquals(0L, mockFile0.getTotalSpace());
assertEquals(0L, mockFile0.length());
assertFalse(mockFile0.isAbsolute());

ArminRestarts arminRestarts0 = new ArminRestarts();
assertNotNull(arminRestarts0);
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());

SearchParams searchParams1 = new SearchParams(0.0, (-672.3807590778948), (double) integer0, 2926);
assertNotNull(searchParams1);
assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-672.3807590778948), searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(2926, searchParams1.getInitConflictBound());
assertFalse(searchParams1.equals((Object)searchParams0));

SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getConflicts());

solverStats0.incInspects();
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(1L, solverStats0.getInspects());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getConflicts());

arminRestarts0.init(searchParams1, solverStats0);
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(1.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-672.3807590778948), searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(2926, searchParams1.getInitConflictBound());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(1L, solverStats0.getInspects());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getConflicts());
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));

arminRestarts0.onRestart();
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(2926);
assertNotNull(percentLengthLearning0);
assertEquals(2926, percentLengthLearning0.getLimit());

String string0 = percentLengthLearning0.toString();
assertNotNull(string0);
assertEquals("Limit learning to clauses of size smaller or equal to 2926% of the number of variables", string0);
assertEquals(2926, percentLengthLearning0.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, naturalStaticOrder0, arminRestarts0);
assertNotNull(solver0);
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(2926, percentLengthLearning0.getLimit());

String string1 = solver0.getLogPrefix();
assertNotNull(string1);
assertEquals("c ", string1);
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(2926, percentLengthLearning0.getLimit());
assertFalse(string1.equals((Object)string0));

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(5);
assertNotNull(fixedLengthLearning0);
assertEquals(5, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, arminRestarts0);
assertNotNull(solver1);
assertEquals(5, fixedLengthLearning0.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2, solver1.newVar());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());

SearchListener<Solver<CardinalityDataStructureYanMax>> searchListener0 = (SearchListener<Solver<CardinalityDataStructureYanMax>>) mock(SearchListener.class, new ViolatedAssumptionAnswer());
solver1.setSearchListener(searchListener0);
assertEquals(5, fixedLengthLearning0.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());

solver1.setKeepSolverHot(false);
assertEquals(5, fixedLengthLearning0.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, solver1.nVars());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(6, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());

solver1.reset();
assertEquals(5, fixedLengthLearning0.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2, solver1.newVar());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertNotNull(fixedLengthLearning1);
assertEquals(3, fixedLengthLearning1.getMaxLength());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning1, mixedDataStructureDanielHT0, naturalStaticOrder0, arminRestarts0);
assertNotNull(solver2);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());

solver2.discardCurrentModel();

[MASTER] 00:49:46.342 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:46.376 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

SearchParams searchParams0 = new SearchParams(0.0, 1);
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(1, int0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

MockFile mockFile0 = new MockFile((String) null, ";rF#N5F(9BZ_");
assertNotNull(mockFile0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
assertNotNull(mockPrintWriter0);

naturalStaticOrder0.printStat(mockPrintWriter0, ";rF#N5F(9BZ_");
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(mockFile0.canExecute());
assertEquals(";rF#N5F(9BZ_", mockFile0.getName());
assertEquals(1392409281320L, mockFile0.lastModified());
assertEquals(0L, mockFile0.getTotalSpace());
assertTrue(mockFile0.isFile());
assertTrue(mockFile0.exists());
assertTrue(mockFile0.canRead());
assertFalse(mockFile0.isDirectory());
assertEquals(0L, mockFile0.length());
assertFalse(mockFile0.isAbsolute());
assertEquals(";rF#N5F(9BZ_", mockFile0.toString());
assertEquals(0L, mockFile0.getUsableSpace());
assertNull(mockFile0.getParent());
assertFalse(mockFile0.isHidden());
assertTrue(mockFile0.canWrite());
assertEquals(0L, mockFile0.getFreeSpace());

ArminRestarts arminRestarts0 = new ArminRestarts();
assertNotNull(arminRestarts0);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());

SearchParams searchParams1 = new SearchParams(0.0, (-672.3807590778948), 2.0, 2926);
assertNotNull(searchParams1);
assertEquals(2.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-672.3807590778948), searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(2926, searchParams1.getInitConflictBound());
assertFalse(searchParams1.equals((Object)searchParams0));

SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());

solverStats0.incInspects();
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(1L, solverStats0.getInspects());

arminRestarts0.init(searchParams1, solverStats0);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(2.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-672.3807590778948), searchParams1.getClaDecay(), 0.01);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(2926, searchParams1.getInitConflictBound());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(1L, solverStats0.getInspects());
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));

arminRestarts0.onRestart();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, arminRestarts0);
assertNotNull(solver0);
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertFalse(searchParams0.equals((Object)searchParams1));

boolean boolean0 = solver0.simplifyDB();
assertTrue(boolean0);
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertNotSame(searchParams0, searchParams1);
assertFalse(searchParams0.equals((Object)searchParams1));

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(2926);
assertNotNull(percentLengthLearning0);
assertEquals(2926, percentLengthLearning0.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, naturalStaticOrder0, arminRestarts0);
assertNotNull(solver1);
assertEquals(2926, percentLengthLearning0.getLimit());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());

String string0 = solver1.getLogPrefix();
assertNotNull(string0);
assertEquals("c ", string0);
assertEquals(2926, percentLengthLearning0.getLimit());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());


[MASTER] 00:49:46.910 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:46.959 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertNotNull(iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());

SearchParams searchParams0 = new SearchParams(0.0, 1);
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.0, double0, 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

int int0 = searchParams0.getInitConflictBound();
assertEquals(1, int0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

MockFile mockFile0 = new MockFile((String) null, ";rF#N5F(9BZ_");
assertNotNull(mockFile0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
assertNotNull(mockPrintWriter0);

naturalStaticOrder0.printStat(mockPrintWriter0, ";rF#N5F(9BZ_");
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(mockFile0.isDirectory());
assertEquals(0L, mockFile0.length());
assertTrue(mockFile0.exists());
assertEquals(0L, mockFile0.getTotalSpace());
assertTrue(mockFile0.isFile());
assertTrue(mockFile0.canRead());
assertEquals(1392409281320L, mockFile0.lastModified());
assertTrue(mockFile0.canExecute());
assertEquals(";rF#N5F(9BZ_", mockFile0.getName());
assertFalse(mockFile0.isAbsolute());
assertEquals(0L, mockFile0.getUsableSpace());
assertNull(mockFile0.getParent());
assertFalse(mockFile0.isHidden());
assertTrue(mockFile0.canWrite());
assertEquals(0L, mockFile0.getFreeSpace());
assertEquals(";rF#N5F(9BZ_", mockFile0.toString());

ArminRestarts arminRestarts0 = new ArminRestarts();
assertNotNull(arminRestarts0);
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());

SearchParams searchParams1 = new SearchParams(0.0, (-672.3807590778948), 2.0, 2926);
assertNotNull(searchParams1);
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(2.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-672.3807590778948), searchParams1.getClaDecay(), 0.01);
assertEquals(2926, searchParams1.getInitConflictBound());
assertFalse(searchParams1.equals((Object)searchParams0));

SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getDecisions());

arminRestarts0.init(searchParams1, solverStats0);
assertFalse(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(2.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-672.3807590778948), searchParams1.getClaDecay(), 0.01);
assertEquals(2926, searchParams1.getInitConflictBound());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getDecisions());
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));

arminRestarts0.onRestart();
assertFalse(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, arminRestarts0);
assertNotNull(solver0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(searchParams0.equals((Object)searchParams1));

boolean boolean0 = solver0.simplifyDB();
assertTrue(boolean0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertNotSame(searchParams0, searchParams1);
assertFalse(searchParams0.equals((Object)searchParams1));

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(2926);
assertNotNull(percentLengthLearning0);
assertEquals(2926, percentLengthLearning0.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, naturalStaticOrder0, arminRestarts0);
assertNotNull(solver1);
assertEquals(2926, percentLengthLearning0.getLimit());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());

String string0 = solver1.getLogPrefix();
assertNotNull(string0);
assertEquals("c ", string0);
assertEquals(2926, percentLengthLearning0.getLimit());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(2926L, arminRestarts0.nextRestartNumberOfConflict());


[MASTER] 00:49:48.090 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:48.099 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());

FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

MixedDataStructureSingleWL mixedDataStructureSingleWL1 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL1);
assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertNotNull(lubyRestarts0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL1, tabuListDecorator0, lubyRestarts0);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

boolean boolean0 = solver0.enqueue(5);
assertTrue(boolean0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertNotSame(mixedDataStructureSingleWL1, mixedDataStructureSingleWL0);
assertFalse(mixedDataStructureSingleWL1.equals((Object)mixedDataStructureSingleWL0));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
assertNotNull(activeLearning0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
assertNotNull(solver1);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SearchParams searchParams0 = solver1.getSearchParams();
assertNotNull(searchParams0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, lubyRestarts0);
assertNotNull(solver2);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(6, solver1.newVar());
assertEquals(5, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver2.learn((Constr) null);

[MASTER] 00:49:49.091 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 00:49:49.096 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
assertNull(iLits0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

randomWalkDecorator0.setLits((ILits) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("LBD2");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
assertNotNull(solver0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());

int int0 = solver0.getTimeout();
assertEquals(2147483, int0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());

MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

VarOrderHeap varOrderHeap1 = new VarOrderHeap();
assertNotNull(varOrderHeap1);
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));

RandomWalkDecorator randomWalkDecorator1 = new RandomWalkDecorator(varOrderHeap1);
assertNotNull(randomWalkDecorator1);
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));

LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
assertNotNull(levelBasedVarOrderHeap1);
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));

ILits iLits1 = levelBasedVarOrderHeap1.getVocabulary();
assertNull(iLits1);
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));

randomWalkDecorator1.setLits((ILits) null);
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator1.getProbability(), 0.01);
assertNotSame(varOrderHeap1, varOrderHeap0);
assertNotSame(randomWalkDecorator1, randomWalkDecorator0);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
assertFalse(randomWalkDecorator1.equals((Object)randomWalkDecorator0));

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap1, (RestartStrategy) null);
assertNotNull(solver1);
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));

UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
VecInt vecInt0 = new VecInt(3980, 2393);
assertNotNull(vecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals(2393, vecInt0.last());
assertEquals(3980, vecInt0.size());

IVecInt iVecInt0 = vecInt0.push(3005);
assertNotNull(iVecInt0);
assertEquals(3005, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(3981, vecInt0.size());
assertEquals(3005, iVecInt0.last());
assertEquals(3981, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);

ILits iLits2 = mock(ILits.class, new ViolatedAssumptionAnswer());
doReturn(false, false).when(iLits2).isFalsified(anyInt());
LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, iLits2);
assertNotNull(learntBinaryClause0);
assertEquals(3005, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(3981, vecInt0.size());
assertEquals(3005, iVecInt0.last());
assertEquals(3981, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
assertFalse(learntBinaryClause0.locked());
assertFalse(learntBinaryClause0.simplify());
assertEquals(2, learntBinaryClause0.size());
assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
assertFalse(learntBinaryClause0.isSatisfied());
assertTrue(learntBinaryClause0.learnt());
assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());

learntBinaryClause0.calcReason(2393, vecInt0);
assertEquals(3005, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(3981, vecInt0.size());
assertEquals(3005, iVecInt0.last());
assertEquals(3981, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
assertFalse(learntBinaryClause0.locked());
assertFalse(learntBinaryClause0.simplify());
assertEquals(2, learntBinaryClause0.size());
assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
assertFalse(learntBinaryClause0.isSatisfied());
assertTrue(learntBinaryClause0.learnt());
assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);

solver1.analyzeAtRootLevel(learntBinaryClause0);
assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3005, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(3981, vecInt0.size());
assertEquals(3005, iVecInt0.last());
assertEquals(3981, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
assertFalse(learntBinaryClause0.locked());
assertFalse(learntBinaryClause0.simplify());
assertEquals(2, learntBinaryClause0.size());
assertEquals(0.0, learntBinaryClause0.getActivity(), 0.01);
assertFalse(learntBinaryClause0.isSatisfied());
assertTrue(learntBinaryClause0.learnt());
assertTrue(learntBinaryClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntBinaryClause0.requiredNumberOfSatisfiedLiterals());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, (CardinalityDataStructureYanMax) null, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
