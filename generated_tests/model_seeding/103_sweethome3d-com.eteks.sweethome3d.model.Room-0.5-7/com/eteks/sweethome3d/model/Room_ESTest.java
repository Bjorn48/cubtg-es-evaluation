/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 15:49:33 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.Room;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Room_ESTest extends Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      room0.move(0.0F, (-227.0608F));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[][] floatArray0 = new float[9][5];
      Room room0 = new Room(floatArray0);
      room0.containsPoint((-764), 656.15F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      room0.isAreaCenterPointAt((-40.0F), 1.0F, 280.3F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      room0.setAreaYOffset((-2879.9587F));
      room0.isAreaCenterPointAt(0.0F, 280.3F, 73.5482F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      room0.addPoint((-1.0F), 1023.6F, 2);
      room0.isAreaCenterPointAt(0.0F, 280.3F, 82.647064F);
      assertEquals((-0.5F), room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[][] floatArray0 = new float[3][7];
      Room room0 = new Room(floatArray0);
      room0.setNameXOffset((-173.0F));
      boolean boolean0 = room0.isNameCenterPointAt(2951.812F, 2, 2.3443315F);
      assertEquals((-173.0F), room0.getNameXOffset(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1803.0F;
      float[][] floatArray1 = new float[5][0];
      floatArray1[0] = floatArray0;
      Room room0 = new Room(floatArray1);
      int int0 = room0.getPointIndexAt(1.0F, 0.0F, 1803.0F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0, int0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      float[][] floatArray0 = new float[9][5];
      float[] floatArray1 = new float[4];
      floatArray1[1] = 3267.119F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      floatArray2[0] = 3773.0F;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isClockwise();
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[][] floatArray0 = new float[9][5];
      float[] floatArray1 = new float[4];
      floatArray1[1] = 3267.119F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isNameCenterPointAt(0.0F, 3773.0F, 3267.119F);
      assertTrue(boolean0);
      assertTrue(room0.isAreaVisible());
      assertEquals(1633.5594F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[][] floatArray0 = new float[9][5];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-40.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      boolean boolean0 = room0.isNameCenterPointAt(3773.0F, 3773.0F, (-40.0F));
      assertEquals((-20.0F), room0.getXCenter(), 0.01F);
      assertFalse(boolean0);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      Room room0 = new Room(floatArray0);
      room0.setAreaAngle(3267.119F);
      room0.setAreaAngle(1.0F);
      assertEquals(1.0F, room0.getAreaAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        room0.removePoint(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }
}
