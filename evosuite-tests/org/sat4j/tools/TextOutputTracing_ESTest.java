/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:22:23 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.Solver;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolverService;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Lbool;
import org.sat4j.specs.RandomAccessModel;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.TextOutputTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TextOutputTracing_ESTest extends TextOutputTracing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      HashMap<Integer, MixedDataStructureDanielWL> hashMap0 = new HashMap<Integer, MixedDataStructureDanielWL>();
      hashMap0.put((Integer) 0, mixedDataStructureDanielWL0);
      TextOutputTracing<MixedDataStructureDanielWL> textOutputTracing0 = new TextOutputTracing<MixedDataStructureDanielWL>(hashMap0);
      textOutputTracing0.adding(0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.propagating((-1574));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>(hashMap0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iVecInt0).get(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        textOutputTracing0.learn(learntBinaryClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      HashMap<Integer, MixedDataStructureDanielWL> hashMap0 = new HashMap<Integer, MixedDataStructureDanielWL>();
      hashMap0.put((Integer) 29, mixedDataStructureDanielWL0);
      TextOutputTracing<MixedDataStructureDanielWL> textOutputTracing0 = new TextOutputTracing<MixedDataStructureDanielWL>(hashMap0);
      textOutputTracing0.adding(29);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = Integer.valueOf(Integer.MIN_VALUE);
      hashMap0.put(integer0, "");
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.propagating(Integer.MIN_VALUE);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>((Map<Integer, String>) null);
      textOutputTracing0.propagating(0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GroupClauseSelectorSolver<Solver<MixedDataStructureDanielWL>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Solver<MixedDataStructureDanielWL>>((Solver<MixedDataStructureDanielWL>) null);
      Map<Integer, Integer> map0 = groupClauseSelectorSolver0.getVarToHighLevel();
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>(map0);
      textOutputTracing0.learnUnit(46);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iVecInt0).get(anyInt());
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(iVecInt0, (ILits) null);
      textOutputTracing0.delete(learntBinaryClause0);
      assertFalse(learntBinaryClause0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.restarting();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, MixedDataStructureDanielWL> hashMap0 = new HashMap<Integer, MixedDataStructureDanielWL>();
      TextOutputTracing<MixedDataStructureDanielWL> textOutputTracing0 = new TextOutputTracing<MixedDataStructureDanielWL>(hashMap0);
      Lbool lbool0 = Lbool.FALSE;
      textOutputTracing0.end(lbool0);
      assertEquals("F", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Integer, MixedDataStructureDanielWL> hashMap0 = new HashMap<Integer, MixedDataStructureDanielWL>();
      TextOutputTracing<MixedDataStructureDanielWL> textOutputTracing0 = new TextOutputTracing<MixedDataStructureDanielWL>(hashMap0);
      textOutputTracing0.backtracking(1987);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>((Map<Integer, String>) null);
      int[] intArray0 = new int[2];
      textOutputTracing0.solutionFound(intArray0, (RandomAccessModel) null);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, MixedDataStructureDanielWL> hashMap0 = new HashMap<Integer, MixedDataStructureDanielWL>();
      TextOutputTracing<MixedDataStructureDanielWL> textOutputTracing0 = new TextOutputTracing<MixedDataStructureDanielWL>(hashMap0);
      textOutputTracing0.enqueueing(968, (IConstr) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.init((ISolverService) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.conflictFound(0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing0.start();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, MixedDataStructureDanielWL> hashMap0 = new HashMap<Integer, MixedDataStructureDanielWL>();
      TextOutputTracing<MixedDataStructureDanielWL> textOutputTracing0 = new TextOutputTracing<MixedDataStructureDanielWL>(hashMap0);
      textOutputTracing0.beginLoop();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>((Map<Integer, Object>) null);
      textOutputTracing0.conflictFound((IConstr) null, 640, 640);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.learn((IConstr) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      TextOutputTracing<Integer> textOutputTracing0 = new TextOutputTracing<Integer>(hashMap0);
      textOutputTracing0.cleaning();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      TextOutputTracing<String> textOutputTracing0 = new TextOutputTracing<String>(hashMap0);
      textOutputTracing0.assuming(533);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      TextOutputTracing<Object> textOutputTracing0 = new TextOutputTracing<Object>(hashMap0);
      textOutputTracing0.backjump(2036);
  }
}
