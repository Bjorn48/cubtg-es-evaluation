/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 15:59:44 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.core.Solver;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.Binary;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Binary_ESTest extends Binary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(solver0);
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(solver0);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertNotNull(singleSolutionDetector0);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      try { 
        binary0.addExactlyOne(singleSolutionDetector0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2337, (-258));
      assertEquals((-258), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2337, vecInt0.size());
      assertNotNull(vecInt0);
      
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertNotNull(dimacsOutputSolver0);
      
      // Undeclared exception!
      binary0.addExactlyOne(dimacsOutputSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertNotNull(dimacsOutputSolver0);
      
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsOutputSolver0, vecInt0);
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(minimal4CardinalityModel0);
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(minimal4CardinalityModel0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt(112, 3);
      assertEquals(3, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(112, vecInt0.size());
      assertNotNull(vecInt0);
      
      SubModelIterator[] subModelIteratorArray0 = new SubModelIterator[8];
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(subModelIterator0).nVars();
      doReturn(0).when(subModelIterator0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<SubModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SubModelIterator>(subModelIterator0, false);
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver0.isSatisfiable());
      assertNotNull(fullClauseSelectorSolver0);
      
      SubModelIterator subModelIterator1 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0);
      assertEquals(3, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(112, vecInt0.size());
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver0.isSatisfiable());
      assertEquals(0L, subModelIterator1.numberOfModelsFoundSoFar());
      assertFalse(subModelIterator1.equals((Object)subModelIterator0));
      assertNotNull(subModelIterator1);
      
      subModelIteratorArray0[0] = subModelIterator1;
      subModelIteratorArray0[1] = subModelIteratorArray0[0];
      subModelIteratorArray0[2] = subModelIteratorArray0[0];
      subModelIteratorArray0[3] = subModelIteratorArray0[2];
      subModelIteratorArray0[4] = subModelIteratorArray0[1];
      subModelIteratorArray0[5] = subModelIteratorArray0[0];
      subModelIteratorArray0[6] = subModelIterator1;
      subModelIteratorArray0[7] = subModelIteratorArray0[1];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(subModelIteratorArray0);
      assertNotNull(manyCore0);
      assertEquals(8, subModelIteratorArray0.length);
      
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(manyCore0);
      assertNotNull(singleSolutionDetector0);
      assertEquals(8, subModelIteratorArray0.length);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(singleSolutionDetector0);
      assertNotNull(minimal4CardinalityModel0);
      assertEquals(8, subModelIteratorArray0.length);
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(minimal4CardinalityModel0, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 8);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt0.last());
      assertNotNull(vecInt0);
      
      vecInt0.shrink((-5458));
      assertFalse(vecInt0.isEmpty());
      assertEquals(5460, vecInt0.size());
      
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertNotNull(dimacsOutputSolver0);
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(dimacsOutputSolver0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VecInt vecInt0 = new VecInt(11, 39);
      assertEquals(11, vecInt0.size());
      assertEquals(39, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertNotNull(dimacsOutputSolver0);
      
      // Undeclared exception!
      binary0.addExactly(dimacsOutputSolver0, vecInt0, (-2754));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      // Undeclared exception!
      try { 
        binary0.addExactly(solver0, (IVecInt) null, 19);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertNotNull(dimacsOutputSolver0);
      
      VecInt vecInt0 = new VecInt(8, 8);
      assertEquals(8, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        binary0.addExactly(dimacsOutputSolver0, vecInt0, 442);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertNotNull(dimacsOutputSolver0);
      
      VecInt vecInt0 = new VecInt(1106, 8);
      assertFalse(vecInt0.isEmpty());
      assertEquals(8, vecInt0.last());
      assertEquals(1106, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      binary0.addAtMostOne(dimacsOutputSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertNotNull(dimacsOutputSolver0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne(dimacsOutputSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      FullClauseSelectorSolver<SubModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SubModelIterator>((SubModelIterator) null, true);
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertNotNull(fullClauseSelectorSolver0);
      
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne((ISolver) null, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt(21, 21);
      assertFalse(vecInt0.isEmpty());
      assertEquals(21, vecInt0.size());
      assertEquals(21, vecInt0.last());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMost((ISolver) null, vecInt0, 623);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VecInt vecInt0 = new VecInt(39);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertNotNull(dimacsOutputSolver0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMost(dimacsOutputSolver0, vecInt0, 11);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Binary binary0 = new Binary();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(135);
      VecInt vecInt0 = new VecInt(135, 76);
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsStringSolver0, vecInt0, 76);
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      // Undeclared exception!
      try { 
        binary0.addAtMost(negationDecorator0, vecInt0, 18);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Binary binary0 = new Binary();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      VecInt vecInt0 = new VecInt(8, 8);
      binary0.addAtMost(dimacsOutputSolver0, vecInt0, 8);
      assertEquals(88, dimacsOutputSolver0.nVars());
      assertEquals(88, dimacsOutputSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Binary binary0 = new Binary();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      VecInt vecInt0 = new VecInt(112, 8);
      // Undeclared exception!
      binary0.addAtMost(dimacsOutputSolver0, vecInt0, 8);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Binary binary0 = new Binary();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      VecInt vecInt0 = new VecInt(112, 8);
      IConstr iConstr0 = binary0.addAtMostOne(dimacsOutputSolver0, vecInt0);
      assertEquals(7, dimacsOutputSolver0.nVars());
      assertEquals(768, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Binary binary0 = new Binary();
      VecInt vecInt0 = new VecInt(8, 8);
      vecInt0.sortUnique();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IConstr iConstr0 = binary0.addAtMostOne(dimacsStringSolver0, vecInt0);
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Binary binary0 = new Binary();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      VecInt vecInt0 = new VecInt(8, 8);
      binary0.addExactlyOne(dimacsOutputSolver0, vecInt0);
      assertEquals(3, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(3, dimacsOutputSolver0.nVars());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Binary binary0 = new Binary();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(8);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      VecInt vecInt0 = new VecInt(8, 8);
      binary0.addExactly(dimacsOutputSolver0, vecInt0, 8);
      assertEquals(88, dimacsOutputSolver0.nVars());
      assertEquals(88, dimacsOutputSolver0.realNumberOfVariables());
  }
}
